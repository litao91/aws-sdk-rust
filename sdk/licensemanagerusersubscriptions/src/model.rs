// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The summary of the user-based subscription products for a user.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ProductUserSummary {
    /// <p>The user name from the identity provider of the user.</p>
    #[doc(hidden)]
    pub username: std::option::Option<std::string::String>,
    /// <p>The name of the user-based subscription product.</p>
    #[doc(hidden)]
    pub product: std::option::Option<std::string::String>,
    /// <p>An object that specifies details for the identity provider.</p>
    #[doc(hidden)]
    pub identity_provider: std::option::Option<crate::model::IdentityProvider>,
    /// <p>The status of a product for a user.</p>
    #[doc(hidden)]
    pub status: std::option::Option<std::string::String>,
    /// <p>The status message for a product for a user.</p>
    #[doc(hidden)]
    pub status_message: std::option::Option<std::string::String>,
    /// <p>The domain name of the user.</p>
    #[doc(hidden)]
    pub domain: std::option::Option<std::string::String>,
    /// <p>The start date of a subscription.</p>
    #[doc(hidden)]
    pub subscription_start_date: std::option::Option<std::string::String>,
    /// <p>The end date of a subscription.</p>
    #[doc(hidden)]
    pub subscription_end_date: std::option::Option<std::string::String>,
}
impl ProductUserSummary {
    /// <p>The user name from the identity provider of the user.</p>
    pub fn username(&self) -> std::option::Option<&str> {
        self.username.as_deref()
    }
    /// <p>The name of the user-based subscription product.</p>
    pub fn product(&self) -> std::option::Option<&str> {
        self.product.as_deref()
    }
    /// <p>An object that specifies details for the identity provider.</p>
    pub fn identity_provider(&self) -> std::option::Option<&crate::model::IdentityProvider> {
        self.identity_provider.as_ref()
    }
    /// <p>The status of a product for a user.</p>
    pub fn status(&self) -> std::option::Option<&str> {
        self.status.as_deref()
    }
    /// <p>The status message for a product for a user.</p>
    pub fn status_message(&self) -> std::option::Option<&str> {
        self.status_message.as_deref()
    }
    /// <p>The domain name of the user.</p>
    pub fn domain(&self) -> std::option::Option<&str> {
        self.domain.as_deref()
    }
    /// <p>The start date of a subscription.</p>
    pub fn subscription_start_date(&self) -> std::option::Option<&str> {
        self.subscription_start_date.as_deref()
    }
    /// <p>The end date of a subscription.</p>
    pub fn subscription_end_date(&self) -> std::option::Option<&str> {
        self.subscription_end_date.as_deref()
    }
}
impl std::fmt::Debug for ProductUserSummary {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ProductUserSummary");
        formatter.field("username", &self.username);
        formatter.field("product", &self.product);
        formatter.field("identity_provider", &self.identity_provider);
        formatter.field("status", &self.status);
        formatter.field("status_message", &self.status_message);
        formatter.field("domain", &self.domain);
        formatter.field("subscription_start_date", &self.subscription_start_date);
        formatter.field("subscription_end_date", &self.subscription_end_date);
        formatter.finish()
    }
}
/// See [`ProductUserSummary`](crate::model::ProductUserSummary).
pub mod product_user_summary {

    /// A builder for [`ProductUserSummary`](crate::model::ProductUserSummary).
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) username: std::option::Option<std::string::String>,
        pub(crate) product: std::option::Option<std::string::String>,
        pub(crate) identity_provider: std::option::Option<crate::model::IdentityProvider>,
        pub(crate) status: std::option::Option<std::string::String>,
        pub(crate) status_message: std::option::Option<std::string::String>,
        pub(crate) domain: std::option::Option<std::string::String>,
        pub(crate) subscription_start_date: std::option::Option<std::string::String>,
        pub(crate) subscription_end_date: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The user name from the identity provider of the user.</p>
        pub fn username(mut self, input: impl Into<std::string::String>) -> Self {
            self.username = Some(input.into());
            self
        }
        /// <p>The user name from the identity provider of the user.</p>
        pub fn set_username(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.username = input;
            self
        }
        /// <p>The name of the user-based subscription product.</p>
        pub fn product(mut self, input: impl Into<std::string::String>) -> Self {
            self.product = Some(input.into());
            self
        }
        /// <p>The name of the user-based subscription product.</p>
        pub fn set_product(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.product = input;
            self
        }
        /// <p>An object that specifies details for the identity provider.</p>
        pub fn identity_provider(mut self, input: crate::model::IdentityProvider) -> Self {
            self.identity_provider = Some(input);
            self
        }
        /// <p>An object that specifies details for the identity provider.</p>
        pub fn set_identity_provider(
            mut self,
            input: std::option::Option<crate::model::IdentityProvider>,
        ) -> Self {
            self.identity_provider = input;
            self
        }
        /// <p>The status of a product for a user.</p>
        pub fn status(mut self, input: impl Into<std::string::String>) -> Self {
            self.status = Some(input.into());
            self
        }
        /// <p>The status of a product for a user.</p>
        pub fn set_status(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.status = input;
            self
        }
        /// <p>The status message for a product for a user.</p>
        pub fn status_message(mut self, input: impl Into<std::string::String>) -> Self {
            self.status_message = Some(input.into());
            self
        }
        /// <p>The status message for a product for a user.</p>
        pub fn set_status_message(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.status_message = input;
            self
        }
        /// <p>The domain name of the user.</p>
        pub fn domain(mut self, input: impl Into<std::string::String>) -> Self {
            self.domain = Some(input.into());
            self
        }
        /// <p>The domain name of the user.</p>
        pub fn set_domain(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.domain = input;
            self
        }
        /// <p>The start date of a subscription.</p>
        pub fn subscription_start_date(mut self, input: impl Into<std::string::String>) -> Self {
            self.subscription_start_date = Some(input.into());
            self
        }
        /// <p>The start date of a subscription.</p>
        pub fn set_subscription_start_date(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.subscription_start_date = input;
            self
        }
        /// <p>The end date of a subscription.</p>
        pub fn subscription_end_date(mut self, input: impl Into<std::string::String>) -> Self {
            self.subscription_end_date = Some(input.into());
            self
        }
        /// <p>The end date of a subscription.</p>
        pub fn set_subscription_end_date(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.subscription_end_date = input;
            self
        }
        /// Consumes the builder and constructs a [`ProductUserSummary`](crate::model::ProductUserSummary).
        pub fn build(self) -> crate::model::ProductUserSummary {
            crate::model::ProductUserSummary {
                username: self.username,
                product: self.product,
                identity_provider: self.identity_provider,
                status: self.status,
                status_message: self.status_message,
                domain: self.domain,
                subscription_start_date: self.subscription_start_date,
                subscription_end_date: self.subscription_end_date,
            }
        }
    }
}
impl ProductUserSummary {
    /// Creates a new builder-style object to manufacture [`ProductUserSummary`](crate::model::ProductUserSummary).
    pub fn builder() -> crate::model::product_user_summary::Builder {
        crate::model::product_user_summary::Builder::default()
    }
}

/// <p>Details about an identity provider.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub enum IdentityProvider {
    /// <p>An object that details an Active Directory identity provider.</p>
    ActiveDirectoryIdentityProvider(crate::model::ActiveDirectoryIdentityProvider),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl IdentityProvider {
    #[allow(irrefutable_let_patterns)]
    /// Tries to convert the enum instance into [`ActiveDirectoryIdentityProvider`](crate::model::IdentityProvider::ActiveDirectoryIdentityProvider), extracting the inner [`ActiveDirectoryIdentityProvider`](crate::model::ActiveDirectoryIdentityProvider).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_active_directory_identity_provider(
        &self,
    ) -> std::result::Result<&crate::model::ActiveDirectoryIdentityProvider, &Self> {
        if let IdentityProvider::ActiveDirectoryIdentityProvider(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`ActiveDirectoryIdentityProvider`](crate::model::IdentityProvider::ActiveDirectoryIdentityProvider).
    pub fn is_active_directory_identity_provider(&self) -> bool {
        self.as_active_directory_identity_provider().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}

/// <p>Details about an Active Directory identity provider.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ActiveDirectoryIdentityProvider {
    /// <p>The directory ID for an Active Directory identity provider.</p>
    #[doc(hidden)]
    pub directory_id: std::option::Option<std::string::String>,
}
impl ActiveDirectoryIdentityProvider {
    /// <p>The directory ID for an Active Directory identity provider.</p>
    pub fn directory_id(&self) -> std::option::Option<&str> {
        self.directory_id.as_deref()
    }
}
impl std::fmt::Debug for ActiveDirectoryIdentityProvider {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ActiveDirectoryIdentityProvider");
        formatter.field("directory_id", &self.directory_id);
        formatter.finish()
    }
}
/// See [`ActiveDirectoryIdentityProvider`](crate::model::ActiveDirectoryIdentityProvider).
pub mod active_directory_identity_provider {

    /// A builder for [`ActiveDirectoryIdentityProvider`](crate::model::ActiveDirectoryIdentityProvider).
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) directory_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The directory ID for an Active Directory identity provider.</p>
        pub fn directory_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.directory_id = Some(input.into());
            self
        }
        /// <p>The directory ID for an Active Directory identity provider.</p>
        pub fn set_directory_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.directory_id = input;
            self
        }
        /// Consumes the builder and constructs a [`ActiveDirectoryIdentityProvider`](crate::model::ActiveDirectoryIdentityProvider).
        pub fn build(self) -> crate::model::ActiveDirectoryIdentityProvider {
            crate::model::ActiveDirectoryIdentityProvider {
                directory_id: self.directory_id,
            }
        }
    }
}
impl ActiveDirectoryIdentityProvider {
    /// Creates a new builder-style object to manufacture [`ActiveDirectoryIdentityProvider`](crate::model::ActiveDirectoryIdentityProvider).
    pub fn builder() -> crate::model::active_directory_identity_provider::Builder {
        crate::model::active_directory_identity_provider::Builder::default()
    }
}

/// <p>Describes an identity provider.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct IdentityProviderSummary {
    /// <p>An object that specifies details for the identity provider.</p>
    #[doc(hidden)]
    pub identity_provider: std::option::Option<crate::model::IdentityProvider>,
    /// <p>The name of the user-based subscription product.</p>
    #[doc(hidden)]
    pub product: std::option::Option<std::string::String>,
    /// <p>The status of an identity provider.</p>
    #[doc(hidden)]
    pub status: std::option::Option<std::string::String>,
    /// <p>The failure message associated with an identity provider.</p>
    #[doc(hidden)]
    pub failure_message: std::option::Option<std::string::String>,
}
impl IdentityProviderSummary {
    /// <p>An object that specifies details for the identity provider.</p>
    pub fn identity_provider(&self) -> std::option::Option<&crate::model::IdentityProvider> {
        self.identity_provider.as_ref()
    }
    /// <p>The name of the user-based subscription product.</p>
    pub fn product(&self) -> std::option::Option<&str> {
        self.product.as_deref()
    }
    /// <p>The status of an identity provider.</p>
    pub fn status(&self) -> std::option::Option<&str> {
        self.status.as_deref()
    }
    /// <p>The failure message associated with an identity provider.</p>
    pub fn failure_message(&self) -> std::option::Option<&str> {
        self.failure_message.as_deref()
    }
}
impl std::fmt::Debug for IdentityProviderSummary {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("IdentityProviderSummary");
        formatter.field("identity_provider", &self.identity_provider);
        formatter.field("product", &self.product);
        formatter.field("status", &self.status);
        formatter.field("failure_message", &self.failure_message);
        formatter.finish()
    }
}
/// See [`IdentityProviderSummary`](crate::model::IdentityProviderSummary).
pub mod identity_provider_summary {

    /// A builder for [`IdentityProviderSummary`](crate::model::IdentityProviderSummary).
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) identity_provider: std::option::Option<crate::model::IdentityProvider>,
        pub(crate) product: std::option::Option<std::string::String>,
        pub(crate) status: std::option::Option<std::string::String>,
        pub(crate) failure_message: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>An object that specifies details for the identity provider.</p>
        pub fn identity_provider(mut self, input: crate::model::IdentityProvider) -> Self {
            self.identity_provider = Some(input);
            self
        }
        /// <p>An object that specifies details for the identity provider.</p>
        pub fn set_identity_provider(
            mut self,
            input: std::option::Option<crate::model::IdentityProvider>,
        ) -> Self {
            self.identity_provider = input;
            self
        }
        /// <p>The name of the user-based subscription product.</p>
        pub fn product(mut self, input: impl Into<std::string::String>) -> Self {
            self.product = Some(input.into());
            self
        }
        /// <p>The name of the user-based subscription product.</p>
        pub fn set_product(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.product = input;
            self
        }
        /// <p>The status of an identity provider.</p>
        pub fn status(mut self, input: impl Into<std::string::String>) -> Self {
            self.status = Some(input.into());
            self
        }
        /// <p>The status of an identity provider.</p>
        pub fn set_status(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.status = input;
            self
        }
        /// <p>The failure message associated with an identity provider.</p>
        pub fn failure_message(mut self, input: impl Into<std::string::String>) -> Self {
            self.failure_message = Some(input.into());
            self
        }
        /// <p>The failure message associated with an identity provider.</p>
        pub fn set_failure_message(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.failure_message = input;
            self
        }
        /// Consumes the builder and constructs a [`IdentityProviderSummary`](crate::model::IdentityProviderSummary).
        pub fn build(self) -> crate::model::IdentityProviderSummary {
            crate::model::IdentityProviderSummary {
                identity_provider: self.identity_provider,
                product: self.product,
                status: self.status,
                failure_message: self.failure_message,
            }
        }
    }
}
impl IdentityProviderSummary {
    /// Creates a new builder-style object to manufacture [`IdentityProviderSummary`](crate::model::IdentityProviderSummary).
    pub fn builder() -> crate::model::identity_provider_summary::Builder {
        crate::model::identity_provider_summary::Builder::default()
    }
}

/// <p>Describes users of an EC2 instance providing user-based subscriptions.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct InstanceUserSummary {
    /// <p>The user name from the identity provider for the user.</p>
    #[doc(hidden)]
    pub username: std::option::Option<std::string::String>,
    /// <p>The ID of the EC2 instance, which provides user-based subscriptions.</p>
    #[doc(hidden)]
    pub instance_id: std::option::Option<std::string::String>,
    /// <p>An object that specifies details for the identity provider.</p>
    #[doc(hidden)]
    pub identity_provider: std::option::Option<crate::model::IdentityProvider>,
    /// <p>The status of a user associated with an EC2 instance.</p>
    #[doc(hidden)]
    pub status: std::option::Option<std::string::String>,
    /// <p>The status message for users of an EC2 instance.</p>
    #[doc(hidden)]
    pub status_message: std::option::Option<std::string::String>,
    /// <p>The domain name of the user.</p>
    #[doc(hidden)]
    pub domain: std::option::Option<std::string::String>,
    /// <p>The date a user was associated with an EC2 instance.</p>
    #[doc(hidden)]
    pub association_date: std::option::Option<std::string::String>,
    /// <p>The date a user was disassociated from an EC2 instance.</p>
    #[doc(hidden)]
    pub disassociation_date: std::option::Option<std::string::String>,
}
impl InstanceUserSummary {
    /// <p>The user name from the identity provider for the user.</p>
    pub fn username(&self) -> std::option::Option<&str> {
        self.username.as_deref()
    }
    /// <p>The ID of the EC2 instance, which provides user-based subscriptions.</p>
    pub fn instance_id(&self) -> std::option::Option<&str> {
        self.instance_id.as_deref()
    }
    /// <p>An object that specifies details for the identity provider.</p>
    pub fn identity_provider(&self) -> std::option::Option<&crate::model::IdentityProvider> {
        self.identity_provider.as_ref()
    }
    /// <p>The status of a user associated with an EC2 instance.</p>
    pub fn status(&self) -> std::option::Option<&str> {
        self.status.as_deref()
    }
    /// <p>The status message for users of an EC2 instance.</p>
    pub fn status_message(&self) -> std::option::Option<&str> {
        self.status_message.as_deref()
    }
    /// <p>The domain name of the user.</p>
    pub fn domain(&self) -> std::option::Option<&str> {
        self.domain.as_deref()
    }
    /// <p>The date a user was associated with an EC2 instance.</p>
    pub fn association_date(&self) -> std::option::Option<&str> {
        self.association_date.as_deref()
    }
    /// <p>The date a user was disassociated from an EC2 instance.</p>
    pub fn disassociation_date(&self) -> std::option::Option<&str> {
        self.disassociation_date.as_deref()
    }
}
impl std::fmt::Debug for InstanceUserSummary {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("InstanceUserSummary");
        formatter.field("username", &self.username);
        formatter.field("instance_id", &self.instance_id);
        formatter.field("identity_provider", &self.identity_provider);
        formatter.field("status", &self.status);
        formatter.field("status_message", &self.status_message);
        formatter.field("domain", &self.domain);
        formatter.field("association_date", &self.association_date);
        formatter.field("disassociation_date", &self.disassociation_date);
        formatter.finish()
    }
}
/// See [`InstanceUserSummary`](crate::model::InstanceUserSummary).
pub mod instance_user_summary {

    /// A builder for [`InstanceUserSummary`](crate::model::InstanceUserSummary).
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) username: std::option::Option<std::string::String>,
        pub(crate) instance_id: std::option::Option<std::string::String>,
        pub(crate) identity_provider: std::option::Option<crate::model::IdentityProvider>,
        pub(crate) status: std::option::Option<std::string::String>,
        pub(crate) status_message: std::option::Option<std::string::String>,
        pub(crate) domain: std::option::Option<std::string::String>,
        pub(crate) association_date: std::option::Option<std::string::String>,
        pub(crate) disassociation_date: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The user name from the identity provider for the user.</p>
        pub fn username(mut self, input: impl Into<std::string::String>) -> Self {
            self.username = Some(input.into());
            self
        }
        /// <p>The user name from the identity provider for the user.</p>
        pub fn set_username(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.username = input;
            self
        }
        /// <p>The ID of the EC2 instance, which provides user-based subscriptions.</p>
        pub fn instance_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.instance_id = Some(input.into());
            self
        }
        /// <p>The ID of the EC2 instance, which provides user-based subscriptions.</p>
        pub fn set_instance_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.instance_id = input;
            self
        }
        /// <p>An object that specifies details for the identity provider.</p>
        pub fn identity_provider(mut self, input: crate::model::IdentityProvider) -> Self {
            self.identity_provider = Some(input);
            self
        }
        /// <p>An object that specifies details for the identity provider.</p>
        pub fn set_identity_provider(
            mut self,
            input: std::option::Option<crate::model::IdentityProvider>,
        ) -> Self {
            self.identity_provider = input;
            self
        }
        /// <p>The status of a user associated with an EC2 instance.</p>
        pub fn status(mut self, input: impl Into<std::string::String>) -> Self {
            self.status = Some(input.into());
            self
        }
        /// <p>The status of a user associated with an EC2 instance.</p>
        pub fn set_status(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.status = input;
            self
        }
        /// <p>The status message for users of an EC2 instance.</p>
        pub fn status_message(mut self, input: impl Into<std::string::String>) -> Self {
            self.status_message = Some(input.into());
            self
        }
        /// <p>The status message for users of an EC2 instance.</p>
        pub fn set_status_message(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.status_message = input;
            self
        }
        /// <p>The domain name of the user.</p>
        pub fn domain(mut self, input: impl Into<std::string::String>) -> Self {
            self.domain = Some(input.into());
            self
        }
        /// <p>The domain name of the user.</p>
        pub fn set_domain(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.domain = input;
            self
        }
        /// <p>The date a user was associated with an EC2 instance.</p>
        pub fn association_date(mut self, input: impl Into<std::string::String>) -> Self {
            self.association_date = Some(input.into());
            self
        }
        /// <p>The date a user was associated with an EC2 instance.</p>
        pub fn set_association_date(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.association_date = input;
            self
        }
        /// <p>The date a user was disassociated from an EC2 instance.</p>
        pub fn disassociation_date(mut self, input: impl Into<std::string::String>) -> Self {
            self.disassociation_date = Some(input.into());
            self
        }
        /// <p>The date a user was disassociated from an EC2 instance.</p>
        pub fn set_disassociation_date(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.disassociation_date = input;
            self
        }
        /// Consumes the builder and constructs a [`InstanceUserSummary`](crate::model::InstanceUserSummary).
        pub fn build(self) -> crate::model::InstanceUserSummary {
            crate::model::InstanceUserSummary {
                username: self.username,
                instance_id: self.instance_id,
                identity_provider: self.identity_provider,
                status: self.status,
                status_message: self.status_message,
                domain: self.domain,
                association_date: self.association_date,
                disassociation_date: self.disassociation_date,
            }
        }
    }
}
impl InstanceUserSummary {
    /// Creates a new builder-style object to manufacture [`InstanceUserSummary`](crate::model::InstanceUserSummary).
    pub fn builder() -> crate::model::instance_user_summary::Builder {
        crate::model::instance_user_summary::Builder::default()
    }
}

/// <p>A filter name and value pair that is used to return more specific results from a describe operation. Filters can be used to match a set of resources by specific criteria, such as tags, attributes, or IDs.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct Filter {
    /// <p>The name of an attribute to use as a filter.</p>
    #[doc(hidden)]
    pub attribute: std::option::Option<std::string::String>,
    /// <p>The type of search (For example, eq, geq, leq)</p>
    #[doc(hidden)]
    pub operation: std::option::Option<std::string::String>,
    /// <p>Value of the filter.</p>
    #[doc(hidden)]
    pub value: std::option::Option<std::string::String>,
}
impl Filter {
    /// <p>The name of an attribute to use as a filter.</p>
    pub fn attribute(&self) -> std::option::Option<&str> {
        self.attribute.as_deref()
    }
    /// <p>The type of search (For example, eq, geq, leq)</p>
    pub fn operation(&self) -> std::option::Option<&str> {
        self.operation.as_deref()
    }
    /// <p>Value of the filter.</p>
    pub fn value(&self) -> std::option::Option<&str> {
        self.value.as_deref()
    }
}
impl std::fmt::Debug for Filter {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("Filter");
        formatter.field("attribute", &self.attribute);
        formatter.field("operation", &self.operation);
        formatter.field("value", &self.value);
        formatter.finish()
    }
}
/// See [`Filter`](crate::model::Filter).
pub mod filter {

    /// A builder for [`Filter`](crate::model::Filter).
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) attribute: std::option::Option<std::string::String>,
        pub(crate) operation: std::option::Option<std::string::String>,
        pub(crate) value: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The name of an attribute to use as a filter.</p>
        pub fn attribute(mut self, input: impl Into<std::string::String>) -> Self {
            self.attribute = Some(input.into());
            self
        }
        /// <p>The name of an attribute to use as a filter.</p>
        pub fn set_attribute(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.attribute = input;
            self
        }
        /// <p>The type of search (For example, eq, geq, leq)</p>
        pub fn operation(mut self, input: impl Into<std::string::String>) -> Self {
            self.operation = Some(input.into());
            self
        }
        /// <p>The type of search (For example, eq, geq, leq)</p>
        pub fn set_operation(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.operation = input;
            self
        }
        /// <p>Value of the filter.</p>
        pub fn value(mut self, input: impl Into<std::string::String>) -> Self {
            self.value = Some(input.into());
            self
        }
        /// <p>Value of the filter.</p>
        pub fn set_value(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.value = input;
            self
        }
        /// Consumes the builder and constructs a [`Filter`](crate::model::Filter).
        pub fn build(self) -> crate::model::Filter {
            crate::model::Filter {
                attribute: self.attribute,
                operation: self.operation,
                value: self.value,
            }
        }
    }
}
impl Filter {
    /// Creates a new builder-style object to manufacture [`Filter`](crate::model::Filter).
    pub fn builder() -> crate::model::filter::Builder {
        crate::model::filter::Builder::default()
    }
}

/// <p>Describes an EC2 instance providing user-based subscriptions.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct InstanceSummary {
    /// <p>The ID of the EC2 instance, which provides user-based subscriptions.</p>
    #[doc(hidden)]
    pub instance_id: std::option::Option<std::string::String>,
    /// <p>The status of an EC2 instance resource.</p>
    #[doc(hidden)]
    pub status: std::option::Option<std::string::String>,
    /// <p>A list of provided user-based subscription products.</p>
    #[doc(hidden)]
    pub products: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The date of the last status check.</p>
    #[doc(hidden)]
    pub last_status_check_date: std::option::Option<std::string::String>,
    /// <p>The status message for an EC2 instance.</p>
    #[doc(hidden)]
    pub status_message: std::option::Option<std::string::String>,
}
impl InstanceSummary {
    /// <p>The ID of the EC2 instance, which provides user-based subscriptions.</p>
    pub fn instance_id(&self) -> std::option::Option<&str> {
        self.instance_id.as_deref()
    }
    /// <p>The status of an EC2 instance resource.</p>
    pub fn status(&self) -> std::option::Option<&str> {
        self.status.as_deref()
    }
    /// <p>A list of provided user-based subscription products.</p>
    pub fn products(&self) -> std::option::Option<&[std::string::String]> {
        self.products.as_deref()
    }
    /// <p>The date of the last status check.</p>
    pub fn last_status_check_date(&self) -> std::option::Option<&str> {
        self.last_status_check_date.as_deref()
    }
    /// <p>The status message for an EC2 instance.</p>
    pub fn status_message(&self) -> std::option::Option<&str> {
        self.status_message.as_deref()
    }
}
impl std::fmt::Debug for InstanceSummary {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("InstanceSummary");
        formatter.field("instance_id", &self.instance_id);
        formatter.field("status", &self.status);
        formatter.field("products", &self.products);
        formatter.field("last_status_check_date", &self.last_status_check_date);
        formatter.field("status_message", &self.status_message);
        formatter.finish()
    }
}
/// See [`InstanceSummary`](crate::model::InstanceSummary).
pub mod instance_summary {

    /// A builder for [`InstanceSummary`](crate::model::InstanceSummary).
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) instance_id: std::option::Option<std::string::String>,
        pub(crate) status: std::option::Option<std::string::String>,
        pub(crate) products: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) last_status_check_date: std::option::Option<std::string::String>,
        pub(crate) status_message: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The ID of the EC2 instance, which provides user-based subscriptions.</p>
        pub fn instance_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.instance_id = Some(input.into());
            self
        }
        /// <p>The ID of the EC2 instance, which provides user-based subscriptions.</p>
        pub fn set_instance_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.instance_id = input;
            self
        }
        /// <p>The status of an EC2 instance resource.</p>
        pub fn status(mut self, input: impl Into<std::string::String>) -> Self {
            self.status = Some(input.into());
            self
        }
        /// <p>The status of an EC2 instance resource.</p>
        pub fn set_status(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.status = input;
            self
        }
        /// Appends an item to `products`.
        ///
        /// To override the contents of this collection use [`set_products`](Self::set_products).
        ///
        /// <p>A list of provided user-based subscription products.</p>
        pub fn products(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.products.unwrap_or_default();
            v.push(input.into());
            self.products = Some(v);
            self
        }
        /// <p>A list of provided user-based subscription products.</p>
        pub fn set_products(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.products = input;
            self
        }
        /// <p>The date of the last status check.</p>
        pub fn last_status_check_date(mut self, input: impl Into<std::string::String>) -> Self {
            self.last_status_check_date = Some(input.into());
            self
        }
        /// <p>The date of the last status check.</p>
        pub fn set_last_status_check_date(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.last_status_check_date = input;
            self
        }
        /// <p>The status message for an EC2 instance.</p>
        pub fn status_message(mut self, input: impl Into<std::string::String>) -> Self {
            self.status_message = Some(input.into());
            self
        }
        /// <p>The status message for an EC2 instance.</p>
        pub fn set_status_message(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.status_message = input;
            self
        }
        /// Consumes the builder and constructs a [`InstanceSummary`](crate::model::InstanceSummary).
        pub fn build(self) -> crate::model::InstanceSummary {
            crate::model::InstanceSummary {
                instance_id: self.instance_id,
                status: self.status,
                products: self.products,
                last_status_check_date: self.last_status_check_date,
                status_message: self.status_message,
            }
        }
    }
}
impl InstanceSummary {
    /// Creates a new builder-style object to manufacture [`InstanceSummary`](crate::model::InstanceSummary).
    pub fn builder() -> crate::model::instance_summary::Builder {
        crate::model::instance_summary::Builder::default()
    }
}
