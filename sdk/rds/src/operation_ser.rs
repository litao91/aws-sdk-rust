// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_operation_crate_operation_add_role_to_db_cluster(
    input: &crate::input::AddRoleToDbClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AddRoleToDBCluster", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("DBClusterIdentifier");
    if let Some(var_2) = &input.db_cluster_identifier {
        scope_1.string(var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("RoleArn");
    if let Some(var_4) = &input.role_arn {
        scope_3.string(var_4);
    }
    #[allow(unused_mut)]
    let mut scope_5 = writer.prefix("FeatureName");
    if let Some(var_6) = &input.feature_name {
        scope_5.string(var_6);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_add_role_to_db_instance(
    input: &crate::input::AddRoleToDbInstanceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AddRoleToDBInstance", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_7 = writer.prefix("DBInstanceIdentifier");
    if let Some(var_8) = &input.db_instance_identifier {
        scope_7.string(var_8);
    }
    #[allow(unused_mut)]
    let mut scope_9 = writer.prefix("RoleArn");
    if let Some(var_10) = &input.role_arn {
        scope_9.string(var_10);
    }
    #[allow(unused_mut)]
    let mut scope_11 = writer.prefix("FeatureName");
    if let Some(var_12) = &input.feature_name {
        scope_11.string(var_12);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_add_source_identifier_to_subscription(
    input: &crate::input::AddSourceIdentifierToSubscriptionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AddSourceIdentifierToSubscription",
        "2014-10-31",
    );
    #[allow(unused_mut)]
    let mut scope_13 = writer.prefix("SubscriptionName");
    if let Some(var_14) = &input.subscription_name {
        scope_13.string(var_14);
    }
    #[allow(unused_mut)]
    let mut scope_15 = writer.prefix("SourceIdentifier");
    if let Some(var_16) = &input.source_identifier {
        scope_15.string(var_16);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_add_tags_to_resource(
    input: &crate::input::AddTagsToResourceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AddTagsToResource", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_17 = writer.prefix("ResourceName");
    if let Some(var_18) = &input.resource_name {
        scope_17.string(var_18);
    }
    #[allow(unused_mut)]
    let mut scope_19 = writer.prefix("Tags");
    if let Some(var_20) = &input.tags {
        let mut list_22 = scope_19.start_list(false, Some("Tag"));
        for item_21 in var_20 {
            #[allow(unused_mut)]
            let mut entry_23 = list_22.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_23, item_21)?;
        }
        list_22.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_apply_pending_maintenance_action(
    input: &crate::input::ApplyPendingMaintenanceActionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ApplyPendingMaintenanceAction", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_24 = writer.prefix("ResourceIdentifier");
    if let Some(var_25) = &input.resource_identifier {
        scope_24.string(var_25);
    }
    #[allow(unused_mut)]
    let mut scope_26 = writer.prefix("ApplyAction");
    if let Some(var_27) = &input.apply_action {
        scope_26.string(var_27);
    }
    #[allow(unused_mut)]
    let mut scope_28 = writer.prefix("OptInType");
    if let Some(var_29) = &input.opt_in_type {
        scope_28.string(var_29);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_authorize_db_security_group_ingress(
    input: &crate::input::AuthorizeDbSecurityGroupIngressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AuthorizeDBSecurityGroupIngress",
        "2014-10-31",
    );
    #[allow(unused_mut)]
    let mut scope_30 = writer.prefix("DBSecurityGroupName");
    if let Some(var_31) = &input.db_security_group_name {
        scope_30.string(var_31);
    }
    #[allow(unused_mut)]
    let mut scope_32 = writer.prefix("CIDRIP");
    if let Some(var_33) = &input.cidrip {
        scope_32.string(var_33);
    }
    #[allow(unused_mut)]
    let mut scope_34 = writer.prefix("EC2SecurityGroupName");
    if let Some(var_35) = &input.ec2_security_group_name {
        scope_34.string(var_35);
    }
    #[allow(unused_mut)]
    let mut scope_36 = writer.prefix("EC2SecurityGroupId");
    if let Some(var_37) = &input.ec2_security_group_id {
        scope_36.string(var_37);
    }
    #[allow(unused_mut)]
    let mut scope_38 = writer.prefix("EC2SecurityGroupOwnerId");
    if let Some(var_39) = &input.ec2_security_group_owner_id {
        scope_38.string(var_39);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_backtrack_db_cluster(
    input: &crate::input::BacktrackDbClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "BacktrackDBCluster", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_40 = writer.prefix("DBClusterIdentifier");
    if let Some(var_41) = &input.db_cluster_identifier {
        scope_40.string(var_41);
    }
    #[allow(unused_mut)]
    let mut scope_42 = writer.prefix("BacktrackTo");
    if let Some(var_43) = &input.backtrack_to {
        scope_42.date_time(var_43, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_44 = writer.prefix("Force");
    if let Some(var_45) = &input.force {
        scope_44.boolean(*var_45);
    }
    #[allow(unused_mut)]
    let mut scope_46 = writer.prefix("UseEarliestTimeOnPointInTimeUnavailable");
    if let Some(var_47) = &input.use_earliest_time_on_point_in_time_unavailable {
        scope_46.boolean(*var_47);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_export_task(
    input: &crate::input::CancelExportTaskInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CancelExportTask", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_48 = writer.prefix("ExportTaskIdentifier");
    if let Some(var_49) = &input.export_task_identifier {
        scope_48.string(var_49);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_copy_db_cluster_parameter_group(
    input: &crate::input::CopyDbClusterParameterGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CopyDBClusterParameterGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_50 = writer.prefix("SourceDBClusterParameterGroupIdentifier");
    if let Some(var_51) = &input.source_db_cluster_parameter_group_identifier {
        scope_50.string(var_51);
    }
    #[allow(unused_mut)]
    let mut scope_52 = writer.prefix("TargetDBClusterParameterGroupIdentifier");
    if let Some(var_53) = &input.target_db_cluster_parameter_group_identifier {
        scope_52.string(var_53);
    }
    #[allow(unused_mut)]
    let mut scope_54 = writer.prefix("TargetDBClusterParameterGroupDescription");
    if let Some(var_55) = &input.target_db_cluster_parameter_group_description {
        scope_54.string(var_55);
    }
    #[allow(unused_mut)]
    let mut scope_56 = writer.prefix("Tags");
    if let Some(var_57) = &input.tags {
        let mut list_59 = scope_56.start_list(false, Some("Tag"));
        for item_58 in var_57 {
            #[allow(unused_mut)]
            let mut entry_60 = list_59.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_60, item_58)?;
        }
        list_59.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_copy_db_cluster_snapshot(
    input: &crate::input::CopyDbClusterSnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CopyDBClusterSnapshot", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_61 = writer.prefix("SourceDBClusterSnapshotIdentifier");
    if let Some(var_62) = &input.source_db_cluster_snapshot_identifier {
        scope_61.string(var_62);
    }
    #[allow(unused_mut)]
    let mut scope_63 = writer.prefix("TargetDBClusterSnapshotIdentifier");
    if let Some(var_64) = &input.target_db_cluster_snapshot_identifier {
        scope_63.string(var_64);
    }
    #[allow(unused_mut)]
    let mut scope_65 = writer.prefix("KmsKeyId");
    if let Some(var_66) = &input.kms_key_id {
        scope_65.string(var_66);
    }
    #[allow(unused_mut)]
    let mut scope_67 = writer.prefix("PreSignedUrl");
    if let Some(var_68) = &input.pre_signed_url {
        scope_67.string(var_68);
    }
    #[allow(unused_mut)]
    let mut scope_69 = writer.prefix("CopyTags");
    if let Some(var_70) = &input.copy_tags {
        scope_69.boolean(*var_70);
    }
    #[allow(unused_mut)]
    let mut scope_71 = writer.prefix("Tags");
    if let Some(var_72) = &input.tags {
        let mut list_74 = scope_71.start_list(false, Some("Tag"));
        for item_73 in var_72 {
            #[allow(unused_mut)]
            let mut entry_75 = list_74.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_75, item_73)?;
        }
        list_74.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_copy_db_parameter_group(
    input: &crate::input::CopyDbParameterGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CopyDBParameterGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_76 = writer.prefix("SourceDBParameterGroupIdentifier");
    if let Some(var_77) = &input.source_db_parameter_group_identifier {
        scope_76.string(var_77);
    }
    #[allow(unused_mut)]
    let mut scope_78 = writer.prefix("TargetDBParameterGroupIdentifier");
    if let Some(var_79) = &input.target_db_parameter_group_identifier {
        scope_78.string(var_79);
    }
    #[allow(unused_mut)]
    let mut scope_80 = writer.prefix("TargetDBParameterGroupDescription");
    if let Some(var_81) = &input.target_db_parameter_group_description {
        scope_80.string(var_81);
    }
    #[allow(unused_mut)]
    let mut scope_82 = writer.prefix("Tags");
    if let Some(var_83) = &input.tags {
        let mut list_85 = scope_82.start_list(false, Some("Tag"));
        for item_84 in var_83 {
            #[allow(unused_mut)]
            let mut entry_86 = list_85.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_86, item_84)?;
        }
        list_85.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_copy_db_snapshot(
    input: &crate::input::CopyDbSnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CopyDBSnapshot", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_87 = writer.prefix("SourceDBSnapshotIdentifier");
    if let Some(var_88) = &input.source_db_snapshot_identifier {
        scope_87.string(var_88);
    }
    #[allow(unused_mut)]
    let mut scope_89 = writer.prefix("TargetDBSnapshotIdentifier");
    if let Some(var_90) = &input.target_db_snapshot_identifier {
        scope_89.string(var_90);
    }
    #[allow(unused_mut)]
    let mut scope_91 = writer.prefix("KmsKeyId");
    if let Some(var_92) = &input.kms_key_id {
        scope_91.string(var_92);
    }
    #[allow(unused_mut)]
    let mut scope_93 = writer.prefix("Tags");
    if let Some(var_94) = &input.tags {
        let mut list_96 = scope_93.start_list(false, Some("Tag"));
        for item_95 in var_94 {
            #[allow(unused_mut)]
            let mut entry_97 = list_96.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_97, item_95)?;
        }
        list_96.finish();
    }
    #[allow(unused_mut)]
    let mut scope_98 = writer.prefix("CopyTags");
    if let Some(var_99) = &input.copy_tags {
        scope_98.boolean(*var_99);
    }
    #[allow(unused_mut)]
    let mut scope_100 = writer.prefix("PreSignedUrl");
    if let Some(var_101) = &input.pre_signed_url {
        scope_100.string(var_101);
    }
    #[allow(unused_mut)]
    let mut scope_102 = writer.prefix("OptionGroupName");
    if let Some(var_103) = &input.option_group_name {
        scope_102.string(var_103);
    }
    #[allow(unused_mut)]
    let mut scope_104 = writer.prefix("TargetCustomAvailabilityZone");
    if let Some(var_105) = &input.target_custom_availability_zone {
        scope_104.string(var_105);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_copy_option_group(
    input: &crate::input::CopyOptionGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CopyOptionGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_106 = writer.prefix("SourceOptionGroupIdentifier");
    if let Some(var_107) = &input.source_option_group_identifier {
        scope_106.string(var_107);
    }
    #[allow(unused_mut)]
    let mut scope_108 = writer.prefix("TargetOptionGroupIdentifier");
    if let Some(var_109) = &input.target_option_group_identifier {
        scope_108.string(var_109);
    }
    #[allow(unused_mut)]
    let mut scope_110 = writer.prefix("TargetOptionGroupDescription");
    if let Some(var_111) = &input.target_option_group_description {
        scope_110.string(var_111);
    }
    #[allow(unused_mut)]
    let mut scope_112 = writer.prefix("Tags");
    if let Some(var_113) = &input.tags {
        let mut list_115 = scope_112.start_list(false, Some("Tag"));
        for item_114 in var_113 {
            #[allow(unused_mut)]
            let mut entry_116 = list_115.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_116, item_114)?;
        }
        list_115.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_custom_db_engine_version(
    input: &crate::input::CreateCustomDbEngineVersionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateCustomDBEngineVersion", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_117 = writer.prefix("Engine");
    if let Some(var_118) = &input.engine {
        scope_117.string(var_118);
    }
    #[allow(unused_mut)]
    let mut scope_119 = writer.prefix("EngineVersion");
    if let Some(var_120) = &input.engine_version {
        scope_119.string(var_120);
    }
    #[allow(unused_mut)]
    let mut scope_121 = writer.prefix("DatabaseInstallationFilesS3BucketName");
    if let Some(var_122) = &input.database_installation_files_s3_bucket_name {
        scope_121.string(var_122);
    }
    #[allow(unused_mut)]
    let mut scope_123 = writer.prefix("DatabaseInstallationFilesS3Prefix");
    if let Some(var_124) = &input.database_installation_files_s3_prefix {
        scope_123.string(var_124);
    }
    #[allow(unused_mut)]
    let mut scope_125 = writer.prefix("KMSKeyId");
    if let Some(var_126) = &input.kms_key_id {
        scope_125.string(var_126);
    }
    #[allow(unused_mut)]
    let mut scope_127 = writer.prefix("Description");
    if let Some(var_128) = &input.description {
        scope_127.string(var_128);
    }
    #[allow(unused_mut)]
    let mut scope_129 = writer.prefix("Manifest");
    if let Some(var_130) = &input.manifest {
        scope_129.string(var_130);
    }
    #[allow(unused_mut)]
    let mut scope_131 = writer.prefix("Tags");
    if let Some(var_132) = &input.tags {
        let mut list_134 = scope_131.start_list(false, Some("Tag"));
        for item_133 in var_132 {
            #[allow(unused_mut)]
            let mut entry_135 = list_134.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_135, item_133)?;
        }
        list_134.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_db_cluster(
    input: &crate::input::CreateDbClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateDBCluster", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_136 = writer.prefix("AvailabilityZones");
    if let Some(var_137) = &input.availability_zones {
        let mut list_139 = scope_136.start_list(false, Some("AvailabilityZone"));
        for item_138 in var_137 {
            #[allow(unused_mut)]
            let mut entry_140 = list_139.entry();
            entry_140.string(item_138);
        }
        list_139.finish();
    }
    #[allow(unused_mut)]
    let mut scope_141 = writer.prefix("BackupRetentionPeriod");
    if let Some(var_142) = &input.backup_retention_period {
        scope_141.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_142).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_143 = writer.prefix("CharacterSetName");
    if let Some(var_144) = &input.character_set_name {
        scope_143.string(var_144);
    }
    #[allow(unused_mut)]
    let mut scope_145 = writer.prefix("DatabaseName");
    if let Some(var_146) = &input.database_name {
        scope_145.string(var_146);
    }
    #[allow(unused_mut)]
    let mut scope_147 = writer.prefix("DBClusterIdentifier");
    if let Some(var_148) = &input.db_cluster_identifier {
        scope_147.string(var_148);
    }
    #[allow(unused_mut)]
    let mut scope_149 = writer.prefix("DBClusterParameterGroupName");
    if let Some(var_150) = &input.db_cluster_parameter_group_name {
        scope_149.string(var_150);
    }
    #[allow(unused_mut)]
    let mut scope_151 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_152) = &input.vpc_security_group_ids {
        let mut list_154 = scope_151.start_list(false, Some("VpcSecurityGroupId"));
        for item_153 in var_152 {
            #[allow(unused_mut)]
            let mut entry_155 = list_154.entry();
            entry_155.string(item_153);
        }
        list_154.finish();
    }
    #[allow(unused_mut)]
    let mut scope_156 = writer.prefix("DBSubnetGroupName");
    if let Some(var_157) = &input.db_subnet_group_name {
        scope_156.string(var_157);
    }
    #[allow(unused_mut)]
    let mut scope_158 = writer.prefix("Engine");
    if let Some(var_159) = &input.engine {
        scope_158.string(var_159);
    }
    #[allow(unused_mut)]
    let mut scope_160 = writer.prefix("EngineVersion");
    if let Some(var_161) = &input.engine_version {
        scope_160.string(var_161);
    }
    #[allow(unused_mut)]
    let mut scope_162 = writer.prefix("Port");
    if let Some(var_163) = &input.port {
        scope_162.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_163).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_164 = writer.prefix("MasterUsername");
    if let Some(var_165) = &input.master_username {
        scope_164.string(var_165);
    }
    #[allow(unused_mut)]
    let mut scope_166 = writer.prefix("MasterUserPassword");
    if let Some(var_167) = &input.master_user_password {
        scope_166.string(var_167);
    }
    #[allow(unused_mut)]
    let mut scope_168 = writer.prefix("OptionGroupName");
    if let Some(var_169) = &input.option_group_name {
        scope_168.string(var_169);
    }
    #[allow(unused_mut)]
    let mut scope_170 = writer.prefix("PreferredBackupWindow");
    if let Some(var_171) = &input.preferred_backup_window {
        scope_170.string(var_171);
    }
    #[allow(unused_mut)]
    let mut scope_172 = writer.prefix("PreferredMaintenanceWindow");
    if let Some(var_173) = &input.preferred_maintenance_window {
        scope_172.string(var_173);
    }
    #[allow(unused_mut)]
    let mut scope_174 = writer.prefix("ReplicationSourceIdentifier");
    if let Some(var_175) = &input.replication_source_identifier {
        scope_174.string(var_175);
    }
    #[allow(unused_mut)]
    let mut scope_176 = writer.prefix("Tags");
    if let Some(var_177) = &input.tags {
        let mut list_179 = scope_176.start_list(false, Some("Tag"));
        for item_178 in var_177 {
            #[allow(unused_mut)]
            let mut entry_180 = list_179.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_180, item_178)?;
        }
        list_179.finish();
    }
    #[allow(unused_mut)]
    let mut scope_181 = writer.prefix("StorageEncrypted");
    if let Some(var_182) = &input.storage_encrypted {
        scope_181.boolean(*var_182);
    }
    #[allow(unused_mut)]
    let mut scope_183 = writer.prefix("KmsKeyId");
    if let Some(var_184) = &input.kms_key_id {
        scope_183.string(var_184);
    }
    #[allow(unused_mut)]
    let mut scope_185 = writer.prefix("PreSignedUrl");
    if let Some(var_186) = &input.pre_signed_url {
        scope_185.string(var_186);
    }
    #[allow(unused_mut)]
    let mut scope_187 = writer.prefix("EnableIAMDatabaseAuthentication");
    if let Some(var_188) = &input.enable_iam_database_authentication {
        scope_187.boolean(*var_188);
    }
    #[allow(unused_mut)]
    let mut scope_189 = writer.prefix("BacktrackWindow");
    if let Some(var_190) = &input.backtrack_window {
        scope_189.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_190).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_191 = writer.prefix("EnableCloudwatchLogsExports");
    if let Some(var_192) = &input.enable_cloudwatch_logs_exports {
        let mut list_194 = scope_191.start_list(false, None);
        for item_193 in var_192 {
            #[allow(unused_mut)]
            let mut entry_195 = list_194.entry();
            entry_195.string(item_193);
        }
        list_194.finish();
    }
    #[allow(unused_mut)]
    let mut scope_196 = writer.prefix("EngineMode");
    if let Some(var_197) = &input.engine_mode {
        scope_196.string(var_197);
    }
    #[allow(unused_mut)]
    let mut scope_198 = writer.prefix("ScalingConfiguration");
    if let Some(var_199) = &input.scaling_configuration {
        crate::query_ser::serialize_structure_crate_model_scaling_configuration(
            scope_198, var_199,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_200 = writer.prefix("DeletionProtection");
    if let Some(var_201) = &input.deletion_protection {
        scope_200.boolean(*var_201);
    }
    #[allow(unused_mut)]
    let mut scope_202 = writer.prefix("GlobalClusterIdentifier");
    if let Some(var_203) = &input.global_cluster_identifier {
        scope_202.string(var_203);
    }
    #[allow(unused_mut)]
    let mut scope_204 = writer.prefix("EnableHttpEndpoint");
    if let Some(var_205) = &input.enable_http_endpoint {
        scope_204.boolean(*var_205);
    }
    #[allow(unused_mut)]
    let mut scope_206 = writer.prefix("CopyTagsToSnapshot");
    if let Some(var_207) = &input.copy_tags_to_snapshot {
        scope_206.boolean(*var_207);
    }
    #[allow(unused_mut)]
    let mut scope_208 = writer.prefix("Domain");
    if let Some(var_209) = &input.domain {
        scope_208.string(var_209);
    }
    #[allow(unused_mut)]
    let mut scope_210 = writer.prefix("DomainIAMRoleName");
    if let Some(var_211) = &input.domain_iam_role_name {
        scope_210.string(var_211);
    }
    #[allow(unused_mut)]
    let mut scope_212 = writer.prefix("EnableGlobalWriteForwarding");
    if let Some(var_213) = &input.enable_global_write_forwarding {
        scope_212.boolean(*var_213);
    }
    #[allow(unused_mut)]
    let mut scope_214 = writer.prefix("DBClusterInstanceClass");
    if let Some(var_215) = &input.db_cluster_instance_class {
        scope_214.string(var_215);
    }
    #[allow(unused_mut)]
    let mut scope_216 = writer.prefix("AllocatedStorage");
    if let Some(var_217) = &input.allocated_storage {
        scope_216.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_217).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_218 = writer.prefix("StorageType");
    if let Some(var_219) = &input.storage_type {
        scope_218.string(var_219);
    }
    #[allow(unused_mut)]
    let mut scope_220 = writer.prefix("Iops");
    if let Some(var_221) = &input.iops {
        scope_220.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_221).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_222 = writer.prefix("PubliclyAccessible");
    if let Some(var_223) = &input.publicly_accessible {
        scope_222.boolean(*var_223);
    }
    #[allow(unused_mut)]
    let mut scope_224 = writer.prefix("AutoMinorVersionUpgrade");
    if let Some(var_225) = &input.auto_minor_version_upgrade {
        scope_224.boolean(*var_225);
    }
    #[allow(unused_mut)]
    let mut scope_226 = writer.prefix("MonitoringInterval");
    if let Some(var_227) = &input.monitoring_interval {
        scope_226.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_227).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_228 = writer.prefix("MonitoringRoleArn");
    if let Some(var_229) = &input.monitoring_role_arn {
        scope_228.string(var_229);
    }
    #[allow(unused_mut)]
    let mut scope_230 = writer.prefix("EnablePerformanceInsights");
    if let Some(var_231) = &input.enable_performance_insights {
        scope_230.boolean(*var_231);
    }
    #[allow(unused_mut)]
    let mut scope_232 = writer.prefix("PerformanceInsightsKMSKeyId");
    if let Some(var_233) = &input.performance_insights_kms_key_id {
        scope_232.string(var_233);
    }
    #[allow(unused_mut)]
    let mut scope_234 = writer.prefix("PerformanceInsightsRetentionPeriod");
    if let Some(var_235) = &input.performance_insights_retention_period {
        scope_234.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_235).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_236 = writer.prefix("ServerlessV2ScalingConfiguration");
    if let Some(var_237) = &input.serverless_v2_scaling_configuration {
        crate::query_ser::serialize_structure_crate_model_serverless_v2_scaling_configuration(
            scope_236, var_237,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_db_cluster_endpoint(
    input: &crate::input::CreateDbClusterEndpointInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateDBClusterEndpoint", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_238 = writer.prefix("DBClusterIdentifier");
    if let Some(var_239) = &input.db_cluster_identifier {
        scope_238.string(var_239);
    }
    #[allow(unused_mut)]
    let mut scope_240 = writer.prefix("DBClusterEndpointIdentifier");
    if let Some(var_241) = &input.db_cluster_endpoint_identifier {
        scope_240.string(var_241);
    }
    #[allow(unused_mut)]
    let mut scope_242 = writer.prefix("EndpointType");
    if let Some(var_243) = &input.endpoint_type {
        scope_242.string(var_243);
    }
    #[allow(unused_mut)]
    let mut scope_244 = writer.prefix("StaticMembers");
    if let Some(var_245) = &input.static_members {
        let mut list_247 = scope_244.start_list(false, None);
        for item_246 in var_245 {
            #[allow(unused_mut)]
            let mut entry_248 = list_247.entry();
            entry_248.string(item_246);
        }
        list_247.finish();
    }
    #[allow(unused_mut)]
    let mut scope_249 = writer.prefix("ExcludedMembers");
    if let Some(var_250) = &input.excluded_members {
        let mut list_252 = scope_249.start_list(false, None);
        for item_251 in var_250 {
            #[allow(unused_mut)]
            let mut entry_253 = list_252.entry();
            entry_253.string(item_251);
        }
        list_252.finish();
    }
    #[allow(unused_mut)]
    let mut scope_254 = writer.prefix("Tags");
    if let Some(var_255) = &input.tags {
        let mut list_257 = scope_254.start_list(false, Some("Tag"));
        for item_256 in var_255 {
            #[allow(unused_mut)]
            let mut entry_258 = list_257.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_258, item_256)?;
        }
        list_257.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_db_cluster_parameter_group(
    input: &crate::input::CreateDbClusterParameterGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateDBClusterParameterGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_259 = writer.prefix("DBClusterParameterGroupName");
    if let Some(var_260) = &input.db_cluster_parameter_group_name {
        scope_259.string(var_260);
    }
    #[allow(unused_mut)]
    let mut scope_261 = writer.prefix("DBParameterGroupFamily");
    if let Some(var_262) = &input.db_parameter_group_family {
        scope_261.string(var_262);
    }
    #[allow(unused_mut)]
    let mut scope_263 = writer.prefix("Description");
    if let Some(var_264) = &input.description {
        scope_263.string(var_264);
    }
    #[allow(unused_mut)]
    let mut scope_265 = writer.prefix("Tags");
    if let Some(var_266) = &input.tags {
        let mut list_268 = scope_265.start_list(false, Some("Tag"));
        for item_267 in var_266 {
            #[allow(unused_mut)]
            let mut entry_269 = list_268.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_269, item_267)?;
        }
        list_268.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_db_cluster_snapshot(
    input: &crate::input::CreateDbClusterSnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateDBClusterSnapshot", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_270 = writer.prefix("DBClusterSnapshotIdentifier");
    if let Some(var_271) = &input.db_cluster_snapshot_identifier {
        scope_270.string(var_271);
    }
    #[allow(unused_mut)]
    let mut scope_272 = writer.prefix("DBClusterIdentifier");
    if let Some(var_273) = &input.db_cluster_identifier {
        scope_272.string(var_273);
    }
    #[allow(unused_mut)]
    let mut scope_274 = writer.prefix("Tags");
    if let Some(var_275) = &input.tags {
        let mut list_277 = scope_274.start_list(false, Some("Tag"));
        for item_276 in var_275 {
            #[allow(unused_mut)]
            let mut entry_278 = list_277.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_278, item_276)?;
        }
        list_277.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_db_instance(
    input: &crate::input::CreateDbInstanceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateDBInstance", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_279 = writer.prefix("DBName");
    if let Some(var_280) = &input.db_name {
        scope_279.string(var_280);
    }
    #[allow(unused_mut)]
    let mut scope_281 = writer.prefix("DBInstanceIdentifier");
    if let Some(var_282) = &input.db_instance_identifier {
        scope_281.string(var_282);
    }
    #[allow(unused_mut)]
    let mut scope_283 = writer.prefix("AllocatedStorage");
    if let Some(var_284) = &input.allocated_storage {
        scope_283.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_284).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_285 = writer.prefix("DBInstanceClass");
    if let Some(var_286) = &input.db_instance_class {
        scope_285.string(var_286);
    }
    #[allow(unused_mut)]
    let mut scope_287 = writer.prefix("Engine");
    if let Some(var_288) = &input.engine {
        scope_287.string(var_288);
    }
    #[allow(unused_mut)]
    let mut scope_289 = writer.prefix("MasterUsername");
    if let Some(var_290) = &input.master_username {
        scope_289.string(var_290);
    }
    #[allow(unused_mut)]
    let mut scope_291 = writer.prefix("MasterUserPassword");
    if let Some(var_292) = &input.master_user_password {
        scope_291.string(var_292);
    }
    #[allow(unused_mut)]
    let mut scope_293 = writer.prefix("DBSecurityGroups");
    if let Some(var_294) = &input.db_security_groups {
        let mut list_296 = scope_293.start_list(false, Some("DBSecurityGroupName"));
        for item_295 in var_294 {
            #[allow(unused_mut)]
            let mut entry_297 = list_296.entry();
            entry_297.string(item_295);
        }
        list_296.finish();
    }
    #[allow(unused_mut)]
    let mut scope_298 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_299) = &input.vpc_security_group_ids {
        let mut list_301 = scope_298.start_list(false, Some("VpcSecurityGroupId"));
        for item_300 in var_299 {
            #[allow(unused_mut)]
            let mut entry_302 = list_301.entry();
            entry_302.string(item_300);
        }
        list_301.finish();
    }
    #[allow(unused_mut)]
    let mut scope_303 = writer.prefix("AvailabilityZone");
    if let Some(var_304) = &input.availability_zone {
        scope_303.string(var_304);
    }
    #[allow(unused_mut)]
    let mut scope_305 = writer.prefix("DBSubnetGroupName");
    if let Some(var_306) = &input.db_subnet_group_name {
        scope_305.string(var_306);
    }
    #[allow(unused_mut)]
    let mut scope_307 = writer.prefix("PreferredMaintenanceWindow");
    if let Some(var_308) = &input.preferred_maintenance_window {
        scope_307.string(var_308);
    }
    #[allow(unused_mut)]
    let mut scope_309 = writer.prefix("DBParameterGroupName");
    if let Some(var_310) = &input.db_parameter_group_name {
        scope_309.string(var_310);
    }
    #[allow(unused_mut)]
    let mut scope_311 = writer.prefix("BackupRetentionPeriod");
    if let Some(var_312) = &input.backup_retention_period {
        scope_311.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_312).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_313 = writer.prefix("PreferredBackupWindow");
    if let Some(var_314) = &input.preferred_backup_window {
        scope_313.string(var_314);
    }
    #[allow(unused_mut)]
    let mut scope_315 = writer.prefix("Port");
    if let Some(var_316) = &input.port {
        scope_315.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_316).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_317 = writer.prefix("MultiAZ");
    if let Some(var_318) = &input.multi_az {
        scope_317.boolean(*var_318);
    }
    #[allow(unused_mut)]
    let mut scope_319 = writer.prefix("EngineVersion");
    if let Some(var_320) = &input.engine_version {
        scope_319.string(var_320);
    }
    #[allow(unused_mut)]
    let mut scope_321 = writer.prefix("AutoMinorVersionUpgrade");
    if let Some(var_322) = &input.auto_minor_version_upgrade {
        scope_321.boolean(*var_322);
    }
    #[allow(unused_mut)]
    let mut scope_323 = writer.prefix("LicenseModel");
    if let Some(var_324) = &input.license_model {
        scope_323.string(var_324);
    }
    #[allow(unused_mut)]
    let mut scope_325 = writer.prefix("Iops");
    if let Some(var_326) = &input.iops {
        scope_325.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_326).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_327 = writer.prefix("OptionGroupName");
    if let Some(var_328) = &input.option_group_name {
        scope_327.string(var_328);
    }
    #[allow(unused_mut)]
    let mut scope_329 = writer.prefix("CharacterSetName");
    if let Some(var_330) = &input.character_set_name {
        scope_329.string(var_330);
    }
    #[allow(unused_mut)]
    let mut scope_331 = writer.prefix("NcharCharacterSetName");
    if let Some(var_332) = &input.nchar_character_set_name {
        scope_331.string(var_332);
    }
    #[allow(unused_mut)]
    let mut scope_333 = writer.prefix("PubliclyAccessible");
    if let Some(var_334) = &input.publicly_accessible {
        scope_333.boolean(*var_334);
    }
    #[allow(unused_mut)]
    let mut scope_335 = writer.prefix("Tags");
    if let Some(var_336) = &input.tags {
        let mut list_338 = scope_335.start_list(false, Some("Tag"));
        for item_337 in var_336 {
            #[allow(unused_mut)]
            let mut entry_339 = list_338.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_339, item_337)?;
        }
        list_338.finish();
    }
    #[allow(unused_mut)]
    let mut scope_340 = writer.prefix("DBClusterIdentifier");
    if let Some(var_341) = &input.db_cluster_identifier {
        scope_340.string(var_341);
    }
    #[allow(unused_mut)]
    let mut scope_342 = writer.prefix("StorageType");
    if let Some(var_343) = &input.storage_type {
        scope_342.string(var_343);
    }
    #[allow(unused_mut)]
    let mut scope_344 = writer.prefix("TdeCredentialArn");
    if let Some(var_345) = &input.tde_credential_arn {
        scope_344.string(var_345);
    }
    #[allow(unused_mut)]
    let mut scope_346 = writer.prefix("TdeCredentialPassword");
    if let Some(var_347) = &input.tde_credential_password {
        scope_346.string(var_347);
    }
    #[allow(unused_mut)]
    let mut scope_348 = writer.prefix("StorageEncrypted");
    if let Some(var_349) = &input.storage_encrypted {
        scope_348.boolean(*var_349);
    }
    #[allow(unused_mut)]
    let mut scope_350 = writer.prefix("KmsKeyId");
    if let Some(var_351) = &input.kms_key_id {
        scope_350.string(var_351);
    }
    #[allow(unused_mut)]
    let mut scope_352 = writer.prefix("Domain");
    if let Some(var_353) = &input.domain {
        scope_352.string(var_353);
    }
    #[allow(unused_mut)]
    let mut scope_354 = writer.prefix("CopyTagsToSnapshot");
    if let Some(var_355) = &input.copy_tags_to_snapshot {
        scope_354.boolean(*var_355);
    }
    #[allow(unused_mut)]
    let mut scope_356 = writer.prefix("MonitoringInterval");
    if let Some(var_357) = &input.monitoring_interval {
        scope_356.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_357).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_358 = writer.prefix("MonitoringRoleArn");
    if let Some(var_359) = &input.monitoring_role_arn {
        scope_358.string(var_359);
    }
    #[allow(unused_mut)]
    let mut scope_360 = writer.prefix("DomainIAMRoleName");
    if let Some(var_361) = &input.domain_iam_role_name {
        scope_360.string(var_361);
    }
    #[allow(unused_mut)]
    let mut scope_362 = writer.prefix("PromotionTier");
    if let Some(var_363) = &input.promotion_tier {
        scope_362.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_363).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_364 = writer.prefix("Timezone");
    if let Some(var_365) = &input.timezone {
        scope_364.string(var_365);
    }
    #[allow(unused_mut)]
    let mut scope_366 = writer.prefix("EnableIAMDatabaseAuthentication");
    if let Some(var_367) = &input.enable_iam_database_authentication {
        scope_366.boolean(*var_367);
    }
    #[allow(unused_mut)]
    let mut scope_368 = writer.prefix("EnablePerformanceInsights");
    if let Some(var_369) = &input.enable_performance_insights {
        scope_368.boolean(*var_369);
    }
    #[allow(unused_mut)]
    let mut scope_370 = writer.prefix("PerformanceInsightsKMSKeyId");
    if let Some(var_371) = &input.performance_insights_kms_key_id {
        scope_370.string(var_371);
    }
    #[allow(unused_mut)]
    let mut scope_372 = writer.prefix("PerformanceInsightsRetentionPeriod");
    if let Some(var_373) = &input.performance_insights_retention_period {
        scope_372.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_373).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_374 = writer.prefix("EnableCloudwatchLogsExports");
    if let Some(var_375) = &input.enable_cloudwatch_logs_exports {
        let mut list_377 = scope_374.start_list(false, None);
        for item_376 in var_375 {
            #[allow(unused_mut)]
            let mut entry_378 = list_377.entry();
            entry_378.string(item_376);
        }
        list_377.finish();
    }
    #[allow(unused_mut)]
    let mut scope_379 = writer.prefix("ProcessorFeatures");
    if let Some(var_380) = &input.processor_features {
        let mut list_382 = scope_379.start_list(false, Some("ProcessorFeature"));
        for item_381 in var_380 {
            #[allow(unused_mut)]
            let mut entry_383 = list_382.entry();
            crate::query_ser::serialize_structure_crate_model_processor_feature(
                entry_383, item_381,
            )?;
        }
        list_382.finish();
    }
    #[allow(unused_mut)]
    let mut scope_384 = writer.prefix("DeletionProtection");
    if let Some(var_385) = &input.deletion_protection {
        scope_384.boolean(*var_385);
    }
    #[allow(unused_mut)]
    let mut scope_386 = writer.prefix("MaxAllocatedStorage");
    if let Some(var_387) = &input.max_allocated_storage {
        scope_386.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_387).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_388 = writer.prefix("EnableCustomerOwnedIp");
    if let Some(var_389) = &input.enable_customer_owned_ip {
        scope_388.boolean(*var_389);
    }
    #[allow(unused_mut)]
    let mut scope_390 = writer.prefix("CustomIamInstanceProfile");
    if let Some(var_391) = &input.custom_iam_instance_profile {
        scope_390.string(var_391);
    }
    #[allow(unused_mut)]
    let mut scope_392 = writer.prefix("BackupTarget");
    if let Some(var_393) = &input.backup_target {
        scope_392.string(var_393);
    }
    #[allow(unused_mut)]
    let mut scope_394 = writer.prefix("NetworkType");
    if let Some(var_395) = &input.network_type {
        scope_394.string(var_395);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_db_instance_read_replica(
    input: &crate::input::CreateDbInstanceReadReplicaInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateDBInstanceReadReplica", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_396 = writer.prefix("DBInstanceIdentifier");
    if let Some(var_397) = &input.db_instance_identifier {
        scope_396.string(var_397);
    }
    #[allow(unused_mut)]
    let mut scope_398 = writer.prefix("SourceDBInstanceIdentifier");
    if let Some(var_399) = &input.source_db_instance_identifier {
        scope_398.string(var_399);
    }
    #[allow(unused_mut)]
    let mut scope_400 = writer.prefix("DBInstanceClass");
    if let Some(var_401) = &input.db_instance_class {
        scope_400.string(var_401);
    }
    #[allow(unused_mut)]
    let mut scope_402 = writer.prefix("AvailabilityZone");
    if let Some(var_403) = &input.availability_zone {
        scope_402.string(var_403);
    }
    #[allow(unused_mut)]
    let mut scope_404 = writer.prefix("Port");
    if let Some(var_405) = &input.port {
        scope_404.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_405).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_406 = writer.prefix("MultiAZ");
    if let Some(var_407) = &input.multi_az {
        scope_406.boolean(*var_407);
    }
    #[allow(unused_mut)]
    let mut scope_408 = writer.prefix("AutoMinorVersionUpgrade");
    if let Some(var_409) = &input.auto_minor_version_upgrade {
        scope_408.boolean(*var_409);
    }
    #[allow(unused_mut)]
    let mut scope_410 = writer.prefix("Iops");
    if let Some(var_411) = &input.iops {
        scope_410.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_411).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_412 = writer.prefix("OptionGroupName");
    if let Some(var_413) = &input.option_group_name {
        scope_412.string(var_413);
    }
    #[allow(unused_mut)]
    let mut scope_414 = writer.prefix("DBParameterGroupName");
    if let Some(var_415) = &input.db_parameter_group_name {
        scope_414.string(var_415);
    }
    #[allow(unused_mut)]
    let mut scope_416 = writer.prefix("PubliclyAccessible");
    if let Some(var_417) = &input.publicly_accessible {
        scope_416.boolean(*var_417);
    }
    #[allow(unused_mut)]
    let mut scope_418 = writer.prefix("Tags");
    if let Some(var_419) = &input.tags {
        let mut list_421 = scope_418.start_list(false, Some("Tag"));
        for item_420 in var_419 {
            #[allow(unused_mut)]
            let mut entry_422 = list_421.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_422, item_420)?;
        }
        list_421.finish();
    }
    #[allow(unused_mut)]
    let mut scope_423 = writer.prefix("DBSubnetGroupName");
    if let Some(var_424) = &input.db_subnet_group_name {
        scope_423.string(var_424);
    }
    #[allow(unused_mut)]
    let mut scope_425 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_426) = &input.vpc_security_group_ids {
        let mut list_428 = scope_425.start_list(false, Some("VpcSecurityGroupId"));
        for item_427 in var_426 {
            #[allow(unused_mut)]
            let mut entry_429 = list_428.entry();
            entry_429.string(item_427);
        }
        list_428.finish();
    }
    #[allow(unused_mut)]
    let mut scope_430 = writer.prefix("StorageType");
    if let Some(var_431) = &input.storage_type {
        scope_430.string(var_431);
    }
    #[allow(unused_mut)]
    let mut scope_432 = writer.prefix("CopyTagsToSnapshot");
    if let Some(var_433) = &input.copy_tags_to_snapshot {
        scope_432.boolean(*var_433);
    }
    #[allow(unused_mut)]
    let mut scope_434 = writer.prefix("MonitoringInterval");
    if let Some(var_435) = &input.monitoring_interval {
        scope_434.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_435).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_436 = writer.prefix("MonitoringRoleArn");
    if let Some(var_437) = &input.monitoring_role_arn {
        scope_436.string(var_437);
    }
    #[allow(unused_mut)]
    let mut scope_438 = writer.prefix("KmsKeyId");
    if let Some(var_439) = &input.kms_key_id {
        scope_438.string(var_439);
    }
    #[allow(unused_mut)]
    let mut scope_440 = writer.prefix("PreSignedUrl");
    if let Some(var_441) = &input.pre_signed_url {
        scope_440.string(var_441);
    }
    #[allow(unused_mut)]
    let mut scope_442 = writer.prefix("EnableIAMDatabaseAuthentication");
    if let Some(var_443) = &input.enable_iam_database_authentication {
        scope_442.boolean(*var_443);
    }
    #[allow(unused_mut)]
    let mut scope_444 = writer.prefix("EnablePerformanceInsights");
    if let Some(var_445) = &input.enable_performance_insights {
        scope_444.boolean(*var_445);
    }
    #[allow(unused_mut)]
    let mut scope_446 = writer.prefix("PerformanceInsightsKMSKeyId");
    if let Some(var_447) = &input.performance_insights_kms_key_id {
        scope_446.string(var_447);
    }
    #[allow(unused_mut)]
    let mut scope_448 = writer.prefix("PerformanceInsightsRetentionPeriod");
    if let Some(var_449) = &input.performance_insights_retention_period {
        scope_448.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_449).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_450 = writer.prefix("EnableCloudwatchLogsExports");
    if let Some(var_451) = &input.enable_cloudwatch_logs_exports {
        let mut list_453 = scope_450.start_list(false, None);
        for item_452 in var_451 {
            #[allow(unused_mut)]
            let mut entry_454 = list_453.entry();
            entry_454.string(item_452);
        }
        list_453.finish();
    }
    #[allow(unused_mut)]
    let mut scope_455 = writer.prefix("ProcessorFeatures");
    if let Some(var_456) = &input.processor_features {
        let mut list_458 = scope_455.start_list(false, Some("ProcessorFeature"));
        for item_457 in var_456 {
            #[allow(unused_mut)]
            let mut entry_459 = list_458.entry();
            crate::query_ser::serialize_structure_crate_model_processor_feature(
                entry_459, item_457,
            )?;
        }
        list_458.finish();
    }
    #[allow(unused_mut)]
    let mut scope_460 = writer.prefix("UseDefaultProcessorFeatures");
    if let Some(var_461) = &input.use_default_processor_features {
        scope_460.boolean(*var_461);
    }
    #[allow(unused_mut)]
    let mut scope_462 = writer.prefix("DeletionProtection");
    if let Some(var_463) = &input.deletion_protection {
        scope_462.boolean(*var_463);
    }
    #[allow(unused_mut)]
    let mut scope_464 = writer.prefix("Domain");
    if let Some(var_465) = &input.domain {
        scope_464.string(var_465);
    }
    #[allow(unused_mut)]
    let mut scope_466 = writer.prefix("DomainIAMRoleName");
    if let Some(var_467) = &input.domain_iam_role_name {
        scope_466.string(var_467);
    }
    #[allow(unused_mut)]
    let mut scope_468 = writer.prefix("ReplicaMode");
    if let Some(var_469) = &input.replica_mode {
        scope_468.string(var_469.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_470 = writer.prefix("MaxAllocatedStorage");
    if let Some(var_471) = &input.max_allocated_storage {
        scope_470.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_471).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_472 = writer.prefix("CustomIamInstanceProfile");
    if let Some(var_473) = &input.custom_iam_instance_profile {
        scope_472.string(var_473);
    }
    #[allow(unused_mut)]
    let mut scope_474 = writer.prefix("NetworkType");
    if let Some(var_475) = &input.network_type {
        scope_474.string(var_475);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_db_parameter_group(
    input: &crate::input::CreateDbParameterGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateDBParameterGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_476 = writer.prefix("DBParameterGroupName");
    if let Some(var_477) = &input.db_parameter_group_name {
        scope_476.string(var_477);
    }
    #[allow(unused_mut)]
    let mut scope_478 = writer.prefix("DBParameterGroupFamily");
    if let Some(var_479) = &input.db_parameter_group_family {
        scope_478.string(var_479);
    }
    #[allow(unused_mut)]
    let mut scope_480 = writer.prefix("Description");
    if let Some(var_481) = &input.description {
        scope_480.string(var_481);
    }
    #[allow(unused_mut)]
    let mut scope_482 = writer.prefix("Tags");
    if let Some(var_483) = &input.tags {
        let mut list_485 = scope_482.start_list(false, Some("Tag"));
        for item_484 in var_483 {
            #[allow(unused_mut)]
            let mut entry_486 = list_485.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_486, item_484)?;
        }
        list_485.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_db_proxy(
    input: &crate::input::CreateDbProxyInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateDBProxy", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_487 = writer.prefix("DBProxyName");
    if let Some(var_488) = &input.db_proxy_name {
        scope_487.string(var_488);
    }
    #[allow(unused_mut)]
    let mut scope_489 = writer.prefix("EngineFamily");
    if let Some(var_490) = &input.engine_family {
        scope_489.string(var_490.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_491 = writer.prefix("Auth");
    if let Some(var_492) = &input.auth {
        let mut list_494 = scope_491.start_list(false, None);
        for item_493 in var_492 {
            #[allow(unused_mut)]
            let mut entry_495 = list_494.entry();
            crate::query_ser::serialize_structure_crate_model_user_auth_config(
                entry_495, item_493,
            )?;
        }
        list_494.finish();
    }
    #[allow(unused_mut)]
    let mut scope_496 = writer.prefix("RoleArn");
    if let Some(var_497) = &input.role_arn {
        scope_496.string(var_497);
    }
    #[allow(unused_mut)]
    let mut scope_498 = writer.prefix("VpcSubnetIds");
    if let Some(var_499) = &input.vpc_subnet_ids {
        let mut list_501 = scope_498.start_list(false, None);
        for item_500 in var_499 {
            #[allow(unused_mut)]
            let mut entry_502 = list_501.entry();
            entry_502.string(item_500);
        }
        list_501.finish();
    }
    #[allow(unused_mut)]
    let mut scope_503 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_504) = &input.vpc_security_group_ids {
        let mut list_506 = scope_503.start_list(false, None);
        for item_505 in var_504 {
            #[allow(unused_mut)]
            let mut entry_507 = list_506.entry();
            entry_507.string(item_505);
        }
        list_506.finish();
    }
    #[allow(unused_mut)]
    let mut scope_508 = writer.prefix("RequireTLS");
    if input.require_tls {
        scope_508.boolean(input.require_tls);
    }
    #[allow(unused_mut)]
    let mut scope_509 = writer.prefix("IdleClientTimeout");
    if let Some(var_510) = &input.idle_client_timeout {
        scope_509.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_510).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_511 = writer.prefix("DebugLogging");
    if input.debug_logging {
        scope_511.boolean(input.debug_logging);
    }
    #[allow(unused_mut)]
    let mut scope_512 = writer.prefix("Tags");
    if let Some(var_513) = &input.tags {
        let mut list_515 = scope_512.start_list(false, Some("Tag"));
        for item_514 in var_513 {
            #[allow(unused_mut)]
            let mut entry_516 = list_515.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_516, item_514)?;
        }
        list_515.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_db_proxy_endpoint(
    input: &crate::input::CreateDbProxyEndpointInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateDBProxyEndpoint", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_517 = writer.prefix("DBProxyName");
    if let Some(var_518) = &input.db_proxy_name {
        scope_517.string(var_518);
    }
    #[allow(unused_mut)]
    let mut scope_519 = writer.prefix("DBProxyEndpointName");
    if let Some(var_520) = &input.db_proxy_endpoint_name {
        scope_519.string(var_520);
    }
    #[allow(unused_mut)]
    let mut scope_521 = writer.prefix("VpcSubnetIds");
    if let Some(var_522) = &input.vpc_subnet_ids {
        let mut list_524 = scope_521.start_list(false, None);
        for item_523 in var_522 {
            #[allow(unused_mut)]
            let mut entry_525 = list_524.entry();
            entry_525.string(item_523);
        }
        list_524.finish();
    }
    #[allow(unused_mut)]
    let mut scope_526 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_527) = &input.vpc_security_group_ids {
        let mut list_529 = scope_526.start_list(false, None);
        for item_528 in var_527 {
            #[allow(unused_mut)]
            let mut entry_530 = list_529.entry();
            entry_530.string(item_528);
        }
        list_529.finish();
    }
    #[allow(unused_mut)]
    let mut scope_531 = writer.prefix("TargetRole");
    if let Some(var_532) = &input.target_role {
        scope_531.string(var_532.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_533 = writer.prefix("Tags");
    if let Some(var_534) = &input.tags {
        let mut list_536 = scope_533.start_list(false, Some("Tag"));
        for item_535 in var_534 {
            #[allow(unused_mut)]
            let mut entry_537 = list_536.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_537, item_535)?;
        }
        list_536.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_db_security_group(
    input: &crate::input::CreateDbSecurityGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateDBSecurityGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_538 = writer.prefix("DBSecurityGroupName");
    if let Some(var_539) = &input.db_security_group_name {
        scope_538.string(var_539);
    }
    #[allow(unused_mut)]
    let mut scope_540 = writer.prefix("DBSecurityGroupDescription");
    if let Some(var_541) = &input.db_security_group_description {
        scope_540.string(var_541);
    }
    #[allow(unused_mut)]
    let mut scope_542 = writer.prefix("Tags");
    if let Some(var_543) = &input.tags {
        let mut list_545 = scope_542.start_list(false, Some("Tag"));
        for item_544 in var_543 {
            #[allow(unused_mut)]
            let mut entry_546 = list_545.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_546, item_544)?;
        }
        list_545.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_db_snapshot(
    input: &crate::input::CreateDbSnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateDBSnapshot", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_547 = writer.prefix("DBSnapshotIdentifier");
    if let Some(var_548) = &input.db_snapshot_identifier {
        scope_547.string(var_548);
    }
    #[allow(unused_mut)]
    let mut scope_549 = writer.prefix("DBInstanceIdentifier");
    if let Some(var_550) = &input.db_instance_identifier {
        scope_549.string(var_550);
    }
    #[allow(unused_mut)]
    let mut scope_551 = writer.prefix("Tags");
    if let Some(var_552) = &input.tags {
        let mut list_554 = scope_551.start_list(false, Some("Tag"));
        for item_553 in var_552 {
            #[allow(unused_mut)]
            let mut entry_555 = list_554.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_555, item_553)?;
        }
        list_554.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_db_subnet_group(
    input: &crate::input::CreateDbSubnetGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateDBSubnetGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_556 = writer.prefix("DBSubnetGroupName");
    if let Some(var_557) = &input.db_subnet_group_name {
        scope_556.string(var_557);
    }
    #[allow(unused_mut)]
    let mut scope_558 = writer.prefix("DBSubnetGroupDescription");
    if let Some(var_559) = &input.db_subnet_group_description {
        scope_558.string(var_559);
    }
    #[allow(unused_mut)]
    let mut scope_560 = writer.prefix("SubnetIds");
    if let Some(var_561) = &input.subnet_ids {
        let mut list_563 = scope_560.start_list(false, Some("SubnetIdentifier"));
        for item_562 in var_561 {
            #[allow(unused_mut)]
            let mut entry_564 = list_563.entry();
            entry_564.string(item_562);
        }
        list_563.finish();
    }
    #[allow(unused_mut)]
    let mut scope_565 = writer.prefix("Tags");
    if let Some(var_566) = &input.tags {
        let mut list_568 = scope_565.start_list(false, Some("Tag"));
        for item_567 in var_566 {
            #[allow(unused_mut)]
            let mut entry_569 = list_568.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_569, item_567)?;
        }
        list_568.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_event_subscription(
    input: &crate::input::CreateEventSubscriptionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateEventSubscription", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_570 = writer.prefix("SubscriptionName");
    if let Some(var_571) = &input.subscription_name {
        scope_570.string(var_571);
    }
    #[allow(unused_mut)]
    let mut scope_572 = writer.prefix("SnsTopicArn");
    if let Some(var_573) = &input.sns_topic_arn {
        scope_572.string(var_573);
    }
    #[allow(unused_mut)]
    let mut scope_574 = writer.prefix("SourceType");
    if let Some(var_575) = &input.source_type {
        scope_574.string(var_575);
    }
    #[allow(unused_mut)]
    let mut scope_576 = writer.prefix("EventCategories");
    if let Some(var_577) = &input.event_categories {
        let mut list_579 = scope_576.start_list(false, Some("EventCategory"));
        for item_578 in var_577 {
            #[allow(unused_mut)]
            let mut entry_580 = list_579.entry();
            entry_580.string(item_578);
        }
        list_579.finish();
    }
    #[allow(unused_mut)]
    let mut scope_581 = writer.prefix("SourceIds");
    if let Some(var_582) = &input.source_ids {
        let mut list_584 = scope_581.start_list(false, Some("SourceId"));
        for item_583 in var_582 {
            #[allow(unused_mut)]
            let mut entry_585 = list_584.entry();
            entry_585.string(item_583);
        }
        list_584.finish();
    }
    #[allow(unused_mut)]
    let mut scope_586 = writer.prefix("Enabled");
    if let Some(var_587) = &input.enabled {
        scope_586.boolean(*var_587);
    }
    #[allow(unused_mut)]
    let mut scope_588 = writer.prefix("Tags");
    if let Some(var_589) = &input.tags {
        let mut list_591 = scope_588.start_list(false, Some("Tag"));
        for item_590 in var_589 {
            #[allow(unused_mut)]
            let mut entry_592 = list_591.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_592, item_590)?;
        }
        list_591.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_global_cluster(
    input: &crate::input::CreateGlobalClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateGlobalCluster", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_593 = writer.prefix("GlobalClusterIdentifier");
    if let Some(var_594) = &input.global_cluster_identifier {
        scope_593.string(var_594);
    }
    #[allow(unused_mut)]
    let mut scope_595 = writer.prefix("SourceDBClusterIdentifier");
    if let Some(var_596) = &input.source_db_cluster_identifier {
        scope_595.string(var_596);
    }
    #[allow(unused_mut)]
    let mut scope_597 = writer.prefix("Engine");
    if let Some(var_598) = &input.engine {
        scope_597.string(var_598);
    }
    #[allow(unused_mut)]
    let mut scope_599 = writer.prefix("EngineVersion");
    if let Some(var_600) = &input.engine_version {
        scope_599.string(var_600);
    }
    #[allow(unused_mut)]
    let mut scope_601 = writer.prefix("DeletionProtection");
    if let Some(var_602) = &input.deletion_protection {
        scope_601.boolean(*var_602);
    }
    #[allow(unused_mut)]
    let mut scope_603 = writer.prefix("DatabaseName");
    if let Some(var_604) = &input.database_name {
        scope_603.string(var_604);
    }
    #[allow(unused_mut)]
    let mut scope_605 = writer.prefix("StorageEncrypted");
    if let Some(var_606) = &input.storage_encrypted {
        scope_605.boolean(*var_606);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_option_group(
    input: &crate::input::CreateOptionGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateOptionGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_607 = writer.prefix("OptionGroupName");
    if let Some(var_608) = &input.option_group_name {
        scope_607.string(var_608);
    }
    #[allow(unused_mut)]
    let mut scope_609 = writer.prefix("EngineName");
    if let Some(var_610) = &input.engine_name {
        scope_609.string(var_610);
    }
    #[allow(unused_mut)]
    let mut scope_611 = writer.prefix("MajorEngineVersion");
    if let Some(var_612) = &input.major_engine_version {
        scope_611.string(var_612);
    }
    #[allow(unused_mut)]
    let mut scope_613 = writer.prefix("OptionGroupDescription");
    if let Some(var_614) = &input.option_group_description {
        scope_613.string(var_614);
    }
    #[allow(unused_mut)]
    let mut scope_615 = writer.prefix("Tags");
    if let Some(var_616) = &input.tags {
        let mut list_618 = scope_615.start_list(false, Some("Tag"));
        for item_617 in var_616 {
            #[allow(unused_mut)]
            let mut entry_619 = list_618.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_619, item_617)?;
        }
        list_618.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_custom_db_engine_version(
    input: &crate::input::DeleteCustomDbEngineVersionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteCustomDBEngineVersion", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_620 = writer.prefix("Engine");
    if let Some(var_621) = &input.engine {
        scope_620.string(var_621);
    }
    #[allow(unused_mut)]
    let mut scope_622 = writer.prefix("EngineVersion");
    if let Some(var_623) = &input.engine_version {
        scope_622.string(var_623);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_db_cluster(
    input: &crate::input::DeleteDbClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteDBCluster", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_624 = writer.prefix("DBClusterIdentifier");
    if let Some(var_625) = &input.db_cluster_identifier {
        scope_624.string(var_625);
    }
    #[allow(unused_mut)]
    let mut scope_626 = writer.prefix("SkipFinalSnapshot");
    if input.skip_final_snapshot {
        scope_626.boolean(input.skip_final_snapshot);
    }
    #[allow(unused_mut)]
    let mut scope_627 = writer.prefix("FinalDBSnapshotIdentifier");
    if let Some(var_628) = &input.final_db_snapshot_identifier {
        scope_627.string(var_628);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_db_cluster_endpoint(
    input: &crate::input::DeleteDbClusterEndpointInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteDBClusterEndpoint", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_629 = writer.prefix("DBClusterEndpointIdentifier");
    if let Some(var_630) = &input.db_cluster_endpoint_identifier {
        scope_629.string(var_630);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_db_cluster_parameter_group(
    input: &crate::input::DeleteDbClusterParameterGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteDBClusterParameterGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_631 = writer.prefix("DBClusterParameterGroupName");
    if let Some(var_632) = &input.db_cluster_parameter_group_name {
        scope_631.string(var_632);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_db_cluster_snapshot(
    input: &crate::input::DeleteDbClusterSnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteDBClusterSnapshot", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_633 = writer.prefix("DBClusterSnapshotIdentifier");
    if let Some(var_634) = &input.db_cluster_snapshot_identifier {
        scope_633.string(var_634);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_db_instance(
    input: &crate::input::DeleteDbInstanceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteDBInstance", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_635 = writer.prefix("DBInstanceIdentifier");
    if let Some(var_636) = &input.db_instance_identifier {
        scope_635.string(var_636);
    }
    #[allow(unused_mut)]
    let mut scope_637 = writer.prefix("SkipFinalSnapshot");
    if input.skip_final_snapshot {
        scope_637.boolean(input.skip_final_snapshot);
    }
    #[allow(unused_mut)]
    let mut scope_638 = writer.prefix("FinalDBSnapshotIdentifier");
    if let Some(var_639) = &input.final_db_snapshot_identifier {
        scope_638.string(var_639);
    }
    #[allow(unused_mut)]
    let mut scope_640 = writer.prefix("DeleteAutomatedBackups");
    if let Some(var_641) = &input.delete_automated_backups {
        scope_640.boolean(*var_641);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_db_instance_automated_backup(
    input: &crate::input::DeleteDbInstanceAutomatedBackupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteDBInstanceAutomatedBackup",
        "2014-10-31",
    );
    #[allow(unused_mut)]
    let mut scope_642 = writer.prefix("DbiResourceId");
    if let Some(var_643) = &input.dbi_resource_id {
        scope_642.string(var_643);
    }
    #[allow(unused_mut)]
    let mut scope_644 = writer.prefix("DBInstanceAutomatedBackupsArn");
    if let Some(var_645) = &input.db_instance_automated_backups_arn {
        scope_644.string(var_645);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_db_parameter_group(
    input: &crate::input::DeleteDbParameterGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteDBParameterGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_646 = writer.prefix("DBParameterGroupName");
    if let Some(var_647) = &input.db_parameter_group_name {
        scope_646.string(var_647);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_db_proxy(
    input: &crate::input::DeleteDbProxyInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteDBProxy", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_648 = writer.prefix("DBProxyName");
    if let Some(var_649) = &input.db_proxy_name {
        scope_648.string(var_649);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_db_proxy_endpoint(
    input: &crate::input::DeleteDbProxyEndpointInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteDBProxyEndpoint", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_650 = writer.prefix("DBProxyEndpointName");
    if let Some(var_651) = &input.db_proxy_endpoint_name {
        scope_650.string(var_651);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_db_security_group(
    input: &crate::input::DeleteDbSecurityGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteDBSecurityGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_652 = writer.prefix("DBSecurityGroupName");
    if let Some(var_653) = &input.db_security_group_name {
        scope_652.string(var_653);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_db_snapshot(
    input: &crate::input::DeleteDbSnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteDBSnapshot", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_654 = writer.prefix("DBSnapshotIdentifier");
    if let Some(var_655) = &input.db_snapshot_identifier {
        scope_654.string(var_655);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_db_subnet_group(
    input: &crate::input::DeleteDbSubnetGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteDBSubnetGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_656 = writer.prefix("DBSubnetGroupName");
    if let Some(var_657) = &input.db_subnet_group_name {
        scope_656.string(var_657);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_event_subscription(
    input: &crate::input::DeleteEventSubscriptionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteEventSubscription", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_658 = writer.prefix("SubscriptionName");
    if let Some(var_659) = &input.subscription_name {
        scope_658.string(var_659);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_global_cluster(
    input: &crate::input::DeleteGlobalClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteGlobalCluster", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_660 = writer.prefix("GlobalClusterIdentifier");
    if let Some(var_661) = &input.global_cluster_identifier {
        scope_660.string(var_661);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_option_group(
    input: &crate::input::DeleteOptionGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteOptionGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_662 = writer.prefix("OptionGroupName");
    if let Some(var_663) = &input.option_group_name {
        scope_662.string(var_663);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deregister_db_proxy_targets(
    input: &crate::input::DeregisterDbProxyTargetsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeregisterDBProxyTargets", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_664 = writer.prefix("DBProxyName");
    if let Some(var_665) = &input.db_proxy_name {
        scope_664.string(var_665);
    }
    #[allow(unused_mut)]
    let mut scope_666 = writer.prefix("TargetGroupName");
    if let Some(var_667) = &input.target_group_name {
        scope_666.string(var_667);
    }
    #[allow(unused_mut)]
    let mut scope_668 = writer.prefix("DBInstanceIdentifiers");
    if let Some(var_669) = &input.db_instance_identifiers {
        let mut list_671 = scope_668.start_list(false, None);
        for item_670 in var_669 {
            #[allow(unused_mut)]
            let mut entry_672 = list_671.entry();
            entry_672.string(item_670);
        }
        list_671.finish();
    }
    #[allow(unused_mut)]
    let mut scope_673 = writer.prefix("DBClusterIdentifiers");
    if let Some(var_674) = &input.db_cluster_identifiers {
        let mut list_676 = scope_673.start_list(false, None);
        for item_675 in var_674 {
            #[allow(unused_mut)]
            let mut entry_677 = list_676.entry();
            entry_677.string(item_675);
        }
        list_676.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_account_attributes(
    input: &crate::input::DescribeAccountAttributesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let _ = input;
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeAccountAttributes", "2014-10-31");
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_certificates(
    input: &crate::input::DescribeCertificatesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeCertificates", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_678 = writer.prefix("CertificateIdentifier");
    if let Some(var_679) = &input.certificate_identifier {
        scope_678.string(var_679);
    }
    #[allow(unused_mut)]
    let mut scope_680 = writer.prefix("Filters");
    if let Some(var_681) = &input.filters {
        let mut list_683 = scope_680.start_list(false, Some("Filter"));
        for item_682 in var_681 {
            #[allow(unused_mut)]
            let mut entry_684 = list_683.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_684, item_682)?;
        }
        list_683.finish();
    }
    #[allow(unused_mut)]
    let mut scope_685 = writer.prefix("MaxRecords");
    if let Some(var_686) = &input.max_records {
        scope_685.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_686).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_687 = writer.prefix("Marker");
    if let Some(var_688) = &input.marker {
        scope_687.string(var_688);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_cluster_backtracks(
    input: &crate::input::DescribeDbClusterBacktracksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeDBClusterBacktracks", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_689 = writer.prefix("DBClusterIdentifier");
    if let Some(var_690) = &input.db_cluster_identifier {
        scope_689.string(var_690);
    }
    #[allow(unused_mut)]
    let mut scope_691 = writer.prefix("BacktrackIdentifier");
    if let Some(var_692) = &input.backtrack_identifier {
        scope_691.string(var_692);
    }
    #[allow(unused_mut)]
    let mut scope_693 = writer.prefix("Filters");
    if let Some(var_694) = &input.filters {
        let mut list_696 = scope_693.start_list(false, Some("Filter"));
        for item_695 in var_694 {
            #[allow(unused_mut)]
            let mut entry_697 = list_696.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_697, item_695)?;
        }
        list_696.finish();
    }
    #[allow(unused_mut)]
    let mut scope_698 = writer.prefix("MaxRecords");
    if let Some(var_699) = &input.max_records {
        scope_698.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_699).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_700 = writer.prefix("Marker");
    if let Some(var_701) = &input.marker {
        scope_700.string(var_701);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_cluster_endpoints(
    input: &crate::input::DescribeDbClusterEndpointsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeDBClusterEndpoints", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_702 = writer.prefix("DBClusterIdentifier");
    if let Some(var_703) = &input.db_cluster_identifier {
        scope_702.string(var_703);
    }
    #[allow(unused_mut)]
    let mut scope_704 = writer.prefix("DBClusterEndpointIdentifier");
    if let Some(var_705) = &input.db_cluster_endpoint_identifier {
        scope_704.string(var_705);
    }
    #[allow(unused_mut)]
    let mut scope_706 = writer.prefix("Filters");
    if let Some(var_707) = &input.filters {
        let mut list_709 = scope_706.start_list(false, Some("Filter"));
        for item_708 in var_707 {
            #[allow(unused_mut)]
            let mut entry_710 = list_709.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_710, item_708)?;
        }
        list_709.finish();
    }
    #[allow(unused_mut)]
    let mut scope_711 = writer.prefix("MaxRecords");
    if let Some(var_712) = &input.max_records {
        scope_711.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_712).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_713 = writer.prefix("Marker");
    if let Some(var_714) = &input.marker {
        scope_713.string(var_714);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_cluster_parameter_groups(
    input: &crate::input::DescribeDbClusterParameterGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeDBClusterParameterGroups",
        "2014-10-31",
    );
    #[allow(unused_mut)]
    let mut scope_715 = writer.prefix("DBClusterParameterGroupName");
    if let Some(var_716) = &input.db_cluster_parameter_group_name {
        scope_715.string(var_716);
    }
    #[allow(unused_mut)]
    let mut scope_717 = writer.prefix("Filters");
    if let Some(var_718) = &input.filters {
        let mut list_720 = scope_717.start_list(false, Some("Filter"));
        for item_719 in var_718 {
            #[allow(unused_mut)]
            let mut entry_721 = list_720.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_721, item_719)?;
        }
        list_720.finish();
    }
    #[allow(unused_mut)]
    let mut scope_722 = writer.prefix("MaxRecords");
    if let Some(var_723) = &input.max_records {
        scope_722.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_723).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_724 = writer.prefix("Marker");
    if let Some(var_725) = &input.marker {
        scope_724.string(var_725);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_cluster_parameters(
    input: &crate::input::DescribeDbClusterParametersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeDBClusterParameters", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_726 = writer.prefix("DBClusterParameterGroupName");
    if let Some(var_727) = &input.db_cluster_parameter_group_name {
        scope_726.string(var_727);
    }
    #[allow(unused_mut)]
    let mut scope_728 = writer.prefix("Source");
    if let Some(var_729) = &input.source {
        scope_728.string(var_729);
    }
    #[allow(unused_mut)]
    let mut scope_730 = writer.prefix("Filters");
    if let Some(var_731) = &input.filters {
        let mut list_733 = scope_730.start_list(false, Some("Filter"));
        for item_732 in var_731 {
            #[allow(unused_mut)]
            let mut entry_734 = list_733.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_734, item_732)?;
        }
        list_733.finish();
    }
    #[allow(unused_mut)]
    let mut scope_735 = writer.prefix("MaxRecords");
    if let Some(var_736) = &input.max_records {
        scope_735.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_736).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_737 = writer.prefix("Marker");
    if let Some(var_738) = &input.marker {
        scope_737.string(var_738);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_clusters(
    input: &crate::input::DescribeDbClustersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeDBClusters", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_739 = writer.prefix("DBClusterIdentifier");
    if let Some(var_740) = &input.db_cluster_identifier {
        scope_739.string(var_740);
    }
    #[allow(unused_mut)]
    let mut scope_741 = writer.prefix("Filters");
    if let Some(var_742) = &input.filters {
        let mut list_744 = scope_741.start_list(false, Some("Filter"));
        for item_743 in var_742 {
            #[allow(unused_mut)]
            let mut entry_745 = list_744.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_745, item_743)?;
        }
        list_744.finish();
    }
    #[allow(unused_mut)]
    let mut scope_746 = writer.prefix("MaxRecords");
    if let Some(var_747) = &input.max_records {
        scope_746.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_747).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_748 = writer.prefix("Marker");
    if let Some(var_749) = &input.marker {
        scope_748.string(var_749);
    }
    #[allow(unused_mut)]
    let mut scope_750 = writer.prefix("IncludeShared");
    if input.include_shared {
        scope_750.boolean(input.include_shared);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_cluster_snapshot_attributes(
    input: &crate::input::DescribeDbClusterSnapshotAttributesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeDBClusterSnapshotAttributes",
        "2014-10-31",
    );
    #[allow(unused_mut)]
    let mut scope_751 = writer.prefix("DBClusterSnapshotIdentifier");
    if let Some(var_752) = &input.db_cluster_snapshot_identifier {
        scope_751.string(var_752);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_cluster_snapshots(
    input: &crate::input::DescribeDbClusterSnapshotsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeDBClusterSnapshots", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_753 = writer.prefix("DBClusterIdentifier");
    if let Some(var_754) = &input.db_cluster_identifier {
        scope_753.string(var_754);
    }
    #[allow(unused_mut)]
    let mut scope_755 = writer.prefix("DBClusterSnapshotIdentifier");
    if let Some(var_756) = &input.db_cluster_snapshot_identifier {
        scope_755.string(var_756);
    }
    #[allow(unused_mut)]
    let mut scope_757 = writer.prefix("SnapshotType");
    if let Some(var_758) = &input.snapshot_type {
        scope_757.string(var_758);
    }
    #[allow(unused_mut)]
    let mut scope_759 = writer.prefix("Filters");
    if let Some(var_760) = &input.filters {
        let mut list_762 = scope_759.start_list(false, Some("Filter"));
        for item_761 in var_760 {
            #[allow(unused_mut)]
            let mut entry_763 = list_762.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_763, item_761)?;
        }
        list_762.finish();
    }
    #[allow(unused_mut)]
    let mut scope_764 = writer.prefix("MaxRecords");
    if let Some(var_765) = &input.max_records {
        scope_764.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_765).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_766 = writer.prefix("Marker");
    if let Some(var_767) = &input.marker {
        scope_766.string(var_767);
    }
    #[allow(unused_mut)]
    let mut scope_768 = writer.prefix("IncludeShared");
    if input.include_shared {
        scope_768.boolean(input.include_shared);
    }
    #[allow(unused_mut)]
    let mut scope_769 = writer.prefix("IncludePublic");
    if input.include_public {
        scope_769.boolean(input.include_public);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_engine_versions(
    input: &crate::input::DescribeDbEngineVersionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeDBEngineVersions", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_770 = writer.prefix("Engine");
    if let Some(var_771) = &input.engine {
        scope_770.string(var_771);
    }
    #[allow(unused_mut)]
    let mut scope_772 = writer.prefix("EngineVersion");
    if let Some(var_773) = &input.engine_version {
        scope_772.string(var_773);
    }
    #[allow(unused_mut)]
    let mut scope_774 = writer.prefix("DBParameterGroupFamily");
    if let Some(var_775) = &input.db_parameter_group_family {
        scope_774.string(var_775);
    }
    #[allow(unused_mut)]
    let mut scope_776 = writer.prefix("Filters");
    if let Some(var_777) = &input.filters {
        let mut list_779 = scope_776.start_list(false, Some("Filter"));
        for item_778 in var_777 {
            #[allow(unused_mut)]
            let mut entry_780 = list_779.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_780, item_778)?;
        }
        list_779.finish();
    }
    #[allow(unused_mut)]
    let mut scope_781 = writer.prefix("MaxRecords");
    if let Some(var_782) = &input.max_records {
        scope_781.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_782).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_783 = writer.prefix("Marker");
    if let Some(var_784) = &input.marker {
        scope_783.string(var_784);
    }
    #[allow(unused_mut)]
    let mut scope_785 = writer.prefix("DefaultOnly");
    if input.default_only {
        scope_785.boolean(input.default_only);
    }
    #[allow(unused_mut)]
    let mut scope_786 = writer.prefix("ListSupportedCharacterSets");
    if let Some(var_787) = &input.list_supported_character_sets {
        scope_786.boolean(*var_787);
    }
    #[allow(unused_mut)]
    let mut scope_788 = writer.prefix("ListSupportedTimezones");
    if let Some(var_789) = &input.list_supported_timezones {
        scope_788.boolean(*var_789);
    }
    #[allow(unused_mut)]
    let mut scope_790 = writer.prefix("IncludeAll");
    if let Some(var_791) = &input.include_all {
        scope_790.boolean(*var_791);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_instance_automated_backups(
    input: &crate::input::DescribeDbInstanceAutomatedBackupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeDBInstanceAutomatedBackups",
        "2014-10-31",
    );
    #[allow(unused_mut)]
    let mut scope_792 = writer.prefix("DbiResourceId");
    if let Some(var_793) = &input.dbi_resource_id {
        scope_792.string(var_793);
    }
    #[allow(unused_mut)]
    let mut scope_794 = writer.prefix("DBInstanceIdentifier");
    if let Some(var_795) = &input.db_instance_identifier {
        scope_794.string(var_795);
    }
    #[allow(unused_mut)]
    let mut scope_796 = writer.prefix("Filters");
    if let Some(var_797) = &input.filters {
        let mut list_799 = scope_796.start_list(false, Some("Filter"));
        for item_798 in var_797 {
            #[allow(unused_mut)]
            let mut entry_800 = list_799.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_800, item_798)?;
        }
        list_799.finish();
    }
    #[allow(unused_mut)]
    let mut scope_801 = writer.prefix("MaxRecords");
    if let Some(var_802) = &input.max_records {
        scope_801.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_802).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_803 = writer.prefix("Marker");
    if let Some(var_804) = &input.marker {
        scope_803.string(var_804);
    }
    #[allow(unused_mut)]
    let mut scope_805 = writer.prefix("DBInstanceAutomatedBackupsArn");
    if let Some(var_806) = &input.db_instance_automated_backups_arn {
        scope_805.string(var_806);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_instances(
    input: &crate::input::DescribeDbInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeDBInstances", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_807 = writer.prefix("DBInstanceIdentifier");
    if let Some(var_808) = &input.db_instance_identifier {
        scope_807.string(var_808);
    }
    #[allow(unused_mut)]
    let mut scope_809 = writer.prefix("Filters");
    if let Some(var_810) = &input.filters {
        let mut list_812 = scope_809.start_list(false, Some("Filter"));
        for item_811 in var_810 {
            #[allow(unused_mut)]
            let mut entry_813 = list_812.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_813, item_811)?;
        }
        list_812.finish();
    }
    #[allow(unused_mut)]
    let mut scope_814 = writer.prefix("MaxRecords");
    if let Some(var_815) = &input.max_records {
        scope_814.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_815).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_816 = writer.prefix("Marker");
    if let Some(var_817) = &input.marker {
        scope_816.string(var_817);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_log_files(
    input: &crate::input::DescribeDbLogFilesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeDBLogFiles", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_818 = writer.prefix("DBInstanceIdentifier");
    if let Some(var_819) = &input.db_instance_identifier {
        scope_818.string(var_819);
    }
    #[allow(unused_mut)]
    let mut scope_820 = writer.prefix("FilenameContains");
    if let Some(var_821) = &input.filename_contains {
        scope_820.string(var_821);
    }
    #[allow(unused_mut)]
    let mut scope_822 = writer.prefix("FileLastWritten");
    if input.file_last_written != 0 {
        scope_822.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.file_last_written).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_823 = writer.prefix("FileSize");
    if input.file_size != 0 {
        scope_823.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.file_size).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_824 = writer.prefix("Filters");
    if let Some(var_825) = &input.filters {
        let mut list_827 = scope_824.start_list(false, Some("Filter"));
        for item_826 in var_825 {
            #[allow(unused_mut)]
            let mut entry_828 = list_827.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_828, item_826)?;
        }
        list_827.finish();
    }
    #[allow(unused_mut)]
    let mut scope_829 = writer.prefix("MaxRecords");
    if let Some(var_830) = &input.max_records {
        scope_829.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_830).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_831 = writer.prefix("Marker");
    if let Some(var_832) = &input.marker {
        scope_831.string(var_832);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_parameter_groups(
    input: &crate::input::DescribeDbParameterGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeDBParameterGroups", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_833 = writer.prefix("DBParameterGroupName");
    if let Some(var_834) = &input.db_parameter_group_name {
        scope_833.string(var_834);
    }
    #[allow(unused_mut)]
    let mut scope_835 = writer.prefix("Filters");
    if let Some(var_836) = &input.filters {
        let mut list_838 = scope_835.start_list(false, Some("Filter"));
        for item_837 in var_836 {
            #[allow(unused_mut)]
            let mut entry_839 = list_838.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_839, item_837)?;
        }
        list_838.finish();
    }
    #[allow(unused_mut)]
    let mut scope_840 = writer.prefix("MaxRecords");
    if let Some(var_841) = &input.max_records {
        scope_840.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_841).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_842 = writer.prefix("Marker");
    if let Some(var_843) = &input.marker {
        scope_842.string(var_843);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_parameters(
    input: &crate::input::DescribeDbParametersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeDBParameters", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_844 = writer.prefix("DBParameterGroupName");
    if let Some(var_845) = &input.db_parameter_group_name {
        scope_844.string(var_845);
    }
    #[allow(unused_mut)]
    let mut scope_846 = writer.prefix("Source");
    if let Some(var_847) = &input.source {
        scope_846.string(var_847);
    }
    #[allow(unused_mut)]
    let mut scope_848 = writer.prefix("Filters");
    if let Some(var_849) = &input.filters {
        let mut list_851 = scope_848.start_list(false, Some("Filter"));
        for item_850 in var_849 {
            #[allow(unused_mut)]
            let mut entry_852 = list_851.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_852, item_850)?;
        }
        list_851.finish();
    }
    #[allow(unused_mut)]
    let mut scope_853 = writer.prefix("MaxRecords");
    if let Some(var_854) = &input.max_records {
        scope_853.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_854).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_855 = writer.prefix("Marker");
    if let Some(var_856) = &input.marker {
        scope_855.string(var_856);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_proxies(
    input: &crate::input::DescribeDbProxiesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeDBProxies", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_857 = writer.prefix("DBProxyName");
    if let Some(var_858) = &input.db_proxy_name {
        scope_857.string(var_858);
    }
    #[allow(unused_mut)]
    let mut scope_859 = writer.prefix("Filters");
    if let Some(var_860) = &input.filters {
        let mut list_862 = scope_859.start_list(false, Some("Filter"));
        for item_861 in var_860 {
            #[allow(unused_mut)]
            let mut entry_863 = list_862.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_863, item_861)?;
        }
        list_862.finish();
    }
    #[allow(unused_mut)]
    let mut scope_864 = writer.prefix("Marker");
    if let Some(var_865) = &input.marker {
        scope_864.string(var_865);
    }
    #[allow(unused_mut)]
    let mut scope_866 = writer.prefix("MaxRecords");
    if let Some(var_867) = &input.max_records {
        scope_866.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_867).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_proxy_endpoints(
    input: &crate::input::DescribeDbProxyEndpointsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeDBProxyEndpoints", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_868 = writer.prefix("DBProxyName");
    if let Some(var_869) = &input.db_proxy_name {
        scope_868.string(var_869);
    }
    #[allow(unused_mut)]
    let mut scope_870 = writer.prefix("DBProxyEndpointName");
    if let Some(var_871) = &input.db_proxy_endpoint_name {
        scope_870.string(var_871);
    }
    #[allow(unused_mut)]
    let mut scope_872 = writer.prefix("Filters");
    if let Some(var_873) = &input.filters {
        let mut list_875 = scope_872.start_list(false, Some("Filter"));
        for item_874 in var_873 {
            #[allow(unused_mut)]
            let mut entry_876 = list_875.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_876, item_874)?;
        }
        list_875.finish();
    }
    #[allow(unused_mut)]
    let mut scope_877 = writer.prefix("Marker");
    if let Some(var_878) = &input.marker {
        scope_877.string(var_878);
    }
    #[allow(unused_mut)]
    let mut scope_879 = writer.prefix("MaxRecords");
    if let Some(var_880) = &input.max_records {
        scope_879.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_880).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_proxy_target_groups(
    input: &crate::input::DescribeDbProxyTargetGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeDBProxyTargetGroups", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_881 = writer.prefix("DBProxyName");
    if let Some(var_882) = &input.db_proxy_name {
        scope_881.string(var_882);
    }
    #[allow(unused_mut)]
    let mut scope_883 = writer.prefix("TargetGroupName");
    if let Some(var_884) = &input.target_group_name {
        scope_883.string(var_884);
    }
    #[allow(unused_mut)]
    let mut scope_885 = writer.prefix("Filters");
    if let Some(var_886) = &input.filters {
        let mut list_888 = scope_885.start_list(false, Some("Filter"));
        for item_887 in var_886 {
            #[allow(unused_mut)]
            let mut entry_889 = list_888.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_889, item_887)?;
        }
        list_888.finish();
    }
    #[allow(unused_mut)]
    let mut scope_890 = writer.prefix("Marker");
    if let Some(var_891) = &input.marker {
        scope_890.string(var_891);
    }
    #[allow(unused_mut)]
    let mut scope_892 = writer.prefix("MaxRecords");
    if let Some(var_893) = &input.max_records {
        scope_892.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_893).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_proxy_targets(
    input: &crate::input::DescribeDbProxyTargetsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeDBProxyTargets", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_894 = writer.prefix("DBProxyName");
    if let Some(var_895) = &input.db_proxy_name {
        scope_894.string(var_895);
    }
    #[allow(unused_mut)]
    let mut scope_896 = writer.prefix("TargetGroupName");
    if let Some(var_897) = &input.target_group_name {
        scope_896.string(var_897);
    }
    #[allow(unused_mut)]
    let mut scope_898 = writer.prefix("Filters");
    if let Some(var_899) = &input.filters {
        let mut list_901 = scope_898.start_list(false, Some("Filter"));
        for item_900 in var_899 {
            #[allow(unused_mut)]
            let mut entry_902 = list_901.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_902, item_900)?;
        }
        list_901.finish();
    }
    #[allow(unused_mut)]
    let mut scope_903 = writer.prefix("Marker");
    if let Some(var_904) = &input.marker {
        scope_903.string(var_904);
    }
    #[allow(unused_mut)]
    let mut scope_905 = writer.prefix("MaxRecords");
    if let Some(var_906) = &input.max_records {
        scope_905.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_906).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_security_groups(
    input: &crate::input::DescribeDbSecurityGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeDBSecurityGroups", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_907 = writer.prefix("DBSecurityGroupName");
    if let Some(var_908) = &input.db_security_group_name {
        scope_907.string(var_908);
    }
    #[allow(unused_mut)]
    let mut scope_909 = writer.prefix("Filters");
    if let Some(var_910) = &input.filters {
        let mut list_912 = scope_909.start_list(false, Some("Filter"));
        for item_911 in var_910 {
            #[allow(unused_mut)]
            let mut entry_913 = list_912.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_913, item_911)?;
        }
        list_912.finish();
    }
    #[allow(unused_mut)]
    let mut scope_914 = writer.prefix("MaxRecords");
    if let Some(var_915) = &input.max_records {
        scope_914.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_915).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_916 = writer.prefix("Marker");
    if let Some(var_917) = &input.marker {
        scope_916.string(var_917);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_snapshot_attributes(
    input: &crate::input::DescribeDbSnapshotAttributesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeDBSnapshotAttributes", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_918 = writer.prefix("DBSnapshotIdentifier");
    if let Some(var_919) = &input.db_snapshot_identifier {
        scope_918.string(var_919);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_snapshots(
    input: &crate::input::DescribeDbSnapshotsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeDBSnapshots", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_920 = writer.prefix("DBInstanceIdentifier");
    if let Some(var_921) = &input.db_instance_identifier {
        scope_920.string(var_921);
    }
    #[allow(unused_mut)]
    let mut scope_922 = writer.prefix("DBSnapshotIdentifier");
    if let Some(var_923) = &input.db_snapshot_identifier {
        scope_922.string(var_923);
    }
    #[allow(unused_mut)]
    let mut scope_924 = writer.prefix("SnapshotType");
    if let Some(var_925) = &input.snapshot_type {
        scope_924.string(var_925);
    }
    #[allow(unused_mut)]
    let mut scope_926 = writer.prefix("Filters");
    if let Some(var_927) = &input.filters {
        let mut list_929 = scope_926.start_list(false, Some("Filter"));
        for item_928 in var_927 {
            #[allow(unused_mut)]
            let mut entry_930 = list_929.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_930, item_928)?;
        }
        list_929.finish();
    }
    #[allow(unused_mut)]
    let mut scope_931 = writer.prefix("MaxRecords");
    if let Some(var_932) = &input.max_records {
        scope_931.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_932).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_933 = writer.prefix("Marker");
    if let Some(var_934) = &input.marker {
        scope_933.string(var_934);
    }
    #[allow(unused_mut)]
    let mut scope_935 = writer.prefix("IncludeShared");
    if input.include_shared {
        scope_935.boolean(input.include_shared);
    }
    #[allow(unused_mut)]
    let mut scope_936 = writer.prefix("IncludePublic");
    if input.include_public {
        scope_936.boolean(input.include_public);
    }
    #[allow(unused_mut)]
    let mut scope_937 = writer.prefix("DbiResourceId");
    if let Some(var_938) = &input.dbi_resource_id {
        scope_937.string(var_938);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_subnet_groups(
    input: &crate::input::DescribeDbSubnetGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeDBSubnetGroups", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_939 = writer.prefix("DBSubnetGroupName");
    if let Some(var_940) = &input.db_subnet_group_name {
        scope_939.string(var_940);
    }
    #[allow(unused_mut)]
    let mut scope_941 = writer.prefix("Filters");
    if let Some(var_942) = &input.filters {
        let mut list_944 = scope_941.start_list(false, Some("Filter"));
        for item_943 in var_942 {
            #[allow(unused_mut)]
            let mut entry_945 = list_944.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_945, item_943)?;
        }
        list_944.finish();
    }
    #[allow(unused_mut)]
    let mut scope_946 = writer.prefix("MaxRecords");
    if let Some(var_947) = &input.max_records {
        scope_946.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_947).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_948 = writer.prefix("Marker");
    if let Some(var_949) = &input.marker {
        scope_948.string(var_949);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_engine_default_cluster_parameters(
    input: &crate::input::DescribeEngineDefaultClusterParametersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeEngineDefaultClusterParameters",
        "2014-10-31",
    );
    #[allow(unused_mut)]
    let mut scope_950 = writer.prefix("DBParameterGroupFamily");
    if let Some(var_951) = &input.db_parameter_group_family {
        scope_950.string(var_951);
    }
    #[allow(unused_mut)]
    let mut scope_952 = writer.prefix("Filters");
    if let Some(var_953) = &input.filters {
        let mut list_955 = scope_952.start_list(false, Some("Filter"));
        for item_954 in var_953 {
            #[allow(unused_mut)]
            let mut entry_956 = list_955.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_956, item_954)?;
        }
        list_955.finish();
    }
    #[allow(unused_mut)]
    let mut scope_957 = writer.prefix("MaxRecords");
    if let Some(var_958) = &input.max_records {
        scope_957.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_958).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_959 = writer.prefix("Marker");
    if let Some(var_960) = &input.marker {
        scope_959.string(var_960);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_engine_default_parameters(
    input: &crate::input::DescribeEngineDefaultParametersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeEngineDefaultParameters",
        "2014-10-31",
    );
    #[allow(unused_mut)]
    let mut scope_961 = writer.prefix("DBParameterGroupFamily");
    if let Some(var_962) = &input.db_parameter_group_family {
        scope_961.string(var_962);
    }
    #[allow(unused_mut)]
    let mut scope_963 = writer.prefix("Filters");
    if let Some(var_964) = &input.filters {
        let mut list_966 = scope_963.start_list(false, Some("Filter"));
        for item_965 in var_964 {
            #[allow(unused_mut)]
            let mut entry_967 = list_966.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_967, item_965)?;
        }
        list_966.finish();
    }
    #[allow(unused_mut)]
    let mut scope_968 = writer.prefix("MaxRecords");
    if let Some(var_969) = &input.max_records {
        scope_968.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_969).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_970 = writer.prefix("Marker");
    if let Some(var_971) = &input.marker {
        scope_970.string(var_971);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_event_categories(
    input: &crate::input::DescribeEventCategoriesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeEventCategories", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_972 = writer.prefix("SourceType");
    if let Some(var_973) = &input.source_type {
        scope_972.string(var_973);
    }
    #[allow(unused_mut)]
    let mut scope_974 = writer.prefix("Filters");
    if let Some(var_975) = &input.filters {
        let mut list_977 = scope_974.start_list(false, Some("Filter"));
        for item_976 in var_975 {
            #[allow(unused_mut)]
            let mut entry_978 = list_977.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_978, item_976)?;
        }
        list_977.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_events(
    input: &crate::input::DescribeEventsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeEvents", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_979 = writer.prefix("SourceIdentifier");
    if let Some(var_980) = &input.source_identifier {
        scope_979.string(var_980);
    }
    #[allow(unused_mut)]
    let mut scope_981 = writer.prefix("SourceType");
    if let Some(var_982) = &input.source_type {
        scope_981.string(var_982.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_983 = writer.prefix("StartTime");
    if let Some(var_984) = &input.start_time {
        scope_983.date_time(var_984, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_985 = writer.prefix("EndTime");
    if let Some(var_986) = &input.end_time {
        scope_985.date_time(var_986, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_987 = writer.prefix("Duration");
    if let Some(var_988) = &input.duration {
        scope_987.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_988).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_989 = writer.prefix("EventCategories");
    if let Some(var_990) = &input.event_categories {
        let mut list_992 = scope_989.start_list(false, Some("EventCategory"));
        for item_991 in var_990 {
            #[allow(unused_mut)]
            let mut entry_993 = list_992.entry();
            entry_993.string(item_991);
        }
        list_992.finish();
    }
    #[allow(unused_mut)]
    let mut scope_994 = writer.prefix("Filters");
    if let Some(var_995) = &input.filters {
        let mut list_997 = scope_994.start_list(false, Some("Filter"));
        for item_996 in var_995 {
            #[allow(unused_mut)]
            let mut entry_998 = list_997.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_998, item_996)?;
        }
        list_997.finish();
    }
    #[allow(unused_mut)]
    let mut scope_999 = writer.prefix("MaxRecords");
    if let Some(var_1000) = &input.max_records {
        scope_999.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1000).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1001 = writer.prefix("Marker");
    if let Some(var_1002) = &input.marker {
        scope_1001.string(var_1002);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_event_subscriptions(
    input: &crate::input::DescribeEventSubscriptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeEventSubscriptions", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1003 = writer.prefix("SubscriptionName");
    if let Some(var_1004) = &input.subscription_name {
        scope_1003.string(var_1004);
    }
    #[allow(unused_mut)]
    let mut scope_1005 = writer.prefix("Filters");
    if let Some(var_1006) = &input.filters {
        let mut list_1008 = scope_1005.start_list(false, Some("Filter"));
        for item_1007 in var_1006 {
            #[allow(unused_mut)]
            let mut entry_1009 = list_1008.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_1009, item_1007)?;
        }
        list_1008.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1010 = writer.prefix("MaxRecords");
    if let Some(var_1011) = &input.max_records {
        scope_1010.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1011).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1012 = writer.prefix("Marker");
    if let Some(var_1013) = &input.marker {
        scope_1012.string(var_1013);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_export_tasks(
    input: &crate::input::DescribeExportTasksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeExportTasks", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1014 = writer.prefix("ExportTaskIdentifier");
    if let Some(var_1015) = &input.export_task_identifier {
        scope_1014.string(var_1015);
    }
    #[allow(unused_mut)]
    let mut scope_1016 = writer.prefix("SourceArn");
    if let Some(var_1017) = &input.source_arn {
        scope_1016.string(var_1017);
    }
    #[allow(unused_mut)]
    let mut scope_1018 = writer.prefix("Filters");
    if let Some(var_1019) = &input.filters {
        let mut list_1021 = scope_1018.start_list(false, Some("Filter"));
        for item_1020 in var_1019 {
            #[allow(unused_mut)]
            let mut entry_1022 = list_1021.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_1022, item_1020)?;
        }
        list_1021.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1023 = writer.prefix("Marker");
    if let Some(var_1024) = &input.marker {
        scope_1023.string(var_1024);
    }
    #[allow(unused_mut)]
    let mut scope_1025 = writer.prefix("MaxRecords");
    if let Some(var_1026) = &input.max_records {
        scope_1025.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1026).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_global_clusters(
    input: &crate::input::DescribeGlobalClustersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeGlobalClusters", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1027 = writer.prefix("GlobalClusterIdentifier");
    if let Some(var_1028) = &input.global_cluster_identifier {
        scope_1027.string(var_1028);
    }
    #[allow(unused_mut)]
    let mut scope_1029 = writer.prefix("Filters");
    if let Some(var_1030) = &input.filters {
        let mut list_1032 = scope_1029.start_list(false, Some("Filter"));
        for item_1031 in var_1030 {
            #[allow(unused_mut)]
            let mut entry_1033 = list_1032.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_1033, item_1031)?;
        }
        list_1032.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1034 = writer.prefix("MaxRecords");
    if let Some(var_1035) = &input.max_records {
        scope_1034.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1035).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1036 = writer.prefix("Marker");
    if let Some(var_1037) = &input.marker {
        scope_1036.string(var_1037);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_option_group_options(
    input: &crate::input::DescribeOptionGroupOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeOptionGroupOptions", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1038 = writer.prefix("EngineName");
    if let Some(var_1039) = &input.engine_name {
        scope_1038.string(var_1039);
    }
    #[allow(unused_mut)]
    let mut scope_1040 = writer.prefix("MajorEngineVersion");
    if let Some(var_1041) = &input.major_engine_version {
        scope_1040.string(var_1041);
    }
    #[allow(unused_mut)]
    let mut scope_1042 = writer.prefix("Filters");
    if let Some(var_1043) = &input.filters {
        let mut list_1045 = scope_1042.start_list(false, Some("Filter"));
        for item_1044 in var_1043 {
            #[allow(unused_mut)]
            let mut entry_1046 = list_1045.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_1046, item_1044)?;
        }
        list_1045.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1047 = writer.prefix("MaxRecords");
    if let Some(var_1048) = &input.max_records {
        scope_1047.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1048).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1049 = writer.prefix("Marker");
    if let Some(var_1050) = &input.marker {
        scope_1049.string(var_1050);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_option_groups(
    input: &crate::input::DescribeOptionGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeOptionGroups", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1051 = writer.prefix("OptionGroupName");
    if let Some(var_1052) = &input.option_group_name {
        scope_1051.string(var_1052);
    }
    #[allow(unused_mut)]
    let mut scope_1053 = writer.prefix("Filters");
    if let Some(var_1054) = &input.filters {
        let mut list_1056 = scope_1053.start_list(false, Some("Filter"));
        for item_1055 in var_1054 {
            #[allow(unused_mut)]
            let mut entry_1057 = list_1056.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_1057, item_1055)?;
        }
        list_1056.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1058 = writer.prefix("Marker");
    if let Some(var_1059) = &input.marker {
        scope_1058.string(var_1059);
    }
    #[allow(unused_mut)]
    let mut scope_1060 = writer.prefix("MaxRecords");
    if let Some(var_1061) = &input.max_records {
        scope_1060.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1061).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1062 = writer.prefix("EngineName");
    if let Some(var_1063) = &input.engine_name {
        scope_1062.string(var_1063);
    }
    #[allow(unused_mut)]
    let mut scope_1064 = writer.prefix("MajorEngineVersion");
    if let Some(var_1065) = &input.major_engine_version {
        scope_1064.string(var_1065);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_orderable_db_instance_options(
    input: &crate::input::DescribeOrderableDbInstanceOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeOrderableDBInstanceOptions",
        "2014-10-31",
    );
    #[allow(unused_mut)]
    let mut scope_1066 = writer.prefix("Engine");
    if let Some(var_1067) = &input.engine {
        scope_1066.string(var_1067);
    }
    #[allow(unused_mut)]
    let mut scope_1068 = writer.prefix("EngineVersion");
    if let Some(var_1069) = &input.engine_version {
        scope_1068.string(var_1069);
    }
    #[allow(unused_mut)]
    let mut scope_1070 = writer.prefix("DBInstanceClass");
    if let Some(var_1071) = &input.db_instance_class {
        scope_1070.string(var_1071);
    }
    #[allow(unused_mut)]
    let mut scope_1072 = writer.prefix("LicenseModel");
    if let Some(var_1073) = &input.license_model {
        scope_1072.string(var_1073);
    }
    #[allow(unused_mut)]
    let mut scope_1074 = writer.prefix("AvailabilityZoneGroup");
    if let Some(var_1075) = &input.availability_zone_group {
        scope_1074.string(var_1075);
    }
    #[allow(unused_mut)]
    let mut scope_1076 = writer.prefix("Vpc");
    if let Some(var_1077) = &input.vpc {
        scope_1076.boolean(*var_1077);
    }
    #[allow(unused_mut)]
    let mut scope_1078 = writer.prefix("Filters");
    if let Some(var_1079) = &input.filters {
        let mut list_1081 = scope_1078.start_list(false, Some("Filter"));
        for item_1080 in var_1079 {
            #[allow(unused_mut)]
            let mut entry_1082 = list_1081.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_1082, item_1080)?;
        }
        list_1081.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1083 = writer.prefix("MaxRecords");
    if let Some(var_1084) = &input.max_records {
        scope_1083.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1084).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1085 = writer.prefix("Marker");
    if let Some(var_1086) = &input.marker {
        scope_1085.string(var_1086);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_pending_maintenance_actions(
    input: &crate::input::DescribePendingMaintenanceActionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribePendingMaintenanceActions",
        "2014-10-31",
    );
    #[allow(unused_mut)]
    let mut scope_1087 = writer.prefix("ResourceIdentifier");
    if let Some(var_1088) = &input.resource_identifier {
        scope_1087.string(var_1088);
    }
    #[allow(unused_mut)]
    let mut scope_1089 = writer.prefix("Filters");
    if let Some(var_1090) = &input.filters {
        let mut list_1092 = scope_1089.start_list(false, Some("Filter"));
        for item_1091 in var_1090 {
            #[allow(unused_mut)]
            let mut entry_1093 = list_1092.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_1093, item_1091)?;
        }
        list_1092.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1094 = writer.prefix("Marker");
    if let Some(var_1095) = &input.marker {
        scope_1094.string(var_1095);
    }
    #[allow(unused_mut)]
    let mut scope_1096 = writer.prefix("MaxRecords");
    if let Some(var_1097) = &input.max_records {
        scope_1096.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1097).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_reserved_db_instances(
    input: &crate::input::DescribeReservedDbInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeReservedDBInstances", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1098 = writer.prefix("ReservedDBInstanceId");
    if let Some(var_1099) = &input.reserved_db_instance_id {
        scope_1098.string(var_1099);
    }
    #[allow(unused_mut)]
    let mut scope_1100 = writer.prefix("ReservedDBInstancesOfferingId");
    if let Some(var_1101) = &input.reserved_db_instances_offering_id {
        scope_1100.string(var_1101);
    }
    #[allow(unused_mut)]
    let mut scope_1102 = writer.prefix("DBInstanceClass");
    if let Some(var_1103) = &input.db_instance_class {
        scope_1102.string(var_1103);
    }
    #[allow(unused_mut)]
    let mut scope_1104 = writer.prefix("Duration");
    if let Some(var_1105) = &input.duration {
        scope_1104.string(var_1105);
    }
    #[allow(unused_mut)]
    let mut scope_1106 = writer.prefix("ProductDescription");
    if let Some(var_1107) = &input.product_description {
        scope_1106.string(var_1107);
    }
    #[allow(unused_mut)]
    let mut scope_1108 = writer.prefix("OfferingType");
    if let Some(var_1109) = &input.offering_type {
        scope_1108.string(var_1109);
    }
    #[allow(unused_mut)]
    let mut scope_1110 = writer.prefix("MultiAZ");
    if let Some(var_1111) = &input.multi_az {
        scope_1110.boolean(*var_1111);
    }
    #[allow(unused_mut)]
    let mut scope_1112 = writer.prefix("LeaseId");
    if let Some(var_1113) = &input.lease_id {
        scope_1112.string(var_1113);
    }
    #[allow(unused_mut)]
    let mut scope_1114 = writer.prefix("Filters");
    if let Some(var_1115) = &input.filters {
        let mut list_1117 = scope_1114.start_list(false, Some("Filter"));
        for item_1116 in var_1115 {
            #[allow(unused_mut)]
            let mut entry_1118 = list_1117.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_1118, item_1116)?;
        }
        list_1117.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1119 = writer.prefix("MaxRecords");
    if let Some(var_1120) = &input.max_records {
        scope_1119.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1120).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1121 = writer.prefix("Marker");
    if let Some(var_1122) = &input.marker {
        scope_1121.string(var_1122);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_reserved_db_instances_offerings(
    input: &crate::input::DescribeReservedDbInstancesOfferingsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeReservedDBInstancesOfferings",
        "2014-10-31",
    );
    #[allow(unused_mut)]
    let mut scope_1123 = writer.prefix("ReservedDBInstancesOfferingId");
    if let Some(var_1124) = &input.reserved_db_instances_offering_id {
        scope_1123.string(var_1124);
    }
    #[allow(unused_mut)]
    let mut scope_1125 = writer.prefix("DBInstanceClass");
    if let Some(var_1126) = &input.db_instance_class {
        scope_1125.string(var_1126);
    }
    #[allow(unused_mut)]
    let mut scope_1127 = writer.prefix("Duration");
    if let Some(var_1128) = &input.duration {
        scope_1127.string(var_1128);
    }
    #[allow(unused_mut)]
    let mut scope_1129 = writer.prefix("ProductDescription");
    if let Some(var_1130) = &input.product_description {
        scope_1129.string(var_1130);
    }
    #[allow(unused_mut)]
    let mut scope_1131 = writer.prefix("OfferingType");
    if let Some(var_1132) = &input.offering_type {
        scope_1131.string(var_1132);
    }
    #[allow(unused_mut)]
    let mut scope_1133 = writer.prefix("MultiAZ");
    if let Some(var_1134) = &input.multi_az {
        scope_1133.boolean(*var_1134);
    }
    #[allow(unused_mut)]
    let mut scope_1135 = writer.prefix("Filters");
    if let Some(var_1136) = &input.filters {
        let mut list_1138 = scope_1135.start_list(false, Some("Filter"));
        for item_1137 in var_1136 {
            #[allow(unused_mut)]
            let mut entry_1139 = list_1138.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_1139, item_1137)?;
        }
        list_1138.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1140 = writer.prefix("MaxRecords");
    if let Some(var_1141) = &input.max_records {
        scope_1140.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1141).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1142 = writer.prefix("Marker");
    if let Some(var_1143) = &input.marker {
        scope_1142.string(var_1143);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_source_regions(
    input: &crate::input::DescribeSourceRegionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSourceRegions", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1144 = writer.prefix("RegionName");
    if let Some(var_1145) = &input.region_name {
        scope_1144.string(var_1145);
    }
    #[allow(unused_mut)]
    let mut scope_1146 = writer.prefix("MaxRecords");
    if let Some(var_1147) = &input.max_records {
        scope_1146.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1147).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1148 = writer.prefix("Marker");
    if let Some(var_1149) = &input.marker {
        scope_1148.string(var_1149);
    }
    #[allow(unused_mut)]
    let mut scope_1150 = writer.prefix("Filters");
    if let Some(var_1151) = &input.filters {
        let mut list_1153 = scope_1150.start_list(false, Some("Filter"));
        for item_1152 in var_1151 {
            #[allow(unused_mut)]
            let mut entry_1154 = list_1153.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_1154, item_1152)?;
        }
        list_1153.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_valid_db_instance_modifications(
    input: &crate::input::DescribeValidDbInstanceModificationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeValidDBInstanceModifications",
        "2014-10-31",
    );
    #[allow(unused_mut)]
    let mut scope_1155 = writer.prefix("DBInstanceIdentifier");
    if let Some(var_1156) = &input.db_instance_identifier {
        scope_1155.string(var_1156);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_download_db_log_file_portion(
    input: &crate::input::DownloadDbLogFilePortionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DownloadDBLogFilePortion", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1157 = writer.prefix("DBInstanceIdentifier");
    if let Some(var_1158) = &input.db_instance_identifier {
        scope_1157.string(var_1158);
    }
    #[allow(unused_mut)]
    let mut scope_1159 = writer.prefix("LogFileName");
    if let Some(var_1160) = &input.log_file_name {
        scope_1159.string(var_1160);
    }
    #[allow(unused_mut)]
    let mut scope_1161 = writer.prefix("Marker");
    if let Some(var_1162) = &input.marker {
        scope_1161.string(var_1162);
    }
    #[allow(unused_mut)]
    let mut scope_1163 = writer.prefix("NumberOfLines");
    if input.number_of_lines != 0 {
        scope_1163.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_lines).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_failover_db_cluster(
    input: &crate::input::FailoverDbClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "FailoverDBCluster", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1164 = writer.prefix("DBClusterIdentifier");
    if let Some(var_1165) = &input.db_cluster_identifier {
        scope_1164.string(var_1165);
    }
    #[allow(unused_mut)]
    let mut scope_1166 = writer.prefix("TargetDBInstanceIdentifier");
    if let Some(var_1167) = &input.target_db_instance_identifier {
        scope_1166.string(var_1167);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_failover_global_cluster(
    input: &crate::input::FailoverGlobalClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "FailoverGlobalCluster", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1168 = writer.prefix("GlobalClusterIdentifier");
    if let Some(var_1169) = &input.global_cluster_identifier {
        scope_1168.string(var_1169);
    }
    #[allow(unused_mut)]
    let mut scope_1170 = writer.prefix("TargetDbClusterIdentifier");
    if let Some(var_1171) = &input.target_db_cluster_identifier {
        scope_1170.string(var_1171);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_list_tags_for_resource(
    input: &crate::input::ListTagsForResourceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ListTagsForResource", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1172 = writer.prefix("ResourceName");
    if let Some(var_1173) = &input.resource_name {
        scope_1172.string(var_1173);
    }
    #[allow(unused_mut)]
    let mut scope_1174 = writer.prefix("Filters");
    if let Some(var_1175) = &input.filters {
        let mut list_1177 = scope_1174.start_list(false, Some("Filter"));
        for item_1176 in var_1175 {
            #[allow(unused_mut)]
            let mut entry_1178 = list_1177.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_1178, item_1176)?;
        }
        list_1177.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_activity_stream(
    input: &crate::input::ModifyActivityStreamInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyActivityStream", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1179 = writer.prefix("ResourceArn");
    if let Some(var_1180) = &input.resource_arn {
        scope_1179.string(var_1180);
    }
    #[allow(unused_mut)]
    let mut scope_1181 = writer.prefix("AuditPolicyState");
    if let Some(var_1182) = &input.audit_policy_state {
        scope_1181.string(var_1182.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_certificates(
    input: &crate::input::ModifyCertificatesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyCertificates", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1183 = writer.prefix("CertificateIdentifier");
    if let Some(var_1184) = &input.certificate_identifier {
        scope_1183.string(var_1184);
    }
    #[allow(unused_mut)]
    let mut scope_1185 = writer.prefix("RemoveCustomerOverride");
    if let Some(var_1186) = &input.remove_customer_override {
        scope_1185.boolean(*var_1186);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_current_db_cluster_capacity(
    input: &crate::input::ModifyCurrentDbClusterCapacityInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyCurrentDBClusterCapacity",
        "2014-10-31",
    );
    #[allow(unused_mut)]
    let mut scope_1187 = writer.prefix("DBClusterIdentifier");
    if let Some(var_1188) = &input.db_cluster_identifier {
        scope_1187.string(var_1188);
    }
    #[allow(unused_mut)]
    let mut scope_1189 = writer.prefix("Capacity");
    if let Some(var_1190) = &input.capacity {
        scope_1189.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1190).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1191 = writer.prefix("SecondsBeforeTimeout");
    if let Some(var_1192) = &input.seconds_before_timeout {
        scope_1191.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1192).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1193 = writer.prefix("TimeoutAction");
    if let Some(var_1194) = &input.timeout_action {
        scope_1193.string(var_1194);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_custom_db_engine_version(
    input: &crate::input::ModifyCustomDbEngineVersionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyCustomDBEngineVersion", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1195 = writer.prefix("Engine");
    if let Some(var_1196) = &input.engine {
        scope_1195.string(var_1196);
    }
    #[allow(unused_mut)]
    let mut scope_1197 = writer.prefix("EngineVersion");
    if let Some(var_1198) = &input.engine_version {
        scope_1197.string(var_1198);
    }
    #[allow(unused_mut)]
    let mut scope_1199 = writer.prefix("Description");
    if let Some(var_1200) = &input.description {
        scope_1199.string(var_1200);
    }
    #[allow(unused_mut)]
    let mut scope_1201 = writer.prefix("Status");
    if let Some(var_1202) = &input.status {
        scope_1201.string(var_1202.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_db_cluster(
    input: &crate::input::ModifyDbClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyDBCluster", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1203 = writer.prefix("DBClusterIdentifier");
    if let Some(var_1204) = &input.db_cluster_identifier {
        scope_1203.string(var_1204);
    }
    #[allow(unused_mut)]
    let mut scope_1205 = writer.prefix("NewDBClusterIdentifier");
    if let Some(var_1206) = &input.new_db_cluster_identifier {
        scope_1205.string(var_1206);
    }
    #[allow(unused_mut)]
    let mut scope_1207 = writer.prefix("ApplyImmediately");
    if input.apply_immediately {
        scope_1207.boolean(input.apply_immediately);
    }
    #[allow(unused_mut)]
    let mut scope_1208 = writer.prefix("BackupRetentionPeriod");
    if let Some(var_1209) = &input.backup_retention_period {
        scope_1208.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1209).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1210 = writer.prefix("DBClusterParameterGroupName");
    if let Some(var_1211) = &input.db_cluster_parameter_group_name {
        scope_1210.string(var_1211);
    }
    #[allow(unused_mut)]
    let mut scope_1212 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_1213) = &input.vpc_security_group_ids {
        let mut list_1215 = scope_1212.start_list(false, Some("VpcSecurityGroupId"));
        for item_1214 in var_1213 {
            #[allow(unused_mut)]
            let mut entry_1216 = list_1215.entry();
            entry_1216.string(item_1214);
        }
        list_1215.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1217 = writer.prefix("Port");
    if let Some(var_1218) = &input.port {
        scope_1217.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1218).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1219 = writer.prefix("MasterUserPassword");
    if let Some(var_1220) = &input.master_user_password {
        scope_1219.string(var_1220);
    }
    #[allow(unused_mut)]
    let mut scope_1221 = writer.prefix("OptionGroupName");
    if let Some(var_1222) = &input.option_group_name {
        scope_1221.string(var_1222);
    }
    #[allow(unused_mut)]
    let mut scope_1223 = writer.prefix("PreferredBackupWindow");
    if let Some(var_1224) = &input.preferred_backup_window {
        scope_1223.string(var_1224);
    }
    #[allow(unused_mut)]
    let mut scope_1225 = writer.prefix("PreferredMaintenanceWindow");
    if let Some(var_1226) = &input.preferred_maintenance_window {
        scope_1225.string(var_1226);
    }
    #[allow(unused_mut)]
    let mut scope_1227 = writer.prefix("EnableIAMDatabaseAuthentication");
    if let Some(var_1228) = &input.enable_iam_database_authentication {
        scope_1227.boolean(*var_1228);
    }
    #[allow(unused_mut)]
    let mut scope_1229 = writer.prefix("BacktrackWindow");
    if let Some(var_1230) = &input.backtrack_window {
        scope_1229.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1230).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1231 = writer.prefix("CloudwatchLogsExportConfiguration");
    if let Some(var_1232) = &input.cloudwatch_logs_export_configuration {
        crate::query_ser::serialize_structure_crate_model_cloudwatch_logs_export_configuration(
            scope_1231, var_1232,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1233 = writer.prefix("EngineVersion");
    if let Some(var_1234) = &input.engine_version {
        scope_1233.string(var_1234);
    }
    #[allow(unused_mut)]
    let mut scope_1235 = writer.prefix("AllowMajorVersionUpgrade");
    if input.allow_major_version_upgrade {
        scope_1235.boolean(input.allow_major_version_upgrade);
    }
    #[allow(unused_mut)]
    let mut scope_1236 = writer.prefix("DBInstanceParameterGroupName");
    if let Some(var_1237) = &input.db_instance_parameter_group_name {
        scope_1236.string(var_1237);
    }
    #[allow(unused_mut)]
    let mut scope_1238 = writer.prefix("Domain");
    if let Some(var_1239) = &input.domain {
        scope_1238.string(var_1239);
    }
    #[allow(unused_mut)]
    let mut scope_1240 = writer.prefix("DomainIAMRoleName");
    if let Some(var_1241) = &input.domain_iam_role_name {
        scope_1240.string(var_1241);
    }
    #[allow(unused_mut)]
    let mut scope_1242 = writer.prefix("ScalingConfiguration");
    if let Some(var_1243) = &input.scaling_configuration {
        crate::query_ser::serialize_structure_crate_model_scaling_configuration(
            scope_1242, var_1243,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1244 = writer.prefix("DeletionProtection");
    if let Some(var_1245) = &input.deletion_protection {
        scope_1244.boolean(*var_1245);
    }
    #[allow(unused_mut)]
    let mut scope_1246 = writer.prefix("EnableHttpEndpoint");
    if let Some(var_1247) = &input.enable_http_endpoint {
        scope_1246.boolean(*var_1247);
    }
    #[allow(unused_mut)]
    let mut scope_1248 = writer.prefix("CopyTagsToSnapshot");
    if let Some(var_1249) = &input.copy_tags_to_snapshot {
        scope_1248.boolean(*var_1249);
    }
    #[allow(unused_mut)]
    let mut scope_1250 = writer.prefix("EnableGlobalWriteForwarding");
    if let Some(var_1251) = &input.enable_global_write_forwarding {
        scope_1250.boolean(*var_1251);
    }
    #[allow(unused_mut)]
    let mut scope_1252 = writer.prefix("DBClusterInstanceClass");
    if let Some(var_1253) = &input.db_cluster_instance_class {
        scope_1252.string(var_1253);
    }
    #[allow(unused_mut)]
    let mut scope_1254 = writer.prefix("AllocatedStorage");
    if let Some(var_1255) = &input.allocated_storage {
        scope_1254.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1255).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1256 = writer.prefix("StorageType");
    if let Some(var_1257) = &input.storage_type {
        scope_1256.string(var_1257);
    }
    #[allow(unused_mut)]
    let mut scope_1258 = writer.prefix("Iops");
    if let Some(var_1259) = &input.iops {
        scope_1258.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1259).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1260 = writer.prefix("AutoMinorVersionUpgrade");
    if let Some(var_1261) = &input.auto_minor_version_upgrade {
        scope_1260.boolean(*var_1261);
    }
    #[allow(unused_mut)]
    let mut scope_1262 = writer.prefix("MonitoringInterval");
    if let Some(var_1263) = &input.monitoring_interval {
        scope_1262.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1263).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1264 = writer.prefix("MonitoringRoleArn");
    if let Some(var_1265) = &input.monitoring_role_arn {
        scope_1264.string(var_1265);
    }
    #[allow(unused_mut)]
    let mut scope_1266 = writer.prefix("EnablePerformanceInsights");
    if let Some(var_1267) = &input.enable_performance_insights {
        scope_1266.boolean(*var_1267);
    }
    #[allow(unused_mut)]
    let mut scope_1268 = writer.prefix("PerformanceInsightsKMSKeyId");
    if let Some(var_1269) = &input.performance_insights_kms_key_id {
        scope_1268.string(var_1269);
    }
    #[allow(unused_mut)]
    let mut scope_1270 = writer.prefix("PerformanceInsightsRetentionPeriod");
    if let Some(var_1271) = &input.performance_insights_retention_period {
        scope_1270.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1271).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1272 = writer.prefix("ServerlessV2ScalingConfiguration");
    if let Some(var_1273) = &input.serverless_v2_scaling_configuration {
        crate::query_ser::serialize_structure_crate_model_serverless_v2_scaling_configuration(
            scope_1272, var_1273,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_db_cluster_endpoint(
    input: &crate::input::ModifyDbClusterEndpointInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyDBClusterEndpoint", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1274 = writer.prefix("DBClusterEndpointIdentifier");
    if let Some(var_1275) = &input.db_cluster_endpoint_identifier {
        scope_1274.string(var_1275);
    }
    #[allow(unused_mut)]
    let mut scope_1276 = writer.prefix("EndpointType");
    if let Some(var_1277) = &input.endpoint_type {
        scope_1276.string(var_1277);
    }
    #[allow(unused_mut)]
    let mut scope_1278 = writer.prefix("StaticMembers");
    if let Some(var_1279) = &input.static_members {
        let mut list_1281 = scope_1278.start_list(false, None);
        for item_1280 in var_1279 {
            #[allow(unused_mut)]
            let mut entry_1282 = list_1281.entry();
            entry_1282.string(item_1280);
        }
        list_1281.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1283 = writer.prefix("ExcludedMembers");
    if let Some(var_1284) = &input.excluded_members {
        let mut list_1286 = scope_1283.start_list(false, None);
        for item_1285 in var_1284 {
            #[allow(unused_mut)]
            let mut entry_1287 = list_1286.entry();
            entry_1287.string(item_1285);
        }
        list_1286.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_db_cluster_parameter_group(
    input: &crate::input::ModifyDbClusterParameterGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyDBClusterParameterGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1288 = writer.prefix("DBClusterParameterGroupName");
    if let Some(var_1289) = &input.db_cluster_parameter_group_name {
        scope_1288.string(var_1289);
    }
    #[allow(unused_mut)]
    let mut scope_1290 = writer.prefix("Parameters");
    if let Some(var_1291) = &input.parameters {
        let mut list_1293 = scope_1290.start_list(false, Some("Parameter"));
        for item_1292 in var_1291 {
            #[allow(unused_mut)]
            let mut entry_1294 = list_1293.entry();
            crate::query_ser::serialize_structure_crate_model_parameter(entry_1294, item_1292)?;
        }
        list_1293.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_db_cluster_snapshot_attribute(
    input: &crate::input::ModifyDbClusterSnapshotAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyDBClusterSnapshotAttribute",
        "2014-10-31",
    );
    #[allow(unused_mut)]
    let mut scope_1295 = writer.prefix("DBClusterSnapshotIdentifier");
    if let Some(var_1296) = &input.db_cluster_snapshot_identifier {
        scope_1295.string(var_1296);
    }
    #[allow(unused_mut)]
    let mut scope_1297 = writer.prefix("AttributeName");
    if let Some(var_1298) = &input.attribute_name {
        scope_1297.string(var_1298);
    }
    #[allow(unused_mut)]
    let mut scope_1299 = writer.prefix("ValuesToAdd");
    if let Some(var_1300) = &input.values_to_add {
        let mut list_1302 = scope_1299.start_list(false, Some("AttributeValue"));
        for item_1301 in var_1300 {
            #[allow(unused_mut)]
            let mut entry_1303 = list_1302.entry();
            entry_1303.string(item_1301);
        }
        list_1302.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1304 = writer.prefix("ValuesToRemove");
    if let Some(var_1305) = &input.values_to_remove {
        let mut list_1307 = scope_1304.start_list(false, Some("AttributeValue"));
        for item_1306 in var_1305 {
            #[allow(unused_mut)]
            let mut entry_1308 = list_1307.entry();
            entry_1308.string(item_1306);
        }
        list_1307.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_db_instance(
    input: &crate::input::ModifyDbInstanceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyDBInstance", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1309 = writer.prefix("DBInstanceIdentifier");
    if let Some(var_1310) = &input.db_instance_identifier {
        scope_1309.string(var_1310);
    }
    #[allow(unused_mut)]
    let mut scope_1311 = writer.prefix("AllocatedStorage");
    if let Some(var_1312) = &input.allocated_storage {
        scope_1311.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1312).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1313 = writer.prefix("DBInstanceClass");
    if let Some(var_1314) = &input.db_instance_class {
        scope_1313.string(var_1314);
    }
    #[allow(unused_mut)]
    let mut scope_1315 = writer.prefix("DBSubnetGroupName");
    if let Some(var_1316) = &input.db_subnet_group_name {
        scope_1315.string(var_1316);
    }
    #[allow(unused_mut)]
    let mut scope_1317 = writer.prefix("DBSecurityGroups");
    if let Some(var_1318) = &input.db_security_groups {
        let mut list_1320 = scope_1317.start_list(false, Some("DBSecurityGroupName"));
        for item_1319 in var_1318 {
            #[allow(unused_mut)]
            let mut entry_1321 = list_1320.entry();
            entry_1321.string(item_1319);
        }
        list_1320.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1322 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_1323) = &input.vpc_security_group_ids {
        let mut list_1325 = scope_1322.start_list(false, Some("VpcSecurityGroupId"));
        for item_1324 in var_1323 {
            #[allow(unused_mut)]
            let mut entry_1326 = list_1325.entry();
            entry_1326.string(item_1324);
        }
        list_1325.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1327 = writer.prefix("ApplyImmediately");
    if input.apply_immediately {
        scope_1327.boolean(input.apply_immediately);
    }
    #[allow(unused_mut)]
    let mut scope_1328 = writer.prefix("MasterUserPassword");
    if let Some(var_1329) = &input.master_user_password {
        scope_1328.string(var_1329);
    }
    #[allow(unused_mut)]
    let mut scope_1330 = writer.prefix("DBParameterGroupName");
    if let Some(var_1331) = &input.db_parameter_group_name {
        scope_1330.string(var_1331);
    }
    #[allow(unused_mut)]
    let mut scope_1332 = writer.prefix("BackupRetentionPeriod");
    if let Some(var_1333) = &input.backup_retention_period {
        scope_1332.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1333).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1334 = writer.prefix("PreferredBackupWindow");
    if let Some(var_1335) = &input.preferred_backup_window {
        scope_1334.string(var_1335);
    }
    #[allow(unused_mut)]
    let mut scope_1336 = writer.prefix("PreferredMaintenanceWindow");
    if let Some(var_1337) = &input.preferred_maintenance_window {
        scope_1336.string(var_1337);
    }
    #[allow(unused_mut)]
    let mut scope_1338 = writer.prefix("MultiAZ");
    if let Some(var_1339) = &input.multi_az {
        scope_1338.boolean(*var_1339);
    }
    #[allow(unused_mut)]
    let mut scope_1340 = writer.prefix("EngineVersion");
    if let Some(var_1341) = &input.engine_version {
        scope_1340.string(var_1341);
    }
    #[allow(unused_mut)]
    let mut scope_1342 = writer.prefix("AllowMajorVersionUpgrade");
    if input.allow_major_version_upgrade {
        scope_1342.boolean(input.allow_major_version_upgrade);
    }
    #[allow(unused_mut)]
    let mut scope_1343 = writer.prefix("AutoMinorVersionUpgrade");
    if let Some(var_1344) = &input.auto_minor_version_upgrade {
        scope_1343.boolean(*var_1344);
    }
    #[allow(unused_mut)]
    let mut scope_1345 = writer.prefix("LicenseModel");
    if let Some(var_1346) = &input.license_model {
        scope_1345.string(var_1346);
    }
    #[allow(unused_mut)]
    let mut scope_1347 = writer.prefix("Iops");
    if let Some(var_1348) = &input.iops {
        scope_1347.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1348).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1349 = writer.prefix("OptionGroupName");
    if let Some(var_1350) = &input.option_group_name {
        scope_1349.string(var_1350);
    }
    #[allow(unused_mut)]
    let mut scope_1351 = writer.prefix("NewDBInstanceIdentifier");
    if let Some(var_1352) = &input.new_db_instance_identifier {
        scope_1351.string(var_1352);
    }
    #[allow(unused_mut)]
    let mut scope_1353 = writer.prefix("StorageType");
    if let Some(var_1354) = &input.storage_type {
        scope_1353.string(var_1354);
    }
    #[allow(unused_mut)]
    let mut scope_1355 = writer.prefix("TdeCredentialArn");
    if let Some(var_1356) = &input.tde_credential_arn {
        scope_1355.string(var_1356);
    }
    #[allow(unused_mut)]
    let mut scope_1357 = writer.prefix("TdeCredentialPassword");
    if let Some(var_1358) = &input.tde_credential_password {
        scope_1357.string(var_1358);
    }
    #[allow(unused_mut)]
    let mut scope_1359 = writer.prefix("CACertificateIdentifier");
    if let Some(var_1360) = &input.ca_certificate_identifier {
        scope_1359.string(var_1360);
    }
    #[allow(unused_mut)]
    let mut scope_1361 = writer.prefix("Domain");
    if let Some(var_1362) = &input.domain {
        scope_1361.string(var_1362);
    }
    #[allow(unused_mut)]
    let mut scope_1363 = writer.prefix("CopyTagsToSnapshot");
    if let Some(var_1364) = &input.copy_tags_to_snapshot {
        scope_1363.boolean(*var_1364);
    }
    #[allow(unused_mut)]
    let mut scope_1365 = writer.prefix("MonitoringInterval");
    if let Some(var_1366) = &input.monitoring_interval {
        scope_1365.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1366).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1367 = writer.prefix("DBPortNumber");
    if let Some(var_1368) = &input.db_port_number {
        scope_1367.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1368).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1369 = writer.prefix("PubliclyAccessible");
    if let Some(var_1370) = &input.publicly_accessible {
        scope_1369.boolean(*var_1370);
    }
    #[allow(unused_mut)]
    let mut scope_1371 = writer.prefix("MonitoringRoleArn");
    if let Some(var_1372) = &input.monitoring_role_arn {
        scope_1371.string(var_1372);
    }
    #[allow(unused_mut)]
    let mut scope_1373 = writer.prefix("DomainIAMRoleName");
    if let Some(var_1374) = &input.domain_iam_role_name {
        scope_1373.string(var_1374);
    }
    #[allow(unused_mut)]
    let mut scope_1375 = writer.prefix("PromotionTier");
    if let Some(var_1376) = &input.promotion_tier {
        scope_1375.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1376).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1377 = writer.prefix("EnableIAMDatabaseAuthentication");
    if let Some(var_1378) = &input.enable_iam_database_authentication {
        scope_1377.boolean(*var_1378);
    }
    #[allow(unused_mut)]
    let mut scope_1379 = writer.prefix("EnablePerformanceInsights");
    if let Some(var_1380) = &input.enable_performance_insights {
        scope_1379.boolean(*var_1380);
    }
    #[allow(unused_mut)]
    let mut scope_1381 = writer.prefix("PerformanceInsightsKMSKeyId");
    if let Some(var_1382) = &input.performance_insights_kms_key_id {
        scope_1381.string(var_1382);
    }
    #[allow(unused_mut)]
    let mut scope_1383 = writer.prefix("PerformanceInsightsRetentionPeriod");
    if let Some(var_1384) = &input.performance_insights_retention_period {
        scope_1383.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1384).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1385 = writer.prefix("CloudwatchLogsExportConfiguration");
    if let Some(var_1386) = &input.cloudwatch_logs_export_configuration {
        crate::query_ser::serialize_structure_crate_model_cloudwatch_logs_export_configuration(
            scope_1385, var_1386,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1387 = writer.prefix("ProcessorFeatures");
    if let Some(var_1388) = &input.processor_features {
        let mut list_1390 = scope_1387.start_list(false, Some("ProcessorFeature"));
        for item_1389 in var_1388 {
            #[allow(unused_mut)]
            let mut entry_1391 = list_1390.entry();
            crate::query_ser::serialize_structure_crate_model_processor_feature(
                entry_1391, item_1389,
            )?;
        }
        list_1390.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1392 = writer.prefix("UseDefaultProcessorFeatures");
    if let Some(var_1393) = &input.use_default_processor_features {
        scope_1392.boolean(*var_1393);
    }
    #[allow(unused_mut)]
    let mut scope_1394 = writer.prefix("DeletionProtection");
    if let Some(var_1395) = &input.deletion_protection {
        scope_1394.boolean(*var_1395);
    }
    #[allow(unused_mut)]
    let mut scope_1396 = writer.prefix("MaxAllocatedStorage");
    if let Some(var_1397) = &input.max_allocated_storage {
        scope_1396.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1397).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1398 = writer.prefix("CertificateRotationRestart");
    if let Some(var_1399) = &input.certificate_rotation_restart {
        scope_1398.boolean(*var_1399);
    }
    #[allow(unused_mut)]
    let mut scope_1400 = writer.prefix("ReplicaMode");
    if let Some(var_1401) = &input.replica_mode {
        scope_1400.string(var_1401.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1402 = writer.prefix("EnableCustomerOwnedIp");
    if let Some(var_1403) = &input.enable_customer_owned_ip {
        scope_1402.boolean(*var_1403);
    }
    #[allow(unused_mut)]
    let mut scope_1404 = writer.prefix("AwsBackupRecoveryPointArn");
    if let Some(var_1405) = &input.aws_backup_recovery_point_arn {
        scope_1404.string(var_1405);
    }
    #[allow(unused_mut)]
    let mut scope_1406 = writer.prefix("AutomationMode");
    if let Some(var_1407) = &input.automation_mode {
        scope_1406.string(var_1407.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1408 = writer.prefix("ResumeFullAutomationModeMinutes");
    if let Some(var_1409) = &input.resume_full_automation_mode_minutes {
        scope_1408.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1409).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1410 = writer.prefix("NetworkType");
    if let Some(var_1411) = &input.network_type {
        scope_1410.string(var_1411);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_db_parameter_group(
    input: &crate::input::ModifyDbParameterGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyDBParameterGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1412 = writer.prefix("DBParameterGroupName");
    if let Some(var_1413) = &input.db_parameter_group_name {
        scope_1412.string(var_1413);
    }
    #[allow(unused_mut)]
    let mut scope_1414 = writer.prefix("Parameters");
    if let Some(var_1415) = &input.parameters {
        let mut list_1417 = scope_1414.start_list(false, Some("Parameter"));
        for item_1416 in var_1415 {
            #[allow(unused_mut)]
            let mut entry_1418 = list_1417.entry();
            crate::query_ser::serialize_structure_crate_model_parameter(entry_1418, item_1416)?;
        }
        list_1417.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_db_proxy(
    input: &crate::input::ModifyDbProxyInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyDBProxy", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1419 = writer.prefix("DBProxyName");
    if let Some(var_1420) = &input.db_proxy_name {
        scope_1419.string(var_1420);
    }
    #[allow(unused_mut)]
    let mut scope_1421 = writer.prefix("NewDBProxyName");
    if let Some(var_1422) = &input.new_db_proxy_name {
        scope_1421.string(var_1422);
    }
    #[allow(unused_mut)]
    let mut scope_1423 = writer.prefix("Auth");
    if let Some(var_1424) = &input.auth {
        let mut list_1426 = scope_1423.start_list(false, None);
        for item_1425 in var_1424 {
            #[allow(unused_mut)]
            let mut entry_1427 = list_1426.entry();
            crate::query_ser::serialize_structure_crate_model_user_auth_config(
                entry_1427, item_1425,
            )?;
        }
        list_1426.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1428 = writer.prefix("RequireTLS");
    if let Some(var_1429) = &input.require_tls {
        scope_1428.boolean(*var_1429);
    }
    #[allow(unused_mut)]
    let mut scope_1430 = writer.prefix("IdleClientTimeout");
    if let Some(var_1431) = &input.idle_client_timeout {
        scope_1430.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1431).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1432 = writer.prefix("DebugLogging");
    if let Some(var_1433) = &input.debug_logging {
        scope_1432.boolean(*var_1433);
    }
    #[allow(unused_mut)]
    let mut scope_1434 = writer.prefix("RoleArn");
    if let Some(var_1435) = &input.role_arn {
        scope_1434.string(var_1435);
    }
    #[allow(unused_mut)]
    let mut scope_1436 = writer.prefix("SecurityGroups");
    if let Some(var_1437) = &input.security_groups {
        let mut list_1439 = scope_1436.start_list(false, None);
        for item_1438 in var_1437 {
            #[allow(unused_mut)]
            let mut entry_1440 = list_1439.entry();
            entry_1440.string(item_1438);
        }
        list_1439.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_db_proxy_endpoint(
    input: &crate::input::ModifyDbProxyEndpointInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyDBProxyEndpoint", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1441 = writer.prefix("DBProxyEndpointName");
    if let Some(var_1442) = &input.db_proxy_endpoint_name {
        scope_1441.string(var_1442);
    }
    #[allow(unused_mut)]
    let mut scope_1443 = writer.prefix("NewDBProxyEndpointName");
    if let Some(var_1444) = &input.new_db_proxy_endpoint_name {
        scope_1443.string(var_1444);
    }
    #[allow(unused_mut)]
    let mut scope_1445 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_1446) = &input.vpc_security_group_ids {
        let mut list_1448 = scope_1445.start_list(false, None);
        for item_1447 in var_1446 {
            #[allow(unused_mut)]
            let mut entry_1449 = list_1448.entry();
            entry_1449.string(item_1447);
        }
        list_1448.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_db_proxy_target_group(
    input: &crate::input::ModifyDbProxyTargetGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyDBProxyTargetGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1450 = writer.prefix("TargetGroupName");
    if let Some(var_1451) = &input.target_group_name {
        scope_1450.string(var_1451);
    }
    #[allow(unused_mut)]
    let mut scope_1452 = writer.prefix("DBProxyName");
    if let Some(var_1453) = &input.db_proxy_name {
        scope_1452.string(var_1453);
    }
    #[allow(unused_mut)]
    let mut scope_1454 = writer.prefix("ConnectionPoolConfig");
    if let Some(var_1455) = &input.connection_pool_config {
        crate::query_ser::serialize_structure_crate_model_connection_pool_configuration(
            scope_1454, var_1455,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1456 = writer.prefix("NewName");
    if let Some(var_1457) = &input.new_name {
        scope_1456.string(var_1457);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_db_snapshot(
    input: &crate::input::ModifyDbSnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyDBSnapshot", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1458 = writer.prefix("DBSnapshotIdentifier");
    if let Some(var_1459) = &input.db_snapshot_identifier {
        scope_1458.string(var_1459);
    }
    #[allow(unused_mut)]
    let mut scope_1460 = writer.prefix("EngineVersion");
    if let Some(var_1461) = &input.engine_version {
        scope_1460.string(var_1461);
    }
    #[allow(unused_mut)]
    let mut scope_1462 = writer.prefix("OptionGroupName");
    if let Some(var_1463) = &input.option_group_name {
        scope_1462.string(var_1463);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_db_snapshot_attribute(
    input: &crate::input::ModifyDbSnapshotAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyDBSnapshotAttribute", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1464 = writer.prefix("DBSnapshotIdentifier");
    if let Some(var_1465) = &input.db_snapshot_identifier {
        scope_1464.string(var_1465);
    }
    #[allow(unused_mut)]
    let mut scope_1466 = writer.prefix("AttributeName");
    if let Some(var_1467) = &input.attribute_name {
        scope_1466.string(var_1467);
    }
    #[allow(unused_mut)]
    let mut scope_1468 = writer.prefix("ValuesToAdd");
    if let Some(var_1469) = &input.values_to_add {
        let mut list_1471 = scope_1468.start_list(false, Some("AttributeValue"));
        for item_1470 in var_1469 {
            #[allow(unused_mut)]
            let mut entry_1472 = list_1471.entry();
            entry_1472.string(item_1470);
        }
        list_1471.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1473 = writer.prefix("ValuesToRemove");
    if let Some(var_1474) = &input.values_to_remove {
        let mut list_1476 = scope_1473.start_list(false, Some("AttributeValue"));
        for item_1475 in var_1474 {
            #[allow(unused_mut)]
            let mut entry_1477 = list_1476.entry();
            entry_1477.string(item_1475);
        }
        list_1476.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_db_subnet_group(
    input: &crate::input::ModifyDbSubnetGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyDBSubnetGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1478 = writer.prefix("DBSubnetGroupName");
    if let Some(var_1479) = &input.db_subnet_group_name {
        scope_1478.string(var_1479);
    }
    #[allow(unused_mut)]
    let mut scope_1480 = writer.prefix("DBSubnetGroupDescription");
    if let Some(var_1481) = &input.db_subnet_group_description {
        scope_1480.string(var_1481);
    }
    #[allow(unused_mut)]
    let mut scope_1482 = writer.prefix("SubnetIds");
    if let Some(var_1483) = &input.subnet_ids {
        let mut list_1485 = scope_1482.start_list(false, Some("SubnetIdentifier"));
        for item_1484 in var_1483 {
            #[allow(unused_mut)]
            let mut entry_1486 = list_1485.entry();
            entry_1486.string(item_1484);
        }
        list_1485.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_event_subscription(
    input: &crate::input::ModifyEventSubscriptionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyEventSubscription", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1487 = writer.prefix("SubscriptionName");
    if let Some(var_1488) = &input.subscription_name {
        scope_1487.string(var_1488);
    }
    #[allow(unused_mut)]
    let mut scope_1489 = writer.prefix("SnsTopicArn");
    if let Some(var_1490) = &input.sns_topic_arn {
        scope_1489.string(var_1490);
    }
    #[allow(unused_mut)]
    let mut scope_1491 = writer.prefix("SourceType");
    if let Some(var_1492) = &input.source_type {
        scope_1491.string(var_1492);
    }
    #[allow(unused_mut)]
    let mut scope_1493 = writer.prefix("EventCategories");
    if let Some(var_1494) = &input.event_categories {
        let mut list_1496 = scope_1493.start_list(false, Some("EventCategory"));
        for item_1495 in var_1494 {
            #[allow(unused_mut)]
            let mut entry_1497 = list_1496.entry();
            entry_1497.string(item_1495);
        }
        list_1496.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1498 = writer.prefix("Enabled");
    if let Some(var_1499) = &input.enabled {
        scope_1498.boolean(*var_1499);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_global_cluster(
    input: &crate::input::ModifyGlobalClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyGlobalCluster", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1500 = writer.prefix("GlobalClusterIdentifier");
    if let Some(var_1501) = &input.global_cluster_identifier {
        scope_1500.string(var_1501);
    }
    #[allow(unused_mut)]
    let mut scope_1502 = writer.prefix("NewGlobalClusterIdentifier");
    if let Some(var_1503) = &input.new_global_cluster_identifier {
        scope_1502.string(var_1503);
    }
    #[allow(unused_mut)]
    let mut scope_1504 = writer.prefix("DeletionProtection");
    if let Some(var_1505) = &input.deletion_protection {
        scope_1504.boolean(*var_1505);
    }
    #[allow(unused_mut)]
    let mut scope_1506 = writer.prefix("EngineVersion");
    if let Some(var_1507) = &input.engine_version {
        scope_1506.string(var_1507);
    }
    #[allow(unused_mut)]
    let mut scope_1508 = writer.prefix("AllowMajorVersionUpgrade");
    if let Some(var_1509) = &input.allow_major_version_upgrade {
        scope_1508.boolean(*var_1509);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_option_group(
    input: &crate::input::ModifyOptionGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyOptionGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1510 = writer.prefix("OptionGroupName");
    if let Some(var_1511) = &input.option_group_name {
        scope_1510.string(var_1511);
    }
    #[allow(unused_mut)]
    let mut scope_1512 = writer.prefix("OptionsToInclude");
    if let Some(var_1513) = &input.options_to_include {
        let mut list_1515 = scope_1512.start_list(false, Some("OptionConfiguration"));
        for item_1514 in var_1513 {
            #[allow(unused_mut)]
            let mut entry_1516 = list_1515.entry();
            crate::query_ser::serialize_structure_crate_model_option_configuration(
                entry_1516, item_1514,
            )?;
        }
        list_1515.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1517 = writer.prefix("OptionsToRemove");
    if let Some(var_1518) = &input.options_to_remove {
        let mut list_1520 = scope_1517.start_list(false, None);
        for item_1519 in var_1518 {
            #[allow(unused_mut)]
            let mut entry_1521 = list_1520.entry();
            entry_1521.string(item_1519);
        }
        list_1520.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1522 = writer.prefix("ApplyImmediately");
    if input.apply_immediately {
        scope_1522.boolean(input.apply_immediately);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_promote_read_replica(
    input: &crate::input::PromoteReadReplicaInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "PromoteReadReplica", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1523 = writer.prefix("DBInstanceIdentifier");
    if let Some(var_1524) = &input.db_instance_identifier {
        scope_1523.string(var_1524);
    }
    #[allow(unused_mut)]
    let mut scope_1525 = writer.prefix("BackupRetentionPeriod");
    if let Some(var_1526) = &input.backup_retention_period {
        scope_1525.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1526).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1527 = writer.prefix("PreferredBackupWindow");
    if let Some(var_1528) = &input.preferred_backup_window {
        scope_1527.string(var_1528);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_promote_read_replica_db_cluster(
    input: &crate::input::PromoteReadReplicaDbClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "PromoteReadReplicaDBCluster", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1529 = writer.prefix("DBClusterIdentifier");
    if let Some(var_1530) = &input.db_cluster_identifier {
        scope_1529.string(var_1530);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_purchase_reserved_db_instances_offering(
    input: &crate::input::PurchaseReservedDbInstancesOfferingInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "PurchaseReservedDBInstancesOffering",
        "2014-10-31",
    );
    #[allow(unused_mut)]
    let mut scope_1531 = writer.prefix("ReservedDBInstancesOfferingId");
    if let Some(var_1532) = &input.reserved_db_instances_offering_id {
        scope_1531.string(var_1532);
    }
    #[allow(unused_mut)]
    let mut scope_1533 = writer.prefix("ReservedDBInstanceId");
    if let Some(var_1534) = &input.reserved_db_instance_id {
        scope_1533.string(var_1534);
    }
    #[allow(unused_mut)]
    let mut scope_1535 = writer.prefix("DBInstanceCount");
    if let Some(var_1536) = &input.db_instance_count {
        scope_1535.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1536).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1537 = writer.prefix("Tags");
    if let Some(var_1538) = &input.tags {
        let mut list_1540 = scope_1537.start_list(false, Some("Tag"));
        for item_1539 in var_1538 {
            #[allow(unused_mut)]
            let mut entry_1541 = list_1540.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_1541, item_1539)?;
        }
        list_1540.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reboot_db_cluster(
    input: &crate::input::RebootDbClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RebootDBCluster", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1542 = writer.prefix("DBClusterIdentifier");
    if let Some(var_1543) = &input.db_cluster_identifier {
        scope_1542.string(var_1543);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reboot_db_instance(
    input: &crate::input::RebootDbInstanceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RebootDBInstance", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1544 = writer.prefix("DBInstanceIdentifier");
    if let Some(var_1545) = &input.db_instance_identifier {
        scope_1544.string(var_1545);
    }
    #[allow(unused_mut)]
    let mut scope_1546 = writer.prefix("ForceFailover");
    if let Some(var_1547) = &input.force_failover {
        scope_1546.boolean(*var_1547);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_register_db_proxy_targets(
    input: &crate::input::RegisterDbProxyTargetsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RegisterDBProxyTargets", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1548 = writer.prefix("DBProxyName");
    if let Some(var_1549) = &input.db_proxy_name {
        scope_1548.string(var_1549);
    }
    #[allow(unused_mut)]
    let mut scope_1550 = writer.prefix("TargetGroupName");
    if let Some(var_1551) = &input.target_group_name {
        scope_1550.string(var_1551);
    }
    #[allow(unused_mut)]
    let mut scope_1552 = writer.prefix("DBInstanceIdentifiers");
    if let Some(var_1553) = &input.db_instance_identifiers {
        let mut list_1555 = scope_1552.start_list(false, None);
        for item_1554 in var_1553 {
            #[allow(unused_mut)]
            let mut entry_1556 = list_1555.entry();
            entry_1556.string(item_1554);
        }
        list_1555.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1557 = writer.prefix("DBClusterIdentifiers");
    if let Some(var_1558) = &input.db_cluster_identifiers {
        let mut list_1560 = scope_1557.start_list(false, None);
        for item_1559 in var_1558 {
            #[allow(unused_mut)]
            let mut entry_1561 = list_1560.entry();
            entry_1561.string(item_1559);
        }
        list_1560.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_remove_from_global_cluster(
    input: &crate::input::RemoveFromGlobalClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RemoveFromGlobalCluster", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1562 = writer.prefix("GlobalClusterIdentifier");
    if let Some(var_1563) = &input.global_cluster_identifier {
        scope_1562.string(var_1563);
    }
    #[allow(unused_mut)]
    let mut scope_1564 = writer.prefix("DbClusterIdentifier");
    if let Some(var_1565) = &input.db_cluster_identifier {
        scope_1564.string(var_1565);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_remove_role_from_db_cluster(
    input: &crate::input::RemoveRoleFromDbClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RemoveRoleFromDBCluster", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1566 = writer.prefix("DBClusterIdentifier");
    if let Some(var_1567) = &input.db_cluster_identifier {
        scope_1566.string(var_1567);
    }
    #[allow(unused_mut)]
    let mut scope_1568 = writer.prefix("RoleArn");
    if let Some(var_1569) = &input.role_arn {
        scope_1568.string(var_1569);
    }
    #[allow(unused_mut)]
    let mut scope_1570 = writer.prefix("FeatureName");
    if let Some(var_1571) = &input.feature_name {
        scope_1570.string(var_1571);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_remove_role_from_db_instance(
    input: &crate::input::RemoveRoleFromDbInstanceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RemoveRoleFromDBInstance", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1572 = writer.prefix("DBInstanceIdentifier");
    if let Some(var_1573) = &input.db_instance_identifier {
        scope_1572.string(var_1573);
    }
    #[allow(unused_mut)]
    let mut scope_1574 = writer.prefix("RoleArn");
    if let Some(var_1575) = &input.role_arn {
        scope_1574.string(var_1575);
    }
    #[allow(unused_mut)]
    let mut scope_1576 = writer.prefix("FeatureName");
    if let Some(var_1577) = &input.feature_name {
        scope_1576.string(var_1577);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_remove_source_identifier_from_subscription(
    input: &crate::input::RemoveSourceIdentifierFromSubscriptionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RemoveSourceIdentifierFromSubscription",
        "2014-10-31",
    );
    #[allow(unused_mut)]
    let mut scope_1578 = writer.prefix("SubscriptionName");
    if let Some(var_1579) = &input.subscription_name {
        scope_1578.string(var_1579);
    }
    #[allow(unused_mut)]
    let mut scope_1580 = writer.prefix("SourceIdentifier");
    if let Some(var_1581) = &input.source_identifier {
        scope_1580.string(var_1581);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_remove_tags_from_resource(
    input: &crate::input::RemoveTagsFromResourceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RemoveTagsFromResource", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1582 = writer.prefix("ResourceName");
    if let Some(var_1583) = &input.resource_name {
        scope_1582.string(var_1583);
    }
    #[allow(unused_mut)]
    let mut scope_1584 = writer.prefix("TagKeys");
    if let Some(var_1585) = &input.tag_keys {
        let mut list_1587 = scope_1584.start_list(false, None);
        for item_1586 in var_1585 {
            #[allow(unused_mut)]
            let mut entry_1588 = list_1587.entry();
            entry_1588.string(item_1586);
        }
        list_1587.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_db_cluster_parameter_group(
    input: &crate::input::ResetDbClusterParameterGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ResetDBClusterParameterGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1589 = writer.prefix("DBClusterParameterGroupName");
    if let Some(var_1590) = &input.db_cluster_parameter_group_name {
        scope_1589.string(var_1590);
    }
    #[allow(unused_mut)]
    let mut scope_1591 = writer.prefix("ResetAllParameters");
    if input.reset_all_parameters {
        scope_1591.boolean(input.reset_all_parameters);
    }
    #[allow(unused_mut)]
    let mut scope_1592 = writer.prefix("Parameters");
    if let Some(var_1593) = &input.parameters {
        let mut list_1595 = scope_1592.start_list(false, Some("Parameter"));
        for item_1594 in var_1593 {
            #[allow(unused_mut)]
            let mut entry_1596 = list_1595.entry();
            crate::query_ser::serialize_structure_crate_model_parameter(entry_1596, item_1594)?;
        }
        list_1595.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_db_parameter_group(
    input: &crate::input::ResetDbParameterGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ResetDBParameterGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1597 = writer.prefix("DBParameterGroupName");
    if let Some(var_1598) = &input.db_parameter_group_name {
        scope_1597.string(var_1598);
    }
    #[allow(unused_mut)]
    let mut scope_1599 = writer.prefix("ResetAllParameters");
    if input.reset_all_parameters {
        scope_1599.boolean(input.reset_all_parameters);
    }
    #[allow(unused_mut)]
    let mut scope_1600 = writer.prefix("Parameters");
    if let Some(var_1601) = &input.parameters {
        let mut list_1603 = scope_1600.start_list(false, Some("Parameter"));
        for item_1602 in var_1601 {
            #[allow(unused_mut)]
            let mut entry_1604 = list_1603.entry();
            crate::query_ser::serialize_structure_crate_model_parameter(entry_1604, item_1602)?;
        }
        list_1603.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restore_db_cluster_from_s3(
    input: &crate::input::RestoreDbClusterFromS3Input,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RestoreDBClusterFromS3", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1605 = writer.prefix("AvailabilityZones");
    if let Some(var_1606) = &input.availability_zones {
        let mut list_1608 = scope_1605.start_list(false, Some("AvailabilityZone"));
        for item_1607 in var_1606 {
            #[allow(unused_mut)]
            let mut entry_1609 = list_1608.entry();
            entry_1609.string(item_1607);
        }
        list_1608.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1610 = writer.prefix("BackupRetentionPeriod");
    if let Some(var_1611) = &input.backup_retention_period {
        scope_1610.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1611).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1612 = writer.prefix("CharacterSetName");
    if let Some(var_1613) = &input.character_set_name {
        scope_1612.string(var_1613);
    }
    #[allow(unused_mut)]
    let mut scope_1614 = writer.prefix("DatabaseName");
    if let Some(var_1615) = &input.database_name {
        scope_1614.string(var_1615);
    }
    #[allow(unused_mut)]
    let mut scope_1616 = writer.prefix("DBClusterIdentifier");
    if let Some(var_1617) = &input.db_cluster_identifier {
        scope_1616.string(var_1617);
    }
    #[allow(unused_mut)]
    let mut scope_1618 = writer.prefix("DBClusterParameterGroupName");
    if let Some(var_1619) = &input.db_cluster_parameter_group_name {
        scope_1618.string(var_1619);
    }
    #[allow(unused_mut)]
    let mut scope_1620 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_1621) = &input.vpc_security_group_ids {
        let mut list_1623 = scope_1620.start_list(false, Some("VpcSecurityGroupId"));
        for item_1622 in var_1621 {
            #[allow(unused_mut)]
            let mut entry_1624 = list_1623.entry();
            entry_1624.string(item_1622);
        }
        list_1623.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1625 = writer.prefix("DBSubnetGroupName");
    if let Some(var_1626) = &input.db_subnet_group_name {
        scope_1625.string(var_1626);
    }
    #[allow(unused_mut)]
    let mut scope_1627 = writer.prefix("Engine");
    if let Some(var_1628) = &input.engine {
        scope_1627.string(var_1628);
    }
    #[allow(unused_mut)]
    let mut scope_1629 = writer.prefix("EngineVersion");
    if let Some(var_1630) = &input.engine_version {
        scope_1629.string(var_1630);
    }
    #[allow(unused_mut)]
    let mut scope_1631 = writer.prefix("Port");
    if let Some(var_1632) = &input.port {
        scope_1631.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1632).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1633 = writer.prefix("MasterUsername");
    if let Some(var_1634) = &input.master_username {
        scope_1633.string(var_1634);
    }
    #[allow(unused_mut)]
    let mut scope_1635 = writer.prefix("MasterUserPassword");
    if let Some(var_1636) = &input.master_user_password {
        scope_1635.string(var_1636);
    }
    #[allow(unused_mut)]
    let mut scope_1637 = writer.prefix("OptionGroupName");
    if let Some(var_1638) = &input.option_group_name {
        scope_1637.string(var_1638);
    }
    #[allow(unused_mut)]
    let mut scope_1639 = writer.prefix("PreferredBackupWindow");
    if let Some(var_1640) = &input.preferred_backup_window {
        scope_1639.string(var_1640);
    }
    #[allow(unused_mut)]
    let mut scope_1641 = writer.prefix("PreferredMaintenanceWindow");
    if let Some(var_1642) = &input.preferred_maintenance_window {
        scope_1641.string(var_1642);
    }
    #[allow(unused_mut)]
    let mut scope_1643 = writer.prefix("Tags");
    if let Some(var_1644) = &input.tags {
        let mut list_1646 = scope_1643.start_list(false, Some("Tag"));
        for item_1645 in var_1644 {
            #[allow(unused_mut)]
            let mut entry_1647 = list_1646.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_1647, item_1645)?;
        }
        list_1646.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1648 = writer.prefix("StorageEncrypted");
    if let Some(var_1649) = &input.storage_encrypted {
        scope_1648.boolean(*var_1649);
    }
    #[allow(unused_mut)]
    let mut scope_1650 = writer.prefix("KmsKeyId");
    if let Some(var_1651) = &input.kms_key_id {
        scope_1650.string(var_1651);
    }
    #[allow(unused_mut)]
    let mut scope_1652 = writer.prefix("EnableIAMDatabaseAuthentication");
    if let Some(var_1653) = &input.enable_iam_database_authentication {
        scope_1652.boolean(*var_1653);
    }
    #[allow(unused_mut)]
    let mut scope_1654 = writer.prefix("SourceEngine");
    if let Some(var_1655) = &input.source_engine {
        scope_1654.string(var_1655);
    }
    #[allow(unused_mut)]
    let mut scope_1656 = writer.prefix("SourceEngineVersion");
    if let Some(var_1657) = &input.source_engine_version {
        scope_1656.string(var_1657);
    }
    #[allow(unused_mut)]
    let mut scope_1658 = writer.prefix("S3BucketName");
    if let Some(var_1659) = &input.s3_bucket_name {
        scope_1658.string(var_1659);
    }
    #[allow(unused_mut)]
    let mut scope_1660 = writer.prefix("S3Prefix");
    if let Some(var_1661) = &input.s3_prefix {
        scope_1660.string(var_1661);
    }
    #[allow(unused_mut)]
    let mut scope_1662 = writer.prefix("S3IngestionRoleArn");
    if let Some(var_1663) = &input.s3_ingestion_role_arn {
        scope_1662.string(var_1663);
    }
    #[allow(unused_mut)]
    let mut scope_1664 = writer.prefix("BacktrackWindow");
    if let Some(var_1665) = &input.backtrack_window {
        scope_1664.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1665).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1666 = writer.prefix("EnableCloudwatchLogsExports");
    if let Some(var_1667) = &input.enable_cloudwatch_logs_exports {
        let mut list_1669 = scope_1666.start_list(false, None);
        for item_1668 in var_1667 {
            #[allow(unused_mut)]
            let mut entry_1670 = list_1669.entry();
            entry_1670.string(item_1668);
        }
        list_1669.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1671 = writer.prefix("DeletionProtection");
    if let Some(var_1672) = &input.deletion_protection {
        scope_1671.boolean(*var_1672);
    }
    #[allow(unused_mut)]
    let mut scope_1673 = writer.prefix("CopyTagsToSnapshot");
    if let Some(var_1674) = &input.copy_tags_to_snapshot {
        scope_1673.boolean(*var_1674);
    }
    #[allow(unused_mut)]
    let mut scope_1675 = writer.prefix("Domain");
    if let Some(var_1676) = &input.domain {
        scope_1675.string(var_1676);
    }
    #[allow(unused_mut)]
    let mut scope_1677 = writer.prefix("DomainIAMRoleName");
    if let Some(var_1678) = &input.domain_iam_role_name {
        scope_1677.string(var_1678);
    }
    #[allow(unused_mut)]
    let mut scope_1679 = writer.prefix("ServerlessV2ScalingConfiguration");
    if let Some(var_1680) = &input.serverless_v2_scaling_configuration {
        crate::query_ser::serialize_structure_crate_model_serverless_v2_scaling_configuration(
            scope_1679, var_1680,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restore_db_cluster_from_snapshot(
    input: &crate::input::RestoreDbClusterFromSnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RestoreDBClusterFromSnapshot", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1681 = writer.prefix("AvailabilityZones");
    if let Some(var_1682) = &input.availability_zones {
        let mut list_1684 = scope_1681.start_list(false, Some("AvailabilityZone"));
        for item_1683 in var_1682 {
            #[allow(unused_mut)]
            let mut entry_1685 = list_1684.entry();
            entry_1685.string(item_1683);
        }
        list_1684.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1686 = writer.prefix("DBClusterIdentifier");
    if let Some(var_1687) = &input.db_cluster_identifier {
        scope_1686.string(var_1687);
    }
    #[allow(unused_mut)]
    let mut scope_1688 = writer.prefix("SnapshotIdentifier");
    if let Some(var_1689) = &input.snapshot_identifier {
        scope_1688.string(var_1689);
    }
    #[allow(unused_mut)]
    let mut scope_1690 = writer.prefix("Engine");
    if let Some(var_1691) = &input.engine {
        scope_1690.string(var_1691);
    }
    #[allow(unused_mut)]
    let mut scope_1692 = writer.prefix("EngineVersion");
    if let Some(var_1693) = &input.engine_version {
        scope_1692.string(var_1693);
    }
    #[allow(unused_mut)]
    let mut scope_1694 = writer.prefix("Port");
    if let Some(var_1695) = &input.port {
        scope_1694.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1695).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1696 = writer.prefix("DBSubnetGroupName");
    if let Some(var_1697) = &input.db_subnet_group_name {
        scope_1696.string(var_1697);
    }
    #[allow(unused_mut)]
    let mut scope_1698 = writer.prefix("DatabaseName");
    if let Some(var_1699) = &input.database_name {
        scope_1698.string(var_1699);
    }
    #[allow(unused_mut)]
    let mut scope_1700 = writer.prefix("OptionGroupName");
    if let Some(var_1701) = &input.option_group_name {
        scope_1700.string(var_1701);
    }
    #[allow(unused_mut)]
    let mut scope_1702 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_1703) = &input.vpc_security_group_ids {
        let mut list_1705 = scope_1702.start_list(false, Some("VpcSecurityGroupId"));
        for item_1704 in var_1703 {
            #[allow(unused_mut)]
            let mut entry_1706 = list_1705.entry();
            entry_1706.string(item_1704);
        }
        list_1705.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1707 = writer.prefix("Tags");
    if let Some(var_1708) = &input.tags {
        let mut list_1710 = scope_1707.start_list(false, Some("Tag"));
        for item_1709 in var_1708 {
            #[allow(unused_mut)]
            let mut entry_1711 = list_1710.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_1711, item_1709)?;
        }
        list_1710.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1712 = writer.prefix("KmsKeyId");
    if let Some(var_1713) = &input.kms_key_id {
        scope_1712.string(var_1713);
    }
    #[allow(unused_mut)]
    let mut scope_1714 = writer.prefix("EnableIAMDatabaseAuthentication");
    if let Some(var_1715) = &input.enable_iam_database_authentication {
        scope_1714.boolean(*var_1715);
    }
    #[allow(unused_mut)]
    let mut scope_1716 = writer.prefix("BacktrackWindow");
    if let Some(var_1717) = &input.backtrack_window {
        scope_1716.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1717).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1718 = writer.prefix("EnableCloudwatchLogsExports");
    if let Some(var_1719) = &input.enable_cloudwatch_logs_exports {
        let mut list_1721 = scope_1718.start_list(false, None);
        for item_1720 in var_1719 {
            #[allow(unused_mut)]
            let mut entry_1722 = list_1721.entry();
            entry_1722.string(item_1720);
        }
        list_1721.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1723 = writer.prefix("EngineMode");
    if let Some(var_1724) = &input.engine_mode {
        scope_1723.string(var_1724);
    }
    #[allow(unused_mut)]
    let mut scope_1725 = writer.prefix("ScalingConfiguration");
    if let Some(var_1726) = &input.scaling_configuration {
        crate::query_ser::serialize_structure_crate_model_scaling_configuration(
            scope_1725, var_1726,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1727 = writer.prefix("DBClusterParameterGroupName");
    if let Some(var_1728) = &input.db_cluster_parameter_group_name {
        scope_1727.string(var_1728);
    }
    #[allow(unused_mut)]
    let mut scope_1729 = writer.prefix("DeletionProtection");
    if let Some(var_1730) = &input.deletion_protection {
        scope_1729.boolean(*var_1730);
    }
    #[allow(unused_mut)]
    let mut scope_1731 = writer.prefix("CopyTagsToSnapshot");
    if let Some(var_1732) = &input.copy_tags_to_snapshot {
        scope_1731.boolean(*var_1732);
    }
    #[allow(unused_mut)]
    let mut scope_1733 = writer.prefix("Domain");
    if let Some(var_1734) = &input.domain {
        scope_1733.string(var_1734);
    }
    #[allow(unused_mut)]
    let mut scope_1735 = writer.prefix("DomainIAMRoleName");
    if let Some(var_1736) = &input.domain_iam_role_name {
        scope_1735.string(var_1736);
    }
    #[allow(unused_mut)]
    let mut scope_1737 = writer.prefix("DBClusterInstanceClass");
    if let Some(var_1738) = &input.db_cluster_instance_class {
        scope_1737.string(var_1738);
    }
    #[allow(unused_mut)]
    let mut scope_1739 = writer.prefix("StorageType");
    if let Some(var_1740) = &input.storage_type {
        scope_1739.string(var_1740);
    }
    #[allow(unused_mut)]
    let mut scope_1741 = writer.prefix("Iops");
    if let Some(var_1742) = &input.iops {
        scope_1741.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1742).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1743 = writer.prefix("PubliclyAccessible");
    if let Some(var_1744) = &input.publicly_accessible {
        scope_1743.boolean(*var_1744);
    }
    #[allow(unused_mut)]
    let mut scope_1745 = writer.prefix("ServerlessV2ScalingConfiguration");
    if let Some(var_1746) = &input.serverless_v2_scaling_configuration {
        crate::query_ser::serialize_structure_crate_model_serverless_v2_scaling_configuration(
            scope_1745, var_1746,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restore_db_cluster_to_point_in_time(
    input: &crate::input::RestoreDbClusterToPointInTimeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RestoreDBClusterToPointInTime", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1747 = writer.prefix("DBClusterIdentifier");
    if let Some(var_1748) = &input.db_cluster_identifier {
        scope_1747.string(var_1748);
    }
    #[allow(unused_mut)]
    let mut scope_1749 = writer.prefix("RestoreType");
    if let Some(var_1750) = &input.restore_type {
        scope_1749.string(var_1750);
    }
    #[allow(unused_mut)]
    let mut scope_1751 = writer.prefix("SourceDBClusterIdentifier");
    if let Some(var_1752) = &input.source_db_cluster_identifier {
        scope_1751.string(var_1752);
    }
    #[allow(unused_mut)]
    let mut scope_1753 = writer.prefix("RestoreToTime");
    if let Some(var_1754) = &input.restore_to_time {
        scope_1753.date_time(var_1754, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_1755 = writer.prefix("UseLatestRestorableTime");
    if input.use_latest_restorable_time {
        scope_1755.boolean(input.use_latest_restorable_time);
    }
    #[allow(unused_mut)]
    let mut scope_1756 = writer.prefix("Port");
    if let Some(var_1757) = &input.port {
        scope_1756.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1757).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1758 = writer.prefix("DBSubnetGroupName");
    if let Some(var_1759) = &input.db_subnet_group_name {
        scope_1758.string(var_1759);
    }
    #[allow(unused_mut)]
    let mut scope_1760 = writer.prefix("OptionGroupName");
    if let Some(var_1761) = &input.option_group_name {
        scope_1760.string(var_1761);
    }
    #[allow(unused_mut)]
    let mut scope_1762 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_1763) = &input.vpc_security_group_ids {
        let mut list_1765 = scope_1762.start_list(false, Some("VpcSecurityGroupId"));
        for item_1764 in var_1763 {
            #[allow(unused_mut)]
            let mut entry_1766 = list_1765.entry();
            entry_1766.string(item_1764);
        }
        list_1765.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1767 = writer.prefix("Tags");
    if let Some(var_1768) = &input.tags {
        let mut list_1770 = scope_1767.start_list(false, Some("Tag"));
        for item_1769 in var_1768 {
            #[allow(unused_mut)]
            let mut entry_1771 = list_1770.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_1771, item_1769)?;
        }
        list_1770.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1772 = writer.prefix("KmsKeyId");
    if let Some(var_1773) = &input.kms_key_id {
        scope_1772.string(var_1773);
    }
    #[allow(unused_mut)]
    let mut scope_1774 = writer.prefix("EnableIAMDatabaseAuthentication");
    if let Some(var_1775) = &input.enable_iam_database_authentication {
        scope_1774.boolean(*var_1775);
    }
    #[allow(unused_mut)]
    let mut scope_1776 = writer.prefix("BacktrackWindow");
    if let Some(var_1777) = &input.backtrack_window {
        scope_1776.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1777).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1778 = writer.prefix("EnableCloudwatchLogsExports");
    if let Some(var_1779) = &input.enable_cloudwatch_logs_exports {
        let mut list_1781 = scope_1778.start_list(false, None);
        for item_1780 in var_1779 {
            #[allow(unused_mut)]
            let mut entry_1782 = list_1781.entry();
            entry_1782.string(item_1780);
        }
        list_1781.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1783 = writer.prefix("DBClusterParameterGroupName");
    if let Some(var_1784) = &input.db_cluster_parameter_group_name {
        scope_1783.string(var_1784);
    }
    #[allow(unused_mut)]
    let mut scope_1785 = writer.prefix("DeletionProtection");
    if let Some(var_1786) = &input.deletion_protection {
        scope_1785.boolean(*var_1786);
    }
    #[allow(unused_mut)]
    let mut scope_1787 = writer.prefix("CopyTagsToSnapshot");
    if let Some(var_1788) = &input.copy_tags_to_snapshot {
        scope_1787.boolean(*var_1788);
    }
    #[allow(unused_mut)]
    let mut scope_1789 = writer.prefix("Domain");
    if let Some(var_1790) = &input.domain {
        scope_1789.string(var_1790);
    }
    #[allow(unused_mut)]
    let mut scope_1791 = writer.prefix("DomainIAMRoleName");
    if let Some(var_1792) = &input.domain_iam_role_name {
        scope_1791.string(var_1792);
    }
    #[allow(unused_mut)]
    let mut scope_1793 = writer.prefix("ScalingConfiguration");
    if let Some(var_1794) = &input.scaling_configuration {
        crate::query_ser::serialize_structure_crate_model_scaling_configuration(
            scope_1793, var_1794,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1795 = writer.prefix("EngineMode");
    if let Some(var_1796) = &input.engine_mode {
        scope_1795.string(var_1796);
    }
    #[allow(unused_mut)]
    let mut scope_1797 = writer.prefix("DBClusterInstanceClass");
    if let Some(var_1798) = &input.db_cluster_instance_class {
        scope_1797.string(var_1798);
    }
    #[allow(unused_mut)]
    let mut scope_1799 = writer.prefix("StorageType");
    if let Some(var_1800) = &input.storage_type {
        scope_1799.string(var_1800);
    }
    #[allow(unused_mut)]
    let mut scope_1801 = writer.prefix("PubliclyAccessible");
    if let Some(var_1802) = &input.publicly_accessible {
        scope_1801.boolean(*var_1802);
    }
    #[allow(unused_mut)]
    let mut scope_1803 = writer.prefix("Iops");
    if let Some(var_1804) = &input.iops {
        scope_1803.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1804).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1805 = writer.prefix("ServerlessV2ScalingConfiguration");
    if let Some(var_1806) = &input.serverless_v2_scaling_configuration {
        crate::query_ser::serialize_structure_crate_model_serverless_v2_scaling_configuration(
            scope_1805, var_1806,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restore_db_instance_from_db_snapshot(
    input: &crate::input::RestoreDbInstanceFromDbSnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RestoreDBInstanceFromDBSnapshot",
        "2014-10-31",
    );
    #[allow(unused_mut)]
    let mut scope_1807 = writer.prefix("DBInstanceIdentifier");
    if let Some(var_1808) = &input.db_instance_identifier {
        scope_1807.string(var_1808);
    }
    #[allow(unused_mut)]
    let mut scope_1809 = writer.prefix("DBSnapshotIdentifier");
    if let Some(var_1810) = &input.db_snapshot_identifier {
        scope_1809.string(var_1810);
    }
    #[allow(unused_mut)]
    let mut scope_1811 = writer.prefix("DBInstanceClass");
    if let Some(var_1812) = &input.db_instance_class {
        scope_1811.string(var_1812);
    }
    #[allow(unused_mut)]
    let mut scope_1813 = writer.prefix("Port");
    if let Some(var_1814) = &input.port {
        scope_1813.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1814).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1815 = writer.prefix("AvailabilityZone");
    if let Some(var_1816) = &input.availability_zone {
        scope_1815.string(var_1816);
    }
    #[allow(unused_mut)]
    let mut scope_1817 = writer.prefix("DBSubnetGroupName");
    if let Some(var_1818) = &input.db_subnet_group_name {
        scope_1817.string(var_1818);
    }
    #[allow(unused_mut)]
    let mut scope_1819 = writer.prefix("MultiAZ");
    if let Some(var_1820) = &input.multi_az {
        scope_1819.boolean(*var_1820);
    }
    #[allow(unused_mut)]
    let mut scope_1821 = writer.prefix("PubliclyAccessible");
    if let Some(var_1822) = &input.publicly_accessible {
        scope_1821.boolean(*var_1822);
    }
    #[allow(unused_mut)]
    let mut scope_1823 = writer.prefix("AutoMinorVersionUpgrade");
    if let Some(var_1824) = &input.auto_minor_version_upgrade {
        scope_1823.boolean(*var_1824);
    }
    #[allow(unused_mut)]
    let mut scope_1825 = writer.prefix("LicenseModel");
    if let Some(var_1826) = &input.license_model {
        scope_1825.string(var_1826);
    }
    #[allow(unused_mut)]
    let mut scope_1827 = writer.prefix("DBName");
    if let Some(var_1828) = &input.db_name {
        scope_1827.string(var_1828);
    }
    #[allow(unused_mut)]
    let mut scope_1829 = writer.prefix("Engine");
    if let Some(var_1830) = &input.engine {
        scope_1829.string(var_1830);
    }
    #[allow(unused_mut)]
    let mut scope_1831 = writer.prefix("Iops");
    if let Some(var_1832) = &input.iops {
        scope_1831.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1832).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1833 = writer.prefix("OptionGroupName");
    if let Some(var_1834) = &input.option_group_name {
        scope_1833.string(var_1834);
    }
    #[allow(unused_mut)]
    let mut scope_1835 = writer.prefix("Tags");
    if let Some(var_1836) = &input.tags {
        let mut list_1838 = scope_1835.start_list(false, Some("Tag"));
        for item_1837 in var_1836 {
            #[allow(unused_mut)]
            let mut entry_1839 = list_1838.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_1839, item_1837)?;
        }
        list_1838.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1840 = writer.prefix("StorageType");
    if let Some(var_1841) = &input.storage_type {
        scope_1840.string(var_1841);
    }
    #[allow(unused_mut)]
    let mut scope_1842 = writer.prefix("TdeCredentialArn");
    if let Some(var_1843) = &input.tde_credential_arn {
        scope_1842.string(var_1843);
    }
    #[allow(unused_mut)]
    let mut scope_1844 = writer.prefix("TdeCredentialPassword");
    if let Some(var_1845) = &input.tde_credential_password {
        scope_1844.string(var_1845);
    }
    #[allow(unused_mut)]
    let mut scope_1846 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_1847) = &input.vpc_security_group_ids {
        let mut list_1849 = scope_1846.start_list(false, Some("VpcSecurityGroupId"));
        for item_1848 in var_1847 {
            #[allow(unused_mut)]
            let mut entry_1850 = list_1849.entry();
            entry_1850.string(item_1848);
        }
        list_1849.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1851 = writer.prefix("Domain");
    if let Some(var_1852) = &input.domain {
        scope_1851.string(var_1852);
    }
    #[allow(unused_mut)]
    let mut scope_1853 = writer.prefix("CopyTagsToSnapshot");
    if let Some(var_1854) = &input.copy_tags_to_snapshot {
        scope_1853.boolean(*var_1854);
    }
    #[allow(unused_mut)]
    let mut scope_1855 = writer.prefix("DomainIAMRoleName");
    if let Some(var_1856) = &input.domain_iam_role_name {
        scope_1855.string(var_1856);
    }
    #[allow(unused_mut)]
    let mut scope_1857 = writer.prefix("EnableIAMDatabaseAuthentication");
    if let Some(var_1858) = &input.enable_iam_database_authentication {
        scope_1857.boolean(*var_1858);
    }
    #[allow(unused_mut)]
    let mut scope_1859 = writer.prefix("EnableCloudwatchLogsExports");
    if let Some(var_1860) = &input.enable_cloudwatch_logs_exports {
        let mut list_1862 = scope_1859.start_list(false, None);
        for item_1861 in var_1860 {
            #[allow(unused_mut)]
            let mut entry_1863 = list_1862.entry();
            entry_1863.string(item_1861);
        }
        list_1862.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1864 = writer.prefix("ProcessorFeatures");
    if let Some(var_1865) = &input.processor_features {
        let mut list_1867 = scope_1864.start_list(false, Some("ProcessorFeature"));
        for item_1866 in var_1865 {
            #[allow(unused_mut)]
            let mut entry_1868 = list_1867.entry();
            crate::query_ser::serialize_structure_crate_model_processor_feature(
                entry_1868, item_1866,
            )?;
        }
        list_1867.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1869 = writer.prefix("UseDefaultProcessorFeatures");
    if let Some(var_1870) = &input.use_default_processor_features {
        scope_1869.boolean(*var_1870);
    }
    #[allow(unused_mut)]
    let mut scope_1871 = writer.prefix("DBParameterGroupName");
    if let Some(var_1872) = &input.db_parameter_group_name {
        scope_1871.string(var_1872);
    }
    #[allow(unused_mut)]
    let mut scope_1873 = writer.prefix("DeletionProtection");
    if let Some(var_1874) = &input.deletion_protection {
        scope_1873.boolean(*var_1874);
    }
    #[allow(unused_mut)]
    let mut scope_1875 = writer.prefix("EnableCustomerOwnedIp");
    if let Some(var_1876) = &input.enable_customer_owned_ip {
        scope_1875.boolean(*var_1876);
    }
    #[allow(unused_mut)]
    let mut scope_1877 = writer.prefix("CustomIamInstanceProfile");
    if let Some(var_1878) = &input.custom_iam_instance_profile {
        scope_1877.string(var_1878);
    }
    #[allow(unused_mut)]
    let mut scope_1879 = writer.prefix("BackupTarget");
    if let Some(var_1880) = &input.backup_target {
        scope_1879.string(var_1880);
    }
    #[allow(unused_mut)]
    let mut scope_1881 = writer.prefix("NetworkType");
    if let Some(var_1882) = &input.network_type {
        scope_1881.string(var_1882);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restore_db_instance_from_s3(
    input: &crate::input::RestoreDbInstanceFromS3Input,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RestoreDBInstanceFromS3", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1883 = writer.prefix("DBName");
    if let Some(var_1884) = &input.db_name {
        scope_1883.string(var_1884);
    }
    #[allow(unused_mut)]
    let mut scope_1885 = writer.prefix("DBInstanceIdentifier");
    if let Some(var_1886) = &input.db_instance_identifier {
        scope_1885.string(var_1886);
    }
    #[allow(unused_mut)]
    let mut scope_1887 = writer.prefix("AllocatedStorage");
    if let Some(var_1888) = &input.allocated_storage {
        scope_1887.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1888).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1889 = writer.prefix("DBInstanceClass");
    if let Some(var_1890) = &input.db_instance_class {
        scope_1889.string(var_1890);
    }
    #[allow(unused_mut)]
    let mut scope_1891 = writer.prefix("Engine");
    if let Some(var_1892) = &input.engine {
        scope_1891.string(var_1892);
    }
    #[allow(unused_mut)]
    let mut scope_1893 = writer.prefix("MasterUsername");
    if let Some(var_1894) = &input.master_username {
        scope_1893.string(var_1894);
    }
    #[allow(unused_mut)]
    let mut scope_1895 = writer.prefix("MasterUserPassword");
    if let Some(var_1896) = &input.master_user_password {
        scope_1895.string(var_1896);
    }
    #[allow(unused_mut)]
    let mut scope_1897 = writer.prefix("DBSecurityGroups");
    if let Some(var_1898) = &input.db_security_groups {
        let mut list_1900 = scope_1897.start_list(false, Some("DBSecurityGroupName"));
        for item_1899 in var_1898 {
            #[allow(unused_mut)]
            let mut entry_1901 = list_1900.entry();
            entry_1901.string(item_1899);
        }
        list_1900.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1902 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_1903) = &input.vpc_security_group_ids {
        let mut list_1905 = scope_1902.start_list(false, Some("VpcSecurityGroupId"));
        for item_1904 in var_1903 {
            #[allow(unused_mut)]
            let mut entry_1906 = list_1905.entry();
            entry_1906.string(item_1904);
        }
        list_1905.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1907 = writer.prefix("AvailabilityZone");
    if let Some(var_1908) = &input.availability_zone {
        scope_1907.string(var_1908);
    }
    #[allow(unused_mut)]
    let mut scope_1909 = writer.prefix("DBSubnetGroupName");
    if let Some(var_1910) = &input.db_subnet_group_name {
        scope_1909.string(var_1910);
    }
    #[allow(unused_mut)]
    let mut scope_1911 = writer.prefix("PreferredMaintenanceWindow");
    if let Some(var_1912) = &input.preferred_maintenance_window {
        scope_1911.string(var_1912);
    }
    #[allow(unused_mut)]
    let mut scope_1913 = writer.prefix("DBParameterGroupName");
    if let Some(var_1914) = &input.db_parameter_group_name {
        scope_1913.string(var_1914);
    }
    #[allow(unused_mut)]
    let mut scope_1915 = writer.prefix("BackupRetentionPeriod");
    if let Some(var_1916) = &input.backup_retention_period {
        scope_1915.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1916).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1917 = writer.prefix("PreferredBackupWindow");
    if let Some(var_1918) = &input.preferred_backup_window {
        scope_1917.string(var_1918);
    }
    #[allow(unused_mut)]
    let mut scope_1919 = writer.prefix("Port");
    if let Some(var_1920) = &input.port {
        scope_1919.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1920).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1921 = writer.prefix("MultiAZ");
    if let Some(var_1922) = &input.multi_az {
        scope_1921.boolean(*var_1922);
    }
    #[allow(unused_mut)]
    let mut scope_1923 = writer.prefix("EngineVersion");
    if let Some(var_1924) = &input.engine_version {
        scope_1923.string(var_1924);
    }
    #[allow(unused_mut)]
    let mut scope_1925 = writer.prefix("AutoMinorVersionUpgrade");
    if let Some(var_1926) = &input.auto_minor_version_upgrade {
        scope_1925.boolean(*var_1926);
    }
    #[allow(unused_mut)]
    let mut scope_1927 = writer.prefix("LicenseModel");
    if let Some(var_1928) = &input.license_model {
        scope_1927.string(var_1928);
    }
    #[allow(unused_mut)]
    let mut scope_1929 = writer.prefix("Iops");
    if let Some(var_1930) = &input.iops {
        scope_1929.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1930).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1931 = writer.prefix("OptionGroupName");
    if let Some(var_1932) = &input.option_group_name {
        scope_1931.string(var_1932);
    }
    #[allow(unused_mut)]
    let mut scope_1933 = writer.prefix("PubliclyAccessible");
    if let Some(var_1934) = &input.publicly_accessible {
        scope_1933.boolean(*var_1934);
    }
    #[allow(unused_mut)]
    let mut scope_1935 = writer.prefix("Tags");
    if let Some(var_1936) = &input.tags {
        let mut list_1938 = scope_1935.start_list(false, Some("Tag"));
        for item_1937 in var_1936 {
            #[allow(unused_mut)]
            let mut entry_1939 = list_1938.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_1939, item_1937)?;
        }
        list_1938.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1940 = writer.prefix("StorageType");
    if let Some(var_1941) = &input.storage_type {
        scope_1940.string(var_1941);
    }
    #[allow(unused_mut)]
    let mut scope_1942 = writer.prefix("StorageEncrypted");
    if let Some(var_1943) = &input.storage_encrypted {
        scope_1942.boolean(*var_1943);
    }
    #[allow(unused_mut)]
    let mut scope_1944 = writer.prefix("KmsKeyId");
    if let Some(var_1945) = &input.kms_key_id {
        scope_1944.string(var_1945);
    }
    #[allow(unused_mut)]
    let mut scope_1946 = writer.prefix("CopyTagsToSnapshot");
    if let Some(var_1947) = &input.copy_tags_to_snapshot {
        scope_1946.boolean(*var_1947);
    }
    #[allow(unused_mut)]
    let mut scope_1948 = writer.prefix("MonitoringInterval");
    if let Some(var_1949) = &input.monitoring_interval {
        scope_1948.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1949).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1950 = writer.prefix("MonitoringRoleArn");
    if let Some(var_1951) = &input.monitoring_role_arn {
        scope_1950.string(var_1951);
    }
    #[allow(unused_mut)]
    let mut scope_1952 = writer.prefix("EnableIAMDatabaseAuthentication");
    if let Some(var_1953) = &input.enable_iam_database_authentication {
        scope_1952.boolean(*var_1953);
    }
    #[allow(unused_mut)]
    let mut scope_1954 = writer.prefix("SourceEngine");
    if let Some(var_1955) = &input.source_engine {
        scope_1954.string(var_1955);
    }
    #[allow(unused_mut)]
    let mut scope_1956 = writer.prefix("SourceEngineVersion");
    if let Some(var_1957) = &input.source_engine_version {
        scope_1956.string(var_1957);
    }
    #[allow(unused_mut)]
    let mut scope_1958 = writer.prefix("S3BucketName");
    if let Some(var_1959) = &input.s3_bucket_name {
        scope_1958.string(var_1959);
    }
    #[allow(unused_mut)]
    let mut scope_1960 = writer.prefix("S3Prefix");
    if let Some(var_1961) = &input.s3_prefix {
        scope_1960.string(var_1961);
    }
    #[allow(unused_mut)]
    let mut scope_1962 = writer.prefix("S3IngestionRoleArn");
    if let Some(var_1963) = &input.s3_ingestion_role_arn {
        scope_1962.string(var_1963);
    }
    #[allow(unused_mut)]
    let mut scope_1964 = writer.prefix("EnablePerformanceInsights");
    if let Some(var_1965) = &input.enable_performance_insights {
        scope_1964.boolean(*var_1965);
    }
    #[allow(unused_mut)]
    let mut scope_1966 = writer.prefix("PerformanceInsightsKMSKeyId");
    if let Some(var_1967) = &input.performance_insights_kms_key_id {
        scope_1966.string(var_1967);
    }
    #[allow(unused_mut)]
    let mut scope_1968 = writer.prefix("PerformanceInsightsRetentionPeriod");
    if let Some(var_1969) = &input.performance_insights_retention_period {
        scope_1968.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1969).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1970 = writer.prefix("EnableCloudwatchLogsExports");
    if let Some(var_1971) = &input.enable_cloudwatch_logs_exports {
        let mut list_1973 = scope_1970.start_list(false, None);
        for item_1972 in var_1971 {
            #[allow(unused_mut)]
            let mut entry_1974 = list_1973.entry();
            entry_1974.string(item_1972);
        }
        list_1973.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1975 = writer.prefix("ProcessorFeatures");
    if let Some(var_1976) = &input.processor_features {
        let mut list_1978 = scope_1975.start_list(false, Some("ProcessorFeature"));
        for item_1977 in var_1976 {
            #[allow(unused_mut)]
            let mut entry_1979 = list_1978.entry();
            crate::query_ser::serialize_structure_crate_model_processor_feature(
                entry_1979, item_1977,
            )?;
        }
        list_1978.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1980 = writer.prefix("UseDefaultProcessorFeatures");
    if let Some(var_1981) = &input.use_default_processor_features {
        scope_1980.boolean(*var_1981);
    }
    #[allow(unused_mut)]
    let mut scope_1982 = writer.prefix("DeletionProtection");
    if let Some(var_1983) = &input.deletion_protection {
        scope_1982.boolean(*var_1983);
    }
    #[allow(unused_mut)]
    let mut scope_1984 = writer.prefix("MaxAllocatedStorage");
    if let Some(var_1985) = &input.max_allocated_storage {
        scope_1984.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1985).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1986 = writer.prefix("NetworkType");
    if let Some(var_1987) = &input.network_type {
        scope_1986.string(var_1987);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restore_db_instance_to_point_in_time(
    input: &crate::input::RestoreDbInstanceToPointInTimeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RestoreDBInstanceToPointInTime",
        "2014-10-31",
    );
    #[allow(unused_mut)]
    let mut scope_1988 = writer.prefix("SourceDBInstanceIdentifier");
    if let Some(var_1989) = &input.source_db_instance_identifier {
        scope_1988.string(var_1989);
    }
    #[allow(unused_mut)]
    let mut scope_1990 = writer.prefix("TargetDBInstanceIdentifier");
    if let Some(var_1991) = &input.target_db_instance_identifier {
        scope_1990.string(var_1991);
    }
    #[allow(unused_mut)]
    let mut scope_1992 = writer.prefix("RestoreTime");
    if let Some(var_1993) = &input.restore_time {
        scope_1992.date_time(var_1993, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_1994 = writer.prefix("UseLatestRestorableTime");
    if input.use_latest_restorable_time {
        scope_1994.boolean(input.use_latest_restorable_time);
    }
    #[allow(unused_mut)]
    let mut scope_1995 = writer.prefix("DBInstanceClass");
    if let Some(var_1996) = &input.db_instance_class {
        scope_1995.string(var_1996);
    }
    #[allow(unused_mut)]
    let mut scope_1997 = writer.prefix("Port");
    if let Some(var_1998) = &input.port {
        scope_1997.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1998).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1999 = writer.prefix("AvailabilityZone");
    if let Some(var_2000) = &input.availability_zone {
        scope_1999.string(var_2000);
    }
    #[allow(unused_mut)]
    let mut scope_2001 = writer.prefix("DBSubnetGroupName");
    if let Some(var_2002) = &input.db_subnet_group_name {
        scope_2001.string(var_2002);
    }
    #[allow(unused_mut)]
    let mut scope_2003 = writer.prefix("MultiAZ");
    if let Some(var_2004) = &input.multi_az {
        scope_2003.boolean(*var_2004);
    }
    #[allow(unused_mut)]
    let mut scope_2005 = writer.prefix("PubliclyAccessible");
    if let Some(var_2006) = &input.publicly_accessible {
        scope_2005.boolean(*var_2006);
    }
    #[allow(unused_mut)]
    let mut scope_2007 = writer.prefix("AutoMinorVersionUpgrade");
    if let Some(var_2008) = &input.auto_minor_version_upgrade {
        scope_2007.boolean(*var_2008);
    }
    #[allow(unused_mut)]
    let mut scope_2009 = writer.prefix("LicenseModel");
    if let Some(var_2010) = &input.license_model {
        scope_2009.string(var_2010);
    }
    #[allow(unused_mut)]
    let mut scope_2011 = writer.prefix("DBName");
    if let Some(var_2012) = &input.db_name {
        scope_2011.string(var_2012);
    }
    #[allow(unused_mut)]
    let mut scope_2013 = writer.prefix("Engine");
    if let Some(var_2014) = &input.engine {
        scope_2013.string(var_2014);
    }
    #[allow(unused_mut)]
    let mut scope_2015 = writer.prefix("Iops");
    if let Some(var_2016) = &input.iops {
        scope_2015.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2016).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2017 = writer.prefix("OptionGroupName");
    if let Some(var_2018) = &input.option_group_name {
        scope_2017.string(var_2018);
    }
    #[allow(unused_mut)]
    let mut scope_2019 = writer.prefix("CopyTagsToSnapshot");
    if let Some(var_2020) = &input.copy_tags_to_snapshot {
        scope_2019.boolean(*var_2020);
    }
    #[allow(unused_mut)]
    let mut scope_2021 = writer.prefix("Tags");
    if let Some(var_2022) = &input.tags {
        let mut list_2024 = scope_2021.start_list(false, Some("Tag"));
        for item_2023 in var_2022 {
            #[allow(unused_mut)]
            let mut entry_2025 = list_2024.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_2025, item_2023)?;
        }
        list_2024.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2026 = writer.prefix("StorageType");
    if let Some(var_2027) = &input.storage_type {
        scope_2026.string(var_2027);
    }
    #[allow(unused_mut)]
    let mut scope_2028 = writer.prefix("TdeCredentialArn");
    if let Some(var_2029) = &input.tde_credential_arn {
        scope_2028.string(var_2029);
    }
    #[allow(unused_mut)]
    let mut scope_2030 = writer.prefix("TdeCredentialPassword");
    if let Some(var_2031) = &input.tde_credential_password {
        scope_2030.string(var_2031);
    }
    #[allow(unused_mut)]
    let mut scope_2032 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_2033) = &input.vpc_security_group_ids {
        let mut list_2035 = scope_2032.start_list(false, Some("VpcSecurityGroupId"));
        for item_2034 in var_2033 {
            #[allow(unused_mut)]
            let mut entry_2036 = list_2035.entry();
            entry_2036.string(item_2034);
        }
        list_2035.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2037 = writer.prefix("Domain");
    if let Some(var_2038) = &input.domain {
        scope_2037.string(var_2038);
    }
    #[allow(unused_mut)]
    let mut scope_2039 = writer.prefix("DomainIAMRoleName");
    if let Some(var_2040) = &input.domain_iam_role_name {
        scope_2039.string(var_2040);
    }
    #[allow(unused_mut)]
    let mut scope_2041 = writer.prefix("EnableIAMDatabaseAuthentication");
    if let Some(var_2042) = &input.enable_iam_database_authentication {
        scope_2041.boolean(*var_2042);
    }
    #[allow(unused_mut)]
    let mut scope_2043 = writer.prefix("EnableCloudwatchLogsExports");
    if let Some(var_2044) = &input.enable_cloudwatch_logs_exports {
        let mut list_2046 = scope_2043.start_list(false, None);
        for item_2045 in var_2044 {
            #[allow(unused_mut)]
            let mut entry_2047 = list_2046.entry();
            entry_2047.string(item_2045);
        }
        list_2046.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2048 = writer.prefix("ProcessorFeatures");
    if let Some(var_2049) = &input.processor_features {
        let mut list_2051 = scope_2048.start_list(false, Some("ProcessorFeature"));
        for item_2050 in var_2049 {
            #[allow(unused_mut)]
            let mut entry_2052 = list_2051.entry();
            crate::query_ser::serialize_structure_crate_model_processor_feature(
                entry_2052, item_2050,
            )?;
        }
        list_2051.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2053 = writer.prefix("UseDefaultProcessorFeatures");
    if let Some(var_2054) = &input.use_default_processor_features {
        scope_2053.boolean(*var_2054);
    }
    #[allow(unused_mut)]
    let mut scope_2055 = writer.prefix("DBParameterGroupName");
    if let Some(var_2056) = &input.db_parameter_group_name {
        scope_2055.string(var_2056);
    }
    #[allow(unused_mut)]
    let mut scope_2057 = writer.prefix("DeletionProtection");
    if let Some(var_2058) = &input.deletion_protection {
        scope_2057.boolean(*var_2058);
    }
    #[allow(unused_mut)]
    let mut scope_2059 = writer.prefix("SourceDbiResourceId");
    if let Some(var_2060) = &input.source_dbi_resource_id {
        scope_2059.string(var_2060);
    }
    #[allow(unused_mut)]
    let mut scope_2061 = writer.prefix("MaxAllocatedStorage");
    if let Some(var_2062) = &input.max_allocated_storage {
        scope_2061.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2062).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2063 = writer.prefix("SourceDBInstanceAutomatedBackupsArn");
    if let Some(var_2064) = &input.source_db_instance_automated_backups_arn {
        scope_2063.string(var_2064);
    }
    #[allow(unused_mut)]
    let mut scope_2065 = writer.prefix("EnableCustomerOwnedIp");
    if let Some(var_2066) = &input.enable_customer_owned_ip {
        scope_2065.boolean(*var_2066);
    }
    #[allow(unused_mut)]
    let mut scope_2067 = writer.prefix("CustomIamInstanceProfile");
    if let Some(var_2068) = &input.custom_iam_instance_profile {
        scope_2067.string(var_2068);
    }
    #[allow(unused_mut)]
    let mut scope_2069 = writer.prefix("BackupTarget");
    if let Some(var_2070) = &input.backup_target {
        scope_2069.string(var_2070);
    }
    #[allow(unused_mut)]
    let mut scope_2071 = writer.prefix("NetworkType");
    if let Some(var_2072) = &input.network_type {
        scope_2071.string(var_2072);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_revoke_db_security_group_ingress(
    input: &crate::input::RevokeDbSecurityGroupIngressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RevokeDBSecurityGroupIngress", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_2073 = writer.prefix("DBSecurityGroupName");
    if let Some(var_2074) = &input.db_security_group_name {
        scope_2073.string(var_2074);
    }
    #[allow(unused_mut)]
    let mut scope_2075 = writer.prefix("CIDRIP");
    if let Some(var_2076) = &input.cidrip {
        scope_2075.string(var_2076);
    }
    #[allow(unused_mut)]
    let mut scope_2077 = writer.prefix("EC2SecurityGroupName");
    if let Some(var_2078) = &input.ec2_security_group_name {
        scope_2077.string(var_2078);
    }
    #[allow(unused_mut)]
    let mut scope_2079 = writer.prefix("EC2SecurityGroupId");
    if let Some(var_2080) = &input.ec2_security_group_id {
        scope_2079.string(var_2080);
    }
    #[allow(unused_mut)]
    let mut scope_2081 = writer.prefix("EC2SecurityGroupOwnerId");
    if let Some(var_2082) = &input.ec2_security_group_owner_id {
        scope_2081.string(var_2082);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_start_activity_stream(
    input: &crate::input::StartActivityStreamInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "StartActivityStream", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_2083 = writer.prefix("ResourceArn");
    if let Some(var_2084) = &input.resource_arn {
        scope_2083.string(var_2084);
    }
    #[allow(unused_mut)]
    let mut scope_2085 = writer.prefix("Mode");
    if let Some(var_2086) = &input.mode {
        scope_2085.string(var_2086.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2087 = writer.prefix("KmsKeyId");
    if let Some(var_2088) = &input.kms_key_id {
        scope_2087.string(var_2088);
    }
    #[allow(unused_mut)]
    let mut scope_2089 = writer.prefix("ApplyImmediately");
    if let Some(var_2090) = &input.apply_immediately {
        scope_2089.boolean(*var_2090);
    }
    #[allow(unused_mut)]
    let mut scope_2091 = writer.prefix("EngineNativeAuditFieldsIncluded");
    if let Some(var_2092) = &input.engine_native_audit_fields_included {
        scope_2091.boolean(*var_2092);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_start_db_cluster(
    input: &crate::input::StartDbClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "StartDBCluster", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_2093 = writer.prefix("DBClusterIdentifier");
    if let Some(var_2094) = &input.db_cluster_identifier {
        scope_2093.string(var_2094);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_start_db_instance(
    input: &crate::input::StartDbInstanceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "StartDBInstance", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_2095 = writer.prefix("DBInstanceIdentifier");
    if let Some(var_2096) = &input.db_instance_identifier {
        scope_2095.string(var_2096);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_start_db_instance_automated_backups_replication(
    input: &crate::input::StartDbInstanceAutomatedBackupsReplicationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "StartDBInstanceAutomatedBackupsReplication",
        "2014-10-31",
    );
    #[allow(unused_mut)]
    let mut scope_2097 = writer.prefix("SourceDBInstanceArn");
    if let Some(var_2098) = &input.source_db_instance_arn {
        scope_2097.string(var_2098);
    }
    #[allow(unused_mut)]
    let mut scope_2099 = writer.prefix("BackupRetentionPeriod");
    if let Some(var_2100) = &input.backup_retention_period {
        scope_2099.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2100).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2101 = writer.prefix("KmsKeyId");
    if let Some(var_2102) = &input.kms_key_id {
        scope_2101.string(var_2102);
    }
    #[allow(unused_mut)]
    let mut scope_2103 = writer.prefix("PreSignedUrl");
    if let Some(var_2104) = &input.pre_signed_url {
        scope_2103.string(var_2104);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_start_export_task(
    input: &crate::input::StartExportTaskInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "StartExportTask", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_2105 = writer.prefix("ExportTaskIdentifier");
    if let Some(var_2106) = &input.export_task_identifier {
        scope_2105.string(var_2106);
    }
    #[allow(unused_mut)]
    let mut scope_2107 = writer.prefix("SourceArn");
    if let Some(var_2108) = &input.source_arn {
        scope_2107.string(var_2108);
    }
    #[allow(unused_mut)]
    let mut scope_2109 = writer.prefix("S3BucketName");
    if let Some(var_2110) = &input.s3_bucket_name {
        scope_2109.string(var_2110);
    }
    #[allow(unused_mut)]
    let mut scope_2111 = writer.prefix("IamRoleArn");
    if let Some(var_2112) = &input.iam_role_arn {
        scope_2111.string(var_2112);
    }
    #[allow(unused_mut)]
    let mut scope_2113 = writer.prefix("KmsKeyId");
    if let Some(var_2114) = &input.kms_key_id {
        scope_2113.string(var_2114);
    }
    #[allow(unused_mut)]
    let mut scope_2115 = writer.prefix("S3Prefix");
    if let Some(var_2116) = &input.s3_prefix {
        scope_2115.string(var_2116);
    }
    #[allow(unused_mut)]
    let mut scope_2117 = writer.prefix("ExportOnly");
    if let Some(var_2118) = &input.export_only {
        let mut list_2120 = scope_2117.start_list(false, None);
        for item_2119 in var_2118 {
            #[allow(unused_mut)]
            let mut entry_2121 = list_2120.entry();
            entry_2121.string(item_2119);
        }
        list_2120.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_stop_activity_stream(
    input: &crate::input::StopActivityStreamInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "StopActivityStream", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_2122 = writer.prefix("ResourceArn");
    if let Some(var_2123) = &input.resource_arn {
        scope_2122.string(var_2123);
    }
    #[allow(unused_mut)]
    let mut scope_2124 = writer.prefix("ApplyImmediately");
    if let Some(var_2125) = &input.apply_immediately {
        scope_2124.boolean(*var_2125);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_stop_db_cluster(
    input: &crate::input::StopDbClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "StopDBCluster", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_2126 = writer.prefix("DBClusterIdentifier");
    if let Some(var_2127) = &input.db_cluster_identifier {
        scope_2126.string(var_2127);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_stop_db_instance(
    input: &crate::input::StopDbInstanceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "StopDBInstance", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_2128 = writer.prefix("DBInstanceIdentifier");
    if let Some(var_2129) = &input.db_instance_identifier {
        scope_2128.string(var_2129);
    }
    #[allow(unused_mut)]
    let mut scope_2130 = writer.prefix("DBSnapshotIdentifier");
    if let Some(var_2131) = &input.db_snapshot_identifier {
        scope_2130.string(var_2131);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_stop_db_instance_automated_backups_replication(
    input: &crate::input::StopDbInstanceAutomatedBackupsReplicationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "StopDBInstanceAutomatedBackupsReplication",
        "2014-10-31",
    );
    #[allow(unused_mut)]
    let mut scope_2132 = writer.prefix("SourceDBInstanceArn");
    if let Some(var_2133) = &input.source_db_instance_arn {
        scope_2132.string(var_2133);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}
