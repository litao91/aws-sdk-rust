// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_batch_create_partition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchCreatePartitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.catalog_id {
        object.key("CatalogId").string(var_1.as_str());
    }
    if let Some(var_2) = &input.database_name {
        object.key("DatabaseName").string(var_2.as_str());
    }
    if let Some(var_3) = &input.table_name {
        object.key("TableName").string(var_3.as_str());
    }
    if let Some(var_4) = &input.partition_input_list {
        let mut array_5 = object.key("PartitionInputList").start_array();
        for item_6 in var_4 {
            {
                let mut object_7 = array_5.value().start_object();
                crate::json_ser::serialize_structure_crate_model_partition_input(
                    &mut object_7,
                    item_6,
                )?;
                object_7.finish();
            }
        }
        array_5.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_delete_connection_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchDeleteConnectionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_8) = &input.catalog_id {
        object.key("CatalogId").string(var_8.as_str());
    }
    if let Some(var_9) = &input.connection_name_list {
        let mut array_10 = object.key("ConnectionNameList").start_array();
        for item_11 in var_9 {
            {
                array_10.value().string(item_11.as_str());
            }
        }
        array_10.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_delete_partition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchDeletePartitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_12) = &input.catalog_id {
        object.key("CatalogId").string(var_12.as_str());
    }
    if let Some(var_13) = &input.database_name {
        object.key("DatabaseName").string(var_13.as_str());
    }
    if let Some(var_14) = &input.table_name {
        object.key("TableName").string(var_14.as_str());
    }
    if let Some(var_15) = &input.partitions_to_delete {
        let mut array_16 = object.key("PartitionsToDelete").start_array();
        for item_17 in var_15 {
            {
                let mut object_18 = array_16.value().start_object();
                crate::json_ser::serialize_structure_crate_model_partition_value_list(
                    &mut object_18,
                    item_17,
                )?;
                object_18.finish();
            }
        }
        array_16.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_delete_table_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchDeleteTableInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_19) = &input.catalog_id {
        object.key("CatalogId").string(var_19.as_str());
    }
    if let Some(var_20) = &input.database_name {
        object.key("DatabaseName").string(var_20.as_str());
    }
    if let Some(var_21) = &input.tables_to_delete {
        let mut array_22 = object.key("TablesToDelete").start_array();
        for item_23 in var_21 {
            {
                array_22.value().string(item_23.as_str());
            }
        }
        array_22.finish();
    }
    if let Some(var_24) = &input.transaction_id {
        object.key("TransactionId").string(var_24.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_delete_table_version_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchDeleteTableVersionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_25) = &input.catalog_id {
        object.key("CatalogId").string(var_25.as_str());
    }
    if let Some(var_26) = &input.database_name {
        object.key("DatabaseName").string(var_26.as_str());
    }
    if let Some(var_27) = &input.table_name {
        object.key("TableName").string(var_27.as_str());
    }
    if let Some(var_28) = &input.version_ids {
        let mut array_29 = object.key("VersionIds").start_array();
        for item_30 in var_28 {
            {
                array_29.value().string(item_30.as_str());
            }
        }
        array_29.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_get_blueprints_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchGetBlueprintsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_31) = &input.names {
        let mut array_32 = object.key("Names").start_array();
        for item_33 in var_31 {
            {
                array_32.value().string(item_33.as_str());
            }
        }
        array_32.finish();
    }
    if let Some(var_34) = &input.include_blueprint {
        object.key("IncludeBlueprint").boolean(*var_34);
    }
    if let Some(var_35) = &input.include_parameter_spec {
        object.key("IncludeParameterSpec").boolean(*var_35);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_get_crawlers_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchGetCrawlersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_36) = &input.crawler_names {
        let mut array_37 = object.key("CrawlerNames").start_array();
        for item_38 in var_36 {
            {
                array_37.value().string(item_38.as_str());
            }
        }
        array_37.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_get_custom_entity_types_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchGetCustomEntityTypesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_39) = &input.names {
        let mut array_40 = object.key("Names").start_array();
        for item_41 in var_39 {
            {
                array_40.value().string(item_41.as_str());
            }
        }
        array_40.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_get_dev_endpoints_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchGetDevEndpointsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_42) = &input.dev_endpoint_names {
        let mut array_43 = object.key("DevEndpointNames").start_array();
        for item_44 in var_42 {
            {
                array_43.value().string(item_44.as_str());
            }
        }
        array_43.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_get_jobs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchGetJobsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_45) = &input.job_names {
        let mut array_46 = object.key("JobNames").start_array();
        for item_47 in var_45 {
            {
                array_46.value().string(item_47.as_str());
            }
        }
        array_46.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_get_partition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchGetPartitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_48) = &input.catalog_id {
        object.key("CatalogId").string(var_48.as_str());
    }
    if let Some(var_49) = &input.database_name {
        object.key("DatabaseName").string(var_49.as_str());
    }
    if let Some(var_50) = &input.table_name {
        object.key("TableName").string(var_50.as_str());
    }
    if let Some(var_51) = &input.partitions_to_get {
        let mut array_52 = object.key("PartitionsToGet").start_array();
        for item_53 in var_51 {
            {
                let mut object_54 = array_52.value().start_object();
                crate::json_ser::serialize_structure_crate_model_partition_value_list(
                    &mut object_54,
                    item_53,
                )?;
                object_54.finish();
            }
        }
        array_52.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_get_triggers_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchGetTriggersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_55) = &input.trigger_names {
        let mut array_56 = object.key("TriggerNames").start_array();
        for item_57 in var_55 {
            {
                array_56.value().string(item_57.as_str());
            }
        }
        array_56.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_get_workflows_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchGetWorkflowsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_58) = &input.names {
        let mut array_59 = object.key("Names").start_array();
        for item_60 in var_58 {
            {
                array_59.value().string(item_60.as_str());
            }
        }
        array_59.finish();
    }
    if let Some(var_61) = &input.include_graph {
        object.key("IncludeGraph").boolean(*var_61);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_stop_job_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchStopJobRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_62) = &input.job_name {
        object.key("JobName").string(var_62.as_str());
    }
    if let Some(var_63) = &input.job_run_ids {
        let mut array_64 = object.key("JobRunIds").start_array();
        for item_65 in var_63 {
            {
                array_64.value().string(item_65.as_str());
            }
        }
        array_64.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_update_partition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchUpdatePartitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_66) = &input.catalog_id {
        object.key("CatalogId").string(var_66.as_str());
    }
    if let Some(var_67) = &input.database_name {
        object.key("DatabaseName").string(var_67.as_str());
    }
    if let Some(var_68) = &input.table_name {
        object.key("TableName").string(var_68.as_str());
    }
    if let Some(var_69) = &input.entries {
        let mut array_70 = object.key("Entries").start_array();
        for item_71 in var_69 {
            {
                let mut object_72 = array_70.value().start_object();
                crate::json_ser::serialize_structure_crate_model_batch_update_partition_request_entry(&mut object_72, item_71)?;
                object_72.finish();
            }
        }
        array_70.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_cancel_ml_task_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CancelMlTaskRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_73) = &input.transform_id {
        object.key("TransformId").string(var_73.as_str());
    }
    if let Some(var_74) = &input.task_run_id {
        object.key("TaskRunId").string(var_74.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_cancel_statement_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CancelStatementInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_75) = &input.session_id {
        object.key("SessionId").string(var_75.as_str());
    }
    {
        object.key("Id").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.id).into()),
        );
    }
    if let Some(var_76) = &input.request_origin {
        object.key("RequestOrigin").string(var_76.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_check_schema_version_validity_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CheckSchemaVersionValidityInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_77) = &input.data_format {
        object.key("DataFormat").string(var_77.as_str());
    }
    if let Some(var_78) = &input.schema_definition {
        object.key("SchemaDefinition").string(var_78.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_blueprint_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateBlueprintInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_79) = &input.name {
        object.key("Name").string(var_79.as_str());
    }
    if let Some(var_80) = &input.description {
        object.key("Description").string(var_80.as_str());
    }
    if let Some(var_81) = &input.blueprint_location {
        object.key("BlueprintLocation").string(var_81.as_str());
    }
    if let Some(var_82) = &input.tags {
        let mut object_83 = object.key("Tags").start_object();
        for (key_84, value_85) in var_82 {
            {
                object_83.key(key_84).string(value_85.as_str());
            }
        }
        object_83.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_classifier_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateClassifierInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_86) = &input.grok_classifier {
        let mut object_87 = object.key("GrokClassifier").start_object();
        crate::json_ser::serialize_structure_crate_model_create_grok_classifier_request(
            &mut object_87,
            var_86,
        )?;
        object_87.finish();
    }
    if let Some(var_88) = &input.xml_classifier {
        let mut object_89 = object.key("XMLClassifier").start_object();
        crate::json_ser::serialize_structure_crate_model_create_xml_classifier_request(
            &mut object_89,
            var_88,
        )?;
        object_89.finish();
    }
    if let Some(var_90) = &input.json_classifier {
        let mut object_91 = object.key("JsonClassifier").start_object();
        crate::json_ser::serialize_structure_crate_model_create_json_classifier_request(
            &mut object_91,
            var_90,
        )?;
        object_91.finish();
    }
    if let Some(var_92) = &input.csv_classifier {
        let mut object_93 = object.key("CsvClassifier").start_object();
        crate::json_ser::serialize_structure_crate_model_create_csv_classifier_request(
            &mut object_93,
            var_92,
        )?;
        object_93.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_connection_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateConnectionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_94) = &input.catalog_id {
        object.key("CatalogId").string(var_94.as_str());
    }
    if let Some(var_95) = &input.connection_input {
        let mut object_96 = object.key("ConnectionInput").start_object();
        crate::json_ser::serialize_structure_crate_model_connection_input(&mut object_96, var_95)?;
        object_96.finish();
    }
    if let Some(var_97) = &input.tags {
        let mut object_98 = object.key("Tags").start_object();
        for (key_99, value_100) in var_97 {
            {
                object_98.key(key_99).string(value_100.as_str());
            }
        }
        object_98.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_crawler_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateCrawlerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_101) = &input.name {
        object.key("Name").string(var_101.as_str());
    }
    if let Some(var_102) = &input.role {
        object.key("Role").string(var_102.as_str());
    }
    if let Some(var_103) = &input.database_name {
        object.key("DatabaseName").string(var_103.as_str());
    }
    if let Some(var_104) = &input.description {
        object.key("Description").string(var_104.as_str());
    }
    if let Some(var_105) = &input.targets {
        let mut object_106 = object.key("Targets").start_object();
        crate::json_ser::serialize_structure_crate_model_crawler_targets(&mut object_106, var_105)?;
        object_106.finish();
    }
    if let Some(var_107) = &input.schedule {
        object.key("Schedule").string(var_107.as_str());
    }
    if let Some(var_108) = &input.classifiers {
        let mut array_109 = object.key("Classifiers").start_array();
        for item_110 in var_108 {
            {
                array_109.value().string(item_110.as_str());
            }
        }
        array_109.finish();
    }
    if let Some(var_111) = &input.table_prefix {
        object.key("TablePrefix").string(var_111.as_str());
    }
    if let Some(var_112) = &input.schema_change_policy {
        let mut object_113 = object.key("SchemaChangePolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_change_policy(
            &mut object_113,
            var_112,
        )?;
        object_113.finish();
    }
    if let Some(var_114) = &input.recrawl_policy {
        let mut object_115 = object.key("RecrawlPolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_recrawl_policy(&mut object_115, var_114)?;
        object_115.finish();
    }
    if let Some(var_116) = &input.lineage_configuration {
        let mut object_117 = object.key("LineageConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_lineage_configuration(
            &mut object_117,
            var_116,
        )?;
        object_117.finish();
    }
    if let Some(var_118) = &input.lake_formation_configuration {
        let mut object_119 = object.key("LakeFormationConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_lake_formation_configuration(
            &mut object_119,
            var_118,
        )?;
        object_119.finish();
    }
    if let Some(var_120) = &input.configuration {
        object.key("Configuration").string(var_120.as_str());
    }
    if let Some(var_121) = &input.crawler_security_configuration {
        object
            .key("CrawlerSecurityConfiguration")
            .string(var_121.as_str());
    }
    if let Some(var_122) = &input.tags {
        let mut object_123 = object.key("Tags").start_object();
        for (key_124, value_125) in var_122 {
            {
                object_123.key(key_124).string(value_125.as_str());
            }
        }
        object_123.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_custom_entity_type_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateCustomEntityTypeInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_126) = &input.name {
        object.key("Name").string(var_126.as_str());
    }
    if let Some(var_127) = &input.regex_string {
        object.key("RegexString").string(var_127.as_str());
    }
    if let Some(var_128) = &input.context_words {
        let mut array_129 = object.key("ContextWords").start_array();
        for item_130 in var_128 {
            {
                array_129.value().string(item_130.as_str());
            }
        }
        array_129.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_database_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDatabaseInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_131) = &input.catalog_id {
        object.key("CatalogId").string(var_131.as_str());
    }
    if let Some(var_132) = &input.database_input {
        let mut object_133 = object.key("DatabaseInput").start_object();
        crate::json_ser::serialize_structure_crate_model_database_input(&mut object_133, var_132)?;
        object_133.finish();
    }
    if let Some(var_134) = &input.tags {
        let mut object_135 = object.key("Tags").start_object();
        for (key_136, value_137) in var_134 {
            {
                object_135.key(key_136).string(value_137.as_str());
            }
        }
        object_135.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_dev_endpoint_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDevEndpointInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_138) = &input.endpoint_name {
        object.key("EndpointName").string(var_138.as_str());
    }
    if let Some(var_139) = &input.role_arn {
        object.key("RoleArn").string(var_139.as_str());
    }
    if let Some(var_140) = &input.security_group_ids {
        let mut array_141 = object.key("SecurityGroupIds").start_array();
        for item_142 in var_140 {
            {
                array_141.value().string(item_142.as_str());
            }
        }
        array_141.finish();
    }
    if let Some(var_143) = &input.subnet_id {
        object.key("SubnetId").string(var_143.as_str());
    }
    if let Some(var_144) = &input.public_key {
        object.key("PublicKey").string(var_144.as_str());
    }
    if let Some(var_145) = &input.public_keys {
        let mut array_146 = object.key("PublicKeys").start_array();
        for item_147 in var_145 {
            {
                array_146.value().string(item_147.as_str());
            }
        }
        array_146.finish();
    }
    if input.number_of_nodes != 0 {
        object.key("NumberOfNodes").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_nodes).into()),
        );
    }
    if let Some(var_148) = &input.worker_type {
        object.key("WorkerType").string(var_148.as_str());
    }
    if let Some(var_149) = &input.glue_version {
        object.key("GlueVersion").string(var_149.as_str());
    }
    if let Some(var_150) = &input.number_of_workers {
        object.key("NumberOfWorkers").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_150).into()),
        );
    }
    if let Some(var_151) = &input.extra_python_libs_s3_path {
        object.key("ExtraPythonLibsS3Path").string(var_151.as_str());
    }
    if let Some(var_152) = &input.extra_jars_s3_path {
        object.key("ExtraJarsS3Path").string(var_152.as_str());
    }
    if let Some(var_153) = &input.security_configuration {
        object.key("SecurityConfiguration").string(var_153.as_str());
    }
    if let Some(var_154) = &input.tags {
        let mut object_155 = object.key("Tags").start_object();
        for (key_156, value_157) in var_154 {
            {
                object_155.key(key_156).string(value_157.as_str());
            }
        }
        object_155.finish();
    }
    if let Some(var_158) = &input.arguments {
        let mut object_159 = object.key("Arguments").start_object();
        for (key_160, value_161) in var_158 {
            {
                object_159.key(key_160).string(value_161.as_str());
            }
        }
        object_159.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_162) = &input.name {
        object.key("Name").string(var_162.as_str());
    }
    if let Some(var_163) = &input.description {
        object.key("Description").string(var_163.as_str());
    }
    if let Some(var_164) = &input.log_uri {
        object.key("LogUri").string(var_164.as_str());
    }
    if let Some(var_165) = &input.role {
        object.key("Role").string(var_165.as_str());
    }
    if let Some(var_166) = &input.execution_property {
        let mut object_167 = object.key("ExecutionProperty").start_object();
        crate::json_ser::serialize_structure_crate_model_execution_property(
            &mut object_167,
            var_166,
        )?;
        object_167.finish();
    }
    if let Some(var_168) = &input.command {
        let mut object_169 = object.key("Command").start_object();
        crate::json_ser::serialize_structure_crate_model_job_command(&mut object_169, var_168)?;
        object_169.finish();
    }
    if let Some(var_170) = &input.default_arguments {
        let mut object_171 = object.key("DefaultArguments").start_object();
        for (key_172, value_173) in var_170 {
            {
                object_171.key(key_172).string(value_173.as_str());
            }
        }
        object_171.finish();
    }
    if let Some(var_174) = &input.non_overridable_arguments {
        let mut object_175 = object.key("NonOverridableArguments").start_object();
        for (key_176, value_177) in var_174 {
            {
                object_175.key(key_176).string(value_177.as_str());
            }
        }
        object_175.finish();
    }
    if let Some(var_178) = &input.connections {
        let mut object_179 = object.key("Connections").start_object();
        crate::json_ser::serialize_structure_crate_model_connections_list(
            &mut object_179,
            var_178,
        )?;
        object_179.finish();
    }
    if input.max_retries != 0 {
        object.key("MaxRetries").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_retries).into()),
        );
    }
    if input.allocated_capacity != 0 {
        object.key("AllocatedCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.allocated_capacity).into()),
        );
    }
    if let Some(var_180) = &input.timeout {
        object.key("Timeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_180).into()),
        );
    }
    if let Some(var_181) = &input.max_capacity {
        object.key("MaxCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_181).into()),
        );
    }
    if let Some(var_182) = &input.security_configuration {
        object.key("SecurityConfiguration").string(var_182.as_str());
    }
    if let Some(var_183) = &input.tags {
        let mut object_184 = object.key("Tags").start_object();
        for (key_185, value_186) in var_183 {
            {
                object_184.key(key_185).string(value_186.as_str());
            }
        }
        object_184.finish();
    }
    if let Some(var_187) = &input.notification_property {
        let mut object_188 = object.key("NotificationProperty").start_object();
        crate::json_ser::serialize_structure_crate_model_notification_property(
            &mut object_188,
            var_187,
        )?;
        object_188.finish();
    }
    if let Some(var_189) = &input.glue_version {
        object.key("GlueVersion").string(var_189.as_str());
    }
    if let Some(var_190) = &input.number_of_workers {
        object.key("NumberOfWorkers").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_190).into()),
        );
    }
    if let Some(var_191) = &input.worker_type {
        object.key("WorkerType").string(var_191.as_str());
    }
    if let Some(var_192) = &input.code_gen_configuration_nodes {
        let mut object_193 = object.key("CodeGenConfigurationNodes").start_object();
        for (key_194, value_195) in var_192 {
            {
                let mut object_196 = object_193.key(key_194).start_object();
                crate::json_ser::serialize_structure_crate_model_code_gen_configuration_node(
                    &mut object_196,
                    value_195,
                )?;
                object_196.finish();
            }
        }
        object_193.finish();
    }
    if let Some(var_197) = &input.execution_class {
        object.key("ExecutionClass").string(var_197.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_ml_transform_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateMlTransformInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_198) = &input.name {
        object.key("Name").string(var_198.as_str());
    }
    if let Some(var_199) = &input.description {
        object.key("Description").string(var_199.as_str());
    }
    if let Some(var_200) = &input.input_record_tables {
        let mut array_201 = object.key("InputRecordTables").start_array();
        for item_202 in var_200 {
            {
                let mut object_203 = array_201.value().start_object();
                crate::json_ser::serialize_structure_crate_model_glue_table(
                    &mut object_203,
                    item_202,
                )?;
                object_203.finish();
            }
        }
        array_201.finish();
    }
    if let Some(var_204) = &input.parameters {
        let mut object_205 = object.key("Parameters").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_parameters(
            &mut object_205,
            var_204,
        )?;
        object_205.finish();
    }
    if let Some(var_206) = &input.role {
        object.key("Role").string(var_206.as_str());
    }
    if let Some(var_207) = &input.glue_version {
        object.key("GlueVersion").string(var_207.as_str());
    }
    if let Some(var_208) = &input.max_capacity {
        object.key("MaxCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_208).into()),
        );
    }
    if let Some(var_209) = &input.worker_type {
        object.key("WorkerType").string(var_209.as_str());
    }
    if let Some(var_210) = &input.number_of_workers {
        object.key("NumberOfWorkers").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_210).into()),
        );
    }
    if let Some(var_211) = &input.timeout {
        object.key("Timeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_211).into()),
        );
    }
    if let Some(var_212) = &input.max_retries {
        object.key("MaxRetries").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_212).into()),
        );
    }
    if let Some(var_213) = &input.tags {
        let mut object_214 = object.key("Tags").start_object();
        for (key_215, value_216) in var_213 {
            {
                object_214.key(key_215).string(value_216.as_str());
            }
        }
        object_214.finish();
    }
    if let Some(var_217) = &input.transform_encryption {
        let mut object_218 = object.key("TransformEncryption").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_encryption(
            &mut object_218,
            var_217,
        )?;
        object_218.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_partition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreatePartitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_219) = &input.catalog_id {
        object.key("CatalogId").string(var_219.as_str());
    }
    if let Some(var_220) = &input.database_name {
        object.key("DatabaseName").string(var_220.as_str());
    }
    if let Some(var_221) = &input.table_name {
        object.key("TableName").string(var_221.as_str());
    }
    if let Some(var_222) = &input.partition_input {
        let mut object_223 = object.key("PartitionInput").start_object();
        crate::json_ser::serialize_structure_crate_model_partition_input(&mut object_223, var_222)?;
        object_223.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_partition_index_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreatePartitionIndexInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_224) = &input.catalog_id {
        object.key("CatalogId").string(var_224.as_str());
    }
    if let Some(var_225) = &input.database_name {
        object.key("DatabaseName").string(var_225.as_str());
    }
    if let Some(var_226) = &input.table_name {
        object.key("TableName").string(var_226.as_str());
    }
    if let Some(var_227) = &input.partition_index {
        let mut object_228 = object.key("PartitionIndex").start_object();
        crate::json_ser::serialize_structure_crate_model_partition_index(&mut object_228, var_227)?;
        object_228.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_registry_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateRegistryInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_229) = &input.registry_name {
        object.key("RegistryName").string(var_229.as_str());
    }
    if let Some(var_230) = &input.description {
        object.key("Description").string(var_230.as_str());
    }
    if let Some(var_231) = &input.tags {
        let mut object_232 = object.key("Tags").start_object();
        for (key_233, value_234) in var_231 {
            {
                object_232.key(key_233).string(value_234.as_str());
            }
        }
        object_232.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_schema_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateSchemaInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_235) = &input.registry_id {
        let mut object_236 = object.key("RegistryId").start_object();
        crate::json_ser::serialize_structure_crate_model_registry_id(&mut object_236, var_235)?;
        object_236.finish();
    }
    if let Some(var_237) = &input.schema_name {
        object.key("SchemaName").string(var_237.as_str());
    }
    if let Some(var_238) = &input.data_format {
        object.key("DataFormat").string(var_238.as_str());
    }
    if let Some(var_239) = &input.compatibility {
        object.key("Compatibility").string(var_239.as_str());
    }
    if let Some(var_240) = &input.description {
        object.key("Description").string(var_240.as_str());
    }
    if let Some(var_241) = &input.tags {
        let mut object_242 = object.key("Tags").start_object();
        for (key_243, value_244) in var_241 {
            {
                object_242.key(key_243).string(value_244.as_str());
            }
        }
        object_242.finish();
    }
    if let Some(var_245) = &input.schema_definition {
        object.key("SchemaDefinition").string(var_245.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_script_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateScriptInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_246) = &input.dag_nodes {
        let mut array_247 = object.key("DagNodes").start_array();
        for item_248 in var_246 {
            {
                let mut object_249 = array_247.value().start_object();
                crate::json_ser::serialize_structure_crate_model_code_gen_node(
                    &mut object_249,
                    item_248,
                )?;
                object_249.finish();
            }
        }
        array_247.finish();
    }
    if let Some(var_250) = &input.dag_edges {
        let mut array_251 = object.key("DagEdges").start_array();
        for item_252 in var_250 {
            {
                let mut object_253 = array_251.value().start_object();
                crate::json_ser::serialize_structure_crate_model_code_gen_edge(
                    &mut object_253,
                    item_252,
                )?;
                object_253.finish();
            }
        }
        array_251.finish();
    }
    if let Some(var_254) = &input.language {
        object.key("Language").string(var_254.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_security_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateSecurityConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_255) = &input.name {
        object.key("Name").string(var_255.as_str());
    }
    if let Some(var_256) = &input.encryption_configuration {
        let mut object_257 = object.key("EncryptionConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_encryption_configuration(
            &mut object_257,
            var_256,
        )?;
        object_257.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_session_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateSessionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_258) = &input.id {
        object.key("Id").string(var_258.as_str());
    }
    if let Some(var_259) = &input.description {
        object.key("Description").string(var_259.as_str());
    }
    if let Some(var_260) = &input.role {
        object.key("Role").string(var_260.as_str());
    }
    if let Some(var_261) = &input.command {
        let mut object_262 = object.key("Command").start_object();
        crate::json_ser::serialize_structure_crate_model_session_command(&mut object_262, var_261)?;
        object_262.finish();
    }
    if let Some(var_263) = &input.timeout {
        object.key("Timeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_263).into()),
        );
    }
    if let Some(var_264) = &input.idle_timeout {
        object.key("IdleTimeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_264).into()),
        );
    }
    if let Some(var_265) = &input.default_arguments {
        let mut object_266 = object.key("DefaultArguments").start_object();
        for (key_267, value_268) in var_265 {
            {
                object_266.key(key_267).string(value_268.as_str());
            }
        }
        object_266.finish();
    }
    if let Some(var_269) = &input.connections {
        let mut object_270 = object.key("Connections").start_object();
        crate::json_ser::serialize_structure_crate_model_connections_list(
            &mut object_270,
            var_269,
        )?;
        object_270.finish();
    }
    if let Some(var_271) = &input.max_capacity {
        object.key("MaxCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_271).into()),
        );
    }
    if let Some(var_272) = &input.number_of_workers {
        object.key("NumberOfWorkers").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_272).into()),
        );
    }
    if let Some(var_273) = &input.worker_type {
        object.key("WorkerType").string(var_273.as_str());
    }
    if let Some(var_274) = &input.security_configuration {
        object.key("SecurityConfiguration").string(var_274.as_str());
    }
    if let Some(var_275) = &input.glue_version {
        object.key("GlueVersion").string(var_275.as_str());
    }
    if let Some(var_276) = &input.tags {
        let mut object_277 = object.key("Tags").start_object();
        for (key_278, value_279) in var_276 {
            {
                object_277.key(key_278).string(value_279.as_str());
            }
        }
        object_277.finish();
    }
    if let Some(var_280) = &input.request_origin {
        object.key("RequestOrigin").string(var_280.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_table_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateTableInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_281) = &input.catalog_id {
        object.key("CatalogId").string(var_281.as_str());
    }
    if let Some(var_282) = &input.database_name {
        object.key("DatabaseName").string(var_282.as_str());
    }
    if let Some(var_283) = &input.table_input {
        let mut object_284 = object.key("TableInput").start_object();
        crate::json_ser::serialize_structure_crate_model_table_input(&mut object_284, var_283)?;
        object_284.finish();
    }
    if let Some(var_285) = &input.partition_indexes {
        let mut array_286 = object.key("PartitionIndexes").start_array();
        for item_287 in var_285 {
            {
                let mut object_288 = array_286.value().start_object();
                crate::json_ser::serialize_structure_crate_model_partition_index(
                    &mut object_288,
                    item_287,
                )?;
                object_288.finish();
            }
        }
        array_286.finish();
    }
    if let Some(var_289) = &input.transaction_id {
        object.key("TransactionId").string(var_289.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_trigger_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateTriggerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_290) = &input.name {
        object.key("Name").string(var_290.as_str());
    }
    if let Some(var_291) = &input.workflow_name {
        object.key("WorkflowName").string(var_291.as_str());
    }
    if let Some(var_292) = &input.r#type {
        object.key("Type").string(var_292.as_str());
    }
    if let Some(var_293) = &input.schedule {
        object.key("Schedule").string(var_293.as_str());
    }
    if let Some(var_294) = &input.predicate {
        let mut object_295 = object.key("Predicate").start_object();
        crate::json_ser::serialize_structure_crate_model_predicate(&mut object_295, var_294)?;
        object_295.finish();
    }
    if let Some(var_296) = &input.actions {
        let mut array_297 = object.key("Actions").start_array();
        for item_298 in var_296 {
            {
                let mut object_299 = array_297.value().start_object();
                crate::json_ser::serialize_structure_crate_model_action(&mut object_299, item_298)?;
                object_299.finish();
            }
        }
        array_297.finish();
    }
    if let Some(var_300) = &input.description {
        object.key("Description").string(var_300.as_str());
    }
    if input.start_on_creation {
        object
            .key("StartOnCreation")
            .boolean(input.start_on_creation);
    }
    if let Some(var_301) = &input.tags {
        let mut object_302 = object.key("Tags").start_object();
        for (key_303, value_304) in var_301 {
            {
                object_302.key(key_303).string(value_304.as_str());
            }
        }
        object_302.finish();
    }
    if let Some(var_305) = &input.event_batching_condition {
        let mut object_306 = object.key("EventBatchingCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_event_batching_condition(
            &mut object_306,
            var_305,
        )?;
        object_306.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_user_defined_function_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateUserDefinedFunctionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_307) = &input.catalog_id {
        object.key("CatalogId").string(var_307.as_str());
    }
    if let Some(var_308) = &input.database_name {
        object.key("DatabaseName").string(var_308.as_str());
    }
    if let Some(var_309) = &input.function_input {
        let mut object_310 = object.key("FunctionInput").start_object();
        crate::json_ser::serialize_structure_crate_model_user_defined_function_input(
            &mut object_310,
            var_309,
        )?;
        object_310.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_workflow_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateWorkflowInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_311) = &input.name {
        object.key("Name").string(var_311.as_str());
    }
    if let Some(var_312) = &input.description {
        object.key("Description").string(var_312.as_str());
    }
    if let Some(var_313) = &input.default_run_properties {
        let mut object_314 = object.key("DefaultRunProperties").start_object();
        for (key_315, value_316) in var_313 {
            {
                object_314.key(key_315).string(value_316.as_str());
            }
        }
        object_314.finish();
    }
    if let Some(var_317) = &input.tags {
        let mut object_318 = object.key("Tags").start_object();
        for (key_319, value_320) in var_317 {
            {
                object_318.key(key_319).string(value_320.as_str());
            }
        }
        object_318.finish();
    }
    if let Some(var_321) = &input.max_concurrent_runs {
        object.key("MaxConcurrentRuns").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_321).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_blueprint_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteBlueprintInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_322) = &input.name {
        object.key("Name").string(var_322.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_classifier_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteClassifierInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_323) = &input.name {
        object.key("Name").string(var_323.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_column_statistics_for_partition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteColumnStatisticsForPartitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_324) = &input.catalog_id {
        object.key("CatalogId").string(var_324.as_str());
    }
    if let Some(var_325) = &input.database_name {
        object.key("DatabaseName").string(var_325.as_str());
    }
    if let Some(var_326) = &input.table_name {
        object.key("TableName").string(var_326.as_str());
    }
    if let Some(var_327) = &input.partition_values {
        let mut array_328 = object.key("PartitionValues").start_array();
        for item_329 in var_327 {
            {
                array_328.value().string(item_329.as_str());
            }
        }
        array_328.finish();
    }
    if let Some(var_330) = &input.column_name {
        object.key("ColumnName").string(var_330.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_column_statistics_for_table_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteColumnStatisticsForTableInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_331) = &input.catalog_id {
        object.key("CatalogId").string(var_331.as_str());
    }
    if let Some(var_332) = &input.database_name {
        object.key("DatabaseName").string(var_332.as_str());
    }
    if let Some(var_333) = &input.table_name {
        object.key("TableName").string(var_333.as_str());
    }
    if let Some(var_334) = &input.column_name {
        object.key("ColumnName").string(var_334.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_connection_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteConnectionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_335) = &input.catalog_id {
        object.key("CatalogId").string(var_335.as_str());
    }
    if let Some(var_336) = &input.connection_name {
        object.key("ConnectionName").string(var_336.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_crawler_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteCrawlerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_337) = &input.name {
        object.key("Name").string(var_337.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_custom_entity_type_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteCustomEntityTypeInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_338) = &input.name {
        object.key("Name").string(var_338.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_database_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteDatabaseInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_339) = &input.catalog_id {
        object.key("CatalogId").string(var_339.as_str());
    }
    if let Some(var_340) = &input.name {
        object.key("Name").string(var_340.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_dev_endpoint_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteDevEndpointInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_341) = &input.endpoint_name {
        object.key("EndpointName").string(var_341.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_342) = &input.job_name {
        object.key("JobName").string(var_342.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_ml_transform_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteMlTransformInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_343) = &input.transform_id {
        object.key("TransformId").string(var_343.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_partition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeletePartitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_344) = &input.catalog_id {
        object.key("CatalogId").string(var_344.as_str());
    }
    if let Some(var_345) = &input.database_name {
        object.key("DatabaseName").string(var_345.as_str());
    }
    if let Some(var_346) = &input.table_name {
        object.key("TableName").string(var_346.as_str());
    }
    if let Some(var_347) = &input.partition_values {
        let mut array_348 = object.key("PartitionValues").start_array();
        for item_349 in var_347 {
            {
                array_348.value().string(item_349.as_str());
            }
        }
        array_348.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_partition_index_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeletePartitionIndexInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_350) = &input.catalog_id {
        object.key("CatalogId").string(var_350.as_str());
    }
    if let Some(var_351) = &input.database_name {
        object.key("DatabaseName").string(var_351.as_str());
    }
    if let Some(var_352) = &input.table_name {
        object.key("TableName").string(var_352.as_str());
    }
    if let Some(var_353) = &input.index_name {
        object.key("IndexName").string(var_353.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_registry_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteRegistryInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_354) = &input.registry_id {
        let mut object_355 = object.key("RegistryId").start_object();
        crate::json_ser::serialize_structure_crate_model_registry_id(&mut object_355, var_354)?;
        object_355.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_resource_policy_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteResourcePolicyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_356) = &input.policy_hash_condition {
        object.key("PolicyHashCondition").string(var_356.as_str());
    }
    if let Some(var_357) = &input.resource_arn {
        object.key("ResourceArn").string(var_357.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_schema_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteSchemaInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_358) = &input.schema_id {
        let mut object_359 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_359, var_358)?;
        object_359.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_schema_versions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteSchemaVersionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_360) = &input.schema_id {
        let mut object_361 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_361, var_360)?;
        object_361.finish();
    }
    if let Some(var_362) = &input.versions {
        object.key("Versions").string(var_362.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_security_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteSecurityConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_363) = &input.name {
        object.key("Name").string(var_363.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_session_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteSessionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_364) = &input.id {
        object.key("Id").string(var_364.as_str());
    }
    if let Some(var_365) = &input.request_origin {
        object.key("RequestOrigin").string(var_365.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_table_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteTableInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_366) = &input.catalog_id {
        object.key("CatalogId").string(var_366.as_str());
    }
    if let Some(var_367) = &input.database_name {
        object.key("DatabaseName").string(var_367.as_str());
    }
    if let Some(var_368) = &input.name {
        object.key("Name").string(var_368.as_str());
    }
    if let Some(var_369) = &input.transaction_id {
        object.key("TransactionId").string(var_369.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_table_version_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteTableVersionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_370) = &input.catalog_id {
        object.key("CatalogId").string(var_370.as_str());
    }
    if let Some(var_371) = &input.database_name {
        object.key("DatabaseName").string(var_371.as_str());
    }
    if let Some(var_372) = &input.table_name {
        object.key("TableName").string(var_372.as_str());
    }
    if let Some(var_373) = &input.version_id {
        object.key("VersionId").string(var_373.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_trigger_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteTriggerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_374) = &input.name {
        object.key("Name").string(var_374.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_user_defined_function_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteUserDefinedFunctionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_375) = &input.catalog_id {
        object.key("CatalogId").string(var_375.as_str());
    }
    if let Some(var_376) = &input.database_name {
        object.key("DatabaseName").string(var_376.as_str());
    }
    if let Some(var_377) = &input.function_name {
        object.key("FunctionName").string(var_377.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_workflow_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteWorkflowInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_378) = &input.name {
        object.key("Name").string(var_378.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_blueprint_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetBlueprintInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_379) = &input.name {
        object.key("Name").string(var_379.as_str());
    }
    if let Some(var_380) = &input.include_blueprint {
        object.key("IncludeBlueprint").boolean(*var_380);
    }
    if let Some(var_381) = &input.include_parameter_spec {
        object.key("IncludeParameterSpec").boolean(*var_381);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_blueprint_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetBlueprintRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_382) = &input.blueprint_name {
        object.key("BlueprintName").string(var_382.as_str());
    }
    if let Some(var_383) = &input.run_id {
        object.key("RunId").string(var_383.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_blueprint_runs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetBlueprintRunsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_384) = &input.blueprint_name {
        object.key("BlueprintName").string(var_384.as_str());
    }
    if let Some(var_385) = &input.next_token {
        object.key("NextToken").string(var_385.as_str());
    }
    if let Some(var_386) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_386).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_catalog_import_status_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetCatalogImportStatusInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_387) = &input.catalog_id {
        object.key("CatalogId").string(var_387.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_classifier_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetClassifierInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_388) = &input.name {
        object.key("Name").string(var_388.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_classifiers_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetClassifiersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_389) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_389).into()),
        );
    }
    if let Some(var_390) = &input.next_token {
        object.key("NextToken").string(var_390.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_column_statistics_for_partition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetColumnStatisticsForPartitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_391) = &input.catalog_id {
        object.key("CatalogId").string(var_391.as_str());
    }
    if let Some(var_392) = &input.database_name {
        object.key("DatabaseName").string(var_392.as_str());
    }
    if let Some(var_393) = &input.table_name {
        object.key("TableName").string(var_393.as_str());
    }
    if let Some(var_394) = &input.partition_values {
        let mut array_395 = object.key("PartitionValues").start_array();
        for item_396 in var_394 {
            {
                array_395.value().string(item_396.as_str());
            }
        }
        array_395.finish();
    }
    if let Some(var_397) = &input.column_names {
        let mut array_398 = object.key("ColumnNames").start_array();
        for item_399 in var_397 {
            {
                array_398.value().string(item_399.as_str());
            }
        }
        array_398.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_column_statistics_for_table_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetColumnStatisticsForTableInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_400) = &input.catalog_id {
        object.key("CatalogId").string(var_400.as_str());
    }
    if let Some(var_401) = &input.database_name {
        object.key("DatabaseName").string(var_401.as_str());
    }
    if let Some(var_402) = &input.table_name {
        object.key("TableName").string(var_402.as_str());
    }
    if let Some(var_403) = &input.column_names {
        let mut array_404 = object.key("ColumnNames").start_array();
        for item_405 in var_403 {
            {
                array_404.value().string(item_405.as_str());
            }
        }
        array_404.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_connection_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetConnectionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_406) = &input.catalog_id {
        object.key("CatalogId").string(var_406.as_str());
    }
    if let Some(var_407) = &input.name {
        object.key("Name").string(var_407.as_str());
    }
    if input.hide_password {
        object.key("HidePassword").boolean(input.hide_password);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_connections_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetConnectionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_408) = &input.catalog_id {
        object.key("CatalogId").string(var_408.as_str());
    }
    if let Some(var_409) = &input.filter {
        let mut object_410 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_crate_model_get_connections_filter(
            &mut object_410,
            var_409,
        )?;
        object_410.finish();
    }
    if input.hide_password {
        object.key("HidePassword").boolean(input.hide_password);
    }
    if let Some(var_411) = &input.next_token {
        object.key("NextToken").string(var_411.as_str());
    }
    if let Some(var_412) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_412).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_crawler_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetCrawlerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_413) = &input.name {
        object.key("Name").string(var_413.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_crawler_metrics_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetCrawlerMetricsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_414) = &input.crawler_name_list {
        let mut array_415 = object.key("CrawlerNameList").start_array();
        for item_416 in var_414 {
            {
                array_415.value().string(item_416.as_str());
            }
        }
        array_415.finish();
    }
    if let Some(var_417) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_417).into()),
        );
    }
    if let Some(var_418) = &input.next_token {
        object.key("NextToken").string(var_418.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_crawlers_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetCrawlersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_419) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_419).into()),
        );
    }
    if let Some(var_420) = &input.next_token {
        object.key("NextToken").string(var_420.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_custom_entity_type_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetCustomEntityTypeInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_421) = &input.name {
        object.key("Name").string(var_421.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_database_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetDatabaseInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_422) = &input.catalog_id {
        object.key("CatalogId").string(var_422.as_str());
    }
    if let Some(var_423) = &input.name {
        object.key("Name").string(var_423.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_databases_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetDatabasesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_424) = &input.catalog_id {
        object.key("CatalogId").string(var_424.as_str());
    }
    if let Some(var_425) = &input.next_token {
        object.key("NextToken").string(var_425.as_str());
    }
    if let Some(var_426) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_426).into()),
        );
    }
    if let Some(var_427) = &input.resource_share_type {
        object.key("ResourceShareType").string(var_427.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_data_catalog_encryption_settings_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetDataCatalogEncryptionSettingsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_428) = &input.catalog_id {
        object.key("CatalogId").string(var_428.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_dataflow_graph_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetDataflowGraphInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_429) = &input.python_script {
        object.key("PythonScript").string(var_429.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_dev_endpoint_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetDevEndpointInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_430) = &input.endpoint_name {
        object.key("EndpointName").string(var_430.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_dev_endpoints_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetDevEndpointsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_431) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_431).into()),
        );
    }
    if let Some(var_432) = &input.next_token {
        object.key("NextToken").string(var_432.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_433) = &input.job_name {
        object.key("JobName").string(var_433.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_job_bookmark_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetJobBookmarkInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_434) = &input.job_name {
        object.key("JobName").string(var_434.as_str());
    }
    if let Some(var_435) = &input.run_id {
        object.key("RunId").string(var_435.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_job_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetJobRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_436) = &input.job_name {
        object.key("JobName").string(var_436.as_str());
    }
    if let Some(var_437) = &input.run_id {
        object.key("RunId").string(var_437.as_str());
    }
    if input.predecessors_included {
        object
            .key("PredecessorsIncluded")
            .boolean(input.predecessors_included);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_job_runs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetJobRunsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_438) = &input.job_name {
        object.key("JobName").string(var_438.as_str());
    }
    if let Some(var_439) = &input.next_token {
        object.key("NextToken").string(var_439.as_str());
    }
    if let Some(var_440) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_440).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_jobs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetJobsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_441) = &input.next_token {
        object.key("NextToken").string(var_441.as_str());
    }
    if let Some(var_442) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_442).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_mapping_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetMappingInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_443) = &input.source {
        let mut object_444 = object.key("Source").start_object();
        crate::json_ser::serialize_structure_crate_model_catalog_entry(&mut object_444, var_443)?;
        object_444.finish();
    }
    if let Some(var_445) = &input.sinks {
        let mut array_446 = object.key("Sinks").start_array();
        for item_447 in var_445 {
            {
                let mut object_448 = array_446.value().start_object();
                crate::json_ser::serialize_structure_crate_model_catalog_entry(
                    &mut object_448,
                    item_447,
                )?;
                object_448.finish();
            }
        }
        array_446.finish();
    }
    if let Some(var_449) = &input.location {
        let mut object_450 = object.key("Location").start_object();
        crate::json_ser::serialize_structure_crate_model_location(&mut object_450, var_449)?;
        object_450.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_ml_task_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetMlTaskRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_451) = &input.transform_id {
        object.key("TransformId").string(var_451.as_str());
    }
    if let Some(var_452) = &input.task_run_id {
        object.key("TaskRunId").string(var_452.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_ml_task_runs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetMlTaskRunsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_453) = &input.transform_id {
        object.key("TransformId").string(var_453.as_str());
    }
    if let Some(var_454) = &input.next_token {
        object.key("NextToken").string(var_454.as_str());
    }
    if let Some(var_455) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_455).into()),
        );
    }
    if let Some(var_456) = &input.filter {
        let mut object_457 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_crate_model_task_run_filter_criteria(
            &mut object_457,
            var_456,
        )?;
        object_457.finish();
    }
    if let Some(var_458) = &input.sort {
        let mut object_459 = object.key("Sort").start_object();
        crate::json_ser::serialize_structure_crate_model_task_run_sort_criteria(
            &mut object_459,
            var_458,
        )?;
        object_459.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_ml_transform_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetMlTransformInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_460) = &input.transform_id {
        object.key("TransformId").string(var_460.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_ml_transforms_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetMlTransformsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_461) = &input.next_token {
        object.key("NextToken").string(var_461.as_str());
    }
    if let Some(var_462) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_462).into()),
        );
    }
    if let Some(var_463) = &input.filter {
        let mut object_464 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_filter_criteria(
            &mut object_464,
            var_463,
        )?;
        object_464.finish();
    }
    if let Some(var_465) = &input.sort {
        let mut object_466 = object.key("Sort").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_sort_criteria(
            &mut object_466,
            var_465,
        )?;
        object_466.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_partition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetPartitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_467) = &input.catalog_id {
        object.key("CatalogId").string(var_467.as_str());
    }
    if let Some(var_468) = &input.database_name {
        object.key("DatabaseName").string(var_468.as_str());
    }
    if let Some(var_469) = &input.table_name {
        object.key("TableName").string(var_469.as_str());
    }
    if let Some(var_470) = &input.partition_values {
        let mut array_471 = object.key("PartitionValues").start_array();
        for item_472 in var_470 {
            {
                array_471.value().string(item_472.as_str());
            }
        }
        array_471.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_partition_indexes_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetPartitionIndexesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_473) = &input.catalog_id {
        object.key("CatalogId").string(var_473.as_str());
    }
    if let Some(var_474) = &input.database_name {
        object.key("DatabaseName").string(var_474.as_str());
    }
    if let Some(var_475) = &input.table_name {
        object.key("TableName").string(var_475.as_str());
    }
    if let Some(var_476) = &input.next_token {
        object.key("NextToken").string(var_476.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_partitions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetPartitionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_477) = &input.catalog_id {
        object.key("CatalogId").string(var_477.as_str());
    }
    if let Some(var_478) = &input.database_name {
        object.key("DatabaseName").string(var_478.as_str());
    }
    if let Some(var_479) = &input.table_name {
        object.key("TableName").string(var_479.as_str());
    }
    if let Some(var_480) = &input.expression {
        object.key("Expression").string(var_480.as_str());
    }
    if let Some(var_481) = &input.next_token {
        object.key("NextToken").string(var_481.as_str());
    }
    if let Some(var_482) = &input.segment {
        let mut object_483 = object.key("Segment").start_object();
        crate::json_ser::serialize_structure_crate_model_segment(&mut object_483, var_482)?;
        object_483.finish();
    }
    if let Some(var_484) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_484).into()),
        );
    }
    if let Some(var_485) = &input.exclude_column_schema {
        object.key("ExcludeColumnSchema").boolean(*var_485);
    }
    if let Some(var_486) = &input.transaction_id {
        object.key("TransactionId").string(var_486.as_str());
    }
    if let Some(var_487) = &input.query_as_of_time {
        object
            .key("QueryAsOfTime")
            .date_time(var_487, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_plan_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetPlanInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_488) = &input.mapping {
        let mut array_489 = object.key("Mapping").start_array();
        for item_490 in var_488 {
            {
                let mut object_491 = array_489.value().start_object();
                crate::json_ser::serialize_structure_crate_model_mapping_entry(
                    &mut object_491,
                    item_490,
                )?;
                object_491.finish();
            }
        }
        array_489.finish();
    }
    if let Some(var_492) = &input.source {
        let mut object_493 = object.key("Source").start_object();
        crate::json_ser::serialize_structure_crate_model_catalog_entry(&mut object_493, var_492)?;
        object_493.finish();
    }
    if let Some(var_494) = &input.sinks {
        let mut array_495 = object.key("Sinks").start_array();
        for item_496 in var_494 {
            {
                let mut object_497 = array_495.value().start_object();
                crate::json_ser::serialize_structure_crate_model_catalog_entry(
                    &mut object_497,
                    item_496,
                )?;
                object_497.finish();
            }
        }
        array_495.finish();
    }
    if let Some(var_498) = &input.location {
        let mut object_499 = object.key("Location").start_object();
        crate::json_ser::serialize_structure_crate_model_location(&mut object_499, var_498)?;
        object_499.finish();
    }
    if let Some(var_500) = &input.language {
        object.key("Language").string(var_500.as_str());
    }
    if let Some(var_501) = &input.additional_plan_options_map {
        let mut object_502 = object.key("AdditionalPlanOptionsMap").start_object();
        for (key_503, value_504) in var_501 {
            {
                object_502.key(key_503).string(value_504.as_str());
            }
        }
        object_502.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_registry_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetRegistryInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_505) = &input.registry_id {
        let mut object_506 = object.key("RegistryId").start_object();
        crate::json_ser::serialize_structure_crate_model_registry_id(&mut object_506, var_505)?;
        object_506.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_resource_policies_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetResourcePoliciesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_507) = &input.next_token {
        object.key("NextToken").string(var_507.as_str());
    }
    if let Some(var_508) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_508).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_resource_policy_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetResourcePolicyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_509) = &input.resource_arn {
        object.key("ResourceArn").string(var_509.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_schema_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetSchemaInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_510) = &input.schema_id {
        let mut object_511 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_511, var_510)?;
        object_511.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_schema_by_definition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetSchemaByDefinitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_512) = &input.schema_id {
        let mut object_513 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_513, var_512)?;
        object_513.finish();
    }
    if let Some(var_514) = &input.schema_definition {
        object.key("SchemaDefinition").string(var_514.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_schema_version_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetSchemaVersionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_515) = &input.schema_id {
        let mut object_516 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_516, var_515)?;
        object_516.finish();
    }
    if let Some(var_517) = &input.schema_version_id {
        object.key("SchemaVersionId").string(var_517.as_str());
    }
    if let Some(var_518) = &input.schema_version_number {
        let mut object_519 = object.key("SchemaVersionNumber").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_version_number(
            &mut object_519,
            var_518,
        )?;
        object_519.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_schema_versions_diff_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetSchemaVersionsDiffInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_520) = &input.schema_id {
        let mut object_521 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_521, var_520)?;
        object_521.finish();
    }
    if let Some(var_522) = &input.first_schema_version_number {
        let mut object_523 = object.key("FirstSchemaVersionNumber").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_version_number(
            &mut object_523,
            var_522,
        )?;
        object_523.finish();
    }
    if let Some(var_524) = &input.second_schema_version_number {
        let mut object_525 = object.key("SecondSchemaVersionNumber").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_version_number(
            &mut object_525,
            var_524,
        )?;
        object_525.finish();
    }
    if let Some(var_526) = &input.schema_diff_type {
        object.key("SchemaDiffType").string(var_526.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_security_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetSecurityConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_527) = &input.name {
        object.key("Name").string(var_527.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_security_configurations_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetSecurityConfigurationsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_528) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_528).into()),
        );
    }
    if let Some(var_529) = &input.next_token {
        object.key("NextToken").string(var_529.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_session_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetSessionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_530) = &input.id {
        object.key("Id").string(var_530.as_str());
    }
    if let Some(var_531) = &input.request_origin {
        object.key("RequestOrigin").string(var_531.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_statement_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetStatementInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_532) = &input.session_id {
        object.key("SessionId").string(var_532.as_str());
    }
    {
        object.key("Id").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.id).into()),
        );
    }
    if let Some(var_533) = &input.request_origin {
        object.key("RequestOrigin").string(var_533.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_table_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetTableInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_534) = &input.catalog_id {
        object.key("CatalogId").string(var_534.as_str());
    }
    if let Some(var_535) = &input.database_name {
        object.key("DatabaseName").string(var_535.as_str());
    }
    if let Some(var_536) = &input.name {
        object.key("Name").string(var_536.as_str());
    }
    if let Some(var_537) = &input.transaction_id {
        object.key("TransactionId").string(var_537.as_str());
    }
    if let Some(var_538) = &input.query_as_of_time {
        object
            .key("QueryAsOfTime")
            .date_time(var_538, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_tables_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetTablesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_539) = &input.catalog_id {
        object.key("CatalogId").string(var_539.as_str());
    }
    if let Some(var_540) = &input.database_name {
        object.key("DatabaseName").string(var_540.as_str());
    }
    if let Some(var_541) = &input.expression {
        object.key("Expression").string(var_541.as_str());
    }
    if let Some(var_542) = &input.next_token {
        object.key("NextToken").string(var_542.as_str());
    }
    if let Some(var_543) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_543).into()),
        );
    }
    if let Some(var_544) = &input.transaction_id {
        object.key("TransactionId").string(var_544.as_str());
    }
    if let Some(var_545) = &input.query_as_of_time {
        object
            .key("QueryAsOfTime")
            .date_time(var_545, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_table_version_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetTableVersionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_546) = &input.catalog_id {
        object.key("CatalogId").string(var_546.as_str());
    }
    if let Some(var_547) = &input.database_name {
        object.key("DatabaseName").string(var_547.as_str());
    }
    if let Some(var_548) = &input.table_name {
        object.key("TableName").string(var_548.as_str());
    }
    if let Some(var_549) = &input.version_id {
        object.key("VersionId").string(var_549.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_table_versions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetTableVersionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_550) = &input.catalog_id {
        object.key("CatalogId").string(var_550.as_str());
    }
    if let Some(var_551) = &input.database_name {
        object.key("DatabaseName").string(var_551.as_str());
    }
    if let Some(var_552) = &input.table_name {
        object.key("TableName").string(var_552.as_str());
    }
    if let Some(var_553) = &input.next_token {
        object.key("NextToken").string(var_553.as_str());
    }
    if let Some(var_554) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_554).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_tags_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetTagsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_555) = &input.resource_arn {
        object.key("ResourceArn").string(var_555.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_trigger_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetTriggerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_556) = &input.name {
        object.key("Name").string(var_556.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_triggers_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetTriggersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_557) = &input.next_token {
        object.key("NextToken").string(var_557.as_str());
    }
    if let Some(var_558) = &input.dependent_job_name {
        object.key("DependentJobName").string(var_558.as_str());
    }
    if let Some(var_559) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_559).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_unfiltered_partition_metadata_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetUnfilteredPartitionMetadataInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_560) = &input.catalog_id {
        object.key("CatalogId").string(var_560.as_str());
    }
    if let Some(var_561) = &input.database_name {
        object.key("DatabaseName").string(var_561.as_str());
    }
    if let Some(var_562) = &input.table_name {
        object.key("TableName").string(var_562.as_str());
    }
    if let Some(var_563) = &input.partition_values {
        let mut array_564 = object.key("PartitionValues").start_array();
        for item_565 in var_563 {
            {
                array_564.value().string(item_565.as_str());
            }
        }
        array_564.finish();
    }
    if let Some(var_566) = &input.audit_context {
        let mut object_567 = object.key("AuditContext").start_object();
        crate::json_ser::serialize_structure_crate_model_audit_context(&mut object_567, var_566)?;
        object_567.finish();
    }
    if let Some(var_568) = &input.supported_permission_types {
        let mut array_569 = object.key("SupportedPermissionTypes").start_array();
        for item_570 in var_568 {
            {
                array_569.value().string(item_570.as_str());
            }
        }
        array_569.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_unfiltered_partitions_metadata_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetUnfilteredPartitionsMetadataInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_571) = &input.catalog_id {
        object.key("CatalogId").string(var_571.as_str());
    }
    if let Some(var_572) = &input.database_name {
        object.key("DatabaseName").string(var_572.as_str());
    }
    if let Some(var_573) = &input.table_name {
        object.key("TableName").string(var_573.as_str());
    }
    if let Some(var_574) = &input.expression {
        object.key("Expression").string(var_574.as_str());
    }
    if let Some(var_575) = &input.audit_context {
        let mut object_576 = object.key("AuditContext").start_object();
        crate::json_ser::serialize_structure_crate_model_audit_context(&mut object_576, var_575)?;
        object_576.finish();
    }
    if let Some(var_577) = &input.supported_permission_types {
        let mut array_578 = object.key("SupportedPermissionTypes").start_array();
        for item_579 in var_577 {
            {
                array_578.value().string(item_579.as_str());
            }
        }
        array_578.finish();
    }
    if let Some(var_580) = &input.next_token {
        object.key("NextToken").string(var_580.as_str());
    }
    if let Some(var_581) = &input.segment {
        let mut object_582 = object.key("Segment").start_object();
        crate::json_ser::serialize_structure_crate_model_segment(&mut object_582, var_581)?;
        object_582.finish();
    }
    if let Some(var_583) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_583).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_unfiltered_table_metadata_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetUnfilteredTableMetadataInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_584) = &input.catalog_id {
        object.key("CatalogId").string(var_584.as_str());
    }
    if let Some(var_585) = &input.database_name {
        object.key("DatabaseName").string(var_585.as_str());
    }
    if let Some(var_586) = &input.name {
        object.key("Name").string(var_586.as_str());
    }
    if let Some(var_587) = &input.audit_context {
        let mut object_588 = object.key("AuditContext").start_object();
        crate::json_ser::serialize_structure_crate_model_audit_context(&mut object_588, var_587)?;
        object_588.finish();
    }
    if let Some(var_589) = &input.supported_permission_types {
        let mut array_590 = object.key("SupportedPermissionTypes").start_array();
        for item_591 in var_589 {
            {
                array_590.value().string(item_591.as_str());
            }
        }
        array_590.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_user_defined_function_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetUserDefinedFunctionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_592) = &input.catalog_id {
        object.key("CatalogId").string(var_592.as_str());
    }
    if let Some(var_593) = &input.database_name {
        object.key("DatabaseName").string(var_593.as_str());
    }
    if let Some(var_594) = &input.function_name {
        object.key("FunctionName").string(var_594.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_user_defined_functions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetUserDefinedFunctionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_595) = &input.catalog_id {
        object.key("CatalogId").string(var_595.as_str());
    }
    if let Some(var_596) = &input.database_name {
        object.key("DatabaseName").string(var_596.as_str());
    }
    if let Some(var_597) = &input.pattern {
        object.key("Pattern").string(var_597.as_str());
    }
    if let Some(var_598) = &input.next_token {
        object.key("NextToken").string(var_598.as_str());
    }
    if let Some(var_599) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_599).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_workflow_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetWorkflowInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_600) = &input.name {
        object.key("Name").string(var_600.as_str());
    }
    if let Some(var_601) = &input.include_graph {
        object.key("IncludeGraph").boolean(*var_601);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_workflow_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetWorkflowRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_602) = &input.name {
        object.key("Name").string(var_602.as_str());
    }
    if let Some(var_603) = &input.run_id {
        object.key("RunId").string(var_603.as_str());
    }
    if let Some(var_604) = &input.include_graph {
        object.key("IncludeGraph").boolean(*var_604);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_workflow_run_properties_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetWorkflowRunPropertiesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_605) = &input.name {
        object.key("Name").string(var_605.as_str());
    }
    if let Some(var_606) = &input.run_id {
        object.key("RunId").string(var_606.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_workflow_runs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetWorkflowRunsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_607) = &input.name {
        object.key("Name").string(var_607.as_str());
    }
    if let Some(var_608) = &input.include_graph {
        object.key("IncludeGraph").boolean(*var_608);
    }
    if let Some(var_609) = &input.next_token {
        object.key("NextToken").string(var_609.as_str());
    }
    if let Some(var_610) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_610).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_import_catalog_to_glue_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ImportCatalogToGlueInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_611) = &input.catalog_id {
        object.key("CatalogId").string(var_611.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_blueprints_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListBlueprintsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_612) = &input.next_token {
        object.key("NextToken").string(var_612.as_str());
    }
    if let Some(var_613) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_613).into()),
        );
    }
    if let Some(var_614) = &input.tags {
        let mut object_615 = object.key("Tags").start_object();
        for (key_616, value_617) in var_614 {
            {
                object_615.key(key_616).string(value_617.as_str());
            }
        }
        object_615.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_crawlers_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListCrawlersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_618) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_618).into()),
        );
    }
    if let Some(var_619) = &input.next_token {
        object.key("NextToken").string(var_619.as_str());
    }
    if let Some(var_620) = &input.tags {
        let mut object_621 = object.key("Tags").start_object();
        for (key_622, value_623) in var_620 {
            {
                object_621.key(key_622).string(value_623.as_str());
            }
        }
        object_621.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_crawls_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListCrawlsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_624) = &input.crawler_name {
        object.key("CrawlerName").string(var_624.as_str());
    }
    if let Some(var_625) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_625).into()),
        );
    }
    if let Some(var_626) = &input.filters {
        let mut array_627 = object.key("Filters").start_array();
        for item_628 in var_626 {
            {
                let mut object_629 = array_627.value().start_object();
                crate::json_ser::serialize_structure_crate_model_crawls_filter(
                    &mut object_629,
                    item_628,
                )?;
                object_629.finish();
            }
        }
        array_627.finish();
    }
    if let Some(var_630) = &input.next_token {
        object.key("NextToken").string(var_630.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_custom_entity_types_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListCustomEntityTypesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_631) = &input.next_token {
        object.key("NextToken").string(var_631.as_str());
    }
    if let Some(var_632) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_632).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_dev_endpoints_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListDevEndpointsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_633) = &input.next_token {
        object.key("NextToken").string(var_633.as_str());
    }
    if let Some(var_634) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_634).into()),
        );
    }
    if let Some(var_635) = &input.tags {
        let mut object_636 = object.key("Tags").start_object();
        for (key_637, value_638) in var_635 {
            {
                object_636.key(key_637).string(value_638.as_str());
            }
        }
        object_636.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_jobs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListJobsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_639) = &input.next_token {
        object.key("NextToken").string(var_639.as_str());
    }
    if let Some(var_640) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_640).into()),
        );
    }
    if let Some(var_641) = &input.tags {
        let mut object_642 = object.key("Tags").start_object();
        for (key_643, value_644) in var_641 {
            {
                object_642.key(key_643).string(value_644.as_str());
            }
        }
        object_642.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_ml_transforms_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListMlTransformsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_645) = &input.next_token {
        object.key("NextToken").string(var_645.as_str());
    }
    if let Some(var_646) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_646).into()),
        );
    }
    if let Some(var_647) = &input.filter {
        let mut object_648 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_filter_criteria(
            &mut object_648,
            var_647,
        )?;
        object_648.finish();
    }
    if let Some(var_649) = &input.sort {
        let mut object_650 = object.key("Sort").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_sort_criteria(
            &mut object_650,
            var_649,
        )?;
        object_650.finish();
    }
    if let Some(var_651) = &input.tags {
        let mut object_652 = object.key("Tags").start_object();
        for (key_653, value_654) in var_651 {
            {
                object_652.key(key_653).string(value_654.as_str());
            }
        }
        object_652.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_registries_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListRegistriesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_655) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_655).into()),
        );
    }
    if let Some(var_656) = &input.next_token {
        object.key("NextToken").string(var_656.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_schemas_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListSchemasInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_657) = &input.registry_id {
        let mut object_658 = object.key("RegistryId").start_object();
        crate::json_ser::serialize_structure_crate_model_registry_id(&mut object_658, var_657)?;
        object_658.finish();
    }
    if let Some(var_659) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_659).into()),
        );
    }
    if let Some(var_660) = &input.next_token {
        object.key("NextToken").string(var_660.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_schema_versions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListSchemaVersionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_661) = &input.schema_id {
        let mut object_662 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_662, var_661)?;
        object_662.finish();
    }
    if let Some(var_663) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_663).into()),
        );
    }
    if let Some(var_664) = &input.next_token {
        object.key("NextToken").string(var_664.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_sessions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListSessionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_665) = &input.next_token {
        object.key("NextToken").string(var_665.as_str());
    }
    if let Some(var_666) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_666).into()),
        );
    }
    if let Some(var_667) = &input.tags {
        let mut object_668 = object.key("Tags").start_object();
        for (key_669, value_670) in var_667 {
            {
                object_668.key(key_669).string(value_670.as_str());
            }
        }
        object_668.finish();
    }
    if let Some(var_671) = &input.request_origin {
        object.key("RequestOrigin").string(var_671.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_statements_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListStatementsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_672) = &input.session_id {
        object.key("SessionId").string(var_672.as_str());
    }
    if let Some(var_673) = &input.request_origin {
        object.key("RequestOrigin").string(var_673.as_str());
    }
    if let Some(var_674) = &input.next_token {
        object.key("NextToken").string(var_674.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_triggers_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTriggersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_675) = &input.next_token {
        object.key("NextToken").string(var_675.as_str());
    }
    if let Some(var_676) = &input.dependent_job_name {
        object.key("DependentJobName").string(var_676.as_str());
    }
    if let Some(var_677) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_677).into()),
        );
    }
    if let Some(var_678) = &input.tags {
        let mut object_679 = object.key("Tags").start_object();
        for (key_680, value_681) in var_678 {
            {
                object_679.key(key_680).string(value_681.as_str());
            }
        }
        object_679.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_workflows_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListWorkflowsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_682) = &input.next_token {
        object.key("NextToken").string(var_682.as_str());
    }
    if let Some(var_683) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_683).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_data_catalog_encryption_settings_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutDataCatalogEncryptionSettingsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_684) = &input.catalog_id {
        object.key("CatalogId").string(var_684.as_str());
    }
    if let Some(var_685) = &input.data_catalog_encryption_settings {
        let mut object_686 = object.key("DataCatalogEncryptionSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_data_catalog_encryption_settings(
            &mut object_686,
            var_685,
        )?;
        object_686.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_resource_policy_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutResourcePolicyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_687) = &input.policy_in_json {
        object.key("PolicyInJson").string(var_687.as_str());
    }
    if let Some(var_688) = &input.resource_arn {
        object.key("ResourceArn").string(var_688.as_str());
    }
    if let Some(var_689) = &input.policy_hash_condition {
        object.key("PolicyHashCondition").string(var_689.as_str());
    }
    if let Some(var_690) = &input.policy_exists_condition {
        object.key("PolicyExistsCondition").string(var_690.as_str());
    }
    if let Some(var_691) = &input.enable_hybrid {
        object.key("EnableHybrid").string(var_691.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_schema_version_metadata_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutSchemaVersionMetadataInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_692) = &input.schema_id {
        let mut object_693 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_693, var_692)?;
        object_693.finish();
    }
    if let Some(var_694) = &input.schema_version_number {
        let mut object_695 = object.key("SchemaVersionNumber").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_version_number(
            &mut object_695,
            var_694,
        )?;
        object_695.finish();
    }
    if let Some(var_696) = &input.schema_version_id {
        object.key("SchemaVersionId").string(var_696.as_str());
    }
    if let Some(var_697) = &input.metadata_key_value {
        let mut object_698 = object.key("MetadataKeyValue").start_object();
        crate::json_ser::serialize_structure_crate_model_metadata_key_value_pair(
            &mut object_698,
            var_697,
        )?;
        object_698.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_workflow_run_properties_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutWorkflowRunPropertiesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_699) = &input.name {
        object.key("Name").string(var_699.as_str());
    }
    if let Some(var_700) = &input.run_id {
        object.key("RunId").string(var_700.as_str());
    }
    if let Some(var_701) = &input.run_properties {
        let mut object_702 = object.key("RunProperties").start_object();
        for (key_703, value_704) in var_701 {
            {
                object_702.key(key_703).string(value_704.as_str());
            }
        }
        object_702.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_query_schema_version_metadata_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::QuerySchemaVersionMetadataInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_705) = &input.schema_id {
        let mut object_706 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_706, var_705)?;
        object_706.finish();
    }
    if let Some(var_707) = &input.schema_version_number {
        let mut object_708 = object.key("SchemaVersionNumber").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_version_number(
            &mut object_708,
            var_707,
        )?;
        object_708.finish();
    }
    if let Some(var_709) = &input.schema_version_id {
        object.key("SchemaVersionId").string(var_709.as_str());
    }
    if let Some(var_710) = &input.metadata_list {
        let mut array_711 = object.key("MetadataList").start_array();
        for item_712 in var_710 {
            {
                let mut object_713 = array_711.value().start_object();
                crate::json_ser::serialize_structure_crate_model_metadata_key_value_pair(
                    &mut object_713,
                    item_712,
                )?;
                object_713.finish();
            }
        }
        array_711.finish();
    }
    if input.max_results != 0 {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_results).into()),
        );
    }
    if let Some(var_714) = &input.next_token {
        object.key("NextToken").string(var_714.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_register_schema_version_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RegisterSchemaVersionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_715) = &input.schema_id {
        let mut object_716 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_716, var_715)?;
        object_716.finish();
    }
    if let Some(var_717) = &input.schema_definition {
        object.key("SchemaDefinition").string(var_717.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_remove_schema_version_metadata_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RemoveSchemaVersionMetadataInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_718) = &input.schema_id {
        let mut object_719 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_719, var_718)?;
        object_719.finish();
    }
    if let Some(var_720) = &input.schema_version_number {
        let mut object_721 = object.key("SchemaVersionNumber").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_version_number(
            &mut object_721,
            var_720,
        )?;
        object_721.finish();
    }
    if let Some(var_722) = &input.schema_version_id {
        object.key("SchemaVersionId").string(var_722.as_str());
    }
    if let Some(var_723) = &input.metadata_key_value {
        let mut object_724 = object.key("MetadataKeyValue").start_object();
        crate::json_ser::serialize_structure_crate_model_metadata_key_value_pair(
            &mut object_724,
            var_723,
        )?;
        object_724.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_reset_job_bookmark_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ResetJobBookmarkInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_725) = &input.job_name {
        object.key("JobName").string(var_725.as_str());
    }
    if let Some(var_726) = &input.run_id {
        object.key("RunId").string(var_726.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_resume_workflow_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ResumeWorkflowRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_727) = &input.name {
        object.key("Name").string(var_727.as_str());
    }
    if let Some(var_728) = &input.run_id {
        object.key("RunId").string(var_728.as_str());
    }
    if let Some(var_729) = &input.node_ids {
        let mut array_730 = object.key("NodeIds").start_array();
        for item_731 in var_729 {
            {
                array_730.value().string(item_731.as_str());
            }
        }
        array_730.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_run_statement_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RunStatementInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_732) = &input.session_id {
        object.key("SessionId").string(var_732.as_str());
    }
    if let Some(var_733) = &input.code {
        object.key("Code").string(var_733.as_str());
    }
    if let Some(var_734) = &input.request_origin {
        object.key("RequestOrigin").string(var_734.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_search_tables_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SearchTablesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_735) = &input.catalog_id {
        object.key("CatalogId").string(var_735.as_str());
    }
    if let Some(var_736) = &input.next_token {
        object.key("NextToken").string(var_736.as_str());
    }
    if let Some(var_737) = &input.filters {
        let mut array_738 = object.key("Filters").start_array();
        for item_739 in var_737 {
            {
                let mut object_740 = array_738.value().start_object();
                crate::json_ser::serialize_structure_crate_model_property_predicate(
                    &mut object_740,
                    item_739,
                )?;
                object_740.finish();
            }
        }
        array_738.finish();
    }
    if let Some(var_741) = &input.search_text {
        object.key("SearchText").string(var_741.as_str());
    }
    if let Some(var_742) = &input.sort_criteria {
        let mut array_743 = object.key("SortCriteria").start_array();
        for item_744 in var_742 {
            {
                let mut object_745 = array_743.value().start_object();
                crate::json_ser::serialize_structure_crate_model_sort_criterion(
                    &mut object_745,
                    item_744,
                )?;
                object_745.finish();
            }
        }
        array_743.finish();
    }
    if let Some(var_746) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_746).into()),
        );
    }
    if let Some(var_747) = &input.resource_share_type {
        object.key("ResourceShareType").string(var_747.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_blueprint_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartBlueprintRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_748) = &input.blueprint_name {
        object.key("BlueprintName").string(var_748.as_str());
    }
    if let Some(var_749) = &input.parameters {
        object.key("Parameters").string(var_749.as_str());
    }
    if let Some(var_750) = &input.role_arn {
        object.key("RoleArn").string(var_750.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_crawler_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartCrawlerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_751) = &input.name {
        object.key("Name").string(var_751.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_crawler_schedule_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartCrawlerScheduleInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_752) = &input.crawler_name {
        object.key("CrawlerName").string(var_752.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_export_labels_task_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartExportLabelsTaskRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_753) = &input.transform_id {
        object.key("TransformId").string(var_753.as_str());
    }
    if let Some(var_754) = &input.output_s3_path {
        object.key("OutputS3Path").string(var_754.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_import_labels_task_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartImportLabelsTaskRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_755) = &input.transform_id {
        object.key("TransformId").string(var_755.as_str());
    }
    if let Some(var_756) = &input.input_s3_path {
        object.key("InputS3Path").string(var_756.as_str());
    }
    if input.replace_all_labels {
        object
            .key("ReplaceAllLabels")
            .boolean(input.replace_all_labels);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_job_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartJobRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_757) = &input.job_name {
        object.key("JobName").string(var_757.as_str());
    }
    if let Some(var_758) = &input.job_run_id {
        object.key("JobRunId").string(var_758.as_str());
    }
    if let Some(var_759) = &input.arguments {
        let mut object_760 = object.key("Arguments").start_object();
        for (key_761, value_762) in var_759 {
            {
                object_760.key(key_761).string(value_762.as_str());
            }
        }
        object_760.finish();
    }
    if input.allocated_capacity != 0 {
        object.key("AllocatedCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.allocated_capacity).into()),
        );
    }
    if let Some(var_763) = &input.timeout {
        object.key("Timeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_763).into()),
        );
    }
    if let Some(var_764) = &input.max_capacity {
        object.key("MaxCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_764).into()),
        );
    }
    if let Some(var_765) = &input.security_configuration {
        object.key("SecurityConfiguration").string(var_765.as_str());
    }
    if let Some(var_766) = &input.notification_property {
        let mut object_767 = object.key("NotificationProperty").start_object();
        crate::json_ser::serialize_structure_crate_model_notification_property(
            &mut object_767,
            var_766,
        )?;
        object_767.finish();
    }
    if let Some(var_768) = &input.worker_type {
        object.key("WorkerType").string(var_768.as_str());
    }
    if let Some(var_769) = &input.number_of_workers {
        object.key("NumberOfWorkers").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_769).into()),
        );
    }
    if let Some(var_770) = &input.execution_class {
        object.key("ExecutionClass").string(var_770.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_ml_evaluation_task_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartMlEvaluationTaskRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_771) = &input.transform_id {
        object.key("TransformId").string(var_771.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_ml_labeling_set_generation_task_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartMlLabelingSetGenerationTaskRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_772) = &input.transform_id {
        object.key("TransformId").string(var_772.as_str());
    }
    if let Some(var_773) = &input.output_s3_path {
        object.key("OutputS3Path").string(var_773.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_trigger_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartTriggerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_774) = &input.name {
        object.key("Name").string(var_774.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_workflow_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartWorkflowRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_775) = &input.name {
        object.key("Name").string(var_775.as_str());
    }
    if let Some(var_776) = &input.run_properties {
        let mut object_777 = object.key("RunProperties").start_object();
        for (key_778, value_779) in var_776 {
            {
                object_777.key(key_778).string(value_779.as_str());
            }
        }
        object_777.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_crawler_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopCrawlerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_780) = &input.name {
        object.key("Name").string(var_780.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_crawler_schedule_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopCrawlerScheduleInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_781) = &input.crawler_name {
        object.key("CrawlerName").string(var_781.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_session_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopSessionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_782) = &input.id {
        object.key("Id").string(var_782.as_str());
    }
    if let Some(var_783) = &input.request_origin {
        object.key("RequestOrigin").string(var_783.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_trigger_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopTriggerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_784) = &input.name {
        object.key("Name").string(var_784.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_workflow_run_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopWorkflowRunInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_785) = &input.name {
        object.key("Name").string(var_785.as_str());
    }
    if let Some(var_786) = &input.run_id {
        object.key("RunId").string(var_786.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_787) = &input.resource_arn {
        object.key("ResourceArn").string(var_787.as_str());
    }
    if let Some(var_788) = &input.tags_to_add {
        let mut object_789 = object.key("TagsToAdd").start_object();
        for (key_790, value_791) in var_788 {
            {
                object_789.key(key_790).string(value_791.as_str());
            }
        }
        object_789.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_untag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UntagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_792) = &input.resource_arn {
        object.key("ResourceArn").string(var_792.as_str());
    }
    if let Some(var_793) = &input.tags_to_remove {
        let mut array_794 = object.key("TagsToRemove").start_array();
        for item_795 in var_793 {
            {
                array_794.value().string(item_795.as_str());
            }
        }
        array_794.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_blueprint_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateBlueprintInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_796) = &input.name {
        object.key("Name").string(var_796.as_str());
    }
    if let Some(var_797) = &input.description {
        object.key("Description").string(var_797.as_str());
    }
    if let Some(var_798) = &input.blueprint_location {
        object.key("BlueprintLocation").string(var_798.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_classifier_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateClassifierInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_799) = &input.grok_classifier {
        let mut object_800 = object.key("GrokClassifier").start_object();
        crate::json_ser::serialize_structure_crate_model_update_grok_classifier_request(
            &mut object_800,
            var_799,
        )?;
        object_800.finish();
    }
    if let Some(var_801) = &input.xml_classifier {
        let mut object_802 = object.key("XMLClassifier").start_object();
        crate::json_ser::serialize_structure_crate_model_update_xml_classifier_request(
            &mut object_802,
            var_801,
        )?;
        object_802.finish();
    }
    if let Some(var_803) = &input.json_classifier {
        let mut object_804 = object.key("JsonClassifier").start_object();
        crate::json_ser::serialize_structure_crate_model_update_json_classifier_request(
            &mut object_804,
            var_803,
        )?;
        object_804.finish();
    }
    if let Some(var_805) = &input.csv_classifier {
        let mut object_806 = object.key("CsvClassifier").start_object();
        crate::json_ser::serialize_structure_crate_model_update_csv_classifier_request(
            &mut object_806,
            var_805,
        )?;
        object_806.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_column_statistics_for_partition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateColumnStatisticsForPartitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_807) = &input.catalog_id {
        object.key("CatalogId").string(var_807.as_str());
    }
    if let Some(var_808) = &input.database_name {
        object.key("DatabaseName").string(var_808.as_str());
    }
    if let Some(var_809) = &input.table_name {
        object.key("TableName").string(var_809.as_str());
    }
    if let Some(var_810) = &input.partition_values {
        let mut array_811 = object.key("PartitionValues").start_array();
        for item_812 in var_810 {
            {
                array_811.value().string(item_812.as_str());
            }
        }
        array_811.finish();
    }
    if let Some(var_813) = &input.column_statistics_list {
        let mut array_814 = object.key("ColumnStatisticsList").start_array();
        for item_815 in var_813 {
            {
                let mut object_816 = array_814.value().start_object();
                crate::json_ser::serialize_structure_crate_model_column_statistics(
                    &mut object_816,
                    item_815,
                )?;
                object_816.finish();
            }
        }
        array_814.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_column_statistics_for_table_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateColumnStatisticsForTableInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_817) = &input.catalog_id {
        object.key("CatalogId").string(var_817.as_str());
    }
    if let Some(var_818) = &input.database_name {
        object.key("DatabaseName").string(var_818.as_str());
    }
    if let Some(var_819) = &input.table_name {
        object.key("TableName").string(var_819.as_str());
    }
    if let Some(var_820) = &input.column_statistics_list {
        let mut array_821 = object.key("ColumnStatisticsList").start_array();
        for item_822 in var_820 {
            {
                let mut object_823 = array_821.value().start_object();
                crate::json_ser::serialize_structure_crate_model_column_statistics(
                    &mut object_823,
                    item_822,
                )?;
                object_823.finish();
            }
        }
        array_821.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_connection_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateConnectionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_824) = &input.catalog_id {
        object.key("CatalogId").string(var_824.as_str());
    }
    if let Some(var_825) = &input.name {
        object.key("Name").string(var_825.as_str());
    }
    if let Some(var_826) = &input.connection_input {
        let mut object_827 = object.key("ConnectionInput").start_object();
        crate::json_ser::serialize_structure_crate_model_connection_input(
            &mut object_827,
            var_826,
        )?;
        object_827.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_crawler_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateCrawlerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_828) = &input.name {
        object.key("Name").string(var_828.as_str());
    }
    if let Some(var_829) = &input.role {
        object.key("Role").string(var_829.as_str());
    }
    if let Some(var_830) = &input.database_name {
        object.key("DatabaseName").string(var_830.as_str());
    }
    if let Some(var_831) = &input.description {
        object.key("Description").string(var_831.as_str());
    }
    if let Some(var_832) = &input.targets {
        let mut object_833 = object.key("Targets").start_object();
        crate::json_ser::serialize_structure_crate_model_crawler_targets(&mut object_833, var_832)?;
        object_833.finish();
    }
    if let Some(var_834) = &input.schedule {
        object.key("Schedule").string(var_834.as_str());
    }
    if let Some(var_835) = &input.classifiers {
        let mut array_836 = object.key("Classifiers").start_array();
        for item_837 in var_835 {
            {
                array_836.value().string(item_837.as_str());
            }
        }
        array_836.finish();
    }
    if let Some(var_838) = &input.table_prefix {
        object.key("TablePrefix").string(var_838.as_str());
    }
    if let Some(var_839) = &input.schema_change_policy {
        let mut object_840 = object.key("SchemaChangePolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_change_policy(
            &mut object_840,
            var_839,
        )?;
        object_840.finish();
    }
    if let Some(var_841) = &input.recrawl_policy {
        let mut object_842 = object.key("RecrawlPolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_recrawl_policy(&mut object_842, var_841)?;
        object_842.finish();
    }
    if let Some(var_843) = &input.lineage_configuration {
        let mut object_844 = object.key("LineageConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_lineage_configuration(
            &mut object_844,
            var_843,
        )?;
        object_844.finish();
    }
    if let Some(var_845) = &input.lake_formation_configuration {
        let mut object_846 = object.key("LakeFormationConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_lake_formation_configuration(
            &mut object_846,
            var_845,
        )?;
        object_846.finish();
    }
    if let Some(var_847) = &input.configuration {
        object.key("Configuration").string(var_847.as_str());
    }
    if let Some(var_848) = &input.crawler_security_configuration {
        object
            .key("CrawlerSecurityConfiguration")
            .string(var_848.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_crawler_schedule_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateCrawlerScheduleInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_849) = &input.crawler_name {
        object.key("CrawlerName").string(var_849.as_str());
    }
    if let Some(var_850) = &input.schedule {
        object.key("Schedule").string(var_850.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_database_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDatabaseInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_851) = &input.catalog_id {
        object.key("CatalogId").string(var_851.as_str());
    }
    if let Some(var_852) = &input.name {
        object.key("Name").string(var_852.as_str());
    }
    if let Some(var_853) = &input.database_input {
        let mut object_854 = object.key("DatabaseInput").start_object();
        crate::json_ser::serialize_structure_crate_model_database_input(&mut object_854, var_853)?;
        object_854.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_dev_endpoint_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDevEndpointInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_855) = &input.endpoint_name {
        object.key("EndpointName").string(var_855.as_str());
    }
    if let Some(var_856) = &input.public_key {
        object.key("PublicKey").string(var_856.as_str());
    }
    if let Some(var_857) = &input.add_public_keys {
        let mut array_858 = object.key("AddPublicKeys").start_array();
        for item_859 in var_857 {
            {
                array_858.value().string(item_859.as_str());
            }
        }
        array_858.finish();
    }
    if let Some(var_860) = &input.delete_public_keys {
        let mut array_861 = object.key("DeletePublicKeys").start_array();
        for item_862 in var_860 {
            {
                array_861.value().string(item_862.as_str());
            }
        }
        array_861.finish();
    }
    if let Some(var_863) = &input.custom_libraries {
        let mut object_864 = object.key("CustomLibraries").start_object();
        crate::json_ser::serialize_structure_crate_model_dev_endpoint_custom_libraries(
            &mut object_864,
            var_863,
        )?;
        object_864.finish();
    }
    if input.update_etl_libraries {
        object
            .key("UpdateEtlLibraries")
            .boolean(input.update_etl_libraries);
    }
    if let Some(var_865) = &input.delete_arguments {
        let mut array_866 = object.key("DeleteArguments").start_array();
        for item_867 in var_865 {
            {
                array_866.value().string(item_867.as_str());
            }
        }
        array_866.finish();
    }
    if let Some(var_868) = &input.add_arguments {
        let mut object_869 = object.key("AddArguments").start_object();
        for (key_870, value_871) in var_868 {
            {
                object_869.key(key_870).string(value_871.as_str());
            }
        }
        object_869.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_872) = &input.job_name {
        object.key("JobName").string(var_872.as_str());
    }
    if let Some(var_873) = &input.job_update {
        let mut object_874 = object.key("JobUpdate").start_object();
        crate::json_ser::serialize_structure_crate_model_job_update(&mut object_874, var_873)?;
        object_874.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_ml_transform_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateMlTransformInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_875) = &input.transform_id {
        object.key("TransformId").string(var_875.as_str());
    }
    if let Some(var_876) = &input.name {
        object.key("Name").string(var_876.as_str());
    }
    if let Some(var_877) = &input.description {
        object.key("Description").string(var_877.as_str());
    }
    if let Some(var_878) = &input.parameters {
        let mut object_879 = object.key("Parameters").start_object();
        crate::json_ser::serialize_structure_crate_model_transform_parameters(
            &mut object_879,
            var_878,
        )?;
        object_879.finish();
    }
    if let Some(var_880) = &input.role {
        object.key("Role").string(var_880.as_str());
    }
    if let Some(var_881) = &input.glue_version {
        object.key("GlueVersion").string(var_881.as_str());
    }
    if let Some(var_882) = &input.max_capacity {
        object.key("MaxCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_882).into()),
        );
    }
    if let Some(var_883) = &input.worker_type {
        object.key("WorkerType").string(var_883.as_str());
    }
    if let Some(var_884) = &input.number_of_workers {
        object.key("NumberOfWorkers").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_884).into()),
        );
    }
    if let Some(var_885) = &input.timeout {
        object.key("Timeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_885).into()),
        );
    }
    if let Some(var_886) = &input.max_retries {
        object.key("MaxRetries").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_886).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_partition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdatePartitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_887) = &input.catalog_id {
        object.key("CatalogId").string(var_887.as_str());
    }
    if let Some(var_888) = &input.database_name {
        object.key("DatabaseName").string(var_888.as_str());
    }
    if let Some(var_889) = &input.table_name {
        object.key("TableName").string(var_889.as_str());
    }
    if let Some(var_890) = &input.partition_value_list {
        let mut array_891 = object.key("PartitionValueList").start_array();
        for item_892 in var_890 {
            {
                array_891.value().string(item_892.as_str());
            }
        }
        array_891.finish();
    }
    if let Some(var_893) = &input.partition_input {
        let mut object_894 = object.key("PartitionInput").start_object();
        crate::json_ser::serialize_structure_crate_model_partition_input(&mut object_894, var_893)?;
        object_894.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_registry_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateRegistryInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_895) = &input.registry_id {
        let mut object_896 = object.key("RegistryId").start_object();
        crate::json_ser::serialize_structure_crate_model_registry_id(&mut object_896, var_895)?;
        object_896.finish();
    }
    if let Some(var_897) = &input.description {
        object.key("Description").string(var_897.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_schema_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateSchemaInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_898) = &input.schema_id {
        let mut object_899 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_899, var_898)?;
        object_899.finish();
    }
    if let Some(var_900) = &input.schema_version_number {
        let mut object_901 = object.key("SchemaVersionNumber").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_version_number(
            &mut object_901,
            var_900,
        )?;
        object_901.finish();
    }
    if let Some(var_902) = &input.compatibility {
        object.key("Compatibility").string(var_902.as_str());
    }
    if let Some(var_903) = &input.description {
        object.key("Description").string(var_903.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_table_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateTableInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_904) = &input.catalog_id {
        object.key("CatalogId").string(var_904.as_str());
    }
    if let Some(var_905) = &input.database_name {
        object.key("DatabaseName").string(var_905.as_str());
    }
    if let Some(var_906) = &input.table_input {
        let mut object_907 = object.key("TableInput").start_object();
        crate::json_ser::serialize_structure_crate_model_table_input(&mut object_907, var_906)?;
        object_907.finish();
    }
    if let Some(var_908) = &input.skip_archive {
        object.key("SkipArchive").boolean(*var_908);
    }
    if let Some(var_909) = &input.transaction_id {
        object.key("TransactionId").string(var_909.as_str());
    }
    if let Some(var_910) = &input.version_id {
        object.key("VersionId").string(var_910.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_trigger_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateTriggerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_911) = &input.name {
        object.key("Name").string(var_911.as_str());
    }
    if let Some(var_912) = &input.trigger_update {
        let mut object_913 = object.key("TriggerUpdate").start_object();
        crate::json_ser::serialize_structure_crate_model_trigger_update(&mut object_913, var_912)?;
        object_913.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_user_defined_function_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateUserDefinedFunctionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_914) = &input.catalog_id {
        object.key("CatalogId").string(var_914.as_str());
    }
    if let Some(var_915) = &input.database_name {
        object.key("DatabaseName").string(var_915.as_str());
    }
    if let Some(var_916) = &input.function_name {
        object.key("FunctionName").string(var_916.as_str());
    }
    if let Some(var_917) = &input.function_input {
        let mut object_918 = object.key("FunctionInput").start_object();
        crate::json_ser::serialize_structure_crate_model_user_defined_function_input(
            &mut object_918,
            var_917,
        )?;
        object_918.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_workflow_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateWorkflowInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_919) = &input.name {
        object.key("Name").string(var_919.as_str());
    }
    if let Some(var_920) = &input.description {
        object.key("Description").string(var_920.as_str());
    }
    if let Some(var_921) = &input.default_run_properties {
        let mut object_922 = object.key("DefaultRunProperties").start_object();
        for (key_923, value_924) in var_921 {
            {
                object_922.key(key_923).string(value_924.as_str());
            }
        }
        object_922.finish();
    }
    if let Some(var_925) = &input.max_concurrent_runs {
        object.key("MaxConcurrentRuns").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_925).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_partition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PartitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_926) = &input.values {
        let mut array_927 = object.key("Values").start_array();
        for item_928 in var_926 {
            {
                array_927.value().string(item_928.as_str());
            }
        }
        array_927.finish();
    }
    if let Some(var_929) = &input.last_access_time {
        object
            .key("LastAccessTime")
            .date_time(var_929, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_930) = &input.storage_descriptor {
        let mut object_931 = object.key("StorageDescriptor").start_object();
        crate::json_ser::serialize_structure_crate_model_storage_descriptor(
            &mut object_931,
            var_930,
        )?;
        object_931.finish();
    }
    if let Some(var_932) = &input.parameters {
        let mut object_933 = object.key("Parameters").start_object();
        for (key_934, value_935) in var_932 {
            {
                object_933.key(key_934).string(value_935.as_str());
            }
        }
        object_933.finish();
    }
    if let Some(var_936) = &input.last_analyzed_time {
        object
            .key("LastAnalyzedTime")
            .date_time(var_936, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_model_partition_value_list(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PartitionValueList,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_937) = &input.values {
        let mut array_938 = object.key("Values").start_array();
        for item_939 in var_937 {
            {
                array_938.value().string(item_939.as_str());
            }
        }
        array_938.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_batch_update_partition_request_entry(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BatchUpdatePartitionRequestEntry,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_940) = &input.partition_value_list {
        let mut array_941 = object.key("PartitionValueList").start_array();
        for item_942 in var_940 {
            {
                array_941.value().string(item_942.as_str());
            }
        }
        array_941.finish();
    }
    if let Some(var_943) = &input.partition_input {
        let mut object_944 = object.key("PartitionInput").start_object();
        crate::json_ser::serialize_structure_crate_model_partition_input(&mut object_944, var_943)?;
        object_944.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_create_grok_classifier_request(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CreateGrokClassifierRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_945) = &input.classification {
        object.key("Classification").string(var_945.as_str());
    }
    if let Some(var_946) = &input.name {
        object.key("Name").string(var_946.as_str());
    }
    if let Some(var_947) = &input.grok_pattern {
        object.key("GrokPattern").string(var_947.as_str());
    }
    if let Some(var_948) = &input.custom_patterns {
        object.key("CustomPatterns").string(var_948.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_create_xml_classifier_request(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CreateXmlClassifierRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_949) = &input.classification {
        object.key("Classification").string(var_949.as_str());
    }
    if let Some(var_950) = &input.name {
        object.key("Name").string(var_950.as_str());
    }
    if let Some(var_951) = &input.row_tag {
        object.key("RowTag").string(var_951.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_create_json_classifier_request(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CreateJsonClassifierRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_952) = &input.name {
        object.key("Name").string(var_952.as_str());
    }
    if let Some(var_953) = &input.json_path {
        object.key("JsonPath").string(var_953.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_create_csv_classifier_request(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CreateCsvClassifierRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_954) = &input.name {
        object.key("Name").string(var_954.as_str());
    }
    if let Some(var_955) = &input.delimiter {
        object.key("Delimiter").string(var_955.as_str());
    }
    if let Some(var_956) = &input.quote_symbol {
        object.key("QuoteSymbol").string(var_956.as_str());
    }
    if let Some(var_957) = &input.contains_header {
        object.key("ContainsHeader").string(var_957.as_str());
    }
    if let Some(var_958) = &input.header {
        let mut array_959 = object.key("Header").start_array();
        for item_960 in var_958 {
            {
                array_959.value().string(item_960.as_str());
            }
        }
        array_959.finish();
    }
    if let Some(var_961) = &input.disable_value_trimming {
        object.key("DisableValueTrimming").boolean(*var_961);
    }
    if let Some(var_962) = &input.allow_single_column {
        object.key("AllowSingleColumn").boolean(*var_962);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_connection_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConnectionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_963) = &input.name {
        object.key("Name").string(var_963.as_str());
    }
    if let Some(var_964) = &input.description {
        object.key("Description").string(var_964.as_str());
    }
    if let Some(var_965) = &input.connection_type {
        object.key("ConnectionType").string(var_965.as_str());
    }
    if let Some(var_966) = &input.match_criteria {
        let mut array_967 = object.key("MatchCriteria").start_array();
        for item_968 in var_966 {
            {
                array_967.value().string(item_968.as_str());
            }
        }
        array_967.finish();
    }
    if let Some(var_969) = &input.connection_properties {
        let mut object_970 = object.key("ConnectionProperties").start_object();
        for (key_971, value_972) in var_969 {
            {
                object_970.key(key_971.as_str()).string(value_972.as_str());
            }
        }
        object_970.finish();
    }
    if let Some(var_973) = &input.physical_connection_requirements {
        let mut object_974 = object.key("PhysicalConnectionRequirements").start_object();
        crate::json_ser::serialize_structure_crate_model_physical_connection_requirements(
            &mut object_974,
            var_973,
        )?;
        object_974.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_crawler_targets(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CrawlerTargets,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_975) = &input.s3_targets {
        let mut array_976 = object.key("S3Targets").start_array();
        for item_977 in var_975 {
            {
                let mut object_978 = array_976.value().start_object();
                crate::json_ser::serialize_structure_crate_model_s3_target(
                    &mut object_978,
                    item_977,
                )?;
                object_978.finish();
            }
        }
        array_976.finish();
    }
    if let Some(var_979) = &input.jdbc_targets {
        let mut array_980 = object.key("JdbcTargets").start_array();
        for item_981 in var_979 {
            {
                let mut object_982 = array_980.value().start_object();
                crate::json_ser::serialize_structure_crate_model_jdbc_target(
                    &mut object_982,
                    item_981,
                )?;
                object_982.finish();
            }
        }
        array_980.finish();
    }
    if let Some(var_983) = &input.mongo_db_targets {
        let mut array_984 = object.key("MongoDBTargets").start_array();
        for item_985 in var_983 {
            {
                let mut object_986 = array_984.value().start_object();
                crate::json_ser::serialize_structure_crate_model_mongo_db_target(
                    &mut object_986,
                    item_985,
                )?;
                object_986.finish();
            }
        }
        array_984.finish();
    }
    if let Some(var_987) = &input.dynamo_db_targets {
        let mut array_988 = object.key("DynamoDBTargets").start_array();
        for item_989 in var_987 {
            {
                let mut object_990 = array_988.value().start_object();
                crate::json_ser::serialize_structure_crate_model_dynamo_db_target(
                    &mut object_990,
                    item_989,
                )?;
                object_990.finish();
            }
        }
        array_988.finish();
    }
    if let Some(var_991) = &input.catalog_targets {
        let mut array_992 = object.key("CatalogTargets").start_array();
        for item_993 in var_991 {
            {
                let mut object_994 = array_992.value().start_object();
                crate::json_ser::serialize_structure_crate_model_catalog_target(
                    &mut object_994,
                    item_993,
                )?;
                object_994.finish();
            }
        }
        array_992.finish();
    }
    if let Some(var_995) = &input.delta_targets {
        let mut array_996 = object.key("DeltaTargets").start_array();
        for item_997 in var_995 {
            {
                let mut object_998 = array_996.value().start_object();
                crate::json_ser::serialize_structure_crate_model_delta_target(
                    &mut object_998,
                    item_997,
                )?;
                object_998.finish();
            }
        }
        array_996.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_schema_change_policy(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SchemaChangePolicy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_999) = &input.update_behavior {
        object.key("UpdateBehavior").string(var_999.as_str());
    }
    if let Some(var_1000) = &input.delete_behavior {
        object.key("DeleteBehavior").string(var_1000.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_recrawl_policy(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RecrawlPolicy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1001) = &input.recrawl_behavior {
        object.key("RecrawlBehavior").string(var_1001.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_lineage_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LineageConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1002) = &input.crawler_lineage_settings {
        object
            .key("CrawlerLineageSettings")
            .string(var_1002.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_lake_formation_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LakeFormationConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1003) = &input.use_lake_formation_credentials {
        object.key("UseLakeFormationCredentials").boolean(*var_1003);
    }
    if let Some(var_1004) = &input.account_id {
        object.key("AccountId").string(var_1004.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_database_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DatabaseInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1005) = &input.name {
        object.key("Name").string(var_1005.as_str());
    }
    if let Some(var_1006) = &input.description {
        object.key("Description").string(var_1006.as_str());
    }
    if let Some(var_1007) = &input.location_uri {
        object.key("LocationUri").string(var_1007.as_str());
    }
    if let Some(var_1008) = &input.parameters {
        let mut object_1009 = object.key("Parameters").start_object();
        for (key_1010, value_1011) in var_1008 {
            {
                object_1009.key(key_1010).string(value_1011.as_str());
            }
        }
        object_1009.finish();
    }
    if let Some(var_1012) = &input.create_table_default_permissions {
        let mut array_1013 = object.key("CreateTableDefaultPermissions").start_array();
        for item_1014 in var_1012 {
            {
                let mut object_1015 = array_1013.value().start_object();
                crate::json_ser::serialize_structure_crate_model_principal_permissions(
                    &mut object_1015,
                    item_1014,
                )?;
                object_1015.finish();
            }
        }
        array_1013.finish();
    }
    if let Some(var_1016) = &input.target_database {
        let mut object_1017 = object.key("TargetDatabase").start_object();
        crate::json_ser::serialize_structure_crate_model_database_identifier(
            &mut object_1017,
            var_1016,
        )?;
        object_1017.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_execution_property(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ExecutionProperty,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.max_concurrent_runs != 0 {
        object.key("MaxConcurrentRuns").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_concurrent_runs).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_job_command(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JobCommand,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1018) = &input.name {
        object.key("Name").string(var_1018.as_str());
    }
    if let Some(var_1019) = &input.script_location {
        object.key("ScriptLocation").string(var_1019.as_str());
    }
    if let Some(var_1020) = &input.python_version {
        object.key("PythonVersion").string(var_1020.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_connections_list(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConnectionsList,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1021) = &input.connections {
        let mut array_1022 = object.key("Connections").start_array();
        for item_1023 in var_1021 {
            {
                array_1022.value().string(item_1023.as_str());
            }
        }
        array_1022.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_notification_property(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NotificationProperty,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1024) = &input.notify_delay_after {
        object.key("NotifyDelayAfter").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1024).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_code_gen_configuration_node(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CodeGenConfigurationNode,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1025) = &input.athena_connector_source {
        let mut object_1026 = object.key("AthenaConnectorSource").start_object();
        crate::json_ser::serialize_structure_crate_model_athena_connector_source(
            &mut object_1026,
            var_1025,
        )?;
        object_1026.finish();
    }
    if let Some(var_1027) = &input.jdbc_connector_source {
        let mut object_1028 = object.key("JDBCConnectorSource").start_object();
        crate::json_ser::serialize_structure_crate_model_jdbc_connector_source(
            &mut object_1028,
            var_1027,
        )?;
        object_1028.finish();
    }
    if let Some(var_1029) = &input.spark_connector_source {
        let mut object_1030 = object.key("SparkConnectorSource").start_object();
        crate::json_ser::serialize_structure_crate_model_spark_connector_source(
            &mut object_1030,
            var_1029,
        )?;
        object_1030.finish();
    }
    if let Some(var_1031) = &input.catalog_source {
        let mut object_1032 = object.key("CatalogSource").start_object();
        crate::json_ser::serialize_structure_crate_model_catalog_source(
            &mut object_1032,
            var_1031,
        )?;
        object_1032.finish();
    }
    if let Some(var_1033) = &input.redshift_source {
        let mut object_1034 = object.key("RedshiftSource").start_object();
        crate::json_ser::serialize_structure_crate_model_redshift_source(
            &mut object_1034,
            var_1033,
        )?;
        object_1034.finish();
    }
    if let Some(var_1035) = &input.s3_catalog_source {
        let mut object_1036 = object.key("S3CatalogSource").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_catalog_source(
            &mut object_1036,
            var_1035,
        )?;
        object_1036.finish();
    }
    if let Some(var_1037) = &input.s3_csv_source {
        let mut object_1038 = object.key("S3CsvSource").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_csv_source(&mut object_1038, var_1037)?;
        object_1038.finish();
    }
    if let Some(var_1039) = &input.s3_json_source {
        let mut object_1040 = object.key("S3JsonSource").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_json_source(
            &mut object_1040,
            var_1039,
        )?;
        object_1040.finish();
    }
    if let Some(var_1041) = &input.s3_parquet_source {
        let mut object_1042 = object.key("S3ParquetSource").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_parquet_source(
            &mut object_1042,
            var_1041,
        )?;
        object_1042.finish();
    }
    if let Some(var_1043) = &input.relational_catalog_source {
        let mut object_1044 = object.key("RelationalCatalogSource").start_object();
        crate::json_ser::serialize_structure_crate_model_relational_catalog_source(
            &mut object_1044,
            var_1043,
        )?;
        object_1044.finish();
    }
    if let Some(var_1045) = &input.dynamo_db_catalog_source {
        let mut object_1046 = object.key("DynamoDBCatalogSource").start_object();
        crate::json_ser::serialize_structure_crate_model_dynamo_db_catalog_source(
            &mut object_1046,
            var_1045,
        )?;
        object_1046.finish();
    }
    if let Some(var_1047) = &input.jdbc_connector_target {
        let mut object_1048 = object.key("JDBCConnectorTarget").start_object();
        crate::json_ser::serialize_structure_crate_model_jdbc_connector_target(
            &mut object_1048,
            var_1047,
        )?;
        object_1048.finish();
    }
    if let Some(var_1049) = &input.spark_connector_target {
        let mut object_1050 = object.key("SparkConnectorTarget").start_object();
        crate::json_ser::serialize_structure_crate_model_spark_connector_target(
            &mut object_1050,
            var_1049,
        )?;
        object_1050.finish();
    }
    if let Some(var_1051) = &input.catalog_target {
        let mut object_1052 = object.key("CatalogTarget").start_object();
        crate::json_ser::serialize_structure_crate_model_basic_catalog_target(
            &mut object_1052,
            var_1051,
        )?;
        object_1052.finish();
    }
    if let Some(var_1053) = &input.redshift_target {
        let mut object_1054 = object.key("RedshiftTarget").start_object();
        crate::json_ser::serialize_structure_crate_model_redshift_target(
            &mut object_1054,
            var_1053,
        )?;
        object_1054.finish();
    }
    if let Some(var_1055) = &input.s3_catalog_target {
        let mut object_1056 = object.key("S3CatalogTarget").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_catalog_target(
            &mut object_1056,
            var_1055,
        )?;
        object_1056.finish();
    }
    if let Some(var_1057) = &input.s3_glue_parquet_target {
        let mut object_1058 = object.key("S3GlueParquetTarget").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_glue_parquet_target(
            &mut object_1058,
            var_1057,
        )?;
        object_1058.finish();
    }
    if let Some(var_1059) = &input.s3_direct_target {
        let mut object_1060 = object.key("S3DirectTarget").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_direct_target(
            &mut object_1060,
            var_1059,
        )?;
        object_1060.finish();
    }
    if let Some(var_1061) = &input.apply_mapping {
        let mut object_1062 = object.key("ApplyMapping").start_object();
        crate::json_ser::serialize_structure_crate_model_apply_mapping(&mut object_1062, var_1061)?;
        object_1062.finish();
    }
    if let Some(var_1063) = &input.select_fields {
        let mut object_1064 = object.key("SelectFields").start_object();
        crate::json_ser::serialize_structure_crate_model_select_fields(&mut object_1064, var_1063)?;
        object_1064.finish();
    }
    if let Some(var_1065) = &input.drop_fields {
        let mut object_1066 = object.key("DropFields").start_object();
        crate::json_ser::serialize_structure_crate_model_drop_fields(&mut object_1066, var_1065)?;
        object_1066.finish();
    }
    if let Some(var_1067) = &input.rename_field {
        let mut object_1068 = object.key("RenameField").start_object();
        crate::json_ser::serialize_structure_crate_model_rename_field(&mut object_1068, var_1067)?;
        object_1068.finish();
    }
    if let Some(var_1069) = &input.spigot {
        let mut object_1070 = object.key("Spigot").start_object();
        crate::json_ser::serialize_structure_crate_model_spigot(&mut object_1070, var_1069)?;
        object_1070.finish();
    }
    if let Some(var_1071) = &input.join {
        let mut object_1072 = object.key("Join").start_object();
        crate::json_ser::serialize_structure_crate_model_join(&mut object_1072, var_1071)?;
        object_1072.finish();
    }
    if let Some(var_1073) = &input.split_fields {
        let mut object_1074 = object.key("SplitFields").start_object();
        crate::json_ser::serialize_structure_crate_model_split_fields(&mut object_1074, var_1073)?;
        object_1074.finish();
    }
    if let Some(var_1075) = &input.select_from_collection {
        let mut object_1076 = object.key("SelectFromCollection").start_object();
        crate::json_ser::serialize_structure_crate_model_select_from_collection(
            &mut object_1076,
            var_1075,
        )?;
        object_1076.finish();
    }
    if let Some(var_1077) = &input.fill_missing_values {
        let mut object_1078 = object.key("FillMissingValues").start_object();
        crate::json_ser::serialize_structure_crate_model_fill_missing_values(
            &mut object_1078,
            var_1077,
        )?;
        object_1078.finish();
    }
    if let Some(var_1079) = &input.filter {
        let mut object_1080 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_crate_model_filter(&mut object_1080, var_1079)?;
        object_1080.finish();
    }
    if let Some(var_1081) = &input.custom_code {
        let mut object_1082 = object.key("CustomCode").start_object();
        crate::json_ser::serialize_structure_crate_model_custom_code(&mut object_1082, var_1081)?;
        object_1082.finish();
    }
    if let Some(var_1083) = &input.spark_sql {
        let mut object_1084 = object.key("SparkSQL").start_object();
        crate::json_ser::serialize_structure_crate_model_spark_sql(&mut object_1084, var_1083)?;
        object_1084.finish();
    }
    if let Some(var_1085) = &input.direct_kinesis_source {
        let mut object_1086 = object.key("DirectKinesisSource").start_object();
        crate::json_ser::serialize_structure_crate_model_direct_kinesis_source(
            &mut object_1086,
            var_1085,
        )?;
        object_1086.finish();
    }
    if let Some(var_1087) = &input.direct_kafka_source {
        let mut object_1088 = object.key("DirectKafkaSource").start_object();
        crate::json_ser::serialize_structure_crate_model_direct_kafka_source(
            &mut object_1088,
            var_1087,
        )?;
        object_1088.finish();
    }
    if let Some(var_1089) = &input.catalog_kinesis_source {
        let mut object_1090 = object.key("CatalogKinesisSource").start_object();
        crate::json_ser::serialize_structure_crate_model_catalog_kinesis_source(
            &mut object_1090,
            var_1089,
        )?;
        object_1090.finish();
    }
    if let Some(var_1091) = &input.catalog_kafka_source {
        let mut object_1092 = object.key("CatalogKafkaSource").start_object();
        crate::json_ser::serialize_structure_crate_model_catalog_kafka_source(
            &mut object_1092,
            var_1091,
        )?;
        object_1092.finish();
    }
    if let Some(var_1093) = &input.drop_null_fields {
        let mut object_1094 = object.key("DropNullFields").start_object();
        crate::json_ser::serialize_structure_crate_model_drop_null_fields(
            &mut object_1094,
            var_1093,
        )?;
        object_1094.finish();
    }
    if let Some(var_1095) = &input.merge {
        let mut object_1096 = object.key("Merge").start_object();
        crate::json_ser::serialize_structure_crate_model_merge(&mut object_1096, var_1095)?;
        object_1096.finish();
    }
    if let Some(var_1097) = &input.union {
        let mut object_1098 = object.key("Union").start_object();
        crate::json_ser::serialize_structure_crate_model_union(&mut object_1098, var_1097)?;
        object_1098.finish();
    }
    if let Some(var_1099) = &input.pii_detection {
        let mut object_1100 = object.key("PIIDetection").start_object();
        crate::json_ser::serialize_structure_crate_model_pii_detection(&mut object_1100, var_1099)?;
        object_1100.finish();
    }
    if let Some(var_1101) = &input.aggregate {
        let mut object_1102 = object.key("Aggregate").start_object();
        crate::json_ser::serialize_structure_crate_model_aggregate(&mut object_1102, var_1101)?;
        object_1102.finish();
    }
    if let Some(var_1103) = &input.drop_duplicates {
        let mut object_1104 = object.key("DropDuplicates").start_object();
        crate::json_ser::serialize_structure_crate_model_drop_duplicates(
            &mut object_1104,
            var_1103,
        )?;
        object_1104.finish();
    }
    if let Some(var_1105) = &input.governed_catalog_target {
        let mut object_1106 = object.key("GovernedCatalogTarget").start_object();
        crate::json_ser::serialize_structure_crate_model_governed_catalog_target(
            &mut object_1106,
            var_1105,
        )?;
        object_1106.finish();
    }
    if let Some(var_1107) = &input.governed_catalog_source {
        let mut object_1108 = object.key("GovernedCatalogSource").start_object();
        crate::json_ser::serialize_structure_crate_model_governed_catalog_source(
            &mut object_1108,
            var_1107,
        )?;
        object_1108.finish();
    }
    if let Some(var_1109) = &input.microsoft_sql_server_catalog_source {
        let mut object_1110 = object.key("MicrosoftSQLServerCatalogSource").start_object();
        crate::json_ser::serialize_structure_crate_model_microsoft_sql_server_catalog_source(
            &mut object_1110,
            var_1109,
        )?;
        object_1110.finish();
    }
    if let Some(var_1111) = &input.my_sql_catalog_source {
        let mut object_1112 = object.key("MySQLCatalogSource").start_object();
        crate::json_ser::serialize_structure_crate_model_my_sql_catalog_source(
            &mut object_1112,
            var_1111,
        )?;
        object_1112.finish();
    }
    if let Some(var_1113) = &input.oracle_sql_catalog_source {
        let mut object_1114 = object.key("OracleSQLCatalogSource").start_object();
        crate::json_ser::serialize_structure_crate_model_oracle_sql_catalog_source(
            &mut object_1114,
            var_1113,
        )?;
        object_1114.finish();
    }
    if let Some(var_1115) = &input.postgre_sql_catalog_source {
        let mut object_1116 = object.key("PostgreSQLCatalogSource").start_object();
        crate::json_ser::serialize_structure_crate_model_postgre_sql_catalog_source(
            &mut object_1116,
            var_1115,
        )?;
        object_1116.finish();
    }
    if let Some(var_1117) = &input.microsoft_sql_server_catalog_target {
        let mut object_1118 = object.key("MicrosoftSQLServerCatalogTarget").start_object();
        crate::json_ser::serialize_structure_crate_model_microsoft_sql_server_catalog_target(
            &mut object_1118,
            var_1117,
        )?;
        object_1118.finish();
    }
    if let Some(var_1119) = &input.my_sql_catalog_target {
        let mut object_1120 = object.key("MySQLCatalogTarget").start_object();
        crate::json_ser::serialize_structure_crate_model_my_sql_catalog_target(
            &mut object_1120,
            var_1119,
        )?;
        object_1120.finish();
    }
    if let Some(var_1121) = &input.oracle_sql_catalog_target {
        let mut object_1122 = object.key("OracleSQLCatalogTarget").start_object();
        crate::json_ser::serialize_structure_crate_model_oracle_sql_catalog_target(
            &mut object_1122,
            var_1121,
        )?;
        object_1122.finish();
    }
    if let Some(var_1123) = &input.postgre_sql_catalog_target {
        let mut object_1124 = object.key("PostgreSQLCatalogTarget").start_object();
        crate::json_ser::serialize_structure_crate_model_postgre_sql_catalog_target(
            &mut object_1124,
            var_1123,
        )?;
        object_1124.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_glue_table(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GlueTable,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1125) = &input.database_name {
        object.key("DatabaseName").string(var_1125.as_str());
    }
    if let Some(var_1126) = &input.table_name {
        object.key("TableName").string(var_1126.as_str());
    }
    if let Some(var_1127) = &input.catalog_id {
        object.key("CatalogId").string(var_1127.as_str());
    }
    if let Some(var_1128) = &input.connection_name {
        object.key("ConnectionName").string(var_1128.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_transform_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TransformParameters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1129) = &input.transform_type {
        object.key("TransformType").string(var_1129.as_str());
    }
    if let Some(var_1130) = &input.find_matches_parameters {
        let mut object_1131 = object.key("FindMatchesParameters").start_object();
        crate::json_ser::serialize_structure_crate_model_find_matches_parameters(
            &mut object_1131,
            var_1130,
        )?;
        object_1131.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_transform_encryption(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TransformEncryption,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1132) = &input.ml_user_data_encryption {
        let mut object_1133 = object.key("MlUserDataEncryption").start_object();
        crate::json_ser::serialize_structure_crate_model_ml_user_data_encryption(
            &mut object_1133,
            var_1132,
        )?;
        object_1133.finish();
    }
    if let Some(var_1134) = &input.task_run_security_configuration_name {
        object
            .key("TaskRunSecurityConfigurationName")
            .string(var_1134.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_partition_index(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PartitionIndex,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1135) = &input.keys {
        let mut array_1136 = object.key("Keys").start_array();
        for item_1137 in var_1135 {
            {
                array_1136.value().string(item_1137.as_str());
            }
        }
        array_1136.finish();
    }
    if let Some(var_1138) = &input.index_name {
        object.key("IndexName").string(var_1138.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_registry_id(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RegistryId,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1139) = &input.registry_name {
        object.key("RegistryName").string(var_1139.as_str());
    }
    if let Some(var_1140) = &input.registry_arn {
        object.key("RegistryArn").string(var_1140.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_code_gen_node(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CodeGenNode,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1141) = &input.id {
        object.key("Id").string(var_1141.as_str());
    }
    if let Some(var_1142) = &input.node_type {
        object.key("NodeType").string(var_1142.as_str());
    }
    if let Some(var_1143) = &input.args {
        let mut array_1144 = object.key("Args").start_array();
        for item_1145 in var_1143 {
            {
                let mut object_1146 = array_1144.value().start_object();
                crate::json_ser::serialize_structure_crate_model_code_gen_node_arg(
                    &mut object_1146,
                    item_1145,
                )?;
                object_1146.finish();
            }
        }
        array_1144.finish();
    }
    if input.line_number != 0 {
        object.key("LineNumber").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.line_number).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_code_gen_edge(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CodeGenEdge,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1147) = &input.source {
        object.key("Source").string(var_1147.as_str());
    }
    if let Some(var_1148) = &input.target {
        object.key("Target").string(var_1148.as_str());
    }
    if let Some(var_1149) = &input.target_parameter {
        object.key("TargetParameter").string(var_1149.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_encryption_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EncryptionConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1150) = &input.s3_encryption {
        let mut array_1151 = object.key("S3Encryption").start_array();
        for item_1152 in var_1150 {
            {
                let mut object_1153 = array_1151.value().start_object();
                crate::json_ser::serialize_structure_crate_model_s3_encryption(
                    &mut object_1153,
                    item_1152,
                )?;
                object_1153.finish();
            }
        }
        array_1151.finish();
    }
    if let Some(var_1154) = &input.cloud_watch_encryption {
        let mut object_1155 = object.key("CloudWatchEncryption").start_object();
        crate::json_ser::serialize_structure_crate_model_cloud_watch_encryption(
            &mut object_1155,
            var_1154,
        )?;
        object_1155.finish();
    }
    if let Some(var_1156) = &input.job_bookmarks_encryption {
        let mut object_1157 = object.key("JobBookmarksEncryption").start_object();
        crate::json_ser::serialize_structure_crate_model_job_bookmarks_encryption(
            &mut object_1157,
            var_1156,
        )?;
        object_1157.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_session_command(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SessionCommand,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1158) = &input.name {
        object.key("Name").string(var_1158.as_str());
    }
    if let Some(var_1159) = &input.python_version {
        object.key("PythonVersion").string(var_1159.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_table_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TableInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1160) = &input.name {
        object.key("Name").string(var_1160.as_str());
    }
    if let Some(var_1161) = &input.description {
        object.key("Description").string(var_1161.as_str());
    }
    if let Some(var_1162) = &input.owner {
        object.key("Owner").string(var_1162.as_str());
    }
    if let Some(var_1163) = &input.last_access_time {
        object
            .key("LastAccessTime")
            .date_time(var_1163, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1164) = &input.last_analyzed_time {
        object
            .key("LastAnalyzedTime")
            .date_time(var_1164, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if input.retention != 0 {
        object.key("Retention").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.retention).into()),
        );
    }
    if let Some(var_1165) = &input.storage_descriptor {
        let mut object_1166 = object.key("StorageDescriptor").start_object();
        crate::json_ser::serialize_structure_crate_model_storage_descriptor(
            &mut object_1166,
            var_1165,
        )?;
        object_1166.finish();
    }
    if let Some(var_1167) = &input.partition_keys {
        let mut array_1168 = object.key("PartitionKeys").start_array();
        for item_1169 in var_1167 {
            {
                let mut object_1170 = array_1168.value().start_object();
                crate::json_ser::serialize_structure_crate_model_column(
                    &mut object_1170,
                    item_1169,
                )?;
                object_1170.finish();
            }
        }
        array_1168.finish();
    }
    if let Some(var_1171) = &input.view_original_text {
        object.key("ViewOriginalText").string(var_1171.as_str());
    }
    if let Some(var_1172) = &input.view_expanded_text {
        object.key("ViewExpandedText").string(var_1172.as_str());
    }
    if let Some(var_1173) = &input.table_type {
        object.key("TableType").string(var_1173.as_str());
    }
    if let Some(var_1174) = &input.parameters {
        let mut object_1175 = object.key("Parameters").start_object();
        for (key_1176, value_1177) in var_1174 {
            {
                object_1175.key(key_1176).string(value_1177.as_str());
            }
        }
        object_1175.finish();
    }
    if let Some(var_1178) = &input.target_table {
        let mut object_1179 = object.key("TargetTable").start_object();
        crate::json_ser::serialize_structure_crate_model_table_identifier(
            &mut object_1179,
            var_1178,
        )?;
        object_1179.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_predicate(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Predicate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1180) = &input.logical {
        object.key("Logical").string(var_1180.as_str());
    }
    if let Some(var_1181) = &input.conditions {
        let mut array_1182 = object.key("Conditions").start_array();
        for item_1183 in var_1181 {
            {
                let mut object_1184 = array_1182.value().start_object();
                crate::json_ser::serialize_structure_crate_model_condition(
                    &mut object_1184,
                    item_1183,
                )?;
                object_1184.finish();
            }
        }
        array_1182.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Action,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1185) = &input.job_name {
        object.key("JobName").string(var_1185.as_str());
    }
    if let Some(var_1186) = &input.arguments {
        let mut object_1187 = object.key("Arguments").start_object();
        for (key_1188, value_1189) in var_1186 {
            {
                object_1187.key(key_1188).string(value_1189.as_str());
            }
        }
        object_1187.finish();
    }
    if let Some(var_1190) = &input.timeout {
        object.key("Timeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1190).into()),
        );
    }
    if let Some(var_1191) = &input.security_configuration {
        object
            .key("SecurityConfiguration")
            .string(var_1191.as_str());
    }
    if let Some(var_1192) = &input.notification_property {
        let mut object_1193 = object.key("NotificationProperty").start_object();
        crate::json_ser::serialize_structure_crate_model_notification_property(
            &mut object_1193,
            var_1192,
        )?;
        object_1193.finish();
    }
    if let Some(var_1194) = &input.crawler_name {
        object.key("CrawlerName").string(var_1194.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_event_batching_condition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EventBatchingCondition,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("BatchSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.batch_size).into()),
        );
    }
    if let Some(var_1195) = &input.batch_window {
        object.key("BatchWindow").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1195).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_user_defined_function_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UserDefinedFunctionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1196) = &input.function_name {
        object.key("FunctionName").string(var_1196.as_str());
    }
    if let Some(var_1197) = &input.class_name {
        object.key("ClassName").string(var_1197.as_str());
    }
    if let Some(var_1198) = &input.owner_name {
        object.key("OwnerName").string(var_1198.as_str());
    }
    if let Some(var_1199) = &input.owner_type {
        object.key("OwnerType").string(var_1199.as_str());
    }
    if let Some(var_1200) = &input.resource_uris {
        let mut array_1201 = object.key("ResourceUris").start_array();
        for item_1202 in var_1200 {
            {
                let mut object_1203 = array_1201.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_uri(
                    &mut object_1203,
                    item_1202,
                )?;
                object_1203.finish();
            }
        }
        array_1201.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_schema_id(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SchemaId,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1204) = &input.schema_arn {
        object.key("SchemaArn").string(var_1204.as_str());
    }
    if let Some(var_1205) = &input.schema_name {
        object.key("SchemaName").string(var_1205.as_str());
    }
    if let Some(var_1206) = &input.registry_name {
        object.key("RegistryName").string(var_1206.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_get_connections_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GetConnectionsFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1207) = &input.match_criteria {
        let mut array_1208 = object.key("MatchCriteria").start_array();
        for item_1209 in var_1207 {
            {
                array_1208.value().string(item_1209.as_str());
            }
        }
        array_1208.finish();
    }
    if let Some(var_1210) = &input.connection_type {
        object.key("ConnectionType").string(var_1210.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_catalog_entry(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CatalogEntry,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1211) = &input.database_name {
        object.key("DatabaseName").string(var_1211.as_str());
    }
    if let Some(var_1212) = &input.table_name {
        object.key("TableName").string(var_1212.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_location(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Location,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1213) = &input.jdbc {
        let mut array_1214 = object.key("Jdbc").start_array();
        for item_1215 in var_1213 {
            {
                let mut object_1216 = array_1214.value().start_object();
                crate::json_ser::serialize_structure_crate_model_code_gen_node_arg(
                    &mut object_1216,
                    item_1215,
                )?;
                object_1216.finish();
            }
        }
        array_1214.finish();
    }
    if let Some(var_1217) = &input.s3 {
        let mut array_1218 = object.key("S3").start_array();
        for item_1219 in var_1217 {
            {
                let mut object_1220 = array_1218.value().start_object();
                crate::json_ser::serialize_structure_crate_model_code_gen_node_arg(
                    &mut object_1220,
                    item_1219,
                )?;
                object_1220.finish();
            }
        }
        array_1218.finish();
    }
    if let Some(var_1221) = &input.dynamo_db {
        let mut array_1222 = object.key("DynamoDB").start_array();
        for item_1223 in var_1221 {
            {
                let mut object_1224 = array_1222.value().start_object();
                crate::json_ser::serialize_structure_crate_model_code_gen_node_arg(
                    &mut object_1224,
                    item_1223,
                )?;
                object_1224.finish();
            }
        }
        array_1222.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_task_run_filter_criteria(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TaskRunFilterCriteria,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1225) = &input.task_run_type {
        object.key("TaskRunType").string(var_1225.as_str());
    }
    if let Some(var_1226) = &input.status {
        object.key("Status").string(var_1226.as_str());
    }
    if let Some(var_1227) = &input.started_before {
        object
            .key("StartedBefore")
            .date_time(var_1227, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1228) = &input.started_after {
        object
            .key("StartedAfter")
            .date_time(var_1228, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_model_task_run_sort_criteria(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TaskRunSortCriteria,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1229) = &input.column {
        object.key("Column").string(var_1229.as_str());
    }
    if let Some(var_1230) = &input.sort_direction {
        object.key("SortDirection").string(var_1230.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_transform_filter_criteria(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TransformFilterCriteria,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1231) = &input.name {
        object.key("Name").string(var_1231.as_str());
    }
    if let Some(var_1232) = &input.transform_type {
        object.key("TransformType").string(var_1232.as_str());
    }
    if let Some(var_1233) = &input.status {
        object.key("Status").string(var_1233.as_str());
    }
    if let Some(var_1234) = &input.glue_version {
        object.key("GlueVersion").string(var_1234.as_str());
    }
    if let Some(var_1235) = &input.created_before {
        object
            .key("CreatedBefore")
            .date_time(var_1235, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1236) = &input.created_after {
        object
            .key("CreatedAfter")
            .date_time(var_1236, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1237) = &input.last_modified_before {
        object
            .key("LastModifiedBefore")
            .date_time(var_1237, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1238) = &input.last_modified_after {
        object
            .key("LastModifiedAfter")
            .date_time(var_1238, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1239) = &input.schema {
        let mut array_1240 = object.key("Schema").start_array();
        for item_1241 in var_1239 {
            {
                let mut object_1242 = array_1240.value().start_object();
                crate::json_ser::serialize_structure_crate_model_schema_column(
                    &mut object_1242,
                    item_1241,
                )?;
                object_1242.finish();
            }
        }
        array_1240.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_transform_sort_criteria(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TransformSortCriteria,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1243) = &input.column {
        object.key("Column").string(var_1243.as_str());
    }
    if let Some(var_1244) = &input.sort_direction {
        object.key("SortDirection").string(var_1244.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_segment(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Segment,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("SegmentNumber").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.segment_number).into()),
        );
    }
    {
        object.key("TotalSegments").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.total_segments).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_mapping_entry(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MappingEntry,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1245) = &input.source_table {
        object.key("SourceTable").string(var_1245.as_str());
    }
    if let Some(var_1246) = &input.source_path {
        object.key("SourcePath").string(var_1246.as_str());
    }
    if let Some(var_1247) = &input.source_type {
        object.key("SourceType").string(var_1247.as_str());
    }
    if let Some(var_1248) = &input.target_table {
        object.key("TargetTable").string(var_1248.as_str());
    }
    if let Some(var_1249) = &input.target_path {
        object.key("TargetPath").string(var_1249.as_str());
    }
    if let Some(var_1250) = &input.target_type {
        object.key("TargetType").string(var_1250.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_schema_version_number(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SchemaVersionNumber,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.latest_version {
        object.key("LatestVersion").boolean(input.latest_version);
    }
    if input.version_number != 0 {
        object.key("VersionNumber").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.version_number).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_audit_context(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AuditContext,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1251) = &input.additional_audit_context {
        object
            .key("AdditionalAuditContext")
            .string(var_1251.as_str());
    }
    if let Some(var_1252) = &input.requested_columns {
        let mut array_1253 = object.key("RequestedColumns").start_array();
        for item_1254 in var_1252 {
            {
                array_1253.value().string(item_1254.as_str());
            }
        }
        array_1253.finish();
    }
    if let Some(var_1255) = &input.all_columns_requested {
        object.key("AllColumnsRequested").boolean(*var_1255);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_crawls_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CrawlsFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1256) = &input.field_name {
        object.key("FieldName").string(var_1256.as_str());
    }
    if let Some(var_1257) = &input.filter_operator {
        object.key("FilterOperator").string(var_1257.as_str());
    }
    if let Some(var_1258) = &input.field_value {
        object.key("FieldValue").string(var_1258.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_catalog_encryption_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataCatalogEncryptionSettings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1259) = &input.encryption_at_rest {
        let mut object_1260 = object.key("EncryptionAtRest").start_object();
        crate::json_ser::serialize_structure_crate_model_encryption_at_rest(
            &mut object_1260,
            var_1259,
        )?;
        object_1260.finish();
    }
    if let Some(var_1261) = &input.connection_password_encryption {
        let mut object_1262 = object.key("ConnectionPasswordEncryption").start_object();
        crate::json_ser::serialize_structure_crate_model_connection_password_encryption(
            &mut object_1262,
            var_1261,
        )?;
        object_1262.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_metadata_key_value_pair(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MetadataKeyValuePair,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1263) = &input.metadata_key {
        object.key("MetadataKey").string(var_1263.as_str());
    }
    if let Some(var_1264) = &input.metadata_value {
        object.key("MetadataValue").string(var_1264.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_property_predicate(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PropertyPredicate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1265) = &input.key {
        object.key("Key").string(var_1265.as_str());
    }
    if let Some(var_1266) = &input.value {
        object.key("Value").string(var_1266.as_str());
    }
    if let Some(var_1267) = &input.comparator {
        object.key("Comparator").string(var_1267.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sort_criterion(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SortCriterion,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1268) = &input.field_name {
        object.key("FieldName").string(var_1268.as_str());
    }
    if let Some(var_1269) = &input.sort {
        object.key("Sort").string(var_1269.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_update_grok_classifier_request(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UpdateGrokClassifierRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1270) = &input.name {
        object.key("Name").string(var_1270.as_str());
    }
    if let Some(var_1271) = &input.classification {
        object.key("Classification").string(var_1271.as_str());
    }
    if let Some(var_1272) = &input.grok_pattern {
        object.key("GrokPattern").string(var_1272.as_str());
    }
    if let Some(var_1273) = &input.custom_patterns {
        object.key("CustomPatterns").string(var_1273.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_update_xml_classifier_request(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UpdateXmlClassifierRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1274) = &input.name {
        object.key("Name").string(var_1274.as_str());
    }
    if let Some(var_1275) = &input.classification {
        object.key("Classification").string(var_1275.as_str());
    }
    if let Some(var_1276) = &input.row_tag {
        object.key("RowTag").string(var_1276.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_update_json_classifier_request(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UpdateJsonClassifierRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1277) = &input.name {
        object.key("Name").string(var_1277.as_str());
    }
    if let Some(var_1278) = &input.json_path {
        object.key("JsonPath").string(var_1278.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_update_csv_classifier_request(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UpdateCsvClassifierRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1279) = &input.name {
        object.key("Name").string(var_1279.as_str());
    }
    if let Some(var_1280) = &input.delimiter {
        object.key("Delimiter").string(var_1280.as_str());
    }
    if let Some(var_1281) = &input.quote_symbol {
        object.key("QuoteSymbol").string(var_1281.as_str());
    }
    if let Some(var_1282) = &input.contains_header {
        object.key("ContainsHeader").string(var_1282.as_str());
    }
    if let Some(var_1283) = &input.header {
        let mut array_1284 = object.key("Header").start_array();
        for item_1285 in var_1283 {
            {
                array_1284.value().string(item_1285.as_str());
            }
        }
        array_1284.finish();
    }
    if let Some(var_1286) = &input.disable_value_trimming {
        object.key("DisableValueTrimming").boolean(*var_1286);
    }
    if let Some(var_1287) = &input.allow_single_column {
        object.key("AllowSingleColumn").boolean(*var_1287);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_column_statistics(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ColumnStatistics,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1288) = &input.column_name {
        object.key("ColumnName").string(var_1288.as_str());
    }
    if let Some(var_1289) = &input.column_type {
        object.key("ColumnType").string(var_1289.as_str());
    }
    if let Some(var_1290) = &input.analyzed_time {
        object
            .key("AnalyzedTime")
            .date_time(var_1290, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1291) = &input.statistics_data {
        let mut object_1292 = object.key("StatisticsData").start_object();
        crate::json_ser::serialize_structure_crate_model_column_statistics_data(
            &mut object_1292,
            var_1291,
        )?;
        object_1292.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_dev_endpoint_custom_libraries(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DevEndpointCustomLibraries,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1293) = &input.extra_python_libs_s3_path {
        object
            .key("ExtraPythonLibsS3Path")
            .string(var_1293.as_str());
    }
    if let Some(var_1294) = &input.extra_jars_s3_path {
        object.key("ExtraJarsS3Path").string(var_1294.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_job_update(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JobUpdate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1295) = &input.description {
        object.key("Description").string(var_1295.as_str());
    }
    if let Some(var_1296) = &input.log_uri {
        object.key("LogUri").string(var_1296.as_str());
    }
    if let Some(var_1297) = &input.role {
        object.key("Role").string(var_1297.as_str());
    }
    if let Some(var_1298) = &input.execution_property {
        let mut object_1299 = object.key("ExecutionProperty").start_object();
        crate::json_ser::serialize_structure_crate_model_execution_property(
            &mut object_1299,
            var_1298,
        )?;
        object_1299.finish();
    }
    if let Some(var_1300) = &input.command {
        let mut object_1301 = object.key("Command").start_object();
        crate::json_ser::serialize_structure_crate_model_job_command(&mut object_1301, var_1300)?;
        object_1301.finish();
    }
    if let Some(var_1302) = &input.default_arguments {
        let mut object_1303 = object.key("DefaultArguments").start_object();
        for (key_1304, value_1305) in var_1302 {
            {
                object_1303.key(key_1304).string(value_1305.as_str());
            }
        }
        object_1303.finish();
    }
    if let Some(var_1306) = &input.non_overridable_arguments {
        let mut object_1307 = object.key("NonOverridableArguments").start_object();
        for (key_1308, value_1309) in var_1306 {
            {
                object_1307.key(key_1308).string(value_1309.as_str());
            }
        }
        object_1307.finish();
    }
    if let Some(var_1310) = &input.connections {
        let mut object_1311 = object.key("Connections").start_object();
        crate::json_ser::serialize_structure_crate_model_connections_list(
            &mut object_1311,
            var_1310,
        )?;
        object_1311.finish();
    }
    if input.max_retries != 0 {
        object.key("MaxRetries").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_retries).into()),
        );
    }
    if input.allocated_capacity != 0 {
        object.key("AllocatedCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.allocated_capacity).into()),
        );
    }
    if let Some(var_1312) = &input.timeout {
        object.key("Timeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1312).into()),
        );
    }
    if let Some(var_1313) = &input.max_capacity {
        object.key("MaxCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1313).into()),
        );
    }
    if let Some(var_1314) = &input.worker_type {
        object.key("WorkerType").string(var_1314.as_str());
    }
    if let Some(var_1315) = &input.number_of_workers {
        object.key("NumberOfWorkers").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1315).into()),
        );
    }
    if let Some(var_1316) = &input.security_configuration {
        object
            .key("SecurityConfiguration")
            .string(var_1316.as_str());
    }
    if let Some(var_1317) = &input.notification_property {
        let mut object_1318 = object.key("NotificationProperty").start_object();
        crate::json_ser::serialize_structure_crate_model_notification_property(
            &mut object_1318,
            var_1317,
        )?;
        object_1318.finish();
    }
    if let Some(var_1319) = &input.glue_version {
        object.key("GlueVersion").string(var_1319.as_str());
    }
    if let Some(var_1320) = &input.code_gen_configuration_nodes {
        let mut object_1321 = object.key("CodeGenConfigurationNodes").start_object();
        for (key_1322, value_1323) in var_1320 {
            {
                let mut object_1324 = object_1321.key(key_1322).start_object();
                crate::json_ser::serialize_structure_crate_model_code_gen_configuration_node(
                    &mut object_1324,
                    value_1323,
                )?;
                object_1324.finish();
            }
        }
        object_1321.finish();
    }
    if let Some(var_1325) = &input.execution_class {
        object.key("ExecutionClass").string(var_1325.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_trigger_update(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TriggerUpdate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1326) = &input.name {
        object.key("Name").string(var_1326.as_str());
    }
    if let Some(var_1327) = &input.description {
        object.key("Description").string(var_1327.as_str());
    }
    if let Some(var_1328) = &input.schedule {
        object.key("Schedule").string(var_1328.as_str());
    }
    if let Some(var_1329) = &input.actions {
        let mut array_1330 = object.key("Actions").start_array();
        for item_1331 in var_1329 {
            {
                let mut object_1332 = array_1330.value().start_object();
                crate::json_ser::serialize_structure_crate_model_action(
                    &mut object_1332,
                    item_1331,
                )?;
                object_1332.finish();
            }
        }
        array_1330.finish();
    }
    if let Some(var_1333) = &input.predicate {
        let mut object_1334 = object.key("Predicate").start_object();
        crate::json_ser::serialize_structure_crate_model_predicate(&mut object_1334, var_1333)?;
        object_1334.finish();
    }
    if let Some(var_1335) = &input.event_batching_condition {
        let mut object_1336 = object.key("EventBatchingCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_event_batching_condition(
            &mut object_1336,
            var_1335,
        )?;
        object_1336.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_storage_descriptor(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StorageDescriptor,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1337) = &input.columns {
        let mut array_1338 = object.key("Columns").start_array();
        for item_1339 in var_1337 {
            {
                let mut object_1340 = array_1338.value().start_object();
                crate::json_ser::serialize_structure_crate_model_column(
                    &mut object_1340,
                    item_1339,
                )?;
                object_1340.finish();
            }
        }
        array_1338.finish();
    }
    if let Some(var_1341) = &input.location {
        object.key("Location").string(var_1341.as_str());
    }
    if let Some(var_1342) = &input.additional_locations {
        let mut array_1343 = object.key("AdditionalLocations").start_array();
        for item_1344 in var_1342 {
            {
                array_1343.value().string(item_1344.as_str());
            }
        }
        array_1343.finish();
    }
    if let Some(var_1345) = &input.input_format {
        object.key("InputFormat").string(var_1345.as_str());
    }
    if let Some(var_1346) = &input.output_format {
        object.key("OutputFormat").string(var_1346.as_str());
    }
    if input.compressed {
        object.key("Compressed").boolean(input.compressed);
    }
    if input.number_of_buckets != 0 {
        object.key("NumberOfBuckets").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_buckets).into()),
        );
    }
    if let Some(var_1347) = &input.serde_info {
        let mut object_1348 = object.key("SerdeInfo").start_object();
        crate::json_ser::serialize_structure_crate_model_ser_de_info(&mut object_1348, var_1347)?;
        object_1348.finish();
    }
    if let Some(var_1349) = &input.bucket_columns {
        let mut array_1350 = object.key("BucketColumns").start_array();
        for item_1351 in var_1349 {
            {
                array_1350.value().string(item_1351.as_str());
            }
        }
        array_1350.finish();
    }
    if let Some(var_1352) = &input.sort_columns {
        let mut array_1353 = object.key("SortColumns").start_array();
        for item_1354 in var_1352 {
            {
                let mut object_1355 = array_1353.value().start_object();
                crate::json_ser::serialize_structure_crate_model_order(
                    &mut object_1355,
                    item_1354,
                )?;
                object_1355.finish();
            }
        }
        array_1353.finish();
    }
    if let Some(var_1356) = &input.parameters {
        let mut object_1357 = object.key("Parameters").start_object();
        for (key_1358, value_1359) in var_1356 {
            {
                object_1357.key(key_1358).string(value_1359.as_str());
            }
        }
        object_1357.finish();
    }
    if let Some(var_1360) = &input.skewed_info {
        let mut object_1361 = object.key("SkewedInfo").start_object();
        crate::json_ser::serialize_structure_crate_model_skewed_info(&mut object_1361, var_1360)?;
        object_1361.finish();
    }
    if input.stored_as_sub_directories {
        object
            .key("StoredAsSubDirectories")
            .boolean(input.stored_as_sub_directories);
    }
    if let Some(var_1362) = &input.schema_reference {
        let mut object_1363 = object.key("SchemaReference").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_reference(
            &mut object_1363,
            var_1362,
        )?;
        object_1363.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_physical_connection_requirements(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PhysicalConnectionRequirements,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1364) = &input.subnet_id {
        object.key("SubnetId").string(var_1364.as_str());
    }
    if let Some(var_1365) = &input.security_group_id_list {
        let mut array_1366 = object.key("SecurityGroupIdList").start_array();
        for item_1367 in var_1365 {
            {
                array_1366.value().string(item_1367.as_str());
            }
        }
        array_1366.finish();
    }
    if let Some(var_1368) = &input.availability_zone {
        object.key("AvailabilityZone").string(var_1368.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_target(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3Target,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1369) = &input.path {
        object.key("Path").string(var_1369.as_str());
    }
    if let Some(var_1370) = &input.exclusions {
        let mut array_1371 = object.key("Exclusions").start_array();
        for item_1372 in var_1370 {
            {
                array_1371.value().string(item_1372.as_str());
            }
        }
        array_1371.finish();
    }
    if let Some(var_1373) = &input.connection_name {
        object.key("ConnectionName").string(var_1373.as_str());
    }
    if let Some(var_1374) = &input.sample_size {
        object.key("SampleSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1374).into()),
        );
    }
    if let Some(var_1375) = &input.event_queue_arn {
        object.key("EventQueueArn").string(var_1375.as_str());
    }
    if let Some(var_1376) = &input.dlq_event_queue_arn {
        object.key("DlqEventQueueArn").string(var_1376.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_jdbc_target(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JdbcTarget,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1377) = &input.connection_name {
        object.key("ConnectionName").string(var_1377.as_str());
    }
    if let Some(var_1378) = &input.path {
        object.key("Path").string(var_1378.as_str());
    }
    if let Some(var_1379) = &input.exclusions {
        let mut array_1380 = object.key("Exclusions").start_array();
        for item_1381 in var_1379 {
            {
                array_1380.value().string(item_1381.as_str());
            }
        }
        array_1380.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_mongo_db_target(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MongoDbTarget,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1382) = &input.connection_name {
        object.key("ConnectionName").string(var_1382.as_str());
    }
    if let Some(var_1383) = &input.path {
        object.key("Path").string(var_1383.as_str());
    }
    if let Some(var_1384) = &input.scan_all {
        object.key("ScanAll").boolean(*var_1384);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_dynamo_db_target(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DynamoDbTarget,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1385) = &input.path {
        object.key("Path").string(var_1385.as_str());
    }
    if let Some(var_1386) = &input.scan_all {
        object.key("scanAll").boolean(*var_1386);
    }
    if let Some(var_1387) = &input.scan_rate {
        object.key("scanRate").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1387).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_catalog_target(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CatalogTarget,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1388) = &input.database_name {
        object.key("DatabaseName").string(var_1388.as_str());
    }
    if let Some(var_1389) = &input.tables {
        let mut array_1390 = object.key("Tables").start_array();
        for item_1391 in var_1389 {
            {
                array_1390.value().string(item_1391.as_str());
            }
        }
        array_1390.finish();
    }
    if let Some(var_1392) = &input.connection_name {
        object.key("ConnectionName").string(var_1392.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_delta_target(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DeltaTarget,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1393) = &input.delta_tables {
        let mut array_1394 = object.key("DeltaTables").start_array();
        for item_1395 in var_1393 {
            {
                array_1394.value().string(item_1395.as_str());
            }
        }
        array_1394.finish();
    }
    if let Some(var_1396) = &input.connection_name {
        object.key("ConnectionName").string(var_1396.as_str());
    }
    if let Some(var_1397) = &input.write_manifest {
        object.key("WriteManifest").boolean(*var_1397);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_principal_permissions(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PrincipalPermissions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1398) = &input.principal {
        let mut object_1399 = object.key("Principal").start_object();
        crate::json_ser::serialize_structure_crate_model_data_lake_principal(
            &mut object_1399,
            var_1398,
        )?;
        object_1399.finish();
    }
    if let Some(var_1400) = &input.permissions {
        let mut array_1401 = object.key("Permissions").start_array();
        for item_1402 in var_1400 {
            {
                array_1401.value().string(item_1402.as_str());
            }
        }
        array_1401.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_database_identifier(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DatabaseIdentifier,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1403) = &input.catalog_id {
        object.key("CatalogId").string(var_1403.as_str());
    }
    if let Some(var_1404) = &input.database_name {
        object.key("DatabaseName").string(var_1404.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_athena_connector_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AthenaConnectorSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1405) = &input.name {
        object.key("Name").string(var_1405.as_str());
    }
    if let Some(var_1406) = &input.connection_name {
        object.key("ConnectionName").string(var_1406.as_str());
    }
    if let Some(var_1407) = &input.connector_name {
        object.key("ConnectorName").string(var_1407.as_str());
    }
    if let Some(var_1408) = &input.connection_type {
        object.key("ConnectionType").string(var_1408.as_str());
    }
    if let Some(var_1409) = &input.connection_table {
        object.key("ConnectionTable").string(var_1409.as_str());
    }
    if let Some(var_1410) = &input.schema_name {
        object.key("SchemaName").string(var_1410.as_str());
    }
    if let Some(var_1411) = &input.output_schemas {
        let mut array_1412 = object.key("OutputSchemas").start_array();
        for item_1413 in var_1411 {
            {
                let mut object_1414 = array_1412.value().start_object();
                crate::json_ser::serialize_structure_crate_model_glue_schema(
                    &mut object_1414,
                    item_1413,
                )?;
                object_1414.finish();
            }
        }
        array_1412.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_jdbc_connector_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JdbcConnectorSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1415) = &input.name {
        object.key("Name").string(var_1415.as_str());
    }
    if let Some(var_1416) = &input.connection_name {
        object.key("ConnectionName").string(var_1416.as_str());
    }
    if let Some(var_1417) = &input.connector_name {
        object.key("ConnectorName").string(var_1417.as_str());
    }
    if let Some(var_1418) = &input.connection_type {
        object.key("ConnectionType").string(var_1418.as_str());
    }
    if let Some(var_1419) = &input.additional_options {
        let mut object_1420 = object.key("AdditionalOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_jdbc_connector_options(
            &mut object_1420,
            var_1419,
        )?;
        object_1420.finish();
    }
    if let Some(var_1421) = &input.connection_table {
        object.key("ConnectionTable").string(var_1421.as_str());
    }
    if let Some(var_1422) = &input.query {
        object.key("Query").string(var_1422.as_str());
    }
    if let Some(var_1423) = &input.output_schemas {
        let mut array_1424 = object.key("OutputSchemas").start_array();
        for item_1425 in var_1423 {
            {
                let mut object_1426 = array_1424.value().start_object();
                crate::json_ser::serialize_structure_crate_model_glue_schema(
                    &mut object_1426,
                    item_1425,
                )?;
                object_1426.finish();
            }
        }
        array_1424.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_spark_connector_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SparkConnectorSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1427) = &input.name {
        object.key("Name").string(var_1427.as_str());
    }
    if let Some(var_1428) = &input.connection_name {
        object.key("ConnectionName").string(var_1428.as_str());
    }
    if let Some(var_1429) = &input.connector_name {
        object.key("ConnectorName").string(var_1429.as_str());
    }
    if let Some(var_1430) = &input.connection_type {
        object.key("ConnectionType").string(var_1430.as_str());
    }
    if let Some(var_1431) = &input.additional_options {
        let mut object_1432 = object.key("AdditionalOptions").start_object();
        for (key_1433, value_1434) in var_1431 {
            {
                object_1432.key(key_1433).string(value_1434.as_str());
            }
        }
        object_1432.finish();
    }
    if let Some(var_1435) = &input.output_schemas {
        let mut array_1436 = object.key("OutputSchemas").start_array();
        for item_1437 in var_1435 {
            {
                let mut object_1438 = array_1436.value().start_object();
                crate::json_ser::serialize_structure_crate_model_glue_schema(
                    &mut object_1438,
                    item_1437,
                )?;
                object_1438.finish();
            }
        }
        array_1436.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_catalog_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CatalogSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1439) = &input.name {
        object.key("Name").string(var_1439.as_str());
    }
    if let Some(var_1440) = &input.database {
        object.key("Database").string(var_1440.as_str());
    }
    if let Some(var_1441) = &input.table {
        object.key("Table").string(var_1441.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_redshift_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RedshiftSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1442) = &input.name {
        object.key("Name").string(var_1442.as_str());
    }
    if let Some(var_1443) = &input.database {
        object.key("Database").string(var_1443.as_str());
    }
    if let Some(var_1444) = &input.table {
        object.key("Table").string(var_1444.as_str());
    }
    if let Some(var_1445) = &input.redshift_tmp_dir {
        object.key("RedshiftTmpDir").string(var_1445.as_str());
    }
    if let Some(var_1446) = &input.tmp_dir_iam_role {
        object.key("TmpDirIAMRole").string(var_1446.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_catalog_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3CatalogSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1447) = &input.name {
        object.key("Name").string(var_1447.as_str());
    }
    if let Some(var_1448) = &input.database {
        object.key("Database").string(var_1448.as_str());
    }
    if let Some(var_1449) = &input.table {
        object.key("Table").string(var_1449.as_str());
    }
    if let Some(var_1450) = &input.partition_predicate {
        object.key("PartitionPredicate").string(var_1450.as_str());
    }
    if let Some(var_1451) = &input.additional_options {
        let mut object_1452 = object.key("AdditionalOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_source_additional_options(
            &mut object_1452,
            var_1451,
        )?;
        object_1452.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_csv_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3CsvSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1453) = &input.name {
        object.key("Name").string(var_1453.as_str());
    }
    if let Some(var_1454) = &input.paths {
        let mut array_1455 = object.key("Paths").start_array();
        for item_1456 in var_1454 {
            {
                array_1455.value().string(item_1456.as_str());
            }
        }
        array_1455.finish();
    }
    if let Some(var_1457) = &input.compression_type {
        object.key("CompressionType").string(var_1457.as_str());
    }
    if let Some(var_1458) = &input.exclusions {
        let mut array_1459 = object.key("Exclusions").start_array();
        for item_1460 in var_1458 {
            {
                array_1459.value().string(item_1460.as_str());
            }
        }
        array_1459.finish();
    }
    if let Some(var_1461) = &input.group_size {
        object.key("GroupSize").string(var_1461.as_str());
    }
    if let Some(var_1462) = &input.group_files {
        object.key("GroupFiles").string(var_1462.as_str());
    }
    if let Some(var_1463) = &input.recurse {
        object.key("Recurse").boolean(*var_1463);
    }
    if let Some(var_1464) = &input.max_band {
        object.key("MaxBand").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1464).into()),
        );
    }
    if let Some(var_1465) = &input.max_files_in_band {
        object.key("MaxFilesInBand").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1465).into()),
        );
    }
    if let Some(var_1466) = &input.additional_options {
        let mut object_1467 = object.key("AdditionalOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_direct_source_additional_options(
            &mut object_1467,
            var_1466,
        )?;
        object_1467.finish();
    }
    if let Some(var_1468) = &input.separator {
        object.key("Separator").string(var_1468.as_str());
    }
    if let Some(var_1469) = &input.escaper {
        object.key("Escaper").string(var_1469.as_str());
    }
    if let Some(var_1470) = &input.quote_char {
        object.key("QuoteChar").string(var_1470.as_str());
    }
    if let Some(var_1471) = &input.multiline {
        object.key("Multiline").boolean(*var_1471);
    }
    if let Some(var_1472) = &input.with_header {
        object.key("WithHeader").boolean(*var_1472);
    }
    if let Some(var_1473) = &input.write_header {
        object.key("WriteHeader").boolean(*var_1473);
    }
    if let Some(var_1474) = &input.skip_first {
        object.key("SkipFirst").boolean(*var_1474);
    }
    if input.optimize_performance {
        object
            .key("OptimizePerformance")
            .boolean(input.optimize_performance);
    }
    if let Some(var_1475) = &input.output_schemas {
        let mut array_1476 = object.key("OutputSchemas").start_array();
        for item_1477 in var_1475 {
            {
                let mut object_1478 = array_1476.value().start_object();
                crate::json_ser::serialize_structure_crate_model_glue_schema(
                    &mut object_1478,
                    item_1477,
                )?;
                object_1478.finish();
            }
        }
        array_1476.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_json_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3JsonSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1479) = &input.name {
        object.key("Name").string(var_1479.as_str());
    }
    if let Some(var_1480) = &input.paths {
        let mut array_1481 = object.key("Paths").start_array();
        for item_1482 in var_1480 {
            {
                array_1481.value().string(item_1482.as_str());
            }
        }
        array_1481.finish();
    }
    if let Some(var_1483) = &input.compression_type {
        object.key("CompressionType").string(var_1483.as_str());
    }
    if let Some(var_1484) = &input.exclusions {
        let mut array_1485 = object.key("Exclusions").start_array();
        for item_1486 in var_1484 {
            {
                array_1485.value().string(item_1486.as_str());
            }
        }
        array_1485.finish();
    }
    if let Some(var_1487) = &input.group_size {
        object.key("GroupSize").string(var_1487.as_str());
    }
    if let Some(var_1488) = &input.group_files {
        object.key("GroupFiles").string(var_1488.as_str());
    }
    if let Some(var_1489) = &input.recurse {
        object.key("Recurse").boolean(*var_1489);
    }
    if let Some(var_1490) = &input.max_band {
        object.key("MaxBand").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1490).into()),
        );
    }
    if let Some(var_1491) = &input.max_files_in_band {
        object.key("MaxFilesInBand").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1491).into()),
        );
    }
    if let Some(var_1492) = &input.additional_options {
        let mut object_1493 = object.key("AdditionalOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_direct_source_additional_options(
            &mut object_1493,
            var_1492,
        )?;
        object_1493.finish();
    }
    if let Some(var_1494) = &input.json_path {
        object.key("JsonPath").string(var_1494.as_str());
    }
    if let Some(var_1495) = &input.multiline {
        object.key("Multiline").boolean(*var_1495);
    }
    if let Some(var_1496) = &input.output_schemas {
        let mut array_1497 = object.key("OutputSchemas").start_array();
        for item_1498 in var_1496 {
            {
                let mut object_1499 = array_1497.value().start_object();
                crate::json_ser::serialize_structure_crate_model_glue_schema(
                    &mut object_1499,
                    item_1498,
                )?;
                object_1499.finish();
            }
        }
        array_1497.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_parquet_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3ParquetSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1500) = &input.name {
        object.key("Name").string(var_1500.as_str());
    }
    if let Some(var_1501) = &input.paths {
        let mut array_1502 = object.key("Paths").start_array();
        for item_1503 in var_1501 {
            {
                array_1502.value().string(item_1503.as_str());
            }
        }
        array_1502.finish();
    }
    if let Some(var_1504) = &input.compression_type {
        object.key("CompressionType").string(var_1504.as_str());
    }
    if let Some(var_1505) = &input.exclusions {
        let mut array_1506 = object.key("Exclusions").start_array();
        for item_1507 in var_1505 {
            {
                array_1506.value().string(item_1507.as_str());
            }
        }
        array_1506.finish();
    }
    if let Some(var_1508) = &input.group_size {
        object.key("GroupSize").string(var_1508.as_str());
    }
    if let Some(var_1509) = &input.group_files {
        object.key("GroupFiles").string(var_1509.as_str());
    }
    if let Some(var_1510) = &input.recurse {
        object.key("Recurse").boolean(*var_1510);
    }
    if let Some(var_1511) = &input.max_band {
        object.key("MaxBand").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1511).into()),
        );
    }
    if let Some(var_1512) = &input.max_files_in_band {
        object.key("MaxFilesInBand").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1512).into()),
        );
    }
    if let Some(var_1513) = &input.additional_options {
        let mut object_1514 = object.key("AdditionalOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_direct_source_additional_options(
            &mut object_1514,
            var_1513,
        )?;
        object_1514.finish();
    }
    if let Some(var_1515) = &input.output_schemas {
        let mut array_1516 = object.key("OutputSchemas").start_array();
        for item_1517 in var_1515 {
            {
                let mut object_1518 = array_1516.value().start_object();
                crate::json_ser::serialize_structure_crate_model_glue_schema(
                    &mut object_1518,
                    item_1517,
                )?;
                object_1518.finish();
            }
        }
        array_1516.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_relational_catalog_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RelationalCatalogSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1519) = &input.name {
        object.key("Name").string(var_1519.as_str());
    }
    if let Some(var_1520) = &input.database {
        object.key("Database").string(var_1520.as_str());
    }
    if let Some(var_1521) = &input.table {
        object.key("Table").string(var_1521.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_dynamo_db_catalog_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DynamoDbCatalogSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1522) = &input.name {
        object.key("Name").string(var_1522.as_str());
    }
    if let Some(var_1523) = &input.database {
        object.key("Database").string(var_1523.as_str());
    }
    if let Some(var_1524) = &input.table {
        object.key("Table").string(var_1524.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_jdbc_connector_target(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JdbcConnectorTarget,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1525) = &input.name {
        object.key("Name").string(var_1525.as_str());
    }
    if let Some(var_1526) = &input.inputs {
        let mut array_1527 = object.key("Inputs").start_array();
        for item_1528 in var_1526 {
            {
                array_1527.value().string(item_1528.as_str());
            }
        }
        array_1527.finish();
    }
    if let Some(var_1529) = &input.connection_name {
        object.key("ConnectionName").string(var_1529.as_str());
    }
    if let Some(var_1530) = &input.connection_table {
        object.key("ConnectionTable").string(var_1530.as_str());
    }
    if let Some(var_1531) = &input.connector_name {
        object.key("ConnectorName").string(var_1531.as_str());
    }
    if let Some(var_1532) = &input.connection_type {
        object.key("ConnectionType").string(var_1532.as_str());
    }
    if let Some(var_1533) = &input.additional_options {
        let mut object_1534 = object.key("AdditionalOptions").start_object();
        for (key_1535, value_1536) in var_1533 {
            {
                object_1534.key(key_1535).string(value_1536.as_str());
            }
        }
        object_1534.finish();
    }
    if let Some(var_1537) = &input.output_schemas {
        let mut array_1538 = object.key("OutputSchemas").start_array();
        for item_1539 in var_1537 {
            {
                let mut object_1540 = array_1538.value().start_object();
                crate::json_ser::serialize_structure_crate_model_glue_schema(
                    &mut object_1540,
                    item_1539,
                )?;
                object_1540.finish();
            }
        }
        array_1538.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_spark_connector_target(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SparkConnectorTarget,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1541) = &input.name {
        object.key("Name").string(var_1541.as_str());
    }
    if let Some(var_1542) = &input.inputs {
        let mut array_1543 = object.key("Inputs").start_array();
        for item_1544 in var_1542 {
            {
                array_1543.value().string(item_1544.as_str());
            }
        }
        array_1543.finish();
    }
    if let Some(var_1545) = &input.connection_name {
        object.key("ConnectionName").string(var_1545.as_str());
    }
    if let Some(var_1546) = &input.connector_name {
        object.key("ConnectorName").string(var_1546.as_str());
    }
    if let Some(var_1547) = &input.connection_type {
        object.key("ConnectionType").string(var_1547.as_str());
    }
    if let Some(var_1548) = &input.additional_options {
        let mut object_1549 = object.key("AdditionalOptions").start_object();
        for (key_1550, value_1551) in var_1548 {
            {
                object_1549.key(key_1550).string(value_1551.as_str());
            }
        }
        object_1549.finish();
    }
    if let Some(var_1552) = &input.output_schemas {
        let mut array_1553 = object.key("OutputSchemas").start_array();
        for item_1554 in var_1552 {
            {
                let mut object_1555 = array_1553.value().start_object();
                crate::json_ser::serialize_structure_crate_model_glue_schema(
                    &mut object_1555,
                    item_1554,
                )?;
                object_1555.finish();
            }
        }
        array_1553.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_basic_catalog_target(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BasicCatalogTarget,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1556) = &input.name {
        object.key("Name").string(var_1556.as_str());
    }
    if let Some(var_1557) = &input.inputs {
        let mut array_1558 = object.key("Inputs").start_array();
        for item_1559 in var_1557 {
            {
                array_1558.value().string(item_1559.as_str());
            }
        }
        array_1558.finish();
    }
    if let Some(var_1560) = &input.database {
        object.key("Database").string(var_1560.as_str());
    }
    if let Some(var_1561) = &input.table {
        object.key("Table").string(var_1561.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_redshift_target(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RedshiftTarget,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1562) = &input.name {
        object.key("Name").string(var_1562.as_str());
    }
    if let Some(var_1563) = &input.inputs {
        let mut array_1564 = object.key("Inputs").start_array();
        for item_1565 in var_1563 {
            {
                array_1564.value().string(item_1565.as_str());
            }
        }
        array_1564.finish();
    }
    if let Some(var_1566) = &input.database {
        object.key("Database").string(var_1566.as_str());
    }
    if let Some(var_1567) = &input.table {
        object.key("Table").string(var_1567.as_str());
    }
    if let Some(var_1568) = &input.redshift_tmp_dir {
        object.key("RedshiftTmpDir").string(var_1568.as_str());
    }
    if let Some(var_1569) = &input.tmp_dir_iam_role {
        object.key("TmpDirIAMRole").string(var_1569.as_str());
    }
    if let Some(var_1570) = &input.upsert_redshift_options {
        let mut object_1571 = object.key("UpsertRedshiftOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_upsert_redshift_target_options(
            &mut object_1571,
            var_1570,
        )?;
        object_1571.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_catalog_target(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3CatalogTarget,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1572) = &input.name {
        object.key("Name").string(var_1572.as_str());
    }
    if let Some(var_1573) = &input.inputs {
        let mut array_1574 = object.key("Inputs").start_array();
        for item_1575 in var_1573 {
            {
                array_1574.value().string(item_1575.as_str());
            }
        }
        array_1574.finish();
    }
    if let Some(var_1576) = &input.partition_keys {
        let mut array_1577 = object.key("PartitionKeys").start_array();
        for item_1578 in var_1576 {
            {
                let mut array_1579 = array_1577.value().start_array();
                for item_1580 in item_1578 {
                    {
                        array_1579.value().string(item_1580.as_str());
                    }
                }
                array_1579.finish();
            }
        }
        array_1577.finish();
    }
    if let Some(var_1581) = &input.table {
        object.key("Table").string(var_1581.as_str());
    }
    if let Some(var_1582) = &input.database {
        object.key("Database").string(var_1582.as_str());
    }
    if let Some(var_1583) = &input.schema_change_policy {
        let mut object_1584 = object.key("SchemaChangePolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_catalog_schema_change_policy(
            &mut object_1584,
            var_1583,
        )?;
        object_1584.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_glue_parquet_target(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3GlueParquetTarget,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1585) = &input.name {
        object.key("Name").string(var_1585.as_str());
    }
    if let Some(var_1586) = &input.inputs {
        let mut array_1587 = object.key("Inputs").start_array();
        for item_1588 in var_1586 {
            {
                array_1587.value().string(item_1588.as_str());
            }
        }
        array_1587.finish();
    }
    if let Some(var_1589) = &input.partition_keys {
        let mut array_1590 = object.key("PartitionKeys").start_array();
        for item_1591 in var_1589 {
            {
                let mut array_1592 = array_1590.value().start_array();
                for item_1593 in item_1591 {
                    {
                        array_1592.value().string(item_1593.as_str());
                    }
                }
                array_1592.finish();
            }
        }
        array_1590.finish();
    }
    if let Some(var_1594) = &input.path {
        object.key("Path").string(var_1594.as_str());
    }
    if let Some(var_1595) = &input.compression {
        object.key("Compression").string(var_1595.as_str());
    }
    if let Some(var_1596) = &input.schema_change_policy {
        let mut object_1597 = object.key("SchemaChangePolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_direct_schema_change_policy(
            &mut object_1597,
            var_1596,
        )?;
        object_1597.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_direct_target(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3DirectTarget,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1598) = &input.name {
        object.key("Name").string(var_1598.as_str());
    }
    if let Some(var_1599) = &input.inputs {
        let mut array_1600 = object.key("Inputs").start_array();
        for item_1601 in var_1599 {
            {
                array_1600.value().string(item_1601.as_str());
            }
        }
        array_1600.finish();
    }
    if let Some(var_1602) = &input.partition_keys {
        let mut array_1603 = object.key("PartitionKeys").start_array();
        for item_1604 in var_1602 {
            {
                let mut array_1605 = array_1603.value().start_array();
                for item_1606 in item_1604 {
                    {
                        array_1605.value().string(item_1606.as_str());
                    }
                }
                array_1605.finish();
            }
        }
        array_1603.finish();
    }
    if let Some(var_1607) = &input.path {
        object.key("Path").string(var_1607.as_str());
    }
    if let Some(var_1608) = &input.compression {
        object.key("Compression").string(var_1608.as_str());
    }
    if let Some(var_1609) = &input.format {
        object.key("Format").string(var_1609.as_str());
    }
    if let Some(var_1610) = &input.schema_change_policy {
        let mut object_1611 = object.key("SchemaChangePolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_direct_schema_change_policy(
            &mut object_1611,
            var_1610,
        )?;
        object_1611.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_apply_mapping(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ApplyMapping,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1612) = &input.name {
        object.key("Name").string(var_1612.as_str());
    }
    if let Some(var_1613) = &input.inputs {
        let mut array_1614 = object.key("Inputs").start_array();
        for item_1615 in var_1613 {
            {
                array_1614.value().string(item_1615.as_str());
            }
        }
        array_1614.finish();
    }
    if let Some(var_1616) = &input.mapping {
        let mut array_1617 = object.key("Mapping").start_array();
        for item_1618 in var_1616 {
            {
                let mut object_1619 = array_1617.value().start_object();
                crate::json_ser::serialize_structure_crate_model_mapping(
                    &mut object_1619,
                    item_1618,
                )?;
                object_1619.finish();
            }
        }
        array_1617.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_select_fields(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SelectFields,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1620) = &input.name {
        object.key("Name").string(var_1620.as_str());
    }
    if let Some(var_1621) = &input.inputs {
        let mut array_1622 = object.key("Inputs").start_array();
        for item_1623 in var_1621 {
            {
                array_1622.value().string(item_1623.as_str());
            }
        }
        array_1622.finish();
    }
    if let Some(var_1624) = &input.paths {
        let mut array_1625 = object.key("Paths").start_array();
        for item_1626 in var_1624 {
            {
                let mut array_1627 = array_1625.value().start_array();
                for item_1628 in item_1626 {
                    {
                        array_1627.value().string(item_1628.as_str());
                    }
                }
                array_1627.finish();
            }
        }
        array_1625.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_drop_fields(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DropFields,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1629) = &input.name {
        object.key("Name").string(var_1629.as_str());
    }
    if let Some(var_1630) = &input.inputs {
        let mut array_1631 = object.key("Inputs").start_array();
        for item_1632 in var_1630 {
            {
                array_1631.value().string(item_1632.as_str());
            }
        }
        array_1631.finish();
    }
    if let Some(var_1633) = &input.paths {
        let mut array_1634 = object.key("Paths").start_array();
        for item_1635 in var_1633 {
            {
                let mut array_1636 = array_1634.value().start_array();
                for item_1637 in item_1635 {
                    {
                        array_1636.value().string(item_1637.as_str());
                    }
                }
                array_1636.finish();
            }
        }
        array_1634.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rename_field(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RenameField,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1638) = &input.name {
        object.key("Name").string(var_1638.as_str());
    }
    if let Some(var_1639) = &input.inputs {
        let mut array_1640 = object.key("Inputs").start_array();
        for item_1641 in var_1639 {
            {
                array_1640.value().string(item_1641.as_str());
            }
        }
        array_1640.finish();
    }
    if let Some(var_1642) = &input.source_path {
        let mut array_1643 = object.key("SourcePath").start_array();
        for item_1644 in var_1642 {
            {
                array_1643.value().string(item_1644.as_str());
            }
        }
        array_1643.finish();
    }
    if let Some(var_1645) = &input.target_path {
        let mut array_1646 = object.key("TargetPath").start_array();
        for item_1647 in var_1645 {
            {
                array_1646.value().string(item_1647.as_str());
            }
        }
        array_1646.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_spigot(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Spigot,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1648) = &input.name {
        object.key("Name").string(var_1648.as_str());
    }
    if let Some(var_1649) = &input.inputs {
        let mut array_1650 = object.key("Inputs").start_array();
        for item_1651 in var_1649 {
            {
                array_1650.value().string(item_1651.as_str());
            }
        }
        array_1650.finish();
    }
    if let Some(var_1652) = &input.path {
        object.key("Path").string(var_1652.as_str());
    }
    if let Some(var_1653) = &input.topk {
        object.key("Topk").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1653).into()),
        );
    }
    if let Some(var_1654) = &input.prob {
        object.key("Prob").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1654).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_join(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Join,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1655) = &input.name {
        object.key("Name").string(var_1655.as_str());
    }
    if let Some(var_1656) = &input.inputs {
        let mut array_1657 = object.key("Inputs").start_array();
        for item_1658 in var_1656 {
            {
                array_1657.value().string(item_1658.as_str());
            }
        }
        array_1657.finish();
    }
    if let Some(var_1659) = &input.join_type {
        object.key("JoinType").string(var_1659.as_str());
    }
    if let Some(var_1660) = &input.columns {
        let mut array_1661 = object.key("Columns").start_array();
        for item_1662 in var_1660 {
            {
                let mut object_1663 = array_1661.value().start_object();
                crate::json_ser::serialize_structure_crate_model_join_column(
                    &mut object_1663,
                    item_1662,
                )?;
                object_1663.finish();
            }
        }
        array_1661.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_split_fields(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SplitFields,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1664) = &input.name {
        object.key("Name").string(var_1664.as_str());
    }
    if let Some(var_1665) = &input.inputs {
        let mut array_1666 = object.key("Inputs").start_array();
        for item_1667 in var_1665 {
            {
                array_1666.value().string(item_1667.as_str());
            }
        }
        array_1666.finish();
    }
    if let Some(var_1668) = &input.paths {
        let mut array_1669 = object.key("Paths").start_array();
        for item_1670 in var_1668 {
            {
                let mut array_1671 = array_1669.value().start_array();
                for item_1672 in item_1670 {
                    {
                        array_1671.value().string(item_1672.as_str());
                    }
                }
                array_1671.finish();
            }
        }
        array_1669.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_select_from_collection(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SelectFromCollection,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1673) = &input.name {
        object.key("Name").string(var_1673.as_str());
    }
    if let Some(var_1674) = &input.inputs {
        let mut array_1675 = object.key("Inputs").start_array();
        for item_1676 in var_1674 {
            {
                array_1675.value().string(item_1676.as_str());
            }
        }
        array_1675.finish();
    }
    {
        object.key("Index").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.index).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_fill_missing_values(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FillMissingValues,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1677) = &input.name {
        object.key("Name").string(var_1677.as_str());
    }
    if let Some(var_1678) = &input.inputs {
        let mut array_1679 = object.key("Inputs").start_array();
        for item_1680 in var_1678 {
            {
                array_1679.value().string(item_1680.as_str());
            }
        }
        array_1679.finish();
    }
    if let Some(var_1681) = &input.imputed_path {
        object.key("ImputedPath").string(var_1681.as_str());
    }
    if let Some(var_1682) = &input.filled_path {
        object.key("FilledPath").string(var_1682.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Filter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1683) = &input.name {
        object.key("Name").string(var_1683.as_str());
    }
    if let Some(var_1684) = &input.inputs {
        let mut array_1685 = object.key("Inputs").start_array();
        for item_1686 in var_1684 {
            {
                array_1685.value().string(item_1686.as_str());
            }
        }
        array_1685.finish();
    }
    if let Some(var_1687) = &input.logical_operator {
        object.key("LogicalOperator").string(var_1687.as_str());
    }
    if let Some(var_1688) = &input.filters {
        let mut array_1689 = object.key("Filters").start_array();
        for item_1690 in var_1688 {
            {
                let mut object_1691 = array_1689.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter_expression(
                    &mut object_1691,
                    item_1690,
                )?;
                object_1691.finish();
            }
        }
        array_1689.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_custom_code(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CustomCode,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1692) = &input.name {
        object.key("Name").string(var_1692.as_str());
    }
    if let Some(var_1693) = &input.inputs {
        let mut array_1694 = object.key("Inputs").start_array();
        for item_1695 in var_1693 {
            {
                array_1694.value().string(item_1695.as_str());
            }
        }
        array_1694.finish();
    }
    if let Some(var_1696) = &input.code {
        object.key("Code").string(var_1696.as_str());
    }
    if let Some(var_1697) = &input.class_name {
        object.key("ClassName").string(var_1697.as_str());
    }
    if let Some(var_1698) = &input.output_schemas {
        let mut array_1699 = object.key("OutputSchemas").start_array();
        for item_1700 in var_1698 {
            {
                let mut object_1701 = array_1699.value().start_object();
                crate::json_ser::serialize_structure_crate_model_glue_schema(
                    &mut object_1701,
                    item_1700,
                )?;
                object_1701.finish();
            }
        }
        array_1699.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_spark_sql(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SparkSql,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1702) = &input.name {
        object.key("Name").string(var_1702.as_str());
    }
    if let Some(var_1703) = &input.inputs {
        let mut array_1704 = object.key("Inputs").start_array();
        for item_1705 in var_1703 {
            {
                array_1704.value().string(item_1705.as_str());
            }
        }
        array_1704.finish();
    }
    if let Some(var_1706) = &input.sql_query {
        object.key("SqlQuery").string(var_1706.as_str());
    }
    if let Some(var_1707) = &input.sql_aliases {
        let mut array_1708 = object.key("SqlAliases").start_array();
        for item_1709 in var_1707 {
            {
                let mut object_1710 = array_1708.value().start_object();
                crate::json_ser::serialize_structure_crate_model_sql_alias(
                    &mut object_1710,
                    item_1709,
                )?;
                object_1710.finish();
            }
        }
        array_1708.finish();
    }
    if let Some(var_1711) = &input.output_schemas {
        let mut array_1712 = object.key("OutputSchemas").start_array();
        for item_1713 in var_1711 {
            {
                let mut object_1714 = array_1712.value().start_object();
                crate::json_ser::serialize_structure_crate_model_glue_schema(
                    &mut object_1714,
                    item_1713,
                )?;
                object_1714.finish();
            }
        }
        array_1712.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_direct_kinesis_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DirectKinesisSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1715) = &input.name {
        object.key("Name").string(var_1715.as_str());
    }
    if let Some(var_1716) = &input.window_size {
        object.key("WindowSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1716).into()),
        );
    }
    if let Some(var_1717) = &input.detect_schema {
        object.key("DetectSchema").boolean(*var_1717);
    }
    if let Some(var_1718) = &input.streaming_options {
        let mut object_1719 = object.key("StreamingOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_kinesis_streaming_source_options(
            &mut object_1719,
            var_1718,
        )?;
        object_1719.finish();
    }
    if let Some(var_1720) = &input.data_preview_options {
        let mut object_1721 = object.key("DataPreviewOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_streaming_data_preview_options(
            &mut object_1721,
            var_1720,
        )?;
        object_1721.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_direct_kafka_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DirectKafkaSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1722) = &input.name {
        object.key("Name").string(var_1722.as_str());
    }
    if let Some(var_1723) = &input.streaming_options {
        let mut object_1724 = object.key("StreamingOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_kafka_streaming_source_options(
            &mut object_1724,
            var_1723,
        )?;
        object_1724.finish();
    }
    if let Some(var_1725) = &input.window_size {
        object.key("WindowSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1725).into()),
        );
    }
    if let Some(var_1726) = &input.detect_schema {
        object.key("DetectSchema").boolean(*var_1726);
    }
    if let Some(var_1727) = &input.data_preview_options {
        let mut object_1728 = object.key("DataPreviewOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_streaming_data_preview_options(
            &mut object_1728,
            var_1727,
        )?;
        object_1728.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_catalog_kinesis_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CatalogKinesisSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1729) = &input.name {
        object.key("Name").string(var_1729.as_str());
    }
    if let Some(var_1730) = &input.window_size {
        object.key("WindowSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1730).into()),
        );
    }
    if let Some(var_1731) = &input.detect_schema {
        object.key("DetectSchema").boolean(*var_1731);
    }
    if let Some(var_1732) = &input.table {
        object.key("Table").string(var_1732.as_str());
    }
    if let Some(var_1733) = &input.database {
        object.key("Database").string(var_1733.as_str());
    }
    if let Some(var_1734) = &input.streaming_options {
        let mut object_1735 = object.key("StreamingOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_kinesis_streaming_source_options(
            &mut object_1735,
            var_1734,
        )?;
        object_1735.finish();
    }
    if let Some(var_1736) = &input.data_preview_options {
        let mut object_1737 = object.key("DataPreviewOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_streaming_data_preview_options(
            &mut object_1737,
            var_1736,
        )?;
        object_1737.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_catalog_kafka_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CatalogKafkaSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1738) = &input.name {
        object.key("Name").string(var_1738.as_str());
    }
    if let Some(var_1739) = &input.window_size {
        object.key("WindowSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1739).into()),
        );
    }
    if let Some(var_1740) = &input.detect_schema {
        object.key("DetectSchema").boolean(*var_1740);
    }
    if let Some(var_1741) = &input.table {
        object.key("Table").string(var_1741.as_str());
    }
    if let Some(var_1742) = &input.database {
        object.key("Database").string(var_1742.as_str());
    }
    if let Some(var_1743) = &input.streaming_options {
        let mut object_1744 = object.key("StreamingOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_kafka_streaming_source_options(
            &mut object_1744,
            var_1743,
        )?;
        object_1744.finish();
    }
    if let Some(var_1745) = &input.data_preview_options {
        let mut object_1746 = object.key("DataPreviewOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_streaming_data_preview_options(
            &mut object_1746,
            var_1745,
        )?;
        object_1746.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_drop_null_fields(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DropNullFields,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1747) = &input.name {
        object.key("Name").string(var_1747.as_str());
    }
    if let Some(var_1748) = &input.inputs {
        let mut array_1749 = object.key("Inputs").start_array();
        for item_1750 in var_1748 {
            {
                array_1749.value().string(item_1750.as_str());
            }
        }
        array_1749.finish();
    }
    if let Some(var_1751) = &input.null_check_box_list {
        let mut object_1752 = object.key("NullCheckBoxList").start_object();
        crate::json_ser::serialize_structure_crate_model_null_check_box_list(
            &mut object_1752,
            var_1751,
        )?;
        object_1752.finish();
    }
    if let Some(var_1753) = &input.null_text_list {
        let mut array_1754 = object.key("NullTextList").start_array();
        for item_1755 in var_1753 {
            {
                let mut object_1756 = array_1754.value().start_object();
                crate::json_ser::serialize_structure_crate_model_null_value_field(
                    &mut object_1756,
                    item_1755,
                )?;
                object_1756.finish();
            }
        }
        array_1754.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_merge(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Merge,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1757) = &input.name {
        object.key("Name").string(var_1757.as_str());
    }
    if let Some(var_1758) = &input.inputs {
        let mut array_1759 = object.key("Inputs").start_array();
        for item_1760 in var_1758 {
            {
                array_1759.value().string(item_1760.as_str());
            }
        }
        array_1759.finish();
    }
    if let Some(var_1761) = &input.source {
        object.key("Source").string(var_1761.as_str());
    }
    if let Some(var_1762) = &input.primary_keys {
        let mut array_1763 = object.key("PrimaryKeys").start_array();
        for item_1764 in var_1762 {
            {
                let mut array_1765 = array_1763.value().start_array();
                for item_1766 in item_1764 {
                    {
                        array_1765.value().string(item_1766.as_str());
                    }
                }
                array_1765.finish();
            }
        }
        array_1763.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_union(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Union,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1767) = &input.name {
        object.key("Name").string(var_1767.as_str());
    }
    if let Some(var_1768) = &input.inputs {
        let mut array_1769 = object.key("Inputs").start_array();
        for item_1770 in var_1768 {
            {
                array_1769.value().string(item_1770.as_str());
            }
        }
        array_1769.finish();
    }
    if let Some(var_1771) = &input.union_type {
        object.key("UnionType").string(var_1771.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_pii_detection(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PiiDetection,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1772) = &input.name {
        object.key("Name").string(var_1772.as_str());
    }
    if let Some(var_1773) = &input.inputs {
        let mut array_1774 = object.key("Inputs").start_array();
        for item_1775 in var_1773 {
            {
                array_1774.value().string(item_1775.as_str());
            }
        }
        array_1774.finish();
    }
    if let Some(var_1776) = &input.pii_type {
        object.key("PiiType").string(var_1776.as_str());
    }
    if let Some(var_1777) = &input.entity_types_to_detect {
        let mut array_1778 = object.key("EntityTypesToDetect").start_array();
        for item_1779 in var_1777 {
            {
                array_1778.value().string(item_1779.as_str());
            }
        }
        array_1778.finish();
    }
    if let Some(var_1780) = &input.output_column_name {
        object.key("OutputColumnName").string(var_1780.as_str());
    }
    if let Some(var_1781) = &input.sample_fraction {
        object.key("SampleFraction").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1781).into()),
        );
    }
    if let Some(var_1782) = &input.threshold_fraction {
        object.key("ThresholdFraction").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1782).into()),
        );
    }
    if let Some(var_1783) = &input.mask_value {
        object.key("MaskValue").string(var_1783.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aggregate(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Aggregate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1784) = &input.name {
        object.key("Name").string(var_1784.as_str());
    }
    if let Some(var_1785) = &input.inputs {
        let mut array_1786 = object.key("Inputs").start_array();
        for item_1787 in var_1785 {
            {
                array_1786.value().string(item_1787.as_str());
            }
        }
        array_1786.finish();
    }
    if let Some(var_1788) = &input.groups {
        let mut array_1789 = object.key("Groups").start_array();
        for item_1790 in var_1788 {
            {
                let mut array_1791 = array_1789.value().start_array();
                for item_1792 in item_1790 {
                    {
                        array_1791.value().string(item_1792.as_str());
                    }
                }
                array_1791.finish();
            }
        }
        array_1789.finish();
    }
    if let Some(var_1793) = &input.aggs {
        let mut array_1794 = object.key("Aggs").start_array();
        for item_1795 in var_1793 {
            {
                let mut object_1796 = array_1794.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aggregate_operation(
                    &mut object_1796,
                    item_1795,
                )?;
                object_1796.finish();
            }
        }
        array_1794.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_drop_duplicates(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DropDuplicates,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1797) = &input.name {
        object.key("Name").string(var_1797.as_str());
    }
    if let Some(var_1798) = &input.inputs {
        let mut array_1799 = object.key("Inputs").start_array();
        for item_1800 in var_1798 {
            {
                array_1799.value().string(item_1800.as_str());
            }
        }
        array_1799.finish();
    }
    if let Some(var_1801) = &input.columns {
        let mut array_1802 = object.key("Columns").start_array();
        for item_1803 in var_1801 {
            {
                let mut array_1804 = array_1802.value().start_array();
                for item_1805 in item_1803 {
                    {
                        array_1804.value().string(item_1805.as_str());
                    }
                }
                array_1804.finish();
            }
        }
        array_1802.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_governed_catalog_target(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GovernedCatalogTarget,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1806) = &input.name {
        object.key("Name").string(var_1806.as_str());
    }
    if let Some(var_1807) = &input.inputs {
        let mut array_1808 = object.key("Inputs").start_array();
        for item_1809 in var_1807 {
            {
                array_1808.value().string(item_1809.as_str());
            }
        }
        array_1808.finish();
    }
    if let Some(var_1810) = &input.partition_keys {
        let mut array_1811 = object.key("PartitionKeys").start_array();
        for item_1812 in var_1810 {
            {
                let mut array_1813 = array_1811.value().start_array();
                for item_1814 in item_1812 {
                    {
                        array_1813.value().string(item_1814.as_str());
                    }
                }
                array_1813.finish();
            }
        }
        array_1811.finish();
    }
    if let Some(var_1815) = &input.table {
        object.key("Table").string(var_1815.as_str());
    }
    if let Some(var_1816) = &input.database {
        object.key("Database").string(var_1816.as_str());
    }
    if let Some(var_1817) = &input.schema_change_policy {
        let mut object_1818 = object.key("SchemaChangePolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_catalog_schema_change_policy(
            &mut object_1818,
            var_1817,
        )?;
        object_1818.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_governed_catalog_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GovernedCatalogSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1819) = &input.name {
        object.key("Name").string(var_1819.as_str());
    }
    if let Some(var_1820) = &input.database {
        object.key("Database").string(var_1820.as_str());
    }
    if let Some(var_1821) = &input.table {
        object.key("Table").string(var_1821.as_str());
    }
    if let Some(var_1822) = &input.partition_predicate {
        object.key("PartitionPredicate").string(var_1822.as_str());
    }
    if let Some(var_1823) = &input.additional_options {
        let mut object_1824 = object.key("AdditionalOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_source_additional_options(
            &mut object_1824,
            var_1823,
        )?;
        object_1824.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_microsoft_sql_server_catalog_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MicrosoftSqlServerCatalogSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1825) = &input.name {
        object.key("Name").string(var_1825.as_str());
    }
    if let Some(var_1826) = &input.database {
        object.key("Database").string(var_1826.as_str());
    }
    if let Some(var_1827) = &input.table {
        object.key("Table").string(var_1827.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_my_sql_catalog_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MySqlCatalogSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1828) = &input.name {
        object.key("Name").string(var_1828.as_str());
    }
    if let Some(var_1829) = &input.database {
        object.key("Database").string(var_1829.as_str());
    }
    if let Some(var_1830) = &input.table {
        object.key("Table").string(var_1830.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_oracle_sql_catalog_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OracleSqlCatalogSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1831) = &input.name {
        object.key("Name").string(var_1831.as_str());
    }
    if let Some(var_1832) = &input.database {
        object.key("Database").string(var_1832.as_str());
    }
    if let Some(var_1833) = &input.table {
        object.key("Table").string(var_1833.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_postgre_sql_catalog_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PostgreSqlCatalogSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1834) = &input.name {
        object.key("Name").string(var_1834.as_str());
    }
    if let Some(var_1835) = &input.database {
        object.key("Database").string(var_1835.as_str());
    }
    if let Some(var_1836) = &input.table {
        object.key("Table").string(var_1836.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_microsoft_sql_server_catalog_target(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MicrosoftSqlServerCatalogTarget,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1837) = &input.name {
        object.key("Name").string(var_1837.as_str());
    }
    if let Some(var_1838) = &input.inputs {
        let mut array_1839 = object.key("Inputs").start_array();
        for item_1840 in var_1838 {
            {
                array_1839.value().string(item_1840.as_str());
            }
        }
        array_1839.finish();
    }
    if let Some(var_1841) = &input.database {
        object.key("Database").string(var_1841.as_str());
    }
    if let Some(var_1842) = &input.table {
        object.key("Table").string(var_1842.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_my_sql_catalog_target(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MySqlCatalogTarget,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1843) = &input.name {
        object.key("Name").string(var_1843.as_str());
    }
    if let Some(var_1844) = &input.inputs {
        let mut array_1845 = object.key("Inputs").start_array();
        for item_1846 in var_1844 {
            {
                array_1845.value().string(item_1846.as_str());
            }
        }
        array_1845.finish();
    }
    if let Some(var_1847) = &input.database {
        object.key("Database").string(var_1847.as_str());
    }
    if let Some(var_1848) = &input.table {
        object.key("Table").string(var_1848.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_oracle_sql_catalog_target(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OracleSqlCatalogTarget,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1849) = &input.name {
        object.key("Name").string(var_1849.as_str());
    }
    if let Some(var_1850) = &input.inputs {
        let mut array_1851 = object.key("Inputs").start_array();
        for item_1852 in var_1850 {
            {
                array_1851.value().string(item_1852.as_str());
            }
        }
        array_1851.finish();
    }
    if let Some(var_1853) = &input.database {
        object.key("Database").string(var_1853.as_str());
    }
    if let Some(var_1854) = &input.table {
        object.key("Table").string(var_1854.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_postgre_sql_catalog_target(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PostgreSqlCatalogTarget,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1855) = &input.name {
        object.key("Name").string(var_1855.as_str());
    }
    if let Some(var_1856) = &input.inputs {
        let mut array_1857 = object.key("Inputs").start_array();
        for item_1858 in var_1856 {
            {
                array_1857.value().string(item_1858.as_str());
            }
        }
        array_1857.finish();
    }
    if let Some(var_1859) = &input.database {
        object.key("Database").string(var_1859.as_str());
    }
    if let Some(var_1860) = &input.table {
        object.key("Table").string(var_1860.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_find_matches_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FindMatchesParameters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1861) = &input.primary_key_column_name {
        object.key("PrimaryKeyColumnName").string(var_1861.as_str());
    }
    if let Some(var_1862) = &input.precision_recall_tradeoff {
        object.key("PrecisionRecallTradeoff").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1862).into()),
        );
    }
    if let Some(var_1863) = &input.accuracy_cost_tradeoff {
        object.key("AccuracyCostTradeoff").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1863).into()),
        );
    }
    if let Some(var_1864) = &input.enforce_provided_labels {
        object.key("EnforceProvidedLabels").boolean(*var_1864);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ml_user_data_encryption(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MlUserDataEncryption,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1865) = &input.ml_user_data_encryption_mode {
        object
            .key("MlUserDataEncryptionMode")
            .string(var_1865.as_str());
    }
    if let Some(var_1866) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1866.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_code_gen_node_arg(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CodeGenNodeArg,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1867) = &input.name {
        object.key("Name").string(var_1867.as_str());
    }
    if let Some(var_1868) = &input.value {
        object.key("Value").string(var_1868.as_str());
    }
    if input.param {
        object.key("Param").boolean(input.param);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_encryption(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3Encryption,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1869) = &input.s3_encryption_mode {
        object.key("S3EncryptionMode").string(var_1869.as_str());
    }
    if let Some(var_1870) = &input.kms_key_arn {
        object.key("KmsKeyArn").string(var_1870.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_cloud_watch_encryption(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CloudWatchEncryption,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1871) = &input.cloud_watch_encryption_mode {
        object
            .key("CloudWatchEncryptionMode")
            .string(var_1871.as_str());
    }
    if let Some(var_1872) = &input.kms_key_arn {
        object.key("KmsKeyArn").string(var_1872.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_job_bookmarks_encryption(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JobBookmarksEncryption,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1873) = &input.job_bookmarks_encryption_mode {
        object
            .key("JobBookmarksEncryptionMode")
            .string(var_1873.as_str());
    }
    if let Some(var_1874) = &input.kms_key_arn {
        object.key("KmsKeyArn").string(var_1874.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_column(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Column,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1875) = &input.name {
        object.key("Name").string(var_1875.as_str());
    }
    if let Some(var_1876) = &input.r#type {
        object.key("Type").string(var_1876.as_str());
    }
    if let Some(var_1877) = &input.comment {
        object.key("Comment").string(var_1877.as_str());
    }
    if let Some(var_1878) = &input.parameters {
        let mut object_1879 = object.key("Parameters").start_object();
        for (key_1880, value_1881) in var_1878 {
            {
                object_1879.key(key_1880).string(value_1881.as_str());
            }
        }
        object_1879.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_table_identifier(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TableIdentifier,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1882) = &input.catalog_id {
        object.key("CatalogId").string(var_1882.as_str());
    }
    if let Some(var_1883) = &input.database_name {
        object.key("DatabaseName").string(var_1883.as_str());
    }
    if let Some(var_1884) = &input.name {
        object.key("Name").string(var_1884.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_condition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Condition,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1885) = &input.logical_operator {
        object.key("LogicalOperator").string(var_1885.as_str());
    }
    if let Some(var_1886) = &input.job_name {
        object.key("JobName").string(var_1886.as_str());
    }
    if let Some(var_1887) = &input.state {
        object.key("State").string(var_1887.as_str());
    }
    if let Some(var_1888) = &input.crawler_name {
        object.key("CrawlerName").string(var_1888.as_str());
    }
    if let Some(var_1889) = &input.crawl_state {
        object.key("CrawlState").string(var_1889.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_resource_uri(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ResourceUri,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1890) = &input.resource_type {
        object.key("ResourceType").string(var_1890.as_str());
    }
    if let Some(var_1891) = &input.uri {
        object.key("Uri").string(var_1891.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_schema_column(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SchemaColumn,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1892) = &input.name {
        object.key("Name").string(var_1892.as_str());
    }
    if let Some(var_1893) = &input.data_type {
        object.key("DataType").string(var_1893.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_encryption_at_rest(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EncryptionAtRest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1894) = &input.catalog_encryption_mode {
        object
            .key("CatalogEncryptionMode")
            .string(var_1894.as_str());
    }
    if let Some(var_1895) = &input.sse_aws_kms_key_id {
        object.key("SseAwsKmsKeyId").string(var_1895.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_connection_password_encryption(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConnectionPasswordEncryption,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object
            .key("ReturnConnectionPasswordEncrypted")
            .boolean(input.return_connection_password_encrypted);
    }
    if let Some(var_1896) = &input.aws_kms_key_id {
        object.key("AwsKmsKeyId").string(var_1896.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_column_statistics_data(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ColumnStatisticsData,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1897) = &input.r#type {
        object.key("Type").string(var_1897.as_str());
    }
    if let Some(var_1898) = &input.boolean_column_statistics_data {
        let mut object_1899 = object.key("BooleanColumnStatisticsData").start_object();
        crate::json_ser::serialize_structure_crate_model_boolean_column_statistics_data(
            &mut object_1899,
            var_1898,
        )?;
        object_1899.finish();
    }
    if let Some(var_1900) = &input.date_column_statistics_data {
        let mut object_1901 = object.key("DateColumnStatisticsData").start_object();
        crate::json_ser::serialize_structure_crate_model_date_column_statistics_data(
            &mut object_1901,
            var_1900,
        )?;
        object_1901.finish();
    }
    if let Some(var_1902) = &input.decimal_column_statistics_data {
        let mut object_1903 = object.key("DecimalColumnStatisticsData").start_object();
        crate::json_ser::serialize_structure_crate_model_decimal_column_statistics_data(
            &mut object_1903,
            var_1902,
        )?;
        object_1903.finish();
    }
    if let Some(var_1904) = &input.double_column_statistics_data {
        let mut object_1905 = object.key("DoubleColumnStatisticsData").start_object();
        crate::json_ser::serialize_structure_crate_model_double_column_statistics_data(
            &mut object_1905,
            var_1904,
        )?;
        object_1905.finish();
    }
    if let Some(var_1906) = &input.long_column_statistics_data {
        let mut object_1907 = object.key("LongColumnStatisticsData").start_object();
        crate::json_ser::serialize_structure_crate_model_long_column_statistics_data(
            &mut object_1907,
            var_1906,
        )?;
        object_1907.finish();
    }
    if let Some(var_1908) = &input.string_column_statistics_data {
        let mut object_1909 = object.key("StringColumnStatisticsData").start_object();
        crate::json_ser::serialize_structure_crate_model_string_column_statistics_data(
            &mut object_1909,
            var_1908,
        )?;
        object_1909.finish();
    }
    if let Some(var_1910) = &input.binary_column_statistics_data {
        let mut object_1911 = object.key("BinaryColumnStatisticsData").start_object();
        crate::json_ser::serialize_structure_crate_model_binary_column_statistics_data(
            &mut object_1911,
            var_1910,
        )?;
        object_1911.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ser_de_info(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SerDeInfo,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1912) = &input.name {
        object.key("Name").string(var_1912.as_str());
    }
    if let Some(var_1913) = &input.serialization_library {
        object.key("SerializationLibrary").string(var_1913.as_str());
    }
    if let Some(var_1914) = &input.parameters {
        let mut object_1915 = object.key("Parameters").start_object();
        for (key_1916, value_1917) in var_1914 {
            {
                object_1915.key(key_1916).string(value_1917.as_str());
            }
        }
        object_1915.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_order(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Order,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1918) = &input.column {
        object.key("Column").string(var_1918.as_str());
    }
    {
        object.key("SortOrder").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.sort_order).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_skewed_info(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SkewedInfo,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1919) = &input.skewed_column_names {
        let mut array_1920 = object.key("SkewedColumnNames").start_array();
        for item_1921 in var_1919 {
            {
                array_1920.value().string(item_1921.as_str());
            }
        }
        array_1920.finish();
    }
    if let Some(var_1922) = &input.skewed_column_values {
        let mut array_1923 = object.key("SkewedColumnValues").start_array();
        for item_1924 in var_1922 {
            {
                array_1923.value().string(item_1924.as_str());
            }
        }
        array_1923.finish();
    }
    if let Some(var_1925) = &input.skewed_column_value_location_maps {
        let mut object_1926 = object.key("SkewedColumnValueLocationMaps").start_object();
        for (key_1927, value_1928) in var_1925 {
            {
                object_1926.key(key_1927).string(value_1928.as_str());
            }
        }
        object_1926.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_schema_reference(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SchemaReference,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1929) = &input.schema_id {
        let mut object_1930 = object.key("SchemaId").start_object();
        crate::json_ser::serialize_structure_crate_model_schema_id(&mut object_1930, var_1929)?;
        object_1930.finish();
    }
    if let Some(var_1931) = &input.schema_version_id {
        object.key("SchemaVersionId").string(var_1931.as_str());
    }
    if let Some(var_1932) = &input.schema_version_number {
        object.key("SchemaVersionNumber").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1932).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_lake_principal(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataLakePrincipal,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1933) = &input.data_lake_principal_identifier {
        object
            .key("DataLakePrincipalIdentifier")
            .string(var_1933.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_glue_schema(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GlueSchema,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1934) = &input.columns {
        let mut array_1935 = object.key("Columns").start_array();
        for item_1936 in var_1934 {
            {
                let mut object_1937 = array_1935.value().start_object();
                crate::json_ser::serialize_structure_crate_model_glue_studio_schema_column(
                    &mut object_1937,
                    item_1936,
                )?;
                object_1937.finish();
            }
        }
        array_1935.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_jdbc_connector_options(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JdbcConnectorOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1938) = &input.filter_predicate {
        object.key("FilterPredicate").string(var_1938.as_str());
    }
    if let Some(var_1939) = &input.partition_column {
        object.key("PartitionColumn").string(var_1939.as_str());
    }
    if let Some(var_1940) = &input.lower_bound {
        object.key("LowerBound").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1940).into()),
        );
    }
    if let Some(var_1941) = &input.upper_bound {
        object.key("UpperBound").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1941).into()),
        );
    }
    if let Some(var_1942) = &input.num_partitions {
        object.key("NumPartitions").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1942).into()),
        );
    }
    if let Some(var_1943) = &input.job_bookmark_keys {
        let mut array_1944 = object.key("JobBookmarkKeys").start_array();
        for item_1945 in var_1943 {
            {
                array_1944.value().string(item_1945.as_str());
            }
        }
        array_1944.finish();
    }
    if let Some(var_1946) = &input.job_bookmark_keys_sort_order {
        object
            .key("JobBookmarkKeysSortOrder")
            .string(var_1946.as_str());
    }
    if let Some(var_1947) = &input.data_type_mapping {
        let mut object_1948 = object.key("DataTypeMapping").start_object();
        for (key_1949, value_1950) in var_1947 {
            {
                object_1948
                    .key(key_1949.as_str())
                    .string(value_1950.as_str());
            }
        }
        object_1948.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_source_additional_options(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3SourceAdditionalOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1951) = &input.bounded_size {
        object.key("BoundedSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1951).into()),
        );
    }
    if let Some(var_1952) = &input.bounded_files {
        object.key("BoundedFiles").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1952).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_direct_source_additional_options(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3DirectSourceAdditionalOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1953) = &input.bounded_size {
        object.key("BoundedSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1953).into()),
        );
    }
    if let Some(var_1954) = &input.bounded_files {
        object.key("BoundedFiles").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1954).into()),
        );
    }
    if let Some(var_1955) = &input.enable_sample_path {
        object.key("EnableSamplePath").boolean(*var_1955);
    }
    if let Some(var_1956) = &input.sample_path {
        object.key("SamplePath").string(var_1956.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_upsert_redshift_target_options(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UpsertRedshiftTargetOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1957) = &input.table_location {
        object.key("TableLocation").string(var_1957.as_str());
    }
    if let Some(var_1958) = &input.connection_name {
        object.key("ConnectionName").string(var_1958.as_str());
    }
    if let Some(var_1959) = &input.upsert_keys {
        let mut array_1960 = object.key("UpsertKeys").start_array();
        for item_1961 in var_1959 {
            {
                array_1960.value().string(item_1961.as_str());
            }
        }
        array_1960.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_catalog_schema_change_policy(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CatalogSchemaChangePolicy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1962) = &input.enable_update_catalog {
        object.key("EnableUpdateCatalog").boolean(*var_1962);
    }
    if let Some(var_1963) = &input.update_behavior {
        object.key("UpdateBehavior").string(var_1963.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_direct_schema_change_policy(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DirectSchemaChangePolicy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1964) = &input.enable_update_catalog {
        object.key("EnableUpdateCatalog").boolean(*var_1964);
    }
    if let Some(var_1965) = &input.update_behavior {
        object.key("UpdateBehavior").string(var_1965.as_str());
    }
    if let Some(var_1966) = &input.table {
        object.key("Table").string(var_1966.as_str());
    }
    if let Some(var_1967) = &input.database {
        object.key("Database").string(var_1967.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_mapping(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Mapping,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1968) = &input.to_key {
        object.key("ToKey").string(var_1968.as_str());
    }
    if let Some(var_1969) = &input.from_path {
        let mut array_1970 = object.key("FromPath").start_array();
        for item_1971 in var_1969 {
            {
                array_1970.value().string(item_1971.as_str());
            }
        }
        array_1970.finish();
    }
    if let Some(var_1972) = &input.from_type {
        object.key("FromType").string(var_1972.as_str());
    }
    if let Some(var_1973) = &input.to_type {
        object.key("ToType").string(var_1973.as_str());
    }
    if let Some(var_1974) = &input.dropped {
        object.key("Dropped").boolean(*var_1974);
    }
    if let Some(var_1975) = &input.children {
        let mut array_1976 = object.key("Children").start_array();
        for item_1977 in var_1975 {
            {
                let mut object_1978 = array_1976.value().start_object();
                crate::json_ser::serialize_structure_crate_model_mapping(
                    &mut object_1978,
                    item_1977,
                )?;
                object_1978.finish();
            }
        }
        array_1976.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_join_column(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JoinColumn,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1979) = &input.from {
        object.key("From").string(var_1979.as_str());
    }
    if let Some(var_1980) = &input.keys {
        let mut array_1981 = object.key("Keys").start_array();
        for item_1982 in var_1980 {
            {
                let mut array_1983 = array_1981.value().start_array();
                for item_1984 in item_1982 {
                    {
                        array_1983.value().string(item_1984.as_str());
                    }
                }
                array_1983.finish();
            }
        }
        array_1981.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_filter_expression(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FilterExpression,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1985) = &input.operation {
        object.key("Operation").string(var_1985.as_str());
    }
    if let Some(var_1986) = &input.negated {
        object.key("Negated").boolean(*var_1986);
    }
    if let Some(var_1987) = &input.values {
        let mut array_1988 = object.key("Values").start_array();
        for item_1989 in var_1987 {
            {
                let mut object_1990 = array_1988.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter_value(
                    &mut object_1990,
                    item_1989,
                )?;
                object_1990.finish();
            }
        }
        array_1988.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sql_alias(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SqlAlias,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1991) = &input.from {
        object.key("From").string(var_1991.as_str());
    }
    if let Some(var_1992) = &input.alias {
        object.key("Alias").string(var_1992.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_kinesis_streaming_source_options(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KinesisStreamingSourceOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1993) = &input.endpoint_url {
        object.key("EndpointUrl").string(var_1993.as_str());
    }
    if let Some(var_1994) = &input.stream_name {
        object.key("StreamName").string(var_1994.as_str());
    }
    if let Some(var_1995) = &input.classification {
        object.key("Classification").string(var_1995.as_str());
    }
    if let Some(var_1996) = &input.delimiter {
        object.key("Delimiter").string(var_1996.as_str());
    }
    if let Some(var_1997) = &input.starting_position {
        object.key("StartingPosition").string(var_1997.as_str());
    }
    if let Some(var_1998) = &input.max_fetch_time_in_ms {
        object.key("MaxFetchTimeInMs").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1998).into()),
        );
    }
    if let Some(var_1999) = &input.max_fetch_records_per_shard {
        object.key("MaxFetchRecordsPerShard").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1999).into()),
        );
    }
    if let Some(var_2000) = &input.max_record_per_read {
        object.key("MaxRecordPerRead").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2000).into()),
        );
    }
    if let Some(var_2001) = &input.add_idle_time_between_reads {
        object.key("AddIdleTimeBetweenReads").boolean(*var_2001);
    }
    if let Some(var_2002) = &input.idle_time_between_reads_in_ms {
        object.key("IdleTimeBetweenReadsInMs").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2002).into()),
        );
    }
    if let Some(var_2003) = &input.describe_shard_interval {
        object.key("DescribeShardInterval").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2003).into()),
        );
    }
    if let Some(var_2004) = &input.num_retries {
        object.key("NumRetries").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2004).into()),
        );
    }
    if let Some(var_2005) = &input.retry_interval_ms {
        object.key("RetryIntervalMs").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2005).into()),
        );
    }
    if let Some(var_2006) = &input.max_retry_interval_ms {
        object.key("MaxRetryIntervalMs").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2006).into()),
        );
    }
    if let Some(var_2007) = &input.avoid_empty_batches {
        object.key("AvoidEmptyBatches").boolean(*var_2007);
    }
    if let Some(var_2008) = &input.stream_arn {
        object.key("StreamArn").string(var_2008.as_str());
    }
    if let Some(var_2009) = &input.role_arn {
        object.key("RoleArn").string(var_2009.as_str());
    }
    if let Some(var_2010) = &input.role_session_name {
        object.key("RoleSessionName").string(var_2010.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_streaming_data_preview_options(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StreamingDataPreviewOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2011) = &input.polling_time {
        object.key("PollingTime").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2011).into()),
        );
    }
    if let Some(var_2012) = &input.record_polling_limit {
        object.key("RecordPollingLimit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2012).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_kafka_streaming_source_options(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KafkaStreamingSourceOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2013) = &input.bootstrap_servers {
        object.key("BootstrapServers").string(var_2013.as_str());
    }
    if let Some(var_2014) = &input.security_protocol {
        object.key("SecurityProtocol").string(var_2014.as_str());
    }
    if let Some(var_2015) = &input.connection_name {
        object.key("ConnectionName").string(var_2015.as_str());
    }
    if let Some(var_2016) = &input.topic_name {
        object.key("TopicName").string(var_2016.as_str());
    }
    if let Some(var_2017) = &input.assign {
        object.key("Assign").string(var_2017.as_str());
    }
    if let Some(var_2018) = &input.subscribe_pattern {
        object.key("SubscribePattern").string(var_2018.as_str());
    }
    if let Some(var_2019) = &input.classification {
        object.key("Classification").string(var_2019.as_str());
    }
    if let Some(var_2020) = &input.delimiter {
        object.key("Delimiter").string(var_2020.as_str());
    }
    if let Some(var_2021) = &input.starting_offsets {
        object.key("StartingOffsets").string(var_2021.as_str());
    }
    if let Some(var_2022) = &input.ending_offsets {
        object.key("EndingOffsets").string(var_2022.as_str());
    }
    if let Some(var_2023) = &input.poll_timeout_ms {
        object.key("PollTimeoutMs").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2023).into()),
        );
    }
    if let Some(var_2024) = &input.num_retries {
        object.key("NumRetries").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2024).into()),
        );
    }
    if let Some(var_2025) = &input.retry_interval_ms {
        object.key("RetryIntervalMs").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2025).into()),
        );
    }
    if let Some(var_2026) = &input.max_offsets_per_trigger {
        object.key("MaxOffsetsPerTrigger").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2026).into()),
        );
    }
    if let Some(var_2027) = &input.min_partitions {
        object.key("MinPartitions").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2027).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_null_check_box_list(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NullCheckBoxList,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2028) = &input.is_empty {
        object.key("IsEmpty").boolean(*var_2028);
    }
    if let Some(var_2029) = &input.is_null_string {
        object.key("IsNullString").boolean(*var_2029);
    }
    if let Some(var_2030) = &input.is_neg_one {
        object.key("IsNegOne").boolean(*var_2030);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_null_value_field(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NullValueField,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2031) = &input.value {
        object.key("Value").string(var_2031.as_str());
    }
    if let Some(var_2032) = &input.datatype {
        let mut object_2033 = object.key("Datatype").start_object();
        crate::json_ser::serialize_structure_crate_model_datatype(&mut object_2033, var_2032)?;
        object_2033.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aggregate_operation(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AggregateOperation,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2034) = &input.column {
        let mut array_2035 = object.key("Column").start_array();
        for item_2036 in var_2034 {
            {
                array_2035.value().string(item_2036.as_str());
            }
        }
        array_2035.finish();
    }
    if let Some(var_2037) = &input.agg_func {
        object.key("AggFunc").string(var_2037.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_boolean_column_statistics_data(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BooleanColumnStatisticsData,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("NumberOfTrues").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_trues).into()),
        );
    }
    {
        object.key("NumberOfFalses").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_falses).into()),
        );
    }
    {
        object.key("NumberOfNulls").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_nulls).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_date_column_statistics_data(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DateColumnStatisticsData,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2038) = &input.minimum_value {
        object
            .key("MinimumValue")
            .date_time(var_2038, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_2039) = &input.maximum_value {
        object
            .key("MaximumValue")
            .date_time(var_2039, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    {
        object.key("NumberOfNulls").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_nulls).into()),
        );
    }
    {
        object.key("NumberOfDistinctValues").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_distinct_values).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_decimal_column_statistics_data(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DecimalColumnStatisticsData,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2040) = &input.minimum_value {
        let mut object_2041 = object.key("MinimumValue").start_object();
        crate::json_ser::serialize_structure_crate_model_decimal_number(
            &mut object_2041,
            var_2040,
        )?;
        object_2041.finish();
    }
    if let Some(var_2042) = &input.maximum_value {
        let mut object_2043 = object.key("MaximumValue").start_object();
        crate::json_ser::serialize_structure_crate_model_decimal_number(
            &mut object_2043,
            var_2042,
        )?;
        object_2043.finish();
    }
    {
        object.key("NumberOfNulls").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_nulls).into()),
        );
    }
    {
        object.key("NumberOfDistinctValues").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_distinct_values).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_double_column_statistics_data(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DoubleColumnStatisticsData,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.minimum_value != 0.0 {
        object.key("MinimumValue").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((input.minimum_value).into()),
        );
    }
    if input.maximum_value != 0.0 {
        object.key("MaximumValue").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((input.maximum_value).into()),
        );
    }
    {
        object.key("NumberOfNulls").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_nulls).into()),
        );
    }
    {
        object.key("NumberOfDistinctValues").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_distinct_values).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_long_column_statistics_data(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LongColumnStatisticsData,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.minimum_value != 0 {
        object.key("MinimumValue").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.minimum_value).into()),
        );
    }
    if input.maximum_value != 0 {
        object.key("MaximumValue").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.maximum_value).into()),
        );
    }
    {
        object.key("NumberOfNulls").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_nulls).into()),
        );
    }
    {
        object.key("NumberOfDistinctValues").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_distinct_values).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_string_column_statistics_data(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StringColumnStatisticsData,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("MaximumLength").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.maximum_length).into()),
        );
    }
    {
        object.key("AverageLength").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((input.average_length).into()),
        );
    }
    {
        object.key("NumberOfNulls").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_nulls).into()),
        );
    }
    {
        object.key("NumberOfDistinctValues").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_distinct_values).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_binary_column_statistics_data(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BinaryColumnStatisticsData,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("MaximumLength").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.maximum_length).into()),
        );
    }
    {
        object.key("AverageLength").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((input.average_length).into()),
        );
    }
    {
        object.key("NumberOfNulls").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_nulls).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_glue_studio_schema_column(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GlueStudioSchemaColumn,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2044) = &input.name {
        object.key("Name").string(var_2044.as_str());
    }
    if let Some(var_2045) = &input.r#type {
        object.key("Type").string(var_2045.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_filter_value(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FilterValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2046) = &input.r#type {
        object.key("Type").string(var_2046.as_str());
    }
    if let Some(var_2047) = &input.value {
        let mut array_2048 = object.key("Value").start_array();
        for item_2049 in var_2047 {
            {
                array_2048.value().string(item_2049.as_str());
            }
        }
        array_2048.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_datatype(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Datatype,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2050) = &input.id {
        object.key("Id").string(var_2050.as_str());
    }
    if let Some(var_2051) = &input.label {
        object.key("Label").string(var_2051.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_decimal_number(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DecimalNumber,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2052) = &input.unscaled_value {
        object
            .key("UnscaledValue")
            .string_unchecked(&aws_smithy_types::base64::encode(var_2052));
    }
    {
        object.key("Scale").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.scale).into()),
        );
    }
    Ok(())
}
