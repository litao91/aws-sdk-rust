// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_create_access_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAccessInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.home_directory {
        object.key("HomeDirectory").string(var_1.as_str());
    }
    if let Some(var_2) = &input.home_directory_type {
        object.key("HomeDirectoryType").string(var_2.as_str());
    }
    if let Some(var_3) = &input.home_directory_mappings {
        let mut array_4 = object.key("HomeDirectoryMappings").start_array();
        for item_5 in var_3 {
            {
                let mut object_6 = array_4.value().start_object();
                crate::json_ser::serialize_structure_crate_model_home_directory_map_entry(
                    &mut object_6,
                    item_5,
                )?;
                object_6.finish();
            }
        }
        array_4.finish();
    }
    if let Some(var_7) = &input.policy {
        object.key("Policy").string(var_7.as_str());
    }
    if let Some(var_8) = &input.posix_profile {
        let mut object_9 = object.key("PosixProfile").start_object();
        crate::json_ser::serialize_structure_crate_model_posix_profile(&mut object_9, var_8)?;
        object_9.finish();
    }
    if let Some(var_10) = &input.role {
        object.key("Role").string(var_10.as_str());
    }
    if let Some(var_11) = &input.server_id {
        object.key("ServerId").string(var_11.as_str());
    }
    if let Some(var_12) = &input.external_id {
        object.key("ExternalId").string(var_12.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_agreement_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAgreementInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_13) = &input.description {
        object.key("Description").string(var_13.as_str());
    }
    if let Some(var_14) = &input.server_id {
        object.key("ServerId").string(var_14.as_str());
    }
    if let Some(var_15) = &input.local_profile_id {
        object.key("LocalProfileId").string(var_15.as_str());
    }
    if let Some(var_16) = &input.partner_profile_id {
        object.key("PartnerProfileId").string(var_16.as_str());
    }
    if let Some(var_17) = &input.base_directory {
        object.key("BaseDirectory").string(var_17.as_str());
    }
    if let Some(var_18) = &input.access_role {
        object.key("AccessRole").string(var_18.as_str());
    }
    if let Some(var_19) = &input.status {
        object.key("Status").string(var_19.as_str());
    }
    if let Some(var_20) = &input.tags {
        let mut array_21 = object.key("Tags").start_array();
        for item_22 in var_20 {
            {
                let mut object_23 = array_21.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_23, item_22)?;
                object_23.finish();
            }
        }
        array_21.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_connector_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateConnectorInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_24) = &input.url {
        object.key("Url").string(var_24.as_str());
    }
    if let Some(var_25) = &input.as2_config {
        let mut object_26 = object.key("As2Config").start_object();
        crate::json_ser::serialize_structure_crate_model_as2_connector_config(
            &mut object_26,
            var_25,
        )?;
        object_26.finish();
    }
    if let Some(var_27) = &input.access_role {
        object.key("AccessRole").string(var_27.as_str());
    }
    if let Some(var_28) = &input.logging_role {
        object.key("LoggingRole").string(var_28.as_str());
    }
    if let Some(var_29) = &input.tags {
        let mut array_30 = object.key("Tags").start_array();
        for item_31 in var_29 {
            {
                let mut object_32 = array_30.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_32, item_31)?;
                object_32.finish();
            }
        }
        array_30.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_profile_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateProfileInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_33) = &input.as2_id {
        object.key("As2Id").string(var_33.as_str());
    }
    if let Some(var_34) = &input.profile_type {
        object.key("ProfileType").string(var_34.as_str());
    }
    if let Some(var_35) = &input.certificate_ids {
        let mut array_36 = object.key("CertificateIds").start_array();
        for item_37 in var_35 {
            {
                array_36.value().string(item_37.as_str());
            }
        }
        array_36.finish();
    }
    if let Some(var_38) = &input.tags {
        let mut array_39 = object.key("Tags").start_array();
        for item_40 in var_38 {
            {
                let mut object_41 = array_39.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_41, item_40)?;
                object_41.finish();
            }
        }
        array_39.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_server_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateServerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_42) = &input.certificate {
        object.key("Certificate").string(var_42.as_str());
    }
    if let Some(var_43) = &input.domain {
        object.key("Domain").string(var_43.as_str());
    }
    if let Some(var_44) = &input.endpoint_details {
        let mut object_45 = object.key("EndpointDetails").start_object();
        crate::json_ser::serialize_structure_crate_model_endpoint_details(&mut object_45, var_44)?;
        object_45.finish();
    }
    if let Some(var_46) = &input.endpoint_type {
        object.key("EndpointType").string(var_46.as_str());
    }
    if let Some(var_47) = &input.host_key {
        object.key("HostKey").string(var_47.as_str());
    }
    if let Some(var_48) = &input.identity_provider_details {
        let mut object_49 = object.key("IdentityProviderDetails").start_object();
        crate::json_ser::serialize_structure_crate_model_identity_provider_details(
            &mut object_49,
            var_48,
        )?;
        object_49.finish();
    }
    if let Some(var_50) = &input.identity_provider_type {
        object.key("IdentityProviderType").string(var_50.as_str());
    }
    if let Some(var_51) = &input.logging_role {
        object.key("LoggingRole").string(var_51.as_str());
    }
    if let Some(var_52) = &input.post_authentication_login_banner {
        object
            .key("PostAuthenticationLoginBanner")
            .string(var_52.as_str());
    }
    if let Some(var_53) = &input.pre_authentication_login_banner {
        object
            .key("PreAuthenticationLoginBanner")
            .string(var_53.as_str());
    }
    if let Some(var_54) = &input.protocols {
        let mut array_55 = object.key("Protocols").start_array();
        for item_56 in var_54 {
            {
                array_55.value().string(item_56.as_str());
            }
        }
        array_55.finish();
    }
    if let Some(var_57) = &input.protocol_details {
        let mut object_58 = object.key("ProtocolDetails").start_object();
        crate::json_ser::serialize_structure_crate_model_protocol_details(&mut object_58, var_57)?;
        object_58.finish();
    }
    if let Some(var_59) = &input.security_policy_name {
        object.key("SecurityPolicyName").string(var_59.as_str());
    }
    if let Some(var_60) = &input.tags {
        let mut array_61 = object.key("Tags").start_array();
        for item_62 in var_60 {
            {
                let mut object_63 = array_61.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_63, item_62)?;
                object_63.finish();
            }
        }
        array_61.finish();
    }
    if let Some(var_64) = &input.workflow_details {
        let mut object_65 = object.key("WorkflowDetails").start_object();
        crate::json_ser::serialize_structure_crate_model_workflow_details(&mut object_65, var_64)?;
        object_65.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_user_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateUserInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_66) = &input.home_directory {
        object.key("HomeDirectory").string(var_66.as_str());
    }
    if let Some(var_67) = &input.home_directory_type {
        object.key("HomeDirectoryType").string(var_67.as_str());
    }
    if let Some(var_68) = &input.home_directory_mappings {
        let mut array_69 = object.key("HomeDirectoryMappings").start_array();
        for item_70 in var_68 {
            {
                let mut object_71 = array_69.value().start_object();
                crate::json_ser::serialize_structure_crate_model_home_directory_map_entry(
                    &mut object_71,
                    item_70,
                )?;
                object_71.finish();
            }
        }
        array_69.finish();
    }
    if let Some(var_72) = &input.policy {
        object.key("Policy").string(var_72.as_str());
    }
    if let Some(var_73) = &input.posix_profile {
        let mut object_74 = object.key("PosixProfile").start_object();
        crate::json_ser::serialize_structure_crate_model_posix_profile(&mut object_74, var_73)?;
        object_74.finish();
    }
    if let Some(var_75) = &input.role {
        object.key("Role").string(var_75.as_str());
    }
    if let Some(var_76) = &input.server_id {
        object.key("ServerId").string(var_76.as_str());
    }
    if let Some(var_77) = &input.ssh_public_key_body {
        object.key("SshPublicKeyBody").string(var_77.as_str());
    }
    if let Some(var_78) = &input.tags {
        let mut array_79 = object.key("Tags").start_array();
        for item_80 in var_78 {
            {
                let mut object_81 = array_79.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_81, item_80)?;
                object_81.finish();
            }
        }
        array_79.finish();
    }
    if let Some(var_82) = &input.user_name {
        object.key("UserName").string(var_82.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_workflow_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateWorkflowInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_83) = &input.description {
        object.key("Description").string(var_83.as_str());
    }
    if let Some(var_84) = &input.steps {
        let mut array_85 = object.key("Steps").start_array();
        for item_86 in var_84 {
            {
                let mut object_87 = array_85.value().start_object();
                crate::json_ser::serialize_structure_crate_model_workflow_step(
                    &mut object_87,
                    item_86,
                )?;
                object_87.finish();
            }
        }
        array_85.finish();
    }
    if let Some(var_88) = &input.on_exception_steps {
        let mut array_89 = object.key("OnExceptionSteps").start_array();
        for item_90 in var_88 {
            {
                let mut object_91 = array_89.value().start_object();
                crate::json_ser::serialize_structure_crate_model_workflow_step(
                    &mut object_91,
                    item_90,
                )?;
                object_91.finish();
            }
        }
        array_89.finish();
    }
    if let Some(var_92) = &input.tags {
        let mut array_93 = object.key("Tags").start_array();
        for item_94 in var_92 {
            {
                let mut object_95 = array_93.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_95, item_94)?;
                object_95.finish();
            }
        }
        array_93.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_access_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteAccessInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_96) = &input.server_id {
        object.key("ServerId").string(var_96.as_str());
    }
    if let Some(var_97) = &input.external_id {
        object.key("ExternalId").string(var_97.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_agreement_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteAgreementInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_98) = &input.agreement_id {
        object.key("AgreementId").string(var_98.as_str());
    }
    if let Some(var_99) = &input.server_id {
        object.key("ServerId").string(var_99.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_certificate_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteCertificateInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_100) = &input.certificate_id {
        object.key("CertificateId").string(var_100.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_connector_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteConnectorInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_101) = &input.connector_id {
        object.key("ConnectorId").string(var_101.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_profile_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteProfileInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_102) = &input.profile_id {
        object.key("ProfileId").string(var_102.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_server_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteServerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_103) = &input.server_id {
        object.key("ServerId").string(var_103.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_ssh_public_key_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteSshPublicKeyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_104) = &input.server_id {
        object.key("ServerId").string(var_104.as_str());
    }
    if let Some(var_105) = &input.ssh_public_key_id {
        object.key("SshPublicKeyId").string(var_105.as_str());
    }
    if let Some(var_106) = &input.user_name {
        object.key("UserName").string(var_106.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_user_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteUserInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_107) = &input.server_id {
        object.key("ServerId").string(var_107.as_str());
    }
    if let Some(var_108) = &input.user_name {
        object.key("UserName").string(var_108.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_workflow_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteWorkflowInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_109) = &input.workflow_id {
        object.key("WorkflowId").string(var_109.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_access_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeAccessInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_110) = &input.server_id {
        object.key("ServerId").string(var_110.as_str());
    }
    if let Some(var_111) = &input.external_id {
        object.key("ExternalId").string(var_111.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_agreement_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeAgreementInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_112) = &input.agreement_id {
        object.key("AgreementId").string(var_112.as_str());
    }
    if let Some(var_113) = &input.server_id {
        object.key("ServerId").string(var_113.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_certificate_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeCertificateInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_114) = &input.certificate_id {
        object.key("CertificateId").string(var_114.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_connector_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeConnectorInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_115) = &input.connector_id {
        object.key("ConnectorId").string(var_115.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_execution_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeExecutionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_116) = &input.execution_id {
        object.key("ExecutionId").string(var_116.as_str());
    }
    if let Some(var_117) = &input.workflow_id {
        object.key("WorkflowId").string(var_117.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_profile_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeProfileInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_118) = &input.profile_id {
        object.key("ProfileId").string(var_118.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_security_policy_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeSecurityPolicyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_119) = &input.security_policy_name {
        object.key("SecurityPolicyName").string(var_119.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_server_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeServerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_120) = &input.server_id {
        object.key("ServerId").string(var_120.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_user_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeUserInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_121) = &input.server_id {
        object.key("ServerId").string(var_121.as_str());
    }
    if let Some(var_122) = &input.user_name {
        object.key("UserName").string(var_122.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_workflow_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeWorkflowInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_123) = &input.workflow_id {
        object.key("WorkflowId").string(var_123.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_import_certificate_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ImportCertificateInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_124) = &input.usage {
        object.key("Usage").string(var_124.as_str());
    }
    if let Some(var_125) = &input.certificate {
        object.key("Certificate").string(var_125.as_str());
    }
    if let Some(var_126) = &input.certificate_chain {
        object.key("CertificateChain").string(var_126.as_str());
    }
    if let Some(var_127) = &input.private_key {
        object.key("PrivateKey").string(var_127.as_str());
    }
    if let Some(var_128) = &input.active_date {
        object
            .key("ActiveDate")
            .date_time(var_128, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_129) = &input.inactive_date {
        object
            .key("InactiveDate")
            .date_time(var_129, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_130) = &input.description {
        object.key("Description").string(var_130.as_str());
    }
    if let Some(var_131) = &input.tags {
        let mut array_132 = object.key("Tags").start_array();
        for item_133 in var_131 {
            {
                let mut object_134 = array_132.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_134, item_133)?;
                object_134.finish();
            }
        }
        array_132.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_import_ssh_public_key_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ImportSshPublicKeyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_135) = &input.server_id {
        object.key("ServerId").string(var_135.as_str());
    }
    if let Some(var_136) = &input.ssh_public_key_body {
        object.key("SshPublicKeyBody").string(var_136.as_str());
    }
    if let Some(var_137) = &input.user_name {
        object.key("UserName").string(var_137.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_accesses_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAccessesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_138) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_138).into()),
        );
    }
    if let Some(var_139) = &input.next_token {
        object.key("NextToken").string(var_139.as_str());
    }
    if let Some(var_140) = &input.server_id {
        object.key("ServerId").string(var_140.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_agreements_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAgreementsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_141) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_141).into()),
        );
    }
    if let Some(var_142) = &input.next_token {
        object.key("NextToken").string(var_142.as_str());
    }
    if let Some(var_143) = &input.server_id {
        object.key("ServerId").string(var_143.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_certificates_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListCertificatesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_144) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_144).into()),
        );
    }
    if let Some(var_145) = &input.next_token {
        object.key("NextToken").string(var_145.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_connectors_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListConnectorsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_146) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_146).into()),
        );
    }
    if let Some(var_147) = &input.next_token {
        object.key("NextToken").string(var_147.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_executions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListExecutionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_148) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_148).into()),
        );
    }
    if let Some(var_149) = &input.next_token {
        object.key("NextToken").string(var_149.as_str());
    }
    if let Some(var_150) = &input.workflow_id {
        object.key("WorkflowId").string(var_150.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_profiles_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListProfilesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_151) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_151).into()),
        );
    }
    if let Some(var_152) = &input.next_token {
        object.key("NextToken").string(var_152.as_str());
    }
    if let Some(var_153) = &input.profile_type {
        object.key("ProfileType").string(var_153.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_security_policies_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListSecurityPoliciesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_154) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_154).into()),
        );
    }
    if let Some(var_155) = &input.next_token {
        object.key("NextToken").string(var_155.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_servers_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListServersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_156) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_156).into()),
        );
    }
    if let Some(var_157) = &input.next_token {
        object.key("NextToken").string(var_157.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_tags_for_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTagsForResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_158) = &input.arn {
        object.key("Arn").string(var_158.as_str());
    }
    if let Some(var_159) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_159).into()),
        );
    }
    if let Some(var_160) = &input.next_token {
        object.key("NextToken").string(var_160.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_users_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListUsersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_161) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_161).into()),
        );
    }
    if let Some(var_162) = &input.next_token {
        object.key("NextToken").string(var_162.as_str());
    }
    if let Some(var_163) = &input.server_id {
        object.key("ServerId").string(var_163.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_workflows_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListWorkflowsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_164) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_164).into()),
        );
    }
    if let Some(var_165) = &input.next_token {
        object.key("NextToken").string(var_165.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_send_workflow_step_state_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SendWorkflowStepStateInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_166) = &input.workflow_id {
        object.key("WorkflowId").string(var_166.as_str());
    }
    if let Some(var_167) = &input.execution_id {
        object.key("ExecutionId").string(var_167.as_str());
    }
    if let Some(var_168) = &input.token {
        object.key("Token").string(var_168.as_str());
    }
    if let Some(var_169) = &input.status {
        object.key("Status").string(var_169.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_file_transfer_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartFileTransferInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_170) = &input.connector_id {
        object.key("ConnectorId").string(var_170.as_str());
    }
    if let Some(var_171) = &input.send_file_paths {
        let mut array_172 = object.key("SendFilePaths").start_array();
        for item_173 in var_171 {
            {
                array_172.value().string(item_173.as_str());
            }
        }
        array_172.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_server_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartServerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_174) = &input.server_id {
        object.key("ServerId").string(var_174.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_server_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopServerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_175) = &input.server_id {
        object.key("ServerId").string(var_175.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_176) = &input.arn {
        object.key("Arn").string(var_176.as_str());
    }
    if let Some(var_177) = &input.tags {
        let mut array_178 = object.key("Tags").start_array();
        for item_179 in var_177 {
            {
                let mut object_180 = array_178.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_180, item_179)?;
                object_180.finish();
            }
        }
        array_178.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_test_identity_provider_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TestIdentityProviderInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_181) = &input.server_id {
        object.key("ServerId").string(var_181.as_str());
    }
    if let Some(var_182) = &input.server_protocol {
        object.key("ServerProtocol").string(var_182.as_str());
    }
    if let Some(var_183) = &input.source_ip {
        object.key("SourceIp").string(var_183.as_str());
    }
    if let Some(var_184) = &input.user_name {
        object.key("UserName").string(var_184.as_str());
    }
    if let Some(var_185) = &input.user_password {
        object.key("UserPassword").string(var_185.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_untag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UntagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_186) = &input.arn {
        object.key("Arn").string(var_186.as_str());
    }
    if let Some(var_187) = &input.tag_keys {
        let mut array_188 = object.key("TagKeys").start_array();
        for item_189 in var_187 {
            {
                array_188.value().string(item_189.as_str());
            }
        }
        array_188.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_access_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateAccessInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_190) = &input.home_directory {
        object.key("HomeDirectory").string(var_190.as_str());
    }
    if let Some(var_191) = &input.home_directory_type {
        object.key("HomeDirectoryType").string(var_191.as_str());
    }
    if let Some(var_192) = &input.home_directory_mappings {
        let mut array_193 = object.key("HomeDirectoryMappings").start_array();
        for item_194 in var_192 {
            {
                let mut object_195 = array_193.value().start_object();
                crate::json_ser::serialize_structure_crate_model_home_directory_map_entry(
                    &mut object_195,
                    item_194,
                )?;
                object_195.finish();
            }
        }
        array_193.finish();
    }
    if let Some(var_196) = &input.policy {
        object.key("Policy").string(var_196.as_str());
    }
    if let Some(var_197) = &input.posix_profile {
        let mut object_198 = object.key("PosixProfile").start_object();
        crate::json_ser::serialize_structure_crate_model_posix_profile(&mut object_198, var_197)?;
        object_198.finish();
    }
    if let Some(var_199) = &input.role {
        object.key("Role").string(var_199.as_str());
    }
    if let Some(var_200) = &input.server_id {
        object.key("ServerId").string(var_200.as_str());
    }
    if let Some(var_201) = &input.external_id {
        object.key("ExternalId").string(var_201.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_agreement_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateAgreementInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_202) = &input.agreement_id {
        object.key("AgreementId").string(var_202.as_str());
    }
    if let Some(var_203) = &input.server_id {
        object.key("ServerId").string(var_203.as_str());
    }
    if let Some(var_204) = &input.description {
        object.key("Description").string(var_204.as_str());
    }
    if let Some(var_205) = &input.status {
        object.key("Status").string(var_205.as_str());
    }
    if let Some(var_206) = &input.local_profile_id {
        object.key("LocalProfileId").string(var_206.as_str());
    }
    if let Some(var_207) = &input.partner_profile_id {
        object.key("PartnerProfileId").string(var_207.as_str());
    }
    if let Some(var_208) = &input.base_directory {
        object.key("BaseDirectory").string(var_208.as_str());
    }
    if let Some(var_209) = &input.access_role {
        object.key("AccessRole").string(var_209.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_certificate_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateCertificateInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_210) = &input.certificate_id {
        object.key("CertificateId").string(var_210.as_str());
    }
    if let Some(var_211) = &input.active_date {
        object
            .key("ActiveDate")
            .date_time(var_211, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_212) = &input.inactive_date {
        object
            .key("InactiveDate")
            .date_time(var_212, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_213) = &input.description {
        object.key("Description").string(var_213.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_connector_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateConnectorInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_214) = &input.connector_id {
        object.key("ConnectorId").string(var_214.as_str());
    }
    if let Some(var_215) = &input.url {
        object.key("Url").string(var_215.as_str());
    }
    if let Some(var_216) = &input.as2_config {
        let mut object_217 = object.key("As2Config").start_object();
        crate::json_ser::serialize_structure_crate_model_as2_connector_config(
            &mut object_217,
            var_216,
        )?;
        object_217.finish();
    }
    if let Some(var_218) = &input.access_role {
        object.key("AccessRole").string(var_218.as_str());
    }
    if let Some(var_219) = &input.logging_role {
        object.key("LoggingRole").string(var_219.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_profile_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateProfileInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_220) = &input.profile_id {
        object.key("ProfileId").string(var_220.as_str());
    }
    if let Some(var_221) = &input.certificate_ids {
        let mut array_222 = object.key("CertificateIds").start_array();
        for item_223 in var_221 {
            {
                array_222.value().string(item_223.as_str());
            }
        }
        array_222.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_server_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateServerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_224) = &input.certificate {
        object.key("Certificate").string(var_224.as_str());
    }
    if let Some(var_225) = &input.protocol_details {
        let mut object_226 = object.key("ProtocolDetails").start_object();
        crate::json_ser::serialize_structure_crate_model_protocol_details(
            &mut object_226,
            var_225,
        )?;
        object_226.finish();
    }
    if let Some(var_227) = &input.endpoint_details {
        let mut object_228 = object.key("EndpointDetails").start_object();
        crate::json_ser::serialize_structure_crate_model_endpoint_details(
            &mut object_228,
            var_227,
        )?;
        object_228.finish();
    }
    if let Some(var_229) = &input.endpoint_type {
        object.key("EndpointType").string(var_229.as_str());
    }
    if let Some(var_230) = &input.host_key {
        object.key("HostKey").string(var_230.as_str());
    }
    if let Some(var_231) = &input.identity_provider_details {
        let mut object_232 = object.key("IdentityProviderDetails").start_object();
        crate::json_ser::serialize_structure_crate_model_identity_provider_details(
            &mut object_232,
            var_231,
        )?;
        object_232.finish();
    }
    if let Some(var_233) = &input.logging_role {
        object.key("LoggingRole").string(var_233.as_str());
    }
    if let Some(var_234) = &input.post_authentication_login_banner {
        object
            .key("PostAuthenticationLoginBanner")
            .string(var_234.as_str());
    }
    if let Some(var_235) = &input.pre_authentication_login_banner {
        object
            .key("PreAuthenticationLoginBanner")
            .string(var_235.as_str());
    }
    if let Some(var_236) = &input.protocols {
        let mut array_237 = object.key("Protocols").start_array();
        for item_238 in var_236 {
            {
                array_237.value().string(item_238.as_str());
            }
        }
        array_237.finish();
    }
    if let Some(var_239) = &input.security_policy_name {
        object.key("SecurityPolicyName").string(var_239.as_str());
    }
    if let Some(var_240) = &input.server_id {
        object.key("ServerId").string(var_240.as_str());
    }
    if let Some(var_241) = &input.workflow_details {
        let mut object_242 = object.key("WorkflowDetails").start_object();
        crate::json_ser::serialize_structure_crate_model_workflow_details(
            &mut object_242,
            var_241,
        )?;
        object_242.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_user_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateUserInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_243) = &input.home_directory {
        object.key("HomeDirectory").string(var_243.as_str());
    }
    if let Some(var_244) = &input.home_directory_type {
        object.key("HomeDirectoryType").string(var_244.as_str());
    }
    if let Some(var_245) = &input.home_directory_mappings {
        let mut array_246 = object.key("HomeDirectoryMappings").start_array();
        for item_247 in var_245 {
            {
                let mut object_248 = array_246.value().start_object();
                crate::json_ser::serialize_structure_crate_model_home_directory_map_entry(
                    &mut object_248,
                    item_247,
                )?;
                object_248.finish();
            }
        }
        array_246.finish();
    }
    if let Some(var_249) = &input.policy {
        object.key("Policy").string(var_249.as_str());
    }
    if let Some(var_250) = &input.posix_profile {
        let mut object_251 = object.key("PosixProfile").start_object();
        crate::json_ser::serialize_structure_crate_model_posix_profile(&mut object_251, var_250)?;
        object_251.finish();
    }
    if let Some(var_252) = &input.role {
        object.key("Role").string(var_252.as_str());
    }
    if let Some(var_253) = &input.server_id {
        object.key("ServerId").string(var_253.as_str());
    }
    if let Some(var_254) = &input.user_name {
        object.key("UserName").string(var_254.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_home_directory_map_entry(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HomeDirectoryMapEntry,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_255) = &input.entry {
        object.key("Entry").string(var_255.as_str());
    }
    if let Some(var_256) = &input.target {
        object.key("Target").string(var_256.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_posix_profile(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PosixProfile,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_257) = &input.uid {
        object.key("Uid").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_257).into()),
        );
    }
    if let Some(var_258) = &input.gid {
        object.key("Gid").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_258).into()),
        );
    }
    if let Some(var_259) = &input.secondary_gids {
        let mut array_260 = object.key("SecondaryGids").start_array();
        for item_261 in var_259 {
            {
                array_260.value().number(
                    #[allow(clippy::useless_conversion)]
                    aws_smithy_types::Number::NegInt((*item_261).into()),
                );
            }
        }
        array_260.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tag(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tag,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_262) = &input.key {
        object.key("Key").string(var_262.as_str());
    }
    if let Some(var_263) = &input.value {
        object.key("Value").string(var_263.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_as2_connector_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::As2ConnectorConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_264) = &input.local_profile_id {
        object.key("LocalProfileId").string(var_264.as_str());
    }
    if let Some(var_265) = &input.partner_profile_id {
        object.key("PartnerProfileId").string(var_265.as_str());
    }
    if let Some(var_266) = &input.message_subject {
        object.key("MessageSubject").string(var_266.as_str());
    }
    if let Some(var_267) = &input.compression {
        object.key("Compression").string(var_267.as_str());
    }
    if let Some(var_268) = &input.encryption_algorithm {
        object.key("EncryptionAlgorithm").string(var_268.as_str());
    }
    if let Some(var_269) = &input.signing_algorithm {
        object.key("SigningAlgorithm").string(var_269.as_str());
    }
    if let Some(var_270) = &input.mdn_signing_algorithm {
        object.key("MdnSigningAlgorithm").string(var_270.as_str());
    }
    if let Some(var_271) = &input.mdn_response {
        object.key("MdnResponse").string(var_271.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_endpoint_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EndpointDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_272) = &input.address_allocation_ids {
        let mut array_273 = object.key("AddressAllocationIds").start_array();
        for item_274 in var_272 {
            {
                array_273.value().string(item_274.as_str());
            }
        }
        array_273.finish();
    }
    if let Some(var_275) = &input.subnet_ids {
        let mut array_276 = object.key("SubnetIds").start_array();
        for item_277 in var_275 {
            {
                array_276.value().string(item_277.as_str());
            }
        }
        array_276.finish();
    }
    if let Some(var_278) = &input.vpc_endpoint_id {
        object.key("VpcEndpointId").string(var_278.as_str());
    }
    if let Some(var_279) = &input.vpc_id {
        object.key("VpcId").string(var_279.as_str());
    }
    if let Some(var_280) = &input.security_group_ids {
        let mut array_281 = object.key("SecurityGroupIds").start_array();
        for item_282 in var_280 {
            {
                array_281.value().string(item_282.as_str());
            }
        }
        array_281.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_identity_provider_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IdentityProviderDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_283) = &input.url {
        object.key("Url").string(var_283.as_str());
    }
    if let Some(var_284) = &input.invocation_role {
        object.key("InvocationRole").string(var_284.as_str());
    }
    if let Some(var_285) = &input.directory_id {
        object.key("DirectoryId").string(var_285.as_str());
    }
    if let Some(var_286) = &input.function {
        object.key("Function").string(var_286.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_protocol_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProtocolDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_287) = &input.passive_ip {
        object.key("PassiveIp").string(var_287.as_str());
    }
    if let Some(var_288) = &input.tls_session_resumption_mode {
        object
            .key("TlsSessionResumptionMode")
            .string(var_288.as_str());
    }
    if let Some(var_289) = &input.set_stat_option {
        object.key("SetStatOption").string(var_289.as_str());
    }
    if let Some(var_290) = &input.as2_transports {
        let mut array_291 = object.key("As2Transports").start_array();
        for item_292 in var_290 {
            {
                array_291.value().string(item_292.as_str());
            }
        }
        array_291.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_workflow_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::WorkflowDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_293) = &input.on_upload {
        let mut array_294 = object.key("OnUpload").start_array();
        for item_295 in var_293 {
            {
                let mut object_296 = array_294.value().start_object();
                crate::json_ser::serialize_structure_crate_model_workflow_detail(
                    &mut object_296,
                    item_295,
                )?;
                object_296.finish();
            }
        }
        array_294.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_workflow_step(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::WorkflowStep,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_297) = &input.r#type {
        object.key("Type").string(var_297.as_str());
    }
    if let Some(var_298) = &input.copy_step_details {
        let mut object_299 = object.key("CopyStepDetails").start_object();
        crate::json_ser::serialize_structure_crate_model_copy_step_details(
            &mut object_299,
            var_298,
        )?;
        object_299.finish();
    }
    if let Some(var_300) = &input.custom_step_details {
        let mut object_301 = object.key("CustomStepDetails").start_object();
        crate::json_ser::serialize_structure_crate_model_custom_step_details(
            &mut object_301,
            var_300,
        )?;
        object_301.finish();
    }
    if let Some(var_302) = &input.delete_step_details {
        let mut object_303 = object.key("DeleteStepDetails").start_object();
        crate::json_ser::serialize_structure_crate_model_delete_step_details(
            &mut object_303,
            var_302,
        )?;
        object_303.finish();
    }
    if let Some(var_304) = &input.tag_step_details {
        let mut object_305 = object.key("TagStepDetails").start_object();
        crate::json_ser::serialize_structure_crate_model_tag_step_details(
            &mut object_305,
            var_304,
        )?;
        object_305.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_workflow_detail(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::WorkflowDetail,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_306) = &input.workflow_id {
        object.key("WorkflowId").string(var_306.as_str());
    }
    if let Some(var_307) = &input.execution_role {
        object.key("ExecutionRole").string(var_307.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_copy_step_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CopyStepDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_308) = &input.name {
        object.key("Name").string(var_308.as_str());
    }
    if let Some(var_309) = &input.destination_file_location {
        let mut object_310 = object.key("DestinationFileLocation").start_object();
        crate::json_ser::serialize_structure_crate_model_input_file_location(
            &mut object_310,
            var_309,
        )?;
        object_310.finish();
    }
    if let Some(var_311) = &input.overwrite_existing {
        object.key("OverwriteExisting").string(var_311.as_str());
    }
    if let Some(var_312) = &input.source_file_location {
        object.key("SourceFileLocation").string(var_312.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_custom_step_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CustomStepDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_313) = &input.name {
        object.key("Name").string(var_313.as_str());
    }
    if let Some(var_314) = &input.target {
        object.key("Target").string(var_314.as_str());
    }
    if let Some(var_315) = &input.timeout_seconds {
        object.key("TimeoutSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_315).into()),
        );
    }
    if let Some(var_316) = &input.source_file_location {
        object.key("SourceFileLocation").string(var_316.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_delete_step_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DeleteStepDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_317) = &input.name {
        object.key("Name").string(var_317.as_str());
    }
    if let Some(var_318) = &input.source_file_location {
        object.key("SourceFileLocation").string(var_318.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tag_step_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TagStepDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_319) = &input.name {
        object.key("Name").string(var_319.as_str());
    }
    if let Some(var_320) = &input.tags {
        let mut array_321 = object.key("Tags").start_array();
        for item_322 in var_320 {
            {
                let mut object_323 = array_321.value().start_object();
                crate::json_ser::serialize_structure_crate_model_s3_tag(&mut object_323, item_322)?;
                object_323.finish();
            }
        }
        array_321.finish();
    }
    if let Some(var_324) = &input.source_file_location {
        object.key("SourceFileLocation").string(var_324.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_input_file_location(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InputFileLocation,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_325) = &input.s3_file_location {
        let mut object_326 = object.key("S3FileLocation").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_input_file_location(
            &mut object_326,
            var_325,
        )?;
        object_326.finish();
    }
    if let Some(var_327) = &input.efs_file_location {
        let mut object_328 = object.key("EfsFileLocation").start_object();
        crate::json_ser::serialize_structure_crate_model_efs_file_location(
            &mut object_328,
            var_327,
        )?;
        object_328.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_tag(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3Tag,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_329) = &input.key {
        object.key("Key").string(var_329.as_str());
    }
    if let Some(var_330) = &input.value {
        object.key("Value").string(var_330.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_input_file_location(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3InputFileLocation,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_331) = &input.bucket {
        object.key("Bucket").string(var_331.as_str());
    }
    if let Some(var_332) = &input.key {
        object.key("Key").string(var_332.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_efs_file_location(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EfsFileLocation,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_333) = &input.file_system_id {
        object.key("FileSystemId").string(var_333.as_str());
    }
    if let Some(var_334) = &input.path {
        object.key("Path").string(var_334.as_str());
    }
    Ok(())
}
