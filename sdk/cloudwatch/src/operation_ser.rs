// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_operation_crate_operation_delete_alarms(
    input: &crate::input::DeleteAlarmsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteAlarms", "2010-08-01");
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("AlarmNames");
    if let Some(var_2) = &input.alarm_names {
        let mut list_4 = scope_1.start_list(false, None);
        for item_3 in var_2 {
            #[allow(unused_mut)]
            let mut entry_5 = list_4.entry();
            entry_5.string(item_3);
        }
        list_4.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_anomaly_detector(
    input: &crate::input::DeleteAnomalyDetectorInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteAnomalyDetector", "2010-08-01");
    #[allow(unused_mut)]
    let mut scope_6 = writer.prefix("Namespace");
    if let Some(var_7) = &input.namespace {
        scope_6.string(var_7);
    }
    #[allow(unused_mut)]
    let mut scope_8 = writer.prefix("MetricName");
    if let Some(var_9) = &input.metric_name {
        scope_8.string(var_9);
    }
    #[allow(unused_mut)]
    let mut scope_10 = writer.prefix("Dimensions");
    if let Some(var_11) = &input.dimensions {
        let mut list_13 = scope_10.start_list(false, None);
        for item_12 in var_11 {
            #[allow(unused_mut)]
            let mut entry_14 = list_13.entry();
            crate::query_ser::serialize_structure_crate_model_dimension(entry_14, item_12)?;
        }
        list_13.finish();
    }
    #[allow(unused_mut)]
    let mut scope_15 = writer.prefix("Stat");
    if let Some(var_16) = &input.stat {
        scope_15.string(var_16);
    }
    #[allow(unused_mut)]
    let mut scope_17 = writer.prefix("SingleMetricAnomalyDetector");
    if let Some(var_18) = &input.single_metric_anomaly_detector {
        crate::query_ser::serialize_structure_crate_model_single_metric_anomaly_detector(
            scope_17, var_18,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_19 = writer.prefix("MetricMathAnomalyDetector");
    if let Some(var_20) = &input.metric_math_anomaly_detector {
        crate::query_ser::serialize_structure_crate_model_metric_math_anomaly_detector(
            scope_19, var_20,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_dashboards(
    input: &crate::input::DeleteDashboardsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteDashboards", "2010-08-01");
    #[allow(unused_mut)]
    let mut scope_21 = writer.prefix("DashboardNames");
    if let Some(var_22) = &input.dashboard_names {
        let mut list_24 = scope_21.start_list(false, None);
        for item_23 in var_22 {
            #[allow(unused_mut)]
            let mut entry_25 = list_24.entry();
            entry_25.string(item_23);
        }
        list_24.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_insight_rules(
    input: &crate::input::DeleteInsightRulesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteInsightRules", "2010-08-01");
    #[allow(unused_mut)]
    let mut scope_26 = writer.prefix("RuleNames");
    if let Some(var_27) = &input.rule_names {
        let mut list_29 = scope_26.start_list(false, None);
        for item_28 in var_27 {
            #[allow(unused_mut)]
            let mut entry_30 = list_29.entry();
            entry_30.string(item_28);
        }
        list_29.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_metric_stream(
    input: &crate::input::DeleteMetricStreamInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteMetricStream", "2010-08-01");
    #[allow(unused_mut)]
    let mut scope_31 = writer.prefix("Name");
    if let Some(var_32) = &input.name {
        scope_31.string(var_32);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_alarm_history(
    input: &crate::input::DescribeAlarmHistoryInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeAlarmHistory", "2010-08-01");
    #[allow(unused_mut)]
    let mut scope_33 = writer.prefix("AlarmName");
    if let Some(var_34) = &input.alarm_name {
        scope_33.string(var_34);
    }
    #[allow(unused_mut)]
    let mut scope_35 = writer.prefix("AlarmTypes");
    if let Some(var_36) = &input.alarm_types {
        let mut list_38 = scope_35.start_list(false, None);
        for item_37 in var_36 {
            #[allow(unused_mut)]
            let mut entry_39 = list_38.entry();
            entry_39.string(item_37.as_str());
        }
        list_38.finish();
    }
    #[allow(unused_mut)]
    let mut scope_40 = writer.prefix("HistoryItemType");
    if let Some(var_41) = &input.history_item_type {
        scope_40.string(var_41.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_42 = writer.prefix("StartDate");
    if let Some(var_43) = &input.start_date {
        scope_42.date_time(var_43, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_44 = writer.prefix("EndDate");
    if let Some(var_45) = &input.end_date {
        scope_44.date_time(var_45, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_46 = writer.prefix("MaxRecords");
    if let Some(var_47) = &input.max_records {
        scope_46.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_47).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_48 = writer.prefix("NextToken");
    if let Some(var_49) = &input.next_token {
        scope_48.string(var_49);
    }
    #[allow(unused_mut)]
    let mut scope_50 = writer.prefix("ScanBy");
    if let Some(var_51) = &input.scan_by {
        scope_50.string(var_51.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_alarms(
    input: &crate::input::DescribeAlarmsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeAlarms", "2010-08-01");
    #[allow(unused_mut)]
    let mut scope_52 = writer.prefix("AlarmNames");
    if let Some(var_53) = &input.alarm_names {
        let mut list_55 = scope_52.start_list(false, None);
        for item_54 in var_53 {
            #[allow(unused_mut)]
            let mut entry_56 = list_55.entry();
            entry_56.string(item_54);
        }
        list_55.finish();
    }
    #[allow(unused_mut)]
    let mut scope_57 = writer.prefix("AlarmNamePrefix");
    if let Some(var_58) = &input.alarm_name_prefix {
        scope_57.string(var_58);
    }
    #[allow(unused_mut)]
    let mut scope_59 = writer.prefix("AlarmTypes");
    if let Some(var_60) = &input.alarm_types {
        let mut list_62 = scope_59.start_list(false, None);
        for item_61 in var_60 {
            #[allow(unused_mut)]
            let mut entry_63 = list_62.entry();
            entry_63.string(item_61.as_str());
        }
        list_62.finish();
    }
    #[allow(unused_mut)]
    let mut scope_64 = writer.prefix("ChildrenOfAlarmName");
    if let Some(var_65) = &input.children_of_alarm_name {
        scope_64.string(var_65);
    }
    #[allow(unused_mut)]
    let mut scope_66 = writer.prefix("ParentsOfAlarmName");
    if let Some(var_67) = &input.parents_of_alarm_name {
        scope_66.string(var_67);
    }
    #[allow(unused_mut)]
    let mut scope_68 = writer.prefix("StateValue");
    if let Some(var_69) = &input.state_value {
        scope_68.string(var_69.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_70 = writer.prefix("ActionPrefix");
    if let Some(var_71) = &input.action_prefix {
        scope_70.string(var_71);
    }
    #[allow(unused_mut)]
    let mut scope_72 = writer.prefix("MaxRecords");
    if let Some(var_73) = &input.max_records {
        scope_72.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_73).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_74 = writer.prefix("NextToken");
    if let Some(var_75) = &input.next_token {
        scope_74.string(var_75);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_alarms_for_metric(
    input: &crate::input::DescribeAlarmsForMetricInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeAlarmsForMetric", "2010-08-01");
    #[allow(unused_mut)]
    let mut scope_76 = writer.prefix("MetricName");
    if let Some(var_77) = &input.metric_name {
        scope_76.string(var_77);
    }
    #[allow(unused_mut)]
    let mut scope_78 = writer.prefix("Namespace");
    if let Some(var_79) = &input.namespace {
        scope_78.string(var_79);
    }
    #[allow(unused_mut)]
    let mut scope_80 = writer.prefix("Statistic");
    if let Some(var_81) = &input.statistic {
        scope_80.string(var_81.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_82 = writer.prefix("ExtendedStatistic");
    if let Some(var_83) = &input.extended_statistic {
        scope_82.string(var_83);
    }
    #[allow(unused_mut)]
    let mut scope_84 = writer.prefix("Dimensions");
    if let Some(var_85) = &input.dimensions {
        let mut list_87 = scope_84.start_list(false, None);
        for item_86 in var_85 {
            #[allow(unused_mut)]
            let mut entry_88 = list_87.entry();
            crate::query_ser::serialize_structure_crate_model_dimension(entry_88, item_86)?;
        }
        list_87.finish();
    }
    #[allow(unused_mut)]
    let mut scope_89 = writer.prefix("Period");
    if let Some(var_90) = &input.period {
        scope_89.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_90).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_91 = writer.prefix("Unit");
    if let Some(var_92) = &input.unit {
        scope_91.string(var_92.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_anomaly_detectors(
    input: &crate::input::DescribeAnomalyDetectorsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeAnomalyDetectors", "2010-08-01");
    #[allow(unused_mut)]
    let mut scope_93 = writer.prefix("NextToken");
    if let Some(var_94) = &input.next_token {
        scope_93.string(var_94);
    }
    #[allow(unused_mut)]
    let mut scope_95 = writer.prefix("MaxResults");
    if let Some(var_96) = &input.max_results {
        scope_95.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_96).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_97 = writer.prefix("Namespace");
    if let Some(var_98) = &input.namespace {
        scope_97.string(var_98);
    }
    #[allow(unused_mut)]
    let mut scope_99 = writer.prefix("MetricName");
    if let Some(var_100) = &input.metric_name {
        scope_99.string(var_100);
    }
    #[allow(unused_mut)]
    let mut scope_101 = writer.prefix("Dimensions");
    if let Some(var_102) = &input.dimensions {
        let mut list_104 = scope_101.start_list(false, None);
        for item_103 in var_102 {
            #[allow(unused_mut)]
            let mut entry_105 = list_104.entry();
            crate::query_ser::serialize_structure_crate_model_dimension(entry_105, item_103)?;
        }
        list_104.finish();
    }
    #[allow(unused_mut)]
    let mut scope_106 = writer.prefix("AnomalyDetectorTypes");
    if let Some(var_107) = &input.anomaly_detector_types {
        let mut list_109 = scope_106.start_list(false, None);
        for item_108 in var_107 {
            #[allow(unused_mut)]
            let mut entry_110 = list_109.entry();
            entry_110.string(item_108.as_str());
        }
        list_109.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_insight_rules(
    input: &crate::input::DescribeInsightRulesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeInsightRules", "2010-08-01");
    #[allow(unused_mut)]
    let mut scope_111 = writer.prefix("NextToken");
    if let Some(var_112) = &input.next_token {
        scope_111.string(var_112);
    }
    #[allow(unused_mut)]
    let mut scope_113 = writer.prefix("MaxResults");
    if let Some(var_114) = &input.max_results {
        scope_113.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_114).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_alarm_actions(
    input: &crate::input::DisableAlarmActionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisableAlarmActions", "2010-08-01");
    #[allow(unused_mut)]
    let mut scope_115 = writer.prefix("AlarmNames");
    if let Some(var_116) = &input.alarm_names {
        let mut list_118 = scope_115.start_list(false, None);
        for item_117 in var_116 {
            #[allow(unused_mut)]
            let mut entry_119 = list_118.entry();
            entry_119.string(item_117);
        }
        list_118.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_insight_rules(
    input: &crate::input::DisableInsightRulesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisableInsightRules", "2010-08-01");
    #[allow(unused_mut)]
    let mut scope_120 = writer.prefix("RuleNames");
    if let Some(var_121) = &input.rule_names {
        let mut list_123 = scope_120.start_list(false, None);
        for item_122 in var_121 {
            #[allow(unused_mut)]
            let mut entry_124 = list_123.entry();
            entry_124.string(item_122);
        }
        list_123.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_alarm_actions(
    input: &crate::input::EnableAlarmActionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "EnableAlarmActions", "2010-08-01");
    #[allow(unused_mut)]
    let mut scope_125 = writer.prefix("AlarmNames");
    if let Some(var_126) = &input.alarm_names {
        let mut list_128 = scope_125.start_list(false, None);
        for item_127 in var_126 {
            #[allow(unused_mut)]
            let mut entry_129 = list_128.entry();
            entry_129.string(item_127);
        }
        list_128.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_insight_rules(
    input: &crate::input::EnableInsightRulesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "EnableInsightRules", "2010-08-01");
    #[allow(unused_mut)]
    let mut scope_130 = writer.prefix("RuleNames");
    if let Some(var_131) = &input.rule_names {
        let mut list_133 = scope_130.start_list(false, None);
        for item_132 in var_131 {
            #[allow(unused_mut)]
            let mut entry_134 = list_133.entry();
            entry_134.string(item_132);
        }
        list_133.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_dashboard(
    input: &crate::input::GetDashboardInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetDashboard", "2010-08-01");
    #[allow(unused_mut)]
    let mut scope_135 = writer.prefix("DashboardName");
    if let Some(var_136) = &input.dashboard_name {
        scope_135.string(var_136);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_insight_rule_report(
    input: &crate::input::GetInsightRuleReportInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetInsightRuleReport", "2010-08-01");
    #[allow(unused_mut)]
    let mut scope_137 = writer.prefix("RuleName");
    if let Some(var_138) = &input.rule_name {
        scope_137.string(var_138);
    }
    #[allow(unused_mut)]
    let mut scope_139 = writer.prefix("StartTime");
    if let Some(var_140) = &input.start_time {
        scope_139.date_time(var_140, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_141 = writer.prefix("EndTime");
    if let Some(var_142) = &input.end_time {
        scope_141.date_time(var_142, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_143 = writer.prefix("Period");
    if let Some(var_144) = &input.period {
        scope_143.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_144).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_145 = writer.prefix("MaxContributorCount");
    if let Some(var_146) = &input.max_contributor_count {
        scope_145.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_146).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_147 = writer.prefix("Metrics");
    if let Some(var_148) = &input.metrics {
        let mut list_150 = scope_147.start_list(false, None);
        for item_149 in var_148 {
            #[allow(unused_mut)]
            let mut entry_151 = list_150.entry();
            entry_151.string(item_149);
        }
        list_150.finish();
    }
    #[allow(unused_mut)]
    let mut scope_152 = writer.prefix("OrderBy");
    if let Some(var_153) = &input.order_by {
        scope_152.string(var_153);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_metric_data(
    input: &crate::input::GetMetricDataInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetMetricData", "2010-08-01");
    #[allow(unused_mut)]
    let mut scope_154 = writer.prefix("MetricDataQueries");
    if let Some(var_155) = &input.metric_data_queries {
        let mut list_157 = scope_154.start_list(false, None);
        for item_156 in var_155 {
            #[allow(unused_mut)]
            let mut entry_158 = list_157.entry();
            crate::query_ser::serialize_structure_crate_model_metric_data_query(
                entry_158, item_156,
            )?;
        }
        list_157.finish();
    }
    #[allow(unused_mut)]
    let mut scope_159 = writer.prefix("StartTime");
    if let Some(var_160) = &input.start_time {
        scope_159.date_time(var_160, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_161 = writer.prefix("EndTime");
    if let Some(var_162) = &input.end_time {
        scope_161.date_time(var_162, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_163 = writer.prefix("NextToken");
    if let Some(var_164) = &input.next_token {
        scope_163.string(var_164);
    }
    #[allow(unused_mut)]
    let mut scope_165 = writer.prefix("ScanBy");
    if let Some(var_166) = &input.scan_by {
        scope_165.string(var_166.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_167 = writer.prefix("MaxDatapoints");
    if let Some(var_168) = &input.max_datapoints {
        scope_167.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_168).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_169 = writer.prefix("LabelOptions");
    if let Some(var_170) = &input.label_options {
        crate::query_ser::serialize_structure_crate_model_label_options(scope_169, var_170)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_metric_statistics(
    input: &crate::input::GetMetricStatisticsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetMetricStatistics", "2010-08-01");
    #[allow(unused_mut)]
    let mut scope_171 = writer.prefix("Namespace");
    if let Some(var_172) = &input.namespace {
        scope_171.string(var_172);
    }
    #[allow(unused_mut)]
    let mut scope_173 = writer.prefix("MetricName");
    if let Some(var_174) = &input.metric_name {
        scope_173.string(var_174);
    }
    #[allow(unused_mut)]
    let mut scope_175 = writer.prefix("Dimensions");
    if let Some(var_176) = &input.dimensions {
        let mut list_178 = scope_175.start_list(false, None);
        for item_177 in var_176 {
            #[allow(unused_mut)]
            let mut entry_179 = list_178.entry();
            crate::query_ser::serialize_structure_crate_model_dimension(entry_179, item_177)?;
        }
        list_178.finish();
    }
    #[allow(unused_mut)]
    let mut scope_180 = writer.prefix("StartTime");
    if let Some(var_181) = &input.start_time {
        scope_180.date_time(var_181, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_182 = writer.prefix("EndTime");
    if let Some(var_183) = &input.end_time {
        scope_182.date_time(var_183, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_184 = writer.prefix("Period");
    if let Some(var_185) = &input.period {
        scope_184.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_185).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_186 = writer.prefix("Statistics");
    if let Some(var_187) = &input.statistics {
        let mut list_189 = scope_186.start_list(false, None);
        for item_188 in var_187 {
            #[allow(unused_mut)]
            let mut entry_190 = list_189.entry();
            entry_190.string(item_188.as_str());
        }
        list_189.finish();
    }
    #[allow(unused_mut)]
    let mut scope_191 = writer.prefix("ExtendedStatistics");
    if let Some(var_192) = &input.extended_statistics {
        let mut list_194 = scope_191.start_list(false, None);
        for item_193 in var_192 {
            #[allow(unused_mut)]
            let mut entry_195 = list_194.entry();
            entry_195.string(item_193);
        }
        list_194.finish();
    }
    #[allow(unused_mut)]
    let mut scope_196 = writer.prefix("Unit");
    if let Some(var_197) = &input.unit {
        scope_196.string(var_197.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_metric_stream(
    input: &crate::input::GetMetricStreamInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetMetricStream", "2010-08-01");
    #[allow(unused_mut)]
    let mut scope_198 = writer.prefix("Name");
    if let Some(var_199) = &input.name {
        scope_198.string(var_199);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_metric_widget_image(
    input: &crate::input::GetMetricWidgetImageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetMetricWidgetImage", "2010-08-01");
    #[allow(unused_mut)]
    let mut scope_200 = writer.prefix("MetricWidget");
    if let Some(var_201) = &input.metric_widget {
        scope_200.string(var_201);
    }
    #[allow(unused_mut)]
    let mut scope_202 = writer.prefix("OutputFormat");
    if let Some(var_203) = &input.output_format {
        scope_202.string(var_203);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_list_dashboards(
    input: &crate::input::ListDashboardsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ListDashboards", "2010-08-01");
    #[allow(unused_mut)]
    let mut scope_204 = writer.prefix("DashboardNamePrefix");
    if let Some(var_205) = &input.dashboard_name_prefix {
        scope_204.string(var_205);
    }
    #[allow(unused_mut)]
    let mut scope_206 = writer.prefix("NextToken");
    if let Some(var_207) = &input.next_token {
        scope_206.string(var_207);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_list_managed_insight_rules(
    input: &crate::input::ListManagedInsightRulesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ListManagedInsightRules", "2010-08-01");
    #[allow(unused_mut)]
    let mut scope_208 = writer.prefix("ResourceARN");
    if let Some(var_209) = &input.resource_arn {
        scope_208.string(var_209);
    }
    #[allow(unused_mut)]
    let mut scope_210 = writer.prefix("NextToken");
    if let Some(var_211) = &input.next_token {
        scope_210.string(var_211);
    }
    #[allow(unused_mut)]
    let mut scope_212 = writer.prefix("MaxResults");
    if let Some(var_213) = &input.max_results {
        scope_212.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_213).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_list_metrics(
    input: &crate::input::ListMetricsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ListMetrics", "2010-08-01");
    #[allow(unused_mut)]
    let mut scope_214 = writer.prefix("Namespace");
    if let Some(var_215) = &input.namespace {
        scope_214.string(var_215);
    }
    #[allow(unused_mut)]
    let mut scope_216 = writer.prefix("MetricName");
    if let Some(var_217) = &input.metric_name {
        scope_216.string(var_217);
    }
    #[allow(unused_mut)]
    let mut scope_218 = writer.prefix("Dimensions");
    if let Some(var_219) = &input.dimensions {
        let mut list_221 = scope_218.start_list(false, None);
        for item_220 in var_219 {
            #[allow(unused_mut)]
            let mut entry_222 = list_221.entry();
            crate::query_ser::serialize_structure_crate_model_dimension_filter(
                entry_222, item_220,
            )?;
        }
        list_221.finish();
    }
    #[allow(unused_mut)]
    let mut scope_223 = writer.prefix("NextToken");
    if let Some(var_224) = &input.next_token {
        scope_223.string(var_224);
    }
    #[allow(unused_mut)]
    let mut scope_225 = writer.prefix("RecentlyActive");
    if let Some(var_226) = &input.recently_active {
        scope_225.string(var_226.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_list_metric_streams(
    input: &crate::input::ListMetricStreamsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ListMetricStreams", "2010-08-01");
    #[allow(unused_mut)]
    let mut scope_227 = writer.prefix("NextToken");
    if let Some(var_228) = &input.next_token {
        scope_227.string(var_228);
    }
    #[allow(unused_mut)]
    let mut scope_229 = writer.prefix("MaxResults");
    if let Some(var_230) = &input.max_results {
        scope_229.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_230).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_list_tags_for_resource(
    input: &crate::input::ListTagsForResourceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ListTagsForResource", "2010-08-01");
    #[allow(unused_mut)]
    let mut scope_231 = writer.prefix("ResourceARN");
    if let Some(var_232) = &input.resource_arn {
        scope_231.string(var_232);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_put_anomaly_detector(
    input: &crate::input::PutAnomalyDetectorInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "PutAnomalyDetector", "2010-08-01");
    #[allow(unused_mut)]
    let mut scope_233 = writer.prefix("Namespace");
    if let Some(var_234) = &input.namespace {
        scope_233.string(var_234);
    }
    #[allow(unused_mut)]
    let mut scope_235 = writer.prefix("MetricName");
    if let Some(var_236) = &input.metric_name {
        scope_235.string(var_236);
    }
    #[allow(unused_mut)]
    let mut scope_237 = writer.prefix("Dimensions");
    if let Some(var_238) = &input.dimensions {
        let mut list_240 = scope_237.start_list(false, None);
        for item_239 in var_238 {
            #[allow(unused_mut)]
            let mut entry_241 = list_240.entry();
            crate::query_ser::serialize_structure_crate_model_dimension(entry_241, item_239)?;
        }
        list_240.finish();
    }
    #[allow(unused_mut)]
    let mut scope_242 = writer.prefix("Stat");
    if let Some(var_243) = &input.stat {
        scope_242.string(var_243);
    }
    #[allow(unused_mut)]
    let mut scope_244 = writer.prefix("Configuration");
    if let Some(var_245) = &input.configuration {
        crate::query_ser::serialize_structure_crate_model_anomaly_detector_configuration(
            scope_244, var_245,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_246 = writer.prefix("SingleMetricAnomalyDetector");
    if let Some(var_247) = &input.single_metric_anomaly_detector {
        crate::query_ser::serialize_structure_crate_model_single_metric_anomaly_detector(
            scope_246, var_247,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_248 = writer.prefix("MetricMathAnomalyDetector");
    if let Some(var_249) = &input.metric_math_anomaly_detector {
        crate::query_ser::serialize_structure_crate_model_metric_math_anomaly_detector(
            scope_248, var_249,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_put_composite_alarm(
    input: &crate::input::PutCompositeAlarmInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "PutCompositeAlarm", "2010-08-01");
    #[allow(unused_mut)]
    let mut scope_250 = writer.prefix("ActionsEnabled");
    if let Some(var_251) = &input.actions_enabled {
        scope_250.boolean(*var_251);
    }
    #[allow(unused_mut)]
    let mut scope_252 = writer.prefix("AlarmActions");
    if let Some(var_253) = &input.alarm_actions {
        let mut list_255 = scope_252.start_list(false, None);
        for item_254 in var_253 {
            #[allow(unused_mut)]
            let mut entry_256 = list_255.entry();
            entry_256.string(item_254);
        }
        list_255.finish();
    }
    #[allow(unused_mut)]
    let mut scope_257 = writer.prefix("AlarmDescription");
    if let Some(var_258) = &input.alarm_description {
        scope_257.string(var_258);
    }
    #[allow(unused_mut)]
    let mut scope_259 = writer.prefix("AlarmName");
    if let Some(var_260) = &input.alarm_name {
        scope_259.string(var_260);
    }
    #[allow(unused_mut)]
    let mut scope_261 = writer.prefix("AlarmRule");
    if let Some(var_262) = &input.alarm_rule {
        scope_261.string(var_262);
    }
    #[allow(unused_mut)]
    let mut scope_263 = writer.prefix("InsufficientDataActions");
    if let Some(var_264) = &input.insufficient_data_actions {
        let mut list_266 = scope_263.start_list(false, None);
        for item_265 in var_264 {
            #[allow(unused_mut)]
            let mut entry_267 = list_266.entry();
            entry_267.string(item_265);
        }
        list_266.finish();
    }
    #[allow(unused_mut)]
    let mut scope_268 = writer.prefix("OKActions");
    if let Some(var_269) = &input.ok_actions {
        let mut list_271 = scope_268.start_list(false, None);
        for item_270 in var_269 {
            #[allow(unused_mut)]
            let mut entry_272 = list_271.entry();
            entry_272.string(item_270);
        }
        list_271.finish();
    }
    #[allow(unused_mut)]
    let mut scope_273 = writer.prefix("Tags");
    if let Some(var_274) = &input.tags {
        let mut list_276 = scope_273.start_list(false, None);
        for item_275 in var_274 {
            #[allow(unused_mut)]
            let mut entry_277 = list_276.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_277, item_275)?;
        }
        list_276.finish();
    }
    #[allow(unused_mut)]
    let mut scope_278 = writer.prefix("ActionsSuppressor");
    if let Some(var_279) = &input.actions_suppressor {
        scope_278.string(var_279);
    }
    #[allow(unused_mut)]
    let mut scope_280 = writer.prefix("ActionsSuppressorWaitPeriod");
    if let Some(var_281) = &input.actions_suppressor_wait_period {
        scope_280.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_281).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_282 = writer.prefix("ActionsSuppressorExtensionPeriod");
    if let Some(var_283) = &input.actions_suppressor_extension_period {
        scope_282.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_283).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_put_dashboard(
    input: &crate::input::PutDashboardInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "PutDashboard", "2010-08-01");
    #[allow(unused_mut)]
    let mut scope_284 = writer.prefix("DashboardName");
    if let Some(var_285) = &input.dashboard_name {
        scope_284.string(var_285);
    }
    #[allow(unused_mut)]
    let mut scope_286 = writer.prefix("DashboardBody");
    if let Some(var_287) = &input.dashboard_body {
        scope_286.string(var_287);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_put_insight_rule(
    input: &crate::input::PutInsightRuleInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "PutInsightRule", "2010-08-01");
    #[allow(unused_mut)]
    let mut scope_288 = writer.prefix("RuleName");
    if let Some(var_289) = &input.rule_name {
        scope_288.string(var_289);
    }
    #[allow(unused_mut)]
    let mut scope_290 = writer.prefix("RuleState");
    if let Some(var_291) = &input.rule_state {
        scope_290.string(var_291);
    }
    #[allow(unused_mut)]
    let mut scope_292 = writer.prefix("RuleDefinition");
    if let Some(var_293) = &input.rule_definition {
        scope_292.string(var_293);
    }
    #[allow(unused_mut)]
    let mut scope_294 = writer.prefix("Tags");
    if let Some(var_295) = &input.tags {
        let mut list_297 = scope_294.start_list(false, None);
        for item_296 in var_295 {
            #[allow(unused_mut)]
            let mut entry_298 = list_297.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_298, item_296)?;
        }
        list_297.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_put_managed_insight_rules(
    input: &crate::input::PutManagedInsightRulesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "PutManagedInsightRules", "2010-08-01");
    #[allow(unused_mut)]
    let mut scope_299 = writer.prefix("ManagedRules");
    if let Some(var_300) = &input.managed_rules {
        let mut list_302 = scope_299.start_list(false, None);
        for item_301 in var_300 {
            #[allow(unused_mut)]
            let mut entry_303 = list_302.entry();
            crate::query_ser::serialize_structure_crate_model_managed_rule(entry_303, item_301)?;
        }
        list_302.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_put_metric_alarm(
    input: &crate::input::PutMetricAlarmInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "PutMetricAlarm", "2010-08-01");
    #[allow(unused_mut)]
    let mut scope_304 = writer.prefix("AlarmName");
    if let Some(var_305) = &input.alarm_name {
        scope_304.string(var_305);
    }
    #[allow(unused_mut)]
    let mut scope_306 = writer.prefix("AlarmDescription");
    if let Some(var_307) = &input.alarm_description {
        scope_306.string(var_307);
    }
    #[allow(unused_mut)]
    let mut scope_308 = writer.prefix("ActionsEnabled");
    if let Some(var_309) = &input.actions_enabled {
        scope_308.boolean(*var_309);
    }
    #[allow(unused_mut)]
    let mut scope_310 = writer.prefix("OKActions");
    if let Some(var_311) = &input.ok_actions {
        let mut list_313 = scope_310.start_list(false, None);
        for item_312 in var_311 {
            #[allow(unused_mut)]
            let mut entry_314 = list_313.entry();
            entry_314.string(item_312);
        }
        list_313.finish();
    }
    #[allow(unused_mut)]
    let mut scope_315 = writer.prefix("AlarmActions");
    if let Some(var_316) = &input.alarm_actions {
        let mut list_318 = scope_315.start_list(false, None);
        for item_317 in var_316 {
            #[allow(unused_mut)]
            let mut entry_319 = list_318.entry();
            entry_319.string(item_317);
        }
        list_318.finish();
    }
    #[allow(unused_mut)]
    let mut scope_320 = writer.prefix("InsufficientDataActions");
    if let Some(var_321) = &input.insufficient_data_actions {
        let mut list_323 = scope_320.start_list(false, None);
        for item_322 in var_321 {
            #[allow(unused_mut)]
            let mut entry_324 = list_323.entry();
            entry_324.string(item_322);
        }
        list_323.finish();
    }
    #[allow(unused_mut)]
    let mut scope_325 = writer.prefix("MetricName");
    if let Some(var_326) = &input.metric_name {
        scope_325.string(var_326);
    }
    #[allow(unused_mut)]
    let mut scope_327 = writer.prefix("Namespace");
    if let Some(var_328) = &input.namespace {
        scope_327.string(var_328);
    }
    #[allow(unused_mut)]
    let mut scope_329 = writer.prefix("Statistic");
    if let Some(var_330) = &input.statistic {
        scope_329.string(var_330.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_331 = writer.prefix("ExtendedStatistic");
    if let Some(var_332) = &input.extended_statistic {
        scope_331.string(var_332);
    }
    #[allow(unused_mut)]
    let mut scope_333 = writer.prefix("Dimensions");
    if let Some(var_334) = &input.dimensions {
        let mut list_336 = scope_333.start_list(false, None);
        for item_335 in var_334 {
            #[allow(unused_mut)]
            let mut entry_337 = list_336.entry();
            crate::query_ser::serialize_structure_crate_model_dimension(entry_337, item_335)?;
        }
        list_336.finish();
    }
    #[allow(unused_mut)]
    let mut scope_338 = writer.prefix("Period");
    if let Some(var_339) = &input.period {
        scope_338.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_339).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_340 = writer.prefix("Unit");
    if let Some(var_341) = &input.unit {
        scope_340.string(var_341.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_342 = writer.prefix("EvaluationPeriods");
    if let Some(var_343) = &input.evaluation_periods {
        scope_342.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_343).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_344 = writer.prefix("DatapointsToAlarm");
    if let Some(var_345) = &input.datapoints_to_alarm {
        scope_344.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_345).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_346 = writer.prefix("Threshold");
    if let Some(var_347) = &input.threshold {
        scope_346.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_347).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_348 = writer.prefix("ComparisonOperator");
    if let Some(var_349) = &input.comparison_operator {
        scope_348.string(var_349.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_350 = writer.prefix("TreatMissingData");
    if let Some(var_351) = &input.treat_missing_data {
        scope_350.string(var_351);
    }
    #[allow(unused_mut)]
    let mut scope_352 = writer.prefix("EvaluateLowSampleCountPercentile");
    if let Some(var_353) = &input.evaluate_low_sample_count_percentile {
        scope_352.string(var_353);
    }
    #[allow(unused_mut)]
    let mut scope_354 = writer.prefix("Metrics");
    if let Some(var_355) = &input.metrics {
        let mut list_357 = scope_354.start_list(false, None);
        for item_356 in var_355 {
            #[allow(unused_mut)]
            let mut entry_358 = list_357.entry();
            crate::query_ser::serialize_structure_crate_model_metric_data_query(
                entry_358, item_356,
            )?;
        }
        list_357.finish();
    }
    #[allow(unused_mut)]
    let mut scope_359 = writer.prefix("Tags");
    if let Some(var_360) = &input.tags {
        let mut list_362 = scope_359.start_list(false, None);
        for item_361 in var_360 {
            #[allow(unused_mut)]
            let mut entry_363 = list_362.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_363, item_361)?;
        }
        list_362.finish();
    }
    #[allow(unused_mut)]
    let mut scope_364 = writer.prefix("ThresholdMetricId");
    if let Some(var_365) = &input.threshold_metric_id {
        scope_364.string(var_365);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_put_metric_data(
    input: &crate::input::PutMetricDataInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "PutMetricData", "2010-08-01");
    #[allow(unused_mut)]
    let mut scope_366 = writer.prefix("Namespace");
    if let Some(var_367) = &input.namespace {
        scope_366.string(var_367);
    }
    #[allow(unused_mut)]
    let mut scope_368 = writer.prefix("MetricData");
    if let Some(var_369) = &input.metric_data {
        let mut list_371 = scope_368.start_list(false, None);
        for item_370 in var_369 {
            #[allow(unused_mut)]
            let mut entry_372 = list_371.entry();
            crate::query_ser::serialize_structure_crate_model_metric_datum(entry_372, item_370)?;
        }
        list_371.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_put_metric_stream(
    input: &crate::input::PutMetricStreamInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "PutMetricStream", "2010-08-01");
    #[allow(unused_mut)]
    let mut scope_373 = writer.prefix("Name");
    if let Some(var_374) = &input.name {
        scope_373.string(var_374);
    }
    #[allow(unused_mut)]
    let mut scope_375 = writer.prefix("IncludeFilters");
    if let Some(var_376) = &input.include_filters {
        let mut list_378 = scope_375.start_list(false, None);
        for item_377 in var_376 {
            #[allow(unused_mut)]
            let mut entry_379 = list_378.entry();
            crate::query_ser::serialize_structure_crate_model_metric_stream_filter(
                entry_379, item_377,
            )?;
        }
        list_378.finish();
    }
    #[allow(unused_mut)]
    let mut scope_380 = writer.prefix("ExcludeFilters");
    if let Some(var_381) = &input.exclude_filters {
        let mut list_383 = scope_380.start_list(false, None);
        for item_382 in var_381 {
            #[allow(unused_mut)]
            let mut entry_384 = list_383.entry();
            crate::query_ser::serialize_structure_crate_model_metric_stream_filter(
                entry_384, item_382,
            )?;
        }
        list_383.finish();
    }
    #[allow(unused_mut)]
    let mut scope_385 = writer.prefix("FirehoseArn");
    if let Some(var_386) = &input.firehose_arn {
        scope_385.string(var_386);
    }
    #[allow(unused_mut)]
    let mut scope_387 = writer.prefix("RoleArn");
    if let Some(var_388) = &input.role_arn {
        scope_387.string(var_388);
    }
    #[allow(unused_mut)]
    let mut scope_389 = writer.prefix("OutputFormat");
    if let Some(var_390) = &input.output_format {
        scope_389.string(var_390.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_391 = writer.prefix("Tags");
    if let Some(var_392) = &input.tags {
        let mut list_394 = scope_391.start_list(false, None);
        for item_393 in var_392 {
            #[allow(unused_mut)]
            let mut entry_395 = list_394.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_395, item_393)?;
        }
        list_394.finish();
    }
    #[allow(unused_mut)]
    let mut scope_396 = writer.prefix("StatisticsConfigurations");
    if let Some(var_397) = &input.statistics_configurations {
        let mut list_399 = scope_396.start_list(false, None);
        for item_398 in var_397 {
            #[allow(unused_mut)]
            let mut entry_400 = list_399.entry();
            crate::query_ser::serialize_structure_crate_model_metric_stream_statistics_configuration(entry_400, item_398)?;
        }
        list_399.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_set_alarm_state(
    input: &crate::input::SetAlarmStateInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "SetAlarmState", "2010-08-01");
    #[allow(unused_mut)]
    let mut scope_401 = writer.prefix("AlarmName");
    if let Some(var_402) = &input.alarm_name {
        scope_401.string(var_402);
    }
    #[allow(unused_mut)]
    let mut scope_403 = writer.prefix("StateValue");
    if let Some(var_404) = &input.state_value {
        scope_403.string(var_404.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_405 = writer.prefix("StateReason");
    if let Some(var_406) = &input.state_reason {
        scope_405.string(var_406);
    }
    #[allow(unused_mut)]
    let mut scope_407 = writer.prefix("StateReasonData");
    if let Some(var_408) = &input.state_reason_data {
        scope_407.string(var_408);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_start_metric_streams(
    input: &crate::input::StartMetricStreamsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "StartMetricStreams", "2010-08-01");
    #[allow(unused_mut)]
    let mut scope_409 = writer.prefix("Names");
    if let Some(var_410) = &input.names {
        let mut list_412 = scope_409.start_list(false, None);
        for item_411 in var_410 {
            #[allow(unused_mut)]
            let mut entry_413 = list_412.entry();
            entry_413.string(item_411);
        }
        list_412.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_stop_metric_streams(
    input: &crate::input::StopMetricStreamsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "StopMetricStreams", "2010-08-01");
    #[allow(unused_mut)]
    let mut scope_414 = writer.prefix("Names");
    if let Some(var_415) = &input.names {
        let mut list_417 = scope_414.start_list(false, None);
        for item_416 in var_415 {
            #[allow(unused_mut)]
            let mut entry_418 = list_417.entry();
            entry_418.string(item_416);
        }
        list_417.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_tag_resource(
    input: &crate::input::TagResourceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "TagResource", "2010-08-01");
    #[allow(unused_mut)]
    let mut scope_419 = writer.prefix("ResourceARN");
    if let Some(var_420) = &input.resource_arn {
        scope_419.string(var_420);
    }
    #[allow(unused_mut)]
    let mut scope_421 = writer.prefix("Tags");
    if let Some(var_422) = &input.tags {
        let mut list_424 = scope_421.start_list(false, None);
        for item_423 in var_422 {
            #[allow(unused_mut)]
            let mut entry_425 = list_424.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_425, item_423)?;
        }
        list_424.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_untag_resource(
    input: &crate::input::UntagResourceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "UntagResource", "2010-08-01");
    #[allow(unused_mut)]
    let mut scope_426 = writer.prefix("ResourceARN");
    if let Some(var_427) = &input.resource_arn {
        scope_426.string(var_427);
    }
    #[allow(unused_mut)]
    let mut scope_428 = writer.prefix("TagKeys");
    if let Some(var_429) = &input.tag_keys {
        let mut list_431 = scope_428.start_list(false, None);
        for item_430 in var_429 {
            #[allow(unused_mut)]
            let mut entry_432 = list_431.entry();
            entry_432.string(item_430);
        }
        list_431.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}
