// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_accept_administrator_invitation_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AcceptAdministratorInvitationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.administrator_id {
        object.key("AdministratorId").string(var_1.as_str());
    }
    if let Some(var_2) = &input.invitation_id {
        object.key("InvitationId").string(var_2.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_accept_invitation_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AcceptInvitationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3) = &input.invitation_id {
        object.key("InvitationId").string(var_3.as_str());
    }
    if let Some(var_4) = &input.master_id {
        object.key("MasterId").string(var_4.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_disable_standards_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchDisableStandardsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_5) = &input.standards_subscription_arns {
        let mut array_6 = object.key("StandardsSubscriptionArns").start_array();
        for item_7 in var_5 {
            {
                array_6.value().string(item_7.as_str());
            }
        }
        array_6.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_enable_standards_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchEnableStandardsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_8) = &input.standards_subscription_requests {
        let mut array_9 = object.key("StandardsSubscriptionRequests").start_array();
        for item_10 in var_8 {
            {
                let mut object_11 = array_9.value().start_object();
                crate::json_ser::serialize_structure_crate_model_standards_subscription_request(
                    &mut object_11,
                    item_10,
                )?;
                object_11.finish();
            }
        }
        array_9.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_import_findings_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchImportFindingsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_12) = &input.findings {
        let mut array_13 = object.key("Findings").start_array();
        for item_14 in var_12 {
            {
                let mut object_15 = array_13.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_security_finding(
                    &mut object_15,
                    item_14,
                )?;
                object_15.finish();
            }
        }
        array_13.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_update_findings_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchUpdateFindingsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.confidence != 0 {
        object.key("Confidence").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.confidence).into()),
        );
    }
    if input.criticality != 0 {
        object.key("Criticality").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.criticality).into()),
        );
    }
    if let Some(var_16) = &input.finding_identifiers {
        let mut array_17 = object.key("FindingIdentifiers").start_array();
        for item_18 in var_16 {
            {
                let mut object_19 = array_17.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_security_finding_identifier(
                    &mut object_19,
                    item_18,
                )?;
                object_19.finish();
            }
        }
        array_17.finish();
    }
    if let Some(var_20) = &input.note {
        let mut object_21 = object.key("Note").start_object();
        crate::json_ser::serialize_structure_crate_model_note_update(&mut object_21, var_20)?;
        object_21.finish();
    }
    if let Some(var_22) = &input.related_findings {
        let mut array_23 = object.key("RelatedFindings").start_array();
        for item_24 in var_22 {
            {
                let mut object_25 = array_23.value().start_object();
                crate::json_ser::serialize_structure_crate_model_related_finding(
                    &mut object_25,
                    item_24,
                )?;
                object_25.finish();
            }
        }
        array_23.finish();
    }
    if let Some(var_26) = &input.severity {
        let mut object_27 = object.key("Severity").start_object();
        crate::json_ser::serialize_structure_crate_model_severity_update(&mut object_27, var_26)?;
        object_27.finish();
    }
    if let Some(var_28) = &input.types {
        let mut array_29 = object.key("Types").start_array();
        for item_30 in var_28 {
            {
                array_29.value().string(item_30.as_str());
            }
        }
        array_29.finish();
    }
    if let Some(var_31) = &input.user_defined_fields {
        let mut object_32 = object.key("UserDefinedFields").start_object();
        for (key_33, value_34) in var_31 {
            {
                object_32.key(key_33).string(value_34.as_str());
            }
        }
        object_32.finish();
    }
    if let Some(var_35) = &input.verification_state {
        object.key("VerificationState").string(var_35.as_str());
    }
    if let Some(var_36) = &input.workflow {
        let mut object_37 = object.key("Workflow").start_object();
        crate::json_ser::serialize_structure_crate_model_workflow_update(&mut object_37, var_36)?;
        object_37.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_action_target_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateActionTargetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_38) = &input.description {
        object.key("Description").string(var_38.as_str());
    }
    if let Some(var_39) = &input.id {
        object.key("Id").string(var_39.as_str());
    }
    if let Some(var_40) = &input.name {
        object.key("Name").string(var_40.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_finding_aggregator_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateFindingAggregatorInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_41) = &input.region_linking_mode {
        object.key("RegionLinkingMode").string(var_41.as_str());
    }
    if let Some(var_42) = &input.regions {
        let mut array_43 = object.key("Regions").start_array();
        for item_44 in var_42 {
            {
                array_43.value().string(item_44.as_str());
            }
        }
        array_43.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_insight_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateInsightInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_45) = &input.filters {
        let mut object_46 = object.key("Filters").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_security_finding_filters(
            &mut object_46,
            var_45,
        )?;
        object_46.finish();
    }
    if let Some(var_47) = &input.group_by_attribute {
        object.key("GroupByAttribute").string(var_47.as_str());
    }
    if let Some(var_48) = &input.name {
        object.key("Name").string(var_48.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_members_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateMembersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_49) = &input.account_details {
        let mut array_50 = object.key("AccountDetails").start_array();
        for item_51 in var_49 {
            {
                let mut object_52 = array_50.value().start_object();
                crate::json_ser::serialize_structure_crate_model_account_details(
                    &mut object_52,
                    item_51,
                )?;
                object_52.finish();
            }
        }
        array_50.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_decline_invitations_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeclineInvitationsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_53) = &input.account_ids {
        let mut array_54 = object.key("AccountIds").start_array();
        for item_55 in var_53 {
            {
                array_54.value().string(item_55.as_str());
            }
        }
        array_54.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_invitations_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteInvitationsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_56) = &input.account_ids {
        let mut array_57 = object.key("AccountIds").start_array();
        for item_58 in var_56 {
            {
                array_57.value().string(item_58.as_str());
            }
        }
        array_57.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_members_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteMembersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_59) = &input.account_ids {
        let mut array_60 = object.key("AccountIds").start_array();
        for item_61 in var_59 {
            {
                array_60.value().string(item_61.as_str());
            }
        }
        array_60.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_action_targets_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeActionTargetsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_62) = &input.action_target_arns {
        let mut array_63 = object.key("ActionTargetArns").start_array();
        for item_64 in var_62 {
            {
                array_63.value().string(item_64.as_str());
            }
        }
        array_63.finish();
    }
    if input.max_results != 0 {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_results).into()),
        );
    }
    if let Some(var_65) = &input.next_token {
        object.key("NextToken").string(var_65.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disable_organization_admin_account_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisableOrganizationAdminAccountInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_66) = &input.admin_account_id {
        object.key("AdminAccountId").string(var_66.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disassociate_members_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisassociateMembersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_67) = &input.account_ids {
        let mut array_68 = object.key("AccountIds").start_array();
        for item_69 in var_67 {
            {
                array_68.value().string(item_69.as_str());
            }
        }
        array_68.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_enable_import_findings_for_product_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::EnableImportFindingsForProductInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_70) = &input.product_arn {
        object.key("ProductArn").string(var_70.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_enable_organization_admin_account_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::EnableOrganizationAdminAccountInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_71) = &input.admin_account_id {
        object.key("AdminAccountId").string(var_71.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_enable_security_hub_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::EnableSecurityHubInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.enable_default_standards {
        object
            .key("EnableDefaultStandards")
            .boolean(input.enable_default_standards);
    }
    if let Some(var_72) = &input.tags {
        let mut object_73 = object.key("Tags").start_object();
        for (key_74, value_75) in var_72 {
            {
                object_73.key(key_74).string(value_75.as_str());
            }
        }
        object_73.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_enabled_standards_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetEnabledStandardsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.max_results != 0 {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_results).into()),
        );
    }
    if let Some(var_76) = &input.next_token {
        object.key("NextToken").string(var_76.as_str());
    }
    if let Some(var_77) = &input.standards_subscription_arns {
        let mut array_78 = object.key("StandardsSubscriptionArns").start_array();
        for item_79 in var_77 {
            {
                array_78.value().string(item_79.as_str());
            }
        }
        array_78.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_findings_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetFindingsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_80) = &input.filters {
        let mut object_81 = object.key("Filters").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_security_finding_filters(
            &mut object_81,
            var_80,
        )?;
        object_81.finish();
    }
    if input.max_results != 0 {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_results).into()),
        );
    }
    if let Some(var_82) = &input.next_token {
        object.key("NextToken").string(var_82.as_str());
    }
    if let Some(var_83) = &input.sort_criteria {
        let mut array_84 = object.key("SortCriteria").start_array();
        for item_85 in var_83 {
            {
                let mut object_86 = array_84.value().start_object();
                crate::json_ser::serialize_structure_crate_model_sort_criterion(
                    &mut object_86,
                    item_85,
                )?;
                object_86.finish();
            }
        }
        array_84.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_insights_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetInsightsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_87) = &input.insight_arns {
        let mut array_88 = object.key("InsightArns").start_array();
        for item_89 in var_87 {
            {
                array_88.value().string(item_89.as_str());
            }
        }
        array_88.finish();
    }
    if input.max_results != 0 {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_results).into()),
        );
    }
    if let Some(var_90) = &input.next_token {
        object.key("NextToken").string(var_90.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_members_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetMembersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_91) = &input.account_ids {
        let mut array_92 = object.key("AccountIds").start_array();
        for item_93 in var_91 {
            {
                array_92.value().string(item_93.as_str());
            }
        }
        array_92.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_invite_members_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::InviteMembersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_94) = &input.account_ids {
        let mut array_95 = object.key("AccountIds").start_array();
        for item_96 in var_94 {
            {
                array_95.value().string(item_96.as_str());
            }
        }
        array_95.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_97) = &input.tags {
        let mut object_98 = object.key("Tags").start_object();
        for (key_99, value_100) in var_97 {
            {
                object_98.key(key_99).string(value_100.as_str());
            }
        }
        object_98.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_action_target_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateActionTargetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_101) = &input.description {
        object.key("Description").string(var_101.as_str());
    }
    if let Some(var_102) = &input.name {
        object.key("Name").string(var_102.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_finding_aggregator_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateFindingAggregatorInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_103) = &input.finding_aggregator_arn {
        object.key("FindingAggregatorArn").string(var_103.as_str());
    }
    if let Some(var_104) = &input.region_linking_mode {
        object.key("RegionLinkingMode").string(var_104.as_str());
    }
    if let Some(var_105) = &input.regions {
        let mut array_106 = object.key("Regions").start_array();
        for item_107 in var_105 {
            {
                array_106.value().string(item_107.as_str());
            }
        }
        array_106.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_findings_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateFindingsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_108) = &input.filters {
        let mut object_109 = object.key("Filters").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_security_finding_filters(
            &mut object_109,
            var_108,
        )?;
        object_109.finish();
    }
    if let Some(var_110) = &input.note {
        let mut object_111 = object.key("Note").start_object();
        crate::json_ser::serialize_structure_crate_model_note_update(&mut object_111, var_110)?;
        object_111.finish();
    }
    if let Some(var_112) = &input.record_state {
        object.key("RecordState").string(var_112.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_insight_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateInsightInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_113) = &input.filters {
        let mut object_114 = object.key("Filters").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_security_finding_filters(
            &mut object_114,
            var_113,
        )?;
        object_114.finish();
    }
    if let Some(var_115) = &input.group_by_attribute {
        object.key("GroupByAttribute").string(var_115.as_str());
    }
    if let Some(var_116) = &input.name {
        object.key("Name").string(var_116.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_organization_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateOrganizationConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("AutoEnable").boolean(input.auto_enable);
    }
    if let Some(var_117) = &input.auto_enable_standards {
        object.key("AutoEnableStandards").string(var_117.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_security_hub_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateSecurityHubConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.auto_enable_controls {
        object
            .key("AutoEnableControls")
            .boolean(input.auto_enable_controls);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_standards_control_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateStandardsControlInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_118) = &input.control_status {
        object.key("ControlStatus").string(var_118.as_str());
    }
    if let Some(var_119) = &input.disabled_reason {
        object.key("DisabledReason").string(var_119.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_standards_subscription_request(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StandardsSubscriptionRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_120) = &input.standards_arn {
        object.key("StandardsArn").string(var_120.as_str());
    }
    if let Some(var_121) = &input.standards_input {
        let mut object_122 = object.key("StandardsInput").start_object();
        for (key_123, value_124) in var_121 {
            {
                object_122.key(key_123).string(value_124.as_str());
            }
        }
        object_122.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_security_finding(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsSecurityFinding,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_125) = &input.schema_version {
        object.key("SchemaVersion").string(var_125.as_str());
    }
    if let Some(var_126) = &input.id {
        object.key("Id").string(var_126.as_str());
    }
    if let Some(var_127) = &input.product_arn {
        object.key("ProductArn").string(var_127.as_str());
    }
    if let Some(var_128) = &input.product_name {
        object.key("ProductName").string(var_128.as_str());
    }
    if let Some(var_129) = &input.company_name {
        object.key("CompanyName").string(var_129.as_str());
    }
    if let Some(var_130) = &input.region {
        object.key("Region").string(var_130.as_str());
    }
    if let Some(var_131) = &input.generator_id {
        object.key("GeneratorId").string(var_131.as_str());
    }
    if let Some(var_132) = &input.aws_account_id {
        object.key("AwsAccountId").string(var_132.as_str());
    }
    if let Some(var_133) = &input.types {
        let mut array_134 = object.key("Types").start_array();
        for item_135 in var_133 {
            {
                array_134.value().string(item_135.as_str());
            }
        }
        array_134.finish();
    }
    if let Some(var_136) = &input.first_observed_at {
        object.key("FirstObservedAt").string(var_136.as_str());
    }
    if let Some(var_137) = &input.last_observed_at {
        object.key("LastObservedAt").string(var_137.as_str());
    }
    if let Some(var_138) = &input.created_at {
        object.key("CreatedAt").string(var_138.as_str());
    }
    if let Some(var_139) = &input.updated_at {
        object.key("UpdatedAt").string(var_139.as_str());
    }
    if let Some(var_140) = &input.severity {
        let mut object_141 = object.key("Severity").start_object();
        crate::json_ser::serialize_structure_crate_model_severity(&mut object_141, var_140)?;
        object_141.finish();
    }
    if input.confidence != 0 {
        object.key("Confidence").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.confidence).into()),
        );
    }
    if input.criticality != 0 {
        object.key("Criticality").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.criticality).into()),
        );
    }
    if let Some(var_142) = &input.title {
        object.key("Title").string(var_142.as_str());
    }
    if let Some(var_143) = &input.description {
        object.key("Description").string(var_143.as_str());
    }
    if let Some(var_144) = &input.remediation {
        let mut object_145 = object.key("Remediation").start_object();
        crate::json_ser::serialize_structure_crate_model_remediation(&mut object_145, var_144)?;
        object_145.finish();
    }
    if let Some(var_146) = &input.source_url {
        object.key("SourceUrl").string(var_146.as_str());
    }
    if let Some(var_147) = &input.product_fields {
        let mut object_148 = object.key("ProductFields").start_object();
        for (key_149, value_150) in var_147 {
            {
                object_148.key(key_149).string(value_150.as_str());
            }
        }
        object_148.finish();
    }
    if let Some(var_151) = &input.user_defined_fields {
        let mut object_152 = object.key("UserDefinedFields").start_object();
        for (key_153, value_154) in var_151 {
            {
                object_152.key(key_153).string(value_154.as_str());
            }
        }
        object_152.finish();
    }
    if let Some(var_155) = &input.malware {
        let mut array_156 = object.key("Malware").start_array();
        for item_157 in var_155 {
            {
                let mut object_158 = array_156.value().start_object();
                crate::json_ser::serialize_structure_crate_model_malware(
                    &mut object_158,
                    item_157,
                )?;
                object_158.finish();
            }
        }
        array_156.finish();
    }
    if let Some(var_159) = &input.network {
        let mut object_160 = object.key("Network").start_object();
        crate::json_ser::serialize_structure_crate_model_network(&mut object_160, var_159)?;
        object_160.finish();
    }
    if let Some(var_161) = &input.network_path {
        let mut array_162 = object.key("NetworkPath").start_array();
        for item_163 in var_161 {
            {
                let mut object_164 = array_162.value().start_object();
                crate::json_ser::serialize_structure_crate_model_network_path_component(
                    &mut object_164,
                    item_163,
                )?;
                object_164.finish();
            }
        }
        array_162.finish();
    }
    if let Some(var_165) = &input.process {
        let mut object_166 = object.key("Process").start_object();
        crate::json_ser::serialize_structure_crate_model_process_details(&mut object_166, var_165)?;
        object_166.finish();
    }
    if let Some(var_167) = &input.threats {
        let mut array_168 = object.key("Threats").start_array();
        for item_169 in var_167 {
            {
                let mut object_170 = array_168.value().start_object();
                crate::json_ser::serialize_structure_crate_model_threat(&mut object_170, item_169)?;
                object_170.finish();
            }
        }
        array_168.finish();
    }
    if let Some(var_171) = &input.threat_intel_indicators {
        let mut array_172 = object.key("ThreatIntelIndicators").start_array();
        for item_173 in var_171 {
            {
                let mut object_174 = array_172.value().start_object();
                crate::json_ser::serialize_structure_crate_model_threat_intel_indicator(
                    &mut object_174,
                    item_173,
                )?;
                object_174.finish();
            }
        }
        array_172.finish();
    }
    if let Some(var_175) = &input.resources {
        let mut array_176 = object.key("Resources").start_array();
        for item_177 in var_175 {
            {
                let mut object_178 = array_176.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource(
                    &mut object_178,
                    item_177,
                )?;
                object_178.finish();
            }
        }
        array_176.finish();
    }
    if let Some(var_179) = &input.compliance {
        let mut object_180 = object.key("Compliance").start_object();
        crate::json_ser::serialize_structure_crate_model_compliance(&mut object_180, var_179)?;
        object_180.finish();
    }
    if let Some(var_181) = &input.verification_state {
        object.key("VerificationState").string(var_181.as_str());
    }
    if let Some(var_182) = &input.workflow_state {
        object.key("WorkflowState").string(var_182.as_str());
    }
    if let Some(var_183) = &input.workflow {
        let mut object_184 = object.key("Workflow").start_object();
        crate::json_ser::serialize_structure_crate_model_workflow(&mut object_184, var_183)?;
        object_184.finish();
    }
    if let Some(var_185) = &input.record_state {
        object.key("RecordState").string(var_185.as_str());
    }
    if let Some(var_186) = &input.related_findings {
        let mut array_187 = object.key("RelatedFindings").start_array();
        for item_188 in var_186 {
            {
                let mut object_189 = array_187.value().start_object();
                crate::json_ser::serialize_structure_crate_model_related_finding(
                    &mut object_189,
                    item_188,
                )?;
                object_189.finish();
            }
        }
        array_187.finish();
    }
    if let Some(var_190) = &input.note {
        let mut object_191 = object.key("Note").start_object();
        crate::json_ser::serialize_structure_crate_model_note(&mut object_191, var_190)?;
        object_191.finish();
    }
    if let Some(var_192) = &input.vulnerabilities {
        let mut array_193 = object.key("Vulnerabilities").start_array();
        for item_194 in var_192 {
            {
                let mut object_195 = array_193.value().start_object();
                crate::json_ser::serialize_structure_crate_model_vulnerability(
                    &mut object_195,
                    item_194,
                )?;
                object_195.finish();
            }
        }
        array_193.finish();
    }
    if let Some(var_196) = &input.patch_summary {
        let mut object_197 = object.key("PatchSummary").start_object();
        crate::json_ser::serialize_structure_crate_model_patch_summary(&mut object_197, var_196)?;
        object_197.finish();
    }
    if let Some(var_198) = &input.action {
        let mut object_199 = object.key("Action").start_object();
        crate::json_ser::serialize_structure_crate_model_action(&mut object_199, var_198)?;
        object_199.finish();
    }
    if let Some(var_200) = &input.finding_provider_fields {
        let mut object_201 = object.key("FindingProviderFields").start_object();
        crate::json_ser::serialize_structure_crate_model_finding_provider_fields(
            &mut object_201,
            var_200,
        )?;
        object_201.finish();
    }
    if input.sample {
        object.key("Sample").boolean(input.sample);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_security_finding_identifier(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsSecurityFindingIdentifier,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_202) = &input.id {
        object.key("Id").string(var_202.as_str());
    }
    if let Some(var_203) = &input.product_arn {
        object.key("ProductArn").string(var_203.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_note_update(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NoteUpdate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_204) = &input.text {
        object.key("Text").string(var_204.as_str());
    }
    if let Some(var_205) = &input.updated_by {
        object.key("UpdatedBy").string(var_205.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_related_finding(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RelatedFinding,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_206) = &input.product_arn {
        object.key("ProductArn").string(var_206.as_str());
    }
    if let Some(var_207) = &input.id {
        object.key("Id").string(var_207.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_severity_update(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SeverityUpdate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.normalized != 0 {
        object.key("Normalized").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.normalized).into()),
        );
    }
    if input.product != 0.0 {
        object.key("Product").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((input.product).into()),
        );
    }
    if let Some(var_208) = &input.label {
        object.key("Label").string(var_208.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_workflow_update(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::WorkflowUpdate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_209) = &input.status {
        object.key("Status").string(var_209.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_security_finding_filters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsSecurityFindingFilters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_210) = &input.product_arn {
        let mut array_211 = object.key("ProductArn").start_array();
        for item_212 in var_210 {
            {
                let mut object_213 = array_211.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_213,
                    item_212,
                )?;
                object_213.finish();
            }
        }
        array_211.finish();
    }
    if let Some(var_214) = &input.aws_account_id {
        let mut array_215 = object.key("AwsAccountId").start_array();
        for item_216 in var_214 {
            {
                let mut object_217 = array_215.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_217,
                    item_216,
                )?;
                object_217.finish();
            }
        }
        array_215.finish();
    }
    if let Some(var_218) = &input.id {
        let mut array_219 = object.key("Id").start_array();
        for item_220 in var_218 {
            {
                let mut object_221 = array_219.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_221,
                    item_220,
                )?;
                object_221.finish();
            }
        }
        array_219.finish();
    }
    if let Some(var_222) = &input.generator_id {
        let mut array_223 = object.key("GeneratorId").start_array();
        for item_224 in var_222 {
            {
                let mut object_225 = array_223.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_225,
                    item_224,
                )?;
                object_225.finish();
            }
        }
        array_223.finish();
    }
    if let Some(var_226) = &input.region {
        let mut array_227 = object.key("Region").start_array();
        for item_228 in var_226 {
            {
                let mut object_229 = array_227.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_229,
                    item_228,
                )?;
                object_229.finish();
            }
        }
        array_227.finish();
    }
    if let Some(var_230) = &input.r#type {
        let mut array_231 = object.key("Type").start_array();
        for item_232 in var_230 {
            {
                let mut object_233 = array_231.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_233,
                    item_232,
                )?;
                object_233.finish();
            }
        }
        array_231.finish();
    }
    if let Some(var_234) = &input.first_observed_at {
        let mut array_235 = object.key("FirstObservedAt").start_array();
        for item_236 in var_234 {
            {
                let mut object_237 = array_235.value().start_object();
                crate::json_ser::serialize_structure_crate_model_date_filter(
                    &mut object_237,
                    item_236,
                )?;
                object_237.finish();
            }
        }
        array_235.finish();
    }
    if let Some(var_238) = &input.last_observed_at {
        let mut array_239 = object.key("LastObservedAt").start_array();
        for item_240 in var_238 {
            {
                let mut object_241 = array_239.value().start_object();
                crate::json_ser::serialize_structure_crate_model_date_filter(
                    &mut object_241,
                    item_240,
                )?;
                object_241.finish();
            }
        }
        array_239.finish();
    }
    if let Some(var_242) = &input.created_at {
        let mut array_243 = object.key("CreatedAt").start_array();
        for item_244 in var_242 {
            {
                let mut object_245 = array_243.value().start_object();
                crate::json_ser::serialize_structure_crate_model_date_filter(
                    &mut object_245,
                    item_244,
                )?;
                object_245.finish();
            }
        }
        array_243.finish();
    }
    if let Some(var_246) = &input.updated_at {
        let mut array_247 = object.key("UpdatedAt").start_array();
        for item_248 in var_246 {
            {
                let mut object_249 = array_247.value().start_object();
                crate::json_ser::serialize_structure_crate_model_date_filter(
                    &mut object_249,
                    item_248,
                )?;
                object_249.finish();
            }
        }
        array_247.finish();
    }
    if let Some(var_250) = &input.severity_product {
        let mut array_251 = object.key("SeverityProduct").start_array();
        for item_252 in var_250 {
            {
                let mut object_253 = array_251.value().start_object();
                crate::json_ser::serialize_structure_crate_model_number_filter(
                    &mut object_253,
                    item_252,
                )?;
                object_253.finish();
            }
        }
        array_251.finish();
    }
    if let Some(var_254) = &input.severity_normalized {
        let mut array_255 = object.key("SeverityNormalized").start_array();
        for item_256 in var_254 {
            {
                let mut object_257 = array_255.value().start_object();
                crate::json_ser::serialize_structure_crate_model_number_filter(
                    &mut object_257,
                    item_256,
                )?;
                object_257.finish();
            }
        }
        array_255.finish();
    }
    if let Some(var_258) = &input.severity_label {
        let mut array_259 = object.key("SeverityLabel").start_array();
        for item_260 in var_258 {
            {
                let mut object_261 = array_259.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_261,
                    item_260,
                )?;
                object_261.finish();
            }
        }
        array_259.finish();
    }
    if let Some(var_262) = &input.confidence {
        let mut array_263 = object.key("Confidence").start_array();
        for item_264 in var_262 {
            {
                let mut object_265 = array_263.value().start_object();
                crate::json_ser::serialize_structure_crate_model_number_filter(
                    &mut object_265,
                    item_264,
                )?;
                object_265.finish();
            }
        }
        array_263.finish();
    }
    if let Some(var_266) = &input.criticality {
        let mut array_267 = object.key("Criticality").start_array();
        for item_268 in var_266 {
            {
                let mut object_269 = array_267.value().start_object();
                crate::json_ser::serialize_structure_crate_model_number_filter(
                    &mut object_269,
                    item_268,
                )?;
                object_269.finish();
            }
        }
        array_267.finish();
    }
    if let Some(var_270) = &input.title {
        let mut array_271 = object.key("Title").start_array();
        for item_272 in var_270 {
            {
                let mut object_273 = array_271.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_273,
                    item_272,
                )?;
                object_273.finish();
            }
        }
        array_271.finish();
    }
    if let Some(var_274) = &input.description {
        let mut array_275 = object.key("Description").start_array();
        for item_276 in var_274 {
            {
                let mut object_277 = array_275.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_277,
                    item_276,
                )?;
                object_277.finish();
            }
        }
        array_275.finish();
    }
    if let Some(var_278) = &input.recommendation_text {
        let mut array_279 = object.key("RecommendationText").start_array();
        for item_280 in var_278 {
            {
                let mut object_281 = array_279.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_281,
                    item_280,
                )?;
                object_281.finish();
            }
        }
        array_279.finish();
    }
    if let Some(var_282) = &input.source_url {
        let mut array_283 = object.key("SourceUrl").start_array();
        for item_284 in var_282 {
            {
                let mut object_285 = array_283.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_285,
                    item_284,
                )?;
                object_285.finish();
            }
        }
        array_283.finish();
    }
    if let Some(var_286) = &input.product_fields {
        let mut array_287 = object.key("ProductFields").start_array();
        for item_288 in var_286 {
            {
                let mut object_289 = array_287.value().start_object();
                crate::json_ser::serialize_structure_crate_model_map_filter(
                    &mut object_289,
                    item_288,
                )?;
                object_289.finish();
            }
        }
        array_287.finish();
    }
    if let Some(var_290) = &input.product_name {
        let mut array_291 = object.key("ProductName").start_array();
        for item_292 in var_290 {
            {
                let mut object_293 = array_291.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_293,
                    item_292,
                )?;
                object_293.finish();
            }
        }
        array_291.finish();
    }
    if let Some(var_294) = &input.company_name {
        let mut array_295 = object.key("CompanyName").start_array();
        for item_296 in var_294 {
            {
                let mut object_297 = array_295.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_297,
                    item_296,
                )?;
                object_297.finish();
            }
        }
        array_295.finish();
    }
    if let Some(var_298) = &input.user_defined_fields {
        let mut array_299 = object.key("UserDefinedFields").start_array();
        for item_300 in var_298 {
            {
                let mut object_301 = array_299.value().start_object();
                crate::json_ser::serialize_structure_crate_model_map_filter(
                    &mut object_301,
                    item_300,
                )?;
                object_301.finish();
            }
        }
        array_299.finish();
    }
    if let Some(var_302) = &input.malware_name {
        let mut array_303 = object.key("MalwareName").start_array();
        for item_304 in var_302 {
            {
                let mut object_305 = array_303.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_305,
                    item_304,
                )?;
                object_305.finish();
            }
        }
        array_303.finish();
    }
    if let Some(var_306) = &input.malware_type {
        let mut array_307 = object.key("MalwareType").start_array();
        for item_308 in var_306 {
            {
                let mut object_309 = array_307.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_309,
                    item_308,
                )?;
                object_309.finish();
            }
        }
        array_307.finish();
    }
    if let Some(var_310) = &input.malware_path {
        let mut array_311 = object.key("MalwarePath").start_array();
        for item_312 in var_310 {
            {
                let mut object_313 = array_311.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_313,
                    item_312,
                )?;
                object_313.finish();
            }
        }
        array_311.finish();
    }
    if let Some(var_314) = &input.malware_state {
        let mut array_315 = object.key("MalwareState").start_array();
        for item_316 in var_314 {
            {
                let mut object_317 = array_315.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_317,
                    item_316,
                )?;
                object_317.finish();
            }
        }
        array_315.finish();
    }
    if let Some(var_318) = &input.network_direction {
        let mut array_319 = object.key("NetworkDirection").start_array();
        for item_320 in var_318 {
            {
                let mut object_321 = array_319.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_321,
                    item_320,
                )?;
                object_321.finish();
            }
        }
        array_319.finish();
    }
    if let Some(var_322) = &input.network_protocol {
        let mut array_323 = object.key("NetworkProtocol").start_array();
        for item_324 in var_322 {
            {
                let mut object_325 = array_323.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_325,
                    item_324,
                )?;
                object_325.finish();
            }
        }
        array_323.finish();
    }
    if let Some(var_326) = &input.network_source_ip_v4 {
        let mut array_327 = object.key("NetworkSourceIpV4").start_array();
        for item_328 in var_326 {
            {
                let mut object_329 = array_327.value().start_object();
                crate::json_ser::serialize_structure_crate_model_ip_filter(
                    &mut object_329,
                    item_328,
                )?;
                object_329.finish();
            }
        }
        array_327.finish();
    }
    if let Some(var_330) = &input.network_source_ip_v6 {
        let mut array_331 = object.key("NetworkSourceIpV6").start_array();
        for item_332 in var_330 {
            {
                let mut object_333 = array_331.value().start_object();
                crate::json_ser::serialize_structure_crate_model_ip_filter(
                    &mut object_333,
                    item_332,
                )?;
                object_333.finish();
            }
        }
        array_331.finish();
    }
    if let Some(var_334) = &input.network_source_port {
        let mut array_335 = object.key("NetworkSourcePort").start_array();
        for item_336 in var_334 {
            {
                let mut object_337 = array_335.value().start_object();
                crate::json_ser::serialize_structure_crate_model_number_filter(
                    &mut object_337,
                    item_336,
                )?;
                object_337.finish();
            }
        }
        array_335.finish();
    }
    if let Some(var_338) = &input.network_source_domain {
        let mut array_339 = object.key("NetworkSourceDomain").start_array();
        for item_340 in var_338 {
            {
                let mut object_341 = array_339.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_341,
                    item_340,
                )?;
                object_341.finish();
            }
        }
        array_339.finish();
    }
    if let Some(var_342) = &input.network_source_mac {
        let mut array_343 = object.key("NetworkSourceMac").start_array();
        for item_344 in var_342 {
            {
                let mut object_345 = array_343.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_345,
                    item_344,
                )?;
                object_345.finish();
            }
        }
        array_343.finish();
    }
    if let Some(var_346) = &input.network_destination_ip_v4 {
        let mut array_347 = object.key("NetworkDestinationIpV4").start_array();
        for item_348 in var_346 {
            {
                let mut object_349 = array_347.value().start_object();
                crate::json_ser::serialize_structure_crate_model_ip_filter(
                    &mut object_349,
                    item_348,
                )?;
                object_349.finish();
            }
        }
        array_347.finish();
    }
    if let Some(var_350) = &input.network_destination_ip_v6 {
        let mut array_351 = object.key("NetworkDestinationIpV6").start_array();
        for item_352 in var_350 {
            {
                let mut object_353 = array_351.value().start_object();
                crate::json_ser::serialize_structure_crate_model_ip_filter(
                    &mut object_353,
                    item_352,
                )?;
                object_353.finish();
            }
        }
        array_351.finish();
    }
    if let Some(var_354) = &input.network_destination_port {
        let mut array_355 = object.key("NetworkDestinationPort").start_array();
        for item_356 in var_354 {
            {
                let mut object_357 = array_355.value().start_object();
                crate::json_ser::serialize_structure_crate_model_number_filter(
                    &mut object_357,
                    item_356,
                )?;
                object_357.finish();
            }
        }
        array_355.finish();
    }
    if let Some(var_358) = &input.network_destination_domain {
        let mut array_359 = object.key("NetworkDestinationDomain").start_array();
        for item_360 in var_358 {
            {
                let mut object_361 = array_359.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_361,
                    item_360,
                )?;
                object_361.finish();
            }
        }
        array_359.finish();
    }
    if let Some(var_362) = &input.process_name {
        let mut array_363 = object.key("ProcessName").start_array();
        for item_364 in var_362 {
            {
                let mut object_365 = array_363.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_365,
                    item_364,
                )?;
                object_365.finish();
            }
        }
        array_363.finish();
    }
    if let Some(var_366) = &input.process_path {
        let mut array_367 = object.key("ProcessPath").start_array();
        for item_368 in var_366 {
            {
                let mut object_369 = array_367.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_369,
                    item_368,
                )?;
                object_369.finish();
            }
        }
        array_367.finish();
    }
    if let Some(var_370) = &input.process_pid {
        let mut array_371 = object.key("ProcessPid").start_array();
        for item_372 in var_370 {
            {
                let mut object_373 = array_371.value().start_object();
                crate::json_ser::serialize_structure_crate_model_number_filter(
                    &mut object_373,
                    item_372,
                )?;
                object_373.finish();
            }
        }
        array_371.finish();
    }
    if let Some(var_374) = &input.process_parent_pid {
        let mut array_375 = object.key("ProcessParentPid").start_array();
        for item_376 in var_374 {
            {
                let mut object_377 = array_375.value().start_object();
                crate::json_ser::serialize_structure_crate_model_number_filter(
                    &mut object_377,
                    item_376,
                )?;
                object_377.finish();
            }
        }
        array_375.finish();
    }
    if let Some(var_378) = &input.process_launched_at {
        let mut array_379 = object.key("ProcessLaunchedAt").start_array();
        for item_380 in var_378 {
            {
                let mut object_381 = array_379.value().start_object();
                crate::json_ser::serialize_structure_crate_model_date_filter(
                    &mut object_381,
                    item_380,
                )?;
                object_381.finish();
            }
        }
        array_379.finish();
    }
    if let Some(var_382) = &input.process_terminated_at {
        let mut array_383 = object.key("ProcessTerminatedAt").start_array();
        for item_384 in var_382 {
            {
                let mut object_385 = array_383.value().start_object();
                crate::json_ser::serialize_structure_crate_model_date_filter(
                    &mut object_385,
                    item_384,
                )?;
                object_385.finish();
            }
        }
        array_383.finish();
    }
    if let Some(var_386) = &input.threat_intel_indicator_type {
        let mut array_387 = object.key("ThreatIntelIndicatorType").start_array();
        for item_388 in var_386 {
            {
                let mut object_389 = array_387.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_389,
                    item_388,
                )?;
                object_389.finish();
            }
        }
        array_387.finish();
    }
    if let Some(var_390) = &input.threat_intel_indicator_value {
        let mut array_391 = object.key("ThreatIntelIndicatorValue").start_array();
        for item_392 in var_390 {
            {
                let mut object_393 = array_391.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_393,
                    item_392,
                )?;
                object_393.finish();
            }
        }
        array_391.finish();
    }
    if let Some(var_394) = &input.threat_intel_indicator_category {
        let mut array_395 = object.key("ThreatIntelIndicatorCategory").start_array();
        for item_396 in var_394 {
            {
                let mut object_397 = array_395.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_397,
                    item_396,
                )?;
                object_397.finish();
            }
        }
        array_395.finish();
    }
    if let Some(var_398) = &input.threat_intel_indicator_last_observed_at {
        let mut array_399 = object
            .key("ThreatIntelIndicatorLastObservedAt")
            .start_array();
        for item_400 in var_398 {
            {
                let mut object_401 = array_399.value().start_object();
                crate::json_ser::serialize_structure_crate_model_date_filter(
                    &mut object_401,
                    item_400,
                )?;
                object_401.finish();
            }
        }
        array_399.finish();
    }
    if let Some(var_402) = &input.threat_intel_indicator_source {
        let mut array_403 = object.key("ThreatIntelIndicatorSource").start_array();
        for item_404 in var_402 {
            {
                let mut object_405 = array_403.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_405,
                    item_404,
                )?;
                object_405.finish();
            }
        }
        array_403.finish();
    }
    if let Some(var_406) = &input.threat_intel_indicator_source_url {
        let mut array_407 = object.key("ThreatIntelIndicatorSourceUrl").start_array();
        for item_408 in var_406 {
            {
                let mut object_409 = array_407.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_409,
                    item_408,
                )?;
                object_409.finish();
            }
        }
        array_407.finish();
    }
    if let Some(var_410) = &input.resource_type {
        let mut array_411 = object.key("ResourceType").start_array();
        for item_412 in var_410 {
            {
                let mut object_413 = array_411.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_413,
                    item_412,
                )?;
                object_413.finish();
            }
        }
        array_411.finish();
    }
    if let Some(var_414) = &input.resource_id {
        let mut array_415 = object.key("ResourceId").start_array();
        for item_416 in var_414 {
            {
                let mut object_417 = array_415.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_417,
                    item_416,
                )?;
                object_417.finish();
            }
        }
        array_415.finish();
    }
    if let Some(var_418) = &input.resource_partition {
        let mut array_419 = object.key("ResourcePartition").start_array();
        for item_420 in var_418 {
            {
                let mut object_421 = array_419.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_421,
                    item_420,
                )?;
                object_421.finish();
            }
        }
        array_419.finish();
    }
    if let Some(var_422) = &input.resource_region {
        let mut array_423 = object.key("ResourceRegion").start_array();
        for item_424 in var_422 {
            {
                let mut object_425 = array_423.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_425,
                    item_424,
                )?;
                object_425.finish();
            }
        }
        array_423.finish();
    }
    if let Some(var_426) = &input.resource_tags {
        let mut array_427 = object.key("ResourceTags").start_array();
        for item_428 in var_426 {
            {
                let mut object_429 = array_427.value().start_object();
                crate::json_ser::serialize_structure_crate_model_map_filter(
                    &mut object_429,
                    item_428,
                )?;
                object_429.finish();
            }
        }
        array_427.finish();
    }
    if let Some(var_430) = &input.resource_aws_ec2_instance_type {
        let mut array_431 = object.key("ResourceAwsEc2InstanceType").start_array();
        for item_432 in var_430 {
            {
                let mut object_433 = array_431.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_433,
                    item_432,
                )?;
                object_433.finish();
            }
        }
        array_431.finish();
    }
    if let Some(var_434) = &input.resource_aws_ec2_instance_image_id {
        let mut array_435 = object.key("ResourceAwsEc2InstanceImageId").start_array();
        for item_436 in var_434 {
            {
                let mut object_437 = array_435.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_437,
                    item_436,
                )?;
                object_437.finish();
            }
        }
        array_435.finish();
    }
    if let Some(var_438) = &input.resource_aws_ec2_instance_ip_v4_addresses {
        let mut array_439 = object
            .key("ResourceAwsEc2InstanceIpV4Addresses")
            .start_array();
        for item_440 in var_438 {
            {
                let mut object_441 = array_439.value().start_object();
                crate::json_ser::serialize_structure_crate_model_ip_filter(
                    &mut object_441,
                    item_440,
                )?;
                object_441.finish();
            }
        }
        array_439.finish();
    }
    if let Some(var_442) = &input.resource_aws_ec2_instance_ip_v6_addresses {
        let mut array_443 = object
            .key("ResourceAwsEc2InstanceIpV6Addresses")
            .start_array();
        for item_444 in var_442 {
            {
                let mut object_445 = array_443.value().start_object();
                crate::json_ser::serialize_structure_crate_model_ip_filter(
                    &mut object_445,
                    item_444,
                )?;
                object_445.finish();
            }
        }
        array_443.finish();
    }
    if let Some(var_446) = &input.resource_aws_ec2_instance_key_name {
        let mut array_447 = object.key("ResourceAwsEc2InstanceKeyName").start_array();
        for item_448 in var_446 {
            {
                let mut object_449 = array_447.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_449,
                    item_448,
                )?;
                object_449.finish();
            }
        }
        array_447.finish();
    }
    if let Some(var_450) = &input.resource_aws_ec2_instance_iam_instance_profile_arn {
        let mut array_451 = object
            .key("ResourceAwsEc2InstanceIamInstanceProfileArn")
            .start_array();
        for item_452 in var_450 {
            {
                let mut object_453 = array_451.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_453,
                    item_452,
                )?;
                object_453.finish();
            }
        }
        array_451.finish();
    }
    if let Some(var_454) = &input.resource_aws_ec2_instance_vpc_id {
        let mut array_455 = object.key("ResourceAwsEc2InstanceVpcId").start_array();
        for item_456 in var_454 {
            {
                let mut object_457 = array_455.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_457,
                    item_456,
                )?;
                object_457.finish();
            }
        }
        array_455.finish();
    }
    if let Some(var_458) = &input.resource_aws_ec2_instance_subnet_id {
        let mut array_459 = object.key("ResourceAwsEc2InstanceSubnetId").start_array();
        for item_460 in var_458 {
            {
                let mut object_461 = array_459.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_461,
                    item_460,
                )?;
                object_461.finish();
            }
        }
        array_459.finish();
    }
    if let Some(var_462) = &input.resource_aws_ec2_instance_launched_at {
        let mut array_463 = object.key("ResourceAwsEc2InstanceLaunchedAt").start_array();
        for item_464 in var_462 {
            {
                let mut object_465 = array_463.value().start_object();
                crate::json_ser::serialize_structure_crate_model_date_filter(
                    &mut object_465,
                    item_464,
                )?;
                object_465.finish();
            }
        }
        array_463.finish();
    }
    if let Some(var_466) = &input.resource_aws_s3_bucket_owner_id {
        let mut array_467 = object.key("ResourceAwsS3BucketOwnerId").start_array();
        for item_468 in var_466 {
            {
                let mut object_469 = array_467.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_469,
                    item_468,
                )?;
                object_469.finish();
            }
        }
        array_467.finish();
    }
    if let Some(var_470) = &input.resource_aws_s3_bucket_owner_name {
        let mut array_471 = object.key("ResourceAwsS3BucketOwnerName").start_array();
        for item_472 in var_470 {
            {
                let mut object_473 = array_471.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_473,
                    item_472,
                )?;
                object_473.finish();
            }
        }
        array_471.finish();
    }
    if let Some(var_474) = &input.resource_aws_iam_access_key_user_name {
        let mut array_475 = object.key("ResourceAwsIamAccessKeyUserName").start_array();
        for item_476 in var_474 {
            {
                let mut object_477 = array_475.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_477,
                    item_476,
                )?;
                object_477.finish();
            }
        }
        array_475.finish();
    }
    if let Some(var_478) = &input.resource_aws_iam_access_key_principal_name {
        let mut array_479 = object
            .key("ResourceAwsIamAccessKeyPrincipalName")
            .start_array();
        for item_480 in var_478 {
            {
                let mut object_481 = array_479.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_481,
                    item_480,
                )?;
                object_481.finish();
            }
        }
        array_479.finish();
    }
    if let Some(var_482) = &input.resource_aws_iam_access_key_status {
        let mut array_483 = object.key("ResourceAwsIamAccessKeyStatus").start_array();
        for item_484 in var_482 {
            {
                let mut object_485 = array_483.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_485,
                    item_484,
                )?;
                object_485.finish();
            }
        }
        array_483.finish();
    }
    if let Some(var_486) = &input.resource_aws_iam_access_key_created_at {
        let mut array_487 = object.key("ResourceAwsIamAccessKeyCreatedAt").start_array();
        for item_488 in var_486 {
            {
                let mut object_489 = array_487.value().start_object();
                crate::json_ser::serialize_structure_crate_model_date_filter(
                    &mut object_489,
                    item_488,
                )?;
                object_489.finish();
            }
        }
        array_487.finish();
    }
    if let Some(var_490) = &input.resource_aws_iam_user_user_name {
        let mut array_491 = object.key("ResourceAwsIamUserUserName").start_array();
        for item_492 in var_490 {
            {
                let mut object_493 = array_491.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_493,
                    item_492,
                )?;
                object_493.finish();
            }
        }
        array_491.finish();
    }
    if let Some(var_494) = &input.resource_container_name {
        let mut array_495 = object.key("ResourceContainerName").start_array();
        for item_496 in var_494 {
            {
                let mut object_497 = array_495.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_497,
                    item_496,
                )?;
                object_497.finish();
            }
        }
        array_495.finish();
    }
    if let Some(var_498) = &input.resource_container_image_id {
        let mut array_499 = object.key("ResourceContainerImageId").start_array();
        for item_500 in var_498 {
            {
                let mut object_501 = array_499.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_501,
                    item_500,
                )?;
                object_501.finish();
            }
        }
        array_499.finish();
    }
    if let Some(var_502) = &input.resource_container_image_name {
        let mut array_503 = object.key("ResourceContainerImageName").start_array();
        for item_504 in var_502 {
            {
                let mut object_505 = array_503.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_505,
                    item_504,
                )?;
                object_505.finish();
            }
        }
        array_503.finish();
    }
    if let Some(var_506) = &input.resource_container_launched_at {
        let mut array_507 = object.key("ResourceContainerLaunchedAt").start_array();
        for item_508 in var_506 {
            {
                let mut object_509 = array_507.value().start_object();
                crate::json_ser::serialize_structure_crate_model_date_filter(
                    &mut object_509,
                    item_508,
                )?;
                object_509.finish();
            }
        }
        array_507.finish();
    }
    if let Some(var_510) = &input.resource_details_other {
        let mut array_511 = object.key("ResourceDetailsOther").start_array();
        for item_512 in var_510 {
            {
                let mut object_513 = array_511.value().start_object();
                crate::json_ser::serialize_structure_crate_model_map_filter(
                    &mut object_513,
                    item_512,
                )?;
                object_513.finish();
            }
        }
        array_511.finish();
    }
    if let Some(var_514) = &input.compliance_status {
        let mut array_515 = object.key("ComplianceStatus").start_array();
        for item_516 in var_514 {
            {
                let mut object_517 = array_515.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_517,
                    item_516,
                )?;
                object_517.finish();
            }
        }
        array_515.finish();
    }
    if let Some(var_518) = &input.verification_state {
        let mut array_519 = object.key("VerificationState").start_array();
        for item_520 in var_518 {
            {
                let mut object_521 = array_519.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_521,
                    item_520,
                )?;
                object_521.finish();
            }
        }
        array_519.finish();
    }
    if let Some(var_522) = &input.workflow_state {
        let mut array_523 = object.key("WorkflowState").start_array();
        for item_524 in var_522 {
            {
                let mut object_525 = array_523.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_525,
                    item_524,
                )?;
                object_525.finish();
            }
        }
        array_523.finish();
    }
    if let Some(var_526) = &input.workflow_status {
        let mut array_527 = object.key("WorkflowStatus").start_array();
        for item_528 in var_526 {
            {
                let mut object_529 = array_527.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_529,
                    item_528,
                )?;
                object_529.finish();
            }
        }
        array_527.finish();
    }
    if let Some(var_530) = &input.record_state {
        let mut array_531 = object.key("RecordState").start_array();
        for item_532 in var_530 {
            {
                let mut object_533 = array_531.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_533,
                    item_532,
                )?;
                object_533.finish();
            }
        }
        array_531.finish();
    }
    if let Some(var_534) = &input.related_findings_product_arn {
        let mut array_535 = object.key("RelatedFindingsProductArn").start_array();
        for item_536 in var_534 {
            {
                let mut object_537 = array_535.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_537,
                    item_536,
                )?;
                object_537.finish();
            }
        }
        array_535.finish();
    }
    if let Some(var_538) = &input.related_findings_id {
        let mut array_539 = object.key("RelatedFindingsId").start_array();
        for item_540 in var_538 {
            {
                let mut object_541 = array_539.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_541,
                    item_540,
                )?;
                object_541.finish();
            }
        }
        array_539.finish();
    }
    if let Some(var_542) = &input.note_text {
        let mut array_543 = object.key("NoteText").start_array();
        for item_544 in var_542 {
            {
                let mut object_545 = array_543.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_545,
                    item_544,
                )?;
                object_545.finish();
            }
        }
        array_543.finish();
    }
    if let Some(var_546) = &input.note_updated_at {
        let mut array_547 = object.key("NoteUpdatedAt").start_array();
        for item_548 in var_546 {
            {
                let mut object_549 = array_547.value().start_object();
                crate::json_ser::serialize_structure_crate_model_date_filter(
                    &mut object_549,
                    item_548,
                )?;
                object_549.finish();
            }
        }
        array_547.finish();
    }
    if let Some(var_550) = &input.note_updated_by {
        let mut array_551 = object.key("NoteUpdatedBy").start_array();
        for item_552 in var_550 {
            {
                let mut object_553 = array_551.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_553,
                    item_552,
                )?;
                object_553.finish();
            }
        }
        array_551.finish();
    }
    if let Some(var_554) = &input.keyword {
        let mut array_555 = object.key("Keyword").start_array();
        for item_556 in var_554 {
            {
                let mut object_557 = array_555.value().start_object();
                crate::json_ser::serialize_structure_crate_model_keyword_filter(
                    &mut object_557,
                    item_556,
                )?;
                object_557.finish();
            }
        }
        array_555.finish();
    }
    if let Some(var_558) = &input.finding_provider_fields_confidence {
        let mut array_559 = object.key("FindingProviderFieldsConfidence").start_array();
        for item_560 in var_558 {
            {
                let mut object_561 = array_559.value().start_object();
                crate::json_ser::serialize_structure_crate_model_number_filter(
                    &mut object_561,
                    item_560,
                )?;
                object_561.finish();
            }
        }
        array_559.finish();
    }
    if let Some(var_562) = &input.finding_provider_fields_criticality {
        let mut array_563 = object.key("FindingProviderFieldsCriticality").start_array();
        for item_564 in var_562 {
            {
                let mut object_565 = array_563.value().start_object();
                crate::json_ser::serialize_structure_crate_model_number_filter(
                    &mut object_565,
                    item_564,
                )?;
                object_565.finish();
            }
        }
        array_563.finish();
    }
    if let Some(var_566) = &input.finding_provider_fields_related_findings_id {
        let mut array_567 = object
            .key("FindingProviderFieldsRelatedFindingsId")
            .start_array();
        for item_568 in var_566 {
            {
                let mut object_569 = array_567.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_569,
                    item_568,
                )?;
                object_569.finish();
            }
        }
        array_567.finish();
    }
    if let Some(var_570) = &input.finding_provider_fields_related_findings_product_arn {
        let mut array_571 = object
            .key("FindingProviderFieldsRelatedFindingsProductArn")
            .start_array();
        for item_572 in var_570 {
            {
                let mut object_573 = array_571.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_573,
                    item_572,
                )?;
                object_573.finish();
            }
        }
        array_571.finish();
    }
    if let Some(var_574) = &input.finding_provider_fields_severity_label {
        let mut array_575 = object
            .key("FindingProviderFieldsSeverityLabel")
            .start_array();
        for item_576 in var_574 {
            {
                let mut object_577 = array_575.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_577,
                    item_576,
                )?;
                object_577.finish();
            }
        }
        array_575.finish();
    }
    if let Some(var_578) = &input.finding_provider_fields_severity_original {
        let mut array_579 = object
            .key("FindingProviderFieldsSeverityOriginal")
            .start_array();
        for item_580 in var_578 {
            {
                let mut object_581 = array_579.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_581,
                    item_580,
                )?;
                object_581.finish();
            }
        }
        array_579.finish();
    }
    if let Some(var_582) = &input.finding_provider_fields_types {
        let mut array_583 = object.key("FindingProviderFieldsTypes").start_array();
        for item_584 in var_582 {
            {
                let mut object_585 = array_583.value().start_object();
                crate::json_ser::serialize_structure_crate_model_string_filter(
                    &mut object_585,
                    item_584,
                )?;
                object_585.finish();
            }
        }
        array_583.finish();
    }
    if let Some(var_586) = &input.sample {
        let mut array_587 = object.key("Sample").start_array();
        for item_588 in var_586 {
            {
                let mut object_589 = array_587.value().start_object();
                crate::json_ser::serialize_structure_crate_model_boolean_filter(
                    &mut object_589,
                    item_588,
                )?;
                object_589.finish();
            }
        }
        array_587.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_account_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AccountDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_590) = &input.account_id {
        object.key("AccountId").string(var_590.as_str());
    }
    if let Some(var_591) = &input.email {
        object.key("Email").string(var_591.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sort_criterion(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SortCriterion,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_592) = &input.field {
        object.key("Field").string(var_592.as_str());
    }
    if let Some(var_593) = &input.sort_order {
        object.key("SortOrder").string(var_593.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_severity(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Severity,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.product != 0.0 {
        object.key("Product").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((input.product).into()),
        );
    }
    if let Some(var_594) = &input.label {
        object.key("Label").string(var_594.as_str());
    }
    if input.normalized != 0 {
        object.key("Normalized").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.normalized).into()),
        );
    }
    if let Some(var_595) = &input.original {
        object.key("Original").string(var_595.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_remediation(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Remediation,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_596) = &input.recommendation {
        let mut object_597 = object.key("Recommendation").start_object();
        crate::json_ser::serialize_structure_crate_model_recommendation(&mut object_597, var_596)?;
        object_597.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_malware(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Malware,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_598) = &input.name {
        object.key("Name").string(var_598.as_str());
    }
    if let Some(var_599) = &input.r#type {
        object.key("Type").string(var_599.as_str());
    }
    if let Some(var_600) = &input.path {
        object.key("Path").string(var_600.as_str());
    }
    if let Some(var_601) = &input.state {
        object.key("State").string(var_601.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_network(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Network,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_602) = &input.direction {
        object.key("Direction").string(var_602.as_str());
    }
    if let Some(var_603) = &input.protocol {
        object.key("Protocol").string(var_603.as_str());
    }
    if let Some(var_604) = &input.open_port_range {
        let mut object_605 = object.key("OpenPortRange").start_object();
        crate::json_ser::serialize_structure_crate_model_port_range(&mut object_605, var_604)?;
        object_605.finish();
    }
    if let Some(var_606) = &input.source_ip_v4 {
        object.key("SourceIpV4").string(var_606.as_str());
    }
    if let Some(var_607) = &input.source_ip_v6 {
        object.key("SourceIpV6").string(var_607.as_str());
    }
    if input.source_port != 0 {
        object.key("SourcePort").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.source_port).into()),
        );
    }
    if let Some(var_608) = &input.source_domain {
        object.key("SourceDomain").string(var_608.as_str());
    }
    if let Some(var_609) = &input.source_mac {
        object.key("SourceMac").string(var_609.as_str());
    }
    if let Some(var_610) = &input.destination_ip_v4 {
        object.key("DestinationIpV4").string(var_610.as_str());
    }
    if let Some(var_611) = &input.destination_ip_v6 {
        object.key("DestinationIpV6").string(var_611.as_str());
    }
    if input.destination_port != 0 {
        object.key("DestinationPort").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.destination_port).into()),
        );
    }
    if let Some(var_612) = &input.destination_domain {
        object.key("DestinationDomain").string(var_612.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_network_path_component(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NetworkPathComponent,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_613) = &input.component_id {
        object.key("ComponentId").string(var_613.as_str());
    }
    if let Some(var_614) = &input.component_type {
        object.key("ComponentType").string(var_614.as_str());
    }
    if let Some(var_615) = &input.egress {
        let mut object_616 = object.key("Egress").start_object();
        crate::json_ser::serialize_structure_crate_model_network_header(&mut object_616, var_615)?;
        object_616.finish();
    }
    if let Some(var_617) = &input.ingress {
        let mut object_618 = object.key("Ingress").start_object();
        crate::json_ser::serialize_structure_crate_model_network_header(&mut object_618, var_617)?;
        object_618.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_process_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProcessDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_619) = &input.name {
        object.key("Name").string(var_619.as_str());
    }
    if let Some(var_620) = &input.path {
        object.key("Path").string(var_620.as_str());
    }
    if input.pid != 0 {
        object.key("Pid").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.pid).into()),
        );
    }
    if input.parent_pid != 0 {
        object.key("ParentPid").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.parent_pid).into()),
        );
    }
    if let Some(var_621) = &input.launched_at {
        object.key("LaunchedAt").string(var_621.as_str());
    }
    if let Some(var_622) = &input.terminated_at {
        object.key("TerminatedAt").string(var_622.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_threat(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Threat,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_623) = &input.name {
        object.key("Name").string(var_623.as_str());
    }
    if let Some(var_624) = &input.severity {
        object.key("Severity").string(var_624.as_str());
    }
    if input.item_count != 0 {
        object.key("ItemCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.item_count).into()),
        );
    }
    if let Some(var_625) = &input.file_paths {
        let mut array_626 = object.key("FilePaths").start_array();
        for item_627 in var_625 {
            {
                let mut object_628 = array_626.value().start_object();
                crate::json_ser::serialize_structure_crate_model_file_paths(
                    &mut object_628,
                    item_627,
                )?;
                object_628.finish();
            }
        }
        array_626.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_threat_intel_indicator(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ThreatIntelIndicator,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_629) = &input.r#type {
        object.key("Type").string(var_629.as_str());
    }
    if let Some(var_630) = &input.value {
        object.key("Value").string(var_630.as_str());
    }
    if let Some(var_631) = &input.category {
        object.key("Category").string(var_631.as_str());
    }
    if let Some(var_632) = &input.last_observed_at {
        object.key("LastObservedAt").string(var_632.as_str());
    }
    if let Some(var_633) = &input.source {
        object.key("Source").string(var_633.as_str());
    }
    if let Some(var_634) = &input.source_url {
        object.key("SourceUrl").string(var_634.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_resource(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Resource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_635) = &input.r#type {
        object.key("Type").string(var_635.as_str());
    }
    if let Some(var_636) = &input.id {
        object.key("Id").string(var_636.as_str());
    }
    if let Some(var_637) = &input.partition {
        object.key("Partition").string(var_637.as_str());
    }
    if let Some(var_638) = &input.region {
        object.key("Region").string(var_638.as_str());
    }
    if let Some(var_639) = &input.resource_role {
        object.key("ResourceRole").string(var_639.as_str());
    }
    if let Some(var_640) = &input.tags {
        let mut object_641 = object.key("Tags").start_object();
        for (key_642, value_643) in var_640 {
            {
                object_641.key(key_642).string(value_643.as_str());
            }
        }
        object_641.finish();
    }
    if let Some(var_644) = &input.data_classification {
        let mut object_645 = object.key("DataClassification").start_object();
        crate::json_ser::serialize_structure_crate_model_data_classification_details(
            &mut object_645,
            var_644,
        )?;
        object_645.finish();
    }
    if let Some(var_646) = &input.details {
        let mut object_647 = object.key("Details").start_object();
        crate::json_ser::serialize_structure_crate_model_resource_details(
            &mut object_647,
            var_646,
        )?;
        object_647.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_compliance(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Compliance,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_648) = &input.status {
        object.key("Status").string(var_648.as_str());
    }
    if let Some(var_649) = &input.related_requirements {
        let mut array_650 = object.key("RelatedRequirements").start_array();
        for item_651 in var_649 {
            {
                array_650.value().string(item_651.as_str());
            }
        }
        array_650.finish();
    }
    if let Some(var_652) = &input.status_reasons {
        let mut array_653 = object.key("StatusReasons").start_array();
        for item_654 in var_652 {
            {
                let mut object_655 = array_653.value().start_object();
                crate::json_ser::serialize_structure_crate_model_status_reason(
                    &mut object_655,
                    item_654,
                )?;
                object_655.finish();
            }
        }
        array_653.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_workflow(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Workflow,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_656) = &input.status {
        object.key("Status").string(var_656.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_note(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Note,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_657) = &input.text {
        object.key("Text").string(var_657.as_str());
    }
    if let Some(var_658) = &input.updated_by {
        object.key("UpdatedBy").string(var_658.as_str());
    }
    if let Some(var_659) = &input.updated_at {
        object.key("UpdatedAt").string(var_659.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_vulnerability(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Vulnerability,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_660) = &input.id {
        object.key("Id").string(var_660.as_str());
    }
    if let Some(var_661) = &input.vulnerable_packages {
        let mut array_662 = object.key("VulnerablePackages").start_array();
        for item_663 in var_661 {
            {
                let mut object_664 = array_662.value().start_object();
                crate::json_ser::serialize_structure_crate_model_software_package(
                    &mut object_664,
                    item_663,
                )?;
                object_664.finish();
            }
        }
        array_662.finish();
    }
    if let Some(var_665) = &input.cvss {
        let mut array_666 = object.key("Cvss").start_array();
        for item_667 in var_665 {
            {
                let mut object_668 = array_666.value().start_object();
                crate::json_ser::serialize_structure_crate_model_cvss(&mut object_668, item_667)?;
                object_668.finish();
            }
        }
        array_666.finish();
    }
    if let Some(var_669) = &input.related_vulnerabilities {
        let mut array_670 = object.key("RelatedVulnerabilities").start_array();
        for item_671 in var_669 {
            {
                array_670.value().string(item_671.as_str());
            }
        }
        array_670.finish();
    }
    if let Some(var_672) = &input.vendor {
        let mut object_673 = object.key("Vendor").start_object();
        crate::json_ser::serialize_structure_crate_model_vulnerability_vendor(
            &mut object_673,
            var_672,
        )?;
        object_673.finish();
    }
    if let Some(var_674) = &input.reference_urls {
        let mut array_675 = object.key("ReferenceUrls").start_array();
        for item_676 in var_674 {
            {
                array_675.value().string(item_676.as_str());
            }
        }
        array_675.finish();
    }
    if let Some(var_677) = &input.fix_available {
        object.key("FixAvailable").string(var_677.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_patch_summary(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PatchSummary,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_678) = &input.id {
        object.key("Id").string(var_678.as_str());
    }
    if input.installed_count != 0 {
        object.key("InstalledCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.installed_count).into()),
        );
    }
    if input.missing_count != 0 {
        object.key("MissingCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.missing_count).into()),
        );
    }
    if input.failed_count != 0 {
        object.key("FailedCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.failed_count).into()),
        );
    }
    if input.installed_other_count != 0 {
        object.key("InstalledOtherCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.installed_other_count).into()),
        );
    }
    if input.installed_rejected_count != 0 {
        object.key("InstalledRejectedCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.installed_rejected_count).into()),
        );
    }
    if input.installed_pending_reboot != 0 {
        object.key("InstalledPendingReboot").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.installed_pending_reboot).into()),
        );
    }
    if let Some(var_679) = &input.operation_start_time {
        object.key("OperationStartTime").string(var_679.as_str());
    }
    if let Some(var_680) = &input.operation_end_time {
        object.key("OperationEndTime").string(var_680.as_str());
    }
    if let Some(var_681) = &input.reboot_option {
        object.key("RebootOption").string(var_681.as_str());
    }
    if let Some(var_682) = &input.operation {
        object.key("Operation").string(var_682.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Action,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_683) = &input.action_type {
        object.key("ActionType").string(var_683.as_str());
    }
    if let Some(var_684) = &input.network_connection_action {
        let mut object_685 = object.key("NetworkConnectionAction").start_object();
        crate::json_ser::serialize_structure_crate_model_network_connection_action(
            &mut object_685,
            var_684,
        )?;
        object_685.finish();
    }
    if let Some(var_686) = &input.aws_api_call_action {
        let mut object_687 = object.key("AwsApiCallAction").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_api_call_action(
            &mut object_687,
            var_686,
        )?;
        object_687.finish();
    }
    if let Some(var_688) = &input.dns_request_action {
        let mut object_689 = object.key("DnsRequestAction").start_object();
        crate::json_ser::serialize_structure_crate_model_dns_request_action(
            &mut object_689,
            var_688,
        )?;
        object_689.finish();
    }
    if let Some(var_690) = &input.port_probe_action {
        let mut object_691 = object.key("PortProbeAction").start_object();
        crate::json_ser::serialize_structure_crate_model_port_probe_action(
            &mut object_691,
            var_690,
        )?;
        object_691.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_finding_provider_fields(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FindingProviderFields,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.confidence != 0 {
        object.key("Confidence").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.confidence).into()),
        );
    }
    if input.criticality != 0 {
        object.key("Criticality").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.criticality).into()),
        );
    }
    if let Some(var_692) = &input.related_findings {
        let mut array_693 = object.key("RelatedFindings").start_array();
        for item_694 in var_692 {
            {
                let mut object_695 = array_693.value().start_object();
                crate::json_ser::serialize_structure_crate_model_related_finding(
                    &mut object_695,
                    item_694,
                )?;
                object_695.finish();
            }
        }
        array_693.finish();
    }
    if let Some(var_696) = &input.severity {
        let mut object_697 = object.key("Severity").start_object();
        crate::json_ser::serialize_structure_crate_model_finding_provider_severity(
            &mut object_697,
            var_696,
        )?;
        object_697.finish();
    }
    if let Some(var_698) = &input.types {
        let mut array_699 = object.key("Types").start_array();
        for item_700 in var_698 {
            {
                array_699.value().string(item_700.as_str());
            }
        }
        array_699.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_string_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StringFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_701) = &input.value {
        object.key("Value").string(var_701.as_str());
    }
    if let Some(var_702) = &input.comparison {
        object.key("Comparison").string(var_702.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_date_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DateFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_703) = &input.start {
        object.key("Start").string(var_703.as_str());
    }
    if let Some(var_704) = &input.end {
        object.key("End").string(var_704.as_str());
    }
    if let Some(var_705) = &input.date_range {
        let mut object_706 = object.key("DateRange").start_object();
        crate::json_ser::serialize_structure_crate_model_date_range(&mut object_706, var_705)?;
        object_706.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_number_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NumberFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.gte != 0.0 {
        object.key("Gte").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((input.gte).into()),
        );
    }
    if input.lte != 0.0 {
        object.key("Lte").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((input.lte).into()),
        );
    }
    if input.eq != 0.0 {
        object.key("Eq").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((input.eq).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_map_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MapFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_707) = &input.key {
        object.key("Key").string(var_707.as_str());
    }
    if let Some(var_708) = &input.value {
        object.key("Value").string(var_708.as_str());
    }
    if let Some(var_709) = &input.comparison {
        object.key("Comparison").string(var_709.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ip_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IpFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_710) = &input.cidr {
        object.key("Cidr").string(var_710.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_keyword_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KeywordFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_711) = &input.value {
        object.key("Value").string(var_711.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_boolean_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BooleanFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.value {
        object.key("Value").boolean(input.value);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_recommendation(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Recommendation,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_712) = &input.text {
        object.key("Text").string(var_712.as_str());
    }
    if let Some(var_713) = &input.url {
        object.key("Url").string(var_713.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_port_range(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PortRange,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.begin != 0 {
        object.key("Begin").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.begin).into()),
        );
    }
    if input.end != 0 {
        object.key("End").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.end).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_network_header(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NetworkHeader,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_714) = &input.protocol {
        object.key("Protocol").string(var_714.as_str());
    }
    if let Some(var_715) = &input.destination {
        let mut object_716 = object.key("Destination").start_object();
        crate::json_ser::serialize_structure_crate_model_network_path_component_details(
            &mut object_716,
            var_715,
        )?;
        object_716.finish();
    }
    if let Some(var_717) = &input.source {
        let mut object_718 = object.key("Source").start_object();
        crate::json_ser::serialize_structure_crate_model_network_path_component_details(
            &mut object_718,
            var_717,
        )?;
        object_718.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_file_paths(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FilePaths,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_719) = &input.file_path {
        object.key("FilePath").string(var_719.as_str());
    }
    if let Some(var_720) = &input.file_name {
        object.key("FileName").string(var_720.as_str());
    }
    if let Some(var_721) = &input.resource_id {
        object.key("ResourceId").string(var_721.as_str());
    }
    if let Some(var_722) = &input.hash {
        object.key("Hash").string(var_722.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_classification_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataClassificationDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_723) = &input.detailed_results_location {
        object
            .key("DetailedResultsLocation")
            .string(var_723.as_str());
    }
    if let Some(var_724) = &input.result {
        let mut object_725 = object.key("Result").start_object();
        crate::json_ser::serialize_structure_crate_model_classification_result(
            &mut object_725,
            var_724,
        )?;
        object_725.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_resource_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ResourceDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_726) = &input.aws_auto_scaling_auto_scaling_group {
        let mut object_727 = object.key("AwsAutoScalingAutoScalingGroup").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_auto_scaling_auto_scaling_group_details(&mut object_727, var_726)?;
        object_727.finish();
    }
    if let Some(var_728) = &input.aws_code_build_project {
        let mut object_729 = object.key("AwsCodeBuildProject").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_code_build_project_details(
            &mut object_729,
            var_728,
        )?;
        object_729.finish();
    }
    if let Some(var_730) = &input.aws_cloud_front_distribution {
        let mut object_731 = object.key("AwsCloudFrontDistribution").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_cloud_front_distribution_details(
            &mut object_731,
            var_730,
        )?;
        object_731.finish();
    }
    if let Some(var_732) = &input.aws_ec2_instance {
        let mut object_733 = object.key("AwsEc2Instance").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ec2_instance_details(
            &mut object_733,
            var_732,
        )?;
        object_733.finish();
    }
    if let Some(var_734) = &input.aws_ec2_network_interface {
        let mut object_735 = object.key("AwsEc2NetworkInterface").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ec2_network_interface_details(
            &mut object_735,
            var_734,
        )?;
        object_735.finish();
    }
    if let Some(var_736) = &input.aws_ec2_security_group {
        let mut object_737 = object.key("AwsEc2SecurityGroup").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ec2_security_group_details(
            &mut object_737,
            var_736,
        )?;
        object_737.finish();
    }
    if let Some(var_738) = &input.aws_ec2_volume {
        let mut object_739 = object.key("AwsEc2Volume").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ec2_volume_details(
            &mut object_739,
            var_738,
        )?;
        object_739.finish();
    }
    if let Some(var_740) = &input.aws_ec2_vpc {
        let mut object_741 = object.key("AwsEc2Vpc").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ec2_vpc_details(
            &mut object_741,
            var_740,
        )?;
        object_741.finish();
    }
    if let Some(var_742) = &input.aws_ec2_eip {
        let mut object_743 = object.key("AwsEc2Eip").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ec2_eip_details(
            &mut object_743,
            var_742,
        )?;
        object_743.finish();
    }
    if let Some(var_744) = &input.aws_ec2_subnet {
        let mut object_745 = object.key("AwsEc2Subnet").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ec2_subnet_details(
            &mut object_745,
            var_744,
        )?;
        object_745.finish();
    }
    if let Some(var_746) = &input.aws_ec2_network_acl {
        let mut object_747 = object.key("AwsEc2NetworkAcl").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ec2_network_acl_details(
            &mut object_747,
            var_746,
        )?;
        object_747.finish();
    }
    if let Some(var_748) = &input.aws_elbv2_load_balancer {
        let mut object_749 = object.key("AwsElbv2LoadBalancer").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_elbv2_load_balancer_details(
            &mut object_749,
            var_748,
        )?;
        object_749.finish();
    }
    if let Some(var_750) = &input.aws_elastic_beanstalk_environment {
        let mut object_751 = object.key("AwsElasticBeanstalkEnvironment").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_elastic_beanstalk_environment_details(
            &mut object_751,
            var_750,
        )?;
        object_751.finish();
    }
    if let Some(var_752) = &input.aws_elasticsearch_domain {
        let mut object_753 = object.key("AwsElasticsearchDomain").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_elasticsearch_domain_details(
            &mut object_753,
            var_752,
        )?;
        object_753.finish();
    }
    if let Some(var_754) = &input.aws_s3_bucket {
        let mut object_755 = object.key("AwsS3Bucket").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_s3_bucket_details(
            &mut object_755,
            var_754,
        )?;
        object_755.finish();
    }
    if let Some(var_756) = &input.aws_s3_account_public_access_block {
        let mut object_757 = object.key("AwsS3AccountPublicAccessBlock").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_s3_account_public_access_block_details(&mut object_757, var_756)?;
        object_757.finish();
    }
    if let Some(var_758) = &input.aws_s3_object {
        let mut object_759 = object.key("AwsS3Object").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_s3_object_details(
            &mut object_759,
            var_758,
        )?;
        object_759.finish();
    }
    if let Some(var_760) = &input.aws_secrets_manager_secret {
        let mut object_761 = object.key("AwsSecretsManagerSecret").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_secrets_manager_secret_details(
            &mut object_761,
            var_760,
        )?;
        object_761.finish();
    }
    if let Some(var_762) = &input.aws_iam_access_key {
        let mut object_763 = object.key("AwsIamAccessKey").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_iam_access_key_details(
            &mut object_763,
            var_762,
        )?;
        object_763.finish();
    }
    if let Some(var_764) = &input.aws_iam_user {
        let mut object_765 = object.key("AwsIamUser").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_iam_user_details(
            &mut object_765,
            var_764,
        )?;
        object_765.finish();
    }
    if let Some(var_766) = &input.aws_iam_policy {
        let mut object_767 = object.key("AwsIamPolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_iam_policy_details(
            &mut object_767,
            var_766,
        )?;
        object_767.finish();
    }
    if let Some(var_768) = &input.aws_api_gateway_v2_stage {
        let mut object_769 = object.key("AwsApiGatewayV2Stage").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_api_gateway_v2_stage_details(
            &mut object_769,
            var_768,
        )?;
        object_769.finish();
    }
    if let Some(var_770) = &input.aws_api_gateway_v2_api {
        let mut object_771 = object.key("AwsApiGatewayV2Api").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_api_gateway_v2_api_details(
            &mut object_771,
            var_770,
        )?;
        object_771.finish();
    }
    if let Some(var_772) = &input.aws_dynamo_db_table {
        let mut object_773 = object.key("AwsDynamoDbTable").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_dynamo_db_table_details(
            &mut object_773,
            var_772,
        )?;
        object_773.finish();
    }
    if let Some(var_774) = &input.aws_api_gateway_stage {
        let mut object_775 = object.key("AwsApiGatewayStage").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_api_gateway_stage_details(
            &mut object_775,
            var_774,
        )?;
        object_775.finish();
    }
    if let Some(var_776) = &input.aws_api_gateway_rest_api {
        let mut object_777 = object.key("AwsApiGatewayRestApi").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_api_gateway_rest_api_details(
            &mut object_777,
            var_776,
        )?;
        object_777.finish();
    }
    if let Some(var_778) = &input.aws_cloud_trail_trail {
        let mut object_779 = object.key("AwsCloudTrailTrail").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_cloud_trail_trail_details(
            &mut object_779,
            var_778,
        )?;
        object_779.finish();
    }
    if let Some(var_780) = &input.aws_ssm_patch_compliance {
        let mut object_781 = object.key("AwsSsmPatchCompliance").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ssm_patch_compliance_details(
            &mut object_781,
            var_780,
        )?;
        object_781.finish();
    }
    if let Some(var_782) = &input.aws_certificate_manager_certificate {
        let mut object_783 = object
            .key("AwsCertificateManagerCertificate")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_aws_certificate_manager_certificate_details(&mut object_783, var_782)?;
        object_783.finish();
    }
    if let Some(var_784) = &input.aws_redshift_cluster {
        let mut object_785 = object.key("AwsRedshiftCluster").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_redshift_cluster_details(
            &mut object_785,
            var_784,
        )?;
        object_785.finish();
    }
    if let Some(var_786) = &input.aws_elb_load_balancer {
        let mut object_787 = object.key("AwsElbLoadBalancer").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_elb_load_balancer_details(
            &mut object_787,
            var_786,
        )?;
        object_787.finish();
    }
    if let Some(var_788) = &input.aws_iam_group {
        let mut object_789 = object.key("AwsIamGroup").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_iam_group_details(
            &mut object_789,
            var_788,
        )?;
        object_789.finish();
    }
    if let Some(var_790) = &input.aws_iam_role {
        let mut object_791 = object.key("AwsIamRole").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_iam_role_details(
            &mut object_791,
            var_790,
        )?;
        object_791.finish();
    }
    if let Some(var_792) = &input.aws_kms_key {
        let mut object_793 = object.key("AwsKmsKey").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_kms_key_details(
            &mut object_793,
            var_792,
        )?;
        object_793.finish();
    }
    if let Some(var_794) = &input.aws_lambda_function {
        let mut object_795 = object.key("AwsLambdaFunction").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_lambda_function_details(
            &mut object_795,
            var_794,
        )?;
        object_795.finish();
    }
    if let Some(var_796) = &input.aws_lambda_layer_version {
        let mut object_797 = object.key("AwsLambdaLayerVersion").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_lambda_layer_version_details(
            &mut object_797,
            var_796,
        )?;
        object_797.finish();
    }
    if let Some(var_798) = &input.aws_rds_db_instance {
        let mut object_799 = object.key("AwsRdsDbInstance").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_rds_db_instance_details(
            &mut object_799,
            var_798,
        )?;
        object_799.finish();
    }
    if let Some(var_800) = &input.aws_sns_topic {
        let mut object_801 = object.key("AwsSnsTopic").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_sns_topic_details(
            &mut object_801,
            var_800,
        )?;
        object_801.finish();
    }
    if let Some(var_802) = &input.aws_sqs_queue {
        let mut object_803 = object.key("AwsSqsQueue").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_sqs_queue_details(
            &mut object_803,
            var_802,
        )?;
        object_803.finish();
    }
    if let Some(var_804) = &input.aws_waf_web_acl {
        let mut object_805 = object.key("AwsWafWebAcl").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_waf_web_acl_details(
            &mut object_805,
            var_804,
        )?;
        object_805.finish();
    }
    if let Some(var_806) = &input.aws_rds_db_snapshot {
        let mut object_807 = object.key("AwsRdsDbSnapshot").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_rds_db_snapshot_details(
            &mut object_807,
            var_806,
        )?;
        object_807.finish();
    }
    if let Some(var_808) = &input.aws_rds_db_cluster_snapshot {
        let mut object_809 = object.key("AwsRdsDbClusterSnapshot").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_rds_db_cluster_snapshot_details(
            &mut object_809,
            var_808,
        )?;
        object_809.finish();
    }
    if let Some(var_810) = &input.aws_rds_db_cluster {
        let mut object_811 = object.key("AwsRdsDbCluster").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_rds_db_cluster_details(
            &mut object_811,
            var_810,
        )?;
        object_811.finish();
    }
    if let Some(var_812) = &input.aws_ecs_cluster {
        let mut object_813 = object.key("AwsEcsCluster").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ecs_cluster_details(
            &mut object_813,
            var_812,
        )?;
        object_813.finish();
    }
    if let Some(var_814) = &input.aws_ecs_container {
        let mut object_815 = object.key("AwsEcsContainer").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ecs_container_details(
            &mut object_815,
            var_814,
        )?;
        object_815.finish();
    }
    if let Some(var_816) = &input.aws_ecs_task_definition {
        let mut object_817 = object.key("AwsEcsTaskDefinition").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ecs_task_definition_details(
            &mut object_817,
            var_816,
        )?;
        object_817.finish();
    }
    if let Some(var_818) = &input.container {
        let mut object_819 = object.key("Container").start_object();
        crate::json_ser::serialize_structure_crate_model_container_details(
            &mut object_819,
            var_818,
        )?;
        object_819.finish();
    }
    if let Some(var_820) = &input.other {
        let mut object_821 = object.key("Other").start_object();
        for (key_822, value_823) in var_820 {
            {
                object_821.key(key_822).string(value_823.as_str());
            }
        }
        object_821.finish();
    }
    if let Some(var_824) = &input.aws_rds_event_subscription {
        let mut object_825 = object.key("AwsRdsEventSubscription").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_rds_event_subscription_details(
            &mut object_825,
            var_824,
        )?;
        object_825.finish();
    }
    if let Some(var_826) = &input.aws_ecs_service {
        let mut object_827 = object.key("AwsEcsService").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ecs_service_details(
            &mut object_827,
            var_826,
        )?;
        object_827.finish();
    }
    if let Some(var_828) = &input.aws_auto_scaling_launch_configuration {
        let mut object_829 = object
            .key("AwsAutoScalingLaunchConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_aws_auto_scaling_launch_configuration_details(&mut object_829, var_828)?;
        object_829.finish();
    }
    if let Some(var_830) = &input.aws_ec2_vpn_connection {
        let mut object_831 = object.key("AwsEc2VpnConnection").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ec2_vpn_connection_details(
            &mut object_831,
            var_830,
        )?;
        object_831.finish();
    }
    if let Some(var_832) = &input.aws_ecr_container_image {
        let mut object_833 = object.key("AwsEcrContainerImage").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ecr_container_image_details(
            &mut object_833,
            var_832,
        )?;
        object_833.finish();
    }
    if let Some(var_834) = &input.aws_open_search_service_domain {
        let mut object_835 = object.key("AwsOpenSearchServiceDomain").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_open_search_service_domain_details(
            &mut object_835,
            var_834,
        )?;
        object_835.finish();
    }
    if let Some(var_836) = &input.aws_ec2_vpc_endpoint_service {
        let mut object_837 = object.key("AwsEc2VpcEndpointService").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ec2_vpc_endpoint_service_details(
            &mut object_837,
            var_836,
        )?;
        object_837.finish();
    }
    if let Some(var_838) = &input.aws_xray_encryption_config {
        let mut object_839 = object.key("AwsXrayEncryptionConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_xray_encryption_config_details(
            &mut object_839,
            var_838,
        )?;
        object_839.finish();
    }
    if let Some(var_840) = &input.aws_waf_rate_based_rule {
        let mut object_841 = object.key("AwsWafRateBasedRule").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_waf_rate_based_rule_details(
            &mut object_841,
            var_840,
        )?;
        object_841.finish();
    }
    if let Some(var_842) = &input.aws_waf_regional_rate_based_rule {
        let mut object_843 = object.key("AwsWafRegionalRateBasedRule").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_waf_regional_rate_based_rule_details(
            &mut object_843,
            var_842,
        )?;
        object_843.finish();
    }
    if let Some(var_844) = &input.aws_ecr_repository {
        let mut object_845 = object.key("AwsEcrRepository").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ecr_repository_details(
            &mut object_845,
            var_844,
        )?;
        object_845.finish();
    }
    if let Some(var_846) = &input.aws_eks_cluster {
        let mut object_847 = object.key("AwsEksCluster").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_eks_cluster_details(
            &mut object_847,
            var_846,
        )?;
        object_847.finish();
    }
    if let Some(var_848) = &input.aws_network_firewall_firewall_policy {
        let mut object_849 = object
            .key("AwsNetworkFirewallFirewallPolicy")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_aws_network_firewall_firewall_policy_details(&mut object_849, var_848)?;
        object_849.finish();
    }
    if let Some(var_850) = &input.aws_network_firewall_firewall {
        let mut object_851 = object.key("AwsNetworkFirewallFirewall").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_network_firewall_firewall_details(
            &mut object_851,
            var_850,
        )?;
        object_851.finish();
    }
    if let Some(var_852) = &input.aws_network_firewall_rule_group {
        let mut object_853 = object.key("AwsNetworkFirewallRuleGroup").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_network_firewall_rule_group_details(
            &mut object_853,
            var_852,
        )?;
        object_853.finish();
    }
    if let Some(var_854) = &input.aws_rds_db_security_group {
        let mut object_855 = object.key("AwsRdsDbSecurityGroup").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_rds_db_security_group_details(
            &mut object_855,
            var_854,
        )?;
        object_855.finish();
    }
    if let Some(var_856) = &input.aws_kinesis_stream {
        let mut object_857 = object.key("AwsKinesisStream").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_kinesis_stream_details(
            &mut object_857,
            var_856,
        )?;
        object_857.finish();
    }
    if let Some(var_858) = &input.aws_ec2_transit_gateway {
        let mut object_859 = object.key("AwsEc2TransitGateway").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ec2_transit_gateway_details(
            &mut object_859,
            var_858,
        )?;
        object_859.finish();
    }
    if let Some(var_860) = &input.aws_efs_access_point {
        let mut object_861 = object.key("AwsEfsAccessPoint").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_efs_access_point_details(
            &mut object_861,
            var_860,
        )?;
        object_861.finish();
    }
    if let Some(var_862) = &input.aws_cloud_formation_stack {
        let mut object_863 = object.key("AwsCloudFormationStack").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_cloud_formation_stack_details(
            &mut object_863,
            var_862,
        )?;
        object_863.finish();
    }
    if let Some(var_864) = &input.aws_cloud_watch_alarm {
        let mut object_865 = object.key("AwsCloudWatchAlarm").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_cloud_watch_alarm_details(
            &mut object_865,
            var_864,
        )?;
        object_865.finish();
    }
    if let Some(var_866) = &input.aws_ec2_vpc_peering_connection {
        let mut object_867 = object.key("AwsEc2VpcPeeringConnection").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ec2_vpc_peering_connection_details(
            &mut object_867,
            var_866,
        )?;
        object_867.finish();
    }
    if let Some(var_868) = &input.aws_waf_regional_rule_group {
        let mut object_869 = object.key("AwsWafRegionalRuleGroup").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_waf_regional_rule_group_details(
            &mut object_869,
            var_868,
        )?;
        object_869.finish();
    }
    if let Some(var_870) = &input.aws_waf_regional_rule {
        let mut object_871 = object.key("AwsWafRegionalRule").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_waf_regional_rule_details(
            &mut object_871,
            var_870,
        )?;
        object_871.finish();
    }
    if let Some(var_872) = &input.aws_waf_regional_web_acl {
        let mut object_873 = object.key("AwsWafRegionalWebAcl").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_waf_regional_web_acl_details(
            &mut object_873,
            var_872,
        )?;
        object_873.finish();
    }
    if let Some(var_874) = &input.aws_waf_rule {
        let mut object_875 = object.key("AwsWafRule").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_waf_rule_details(
            &mut object_875,
            var_874,
        )?;
        object_875.finish();
    }
    if let Some(var_876) = &input.aws_waf_rule_group {
        let mut object_877 = object.key("AwsWafRuleGroup").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_waf_rule_group_details(
            &mut object_877,
            var_876,
        )?;
        object_877.finish();
    }
    if let Some(var_878) = &input.aws_ecs_task {
        let mut object_879 = object.key("AwsEcsTask").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ecs_task_details(
            &mut object_879,
            var_878,
        )?;
        object_879.finish();
    }
    if let Some(var_880) = &input.aws_backup_backup_vault {
        let mut object_881 = object.key("AwsBackupBackupVault").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_backup_backup_vault_details(
            &mut object_881,
            var_880,
        )?;
        object_881.finish();
    }
    if let Some(var_882) = &input.aws_backup_backup_plan {
        let mut object_883 = object.key("AwsBackupBackupPlan").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_backup_backup_plan_details(
            &mut object_883,
            var_882,
        )?;
        object_883.finish();
    }
    if let Some(var_884) = &input.aws_backup_recovery_point {
        let mut object_885 = object.key("AwsBackupRecoveryPoint").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_backup_recovery_point_details(
            &mut object_885,
            var_884,
        )?;
        object_885.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_status_reason(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StatusReason,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_886) = &input.reason_code {
        object.key("ReasonCode").string(var_886.as_str());
    }
    if let Some(var_887) = &input.description {
        object.key("Description").string(var_887.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_software_package(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SoftwarePackage,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_888) = &input.name {
        object.key("Name").string(var_888.as_str());
    }
    if let Some(var_889) = &input.version {
        object.key("Version").string(var_889.as_str());
    }
    if let Some(var_890) = &input.epoch {
        object.key("Epoch").string(var_890.as_str());
    }
    if let Some(var_891) = &input.release {
        object.key("Release").string(var_891.as_str());
    }
    if let Some(var_892) = &input.architecture {
        object.key("Architecture").string(var_892.as_str());
    }
    if let Some(var_893) = &input.package_manager {
        object.key("PackageManager").string(var_893.as_str());
    }
    if let Some(var_894) = &input.file_path {
        object.key("FilePath").string(var_894.as_str());
    }
    if let Some(var_895) = &input.fixed_in_version {
        object.key("FixedInVersion").string(var_895.as_str());
    }
    if let Some(var_896) = &input.remediation {
        object.key("Remediation").string(var_896.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_cvss(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Cvss,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_897) = &input.version {
        object.key("Version").string(var_897.as_str());
    }
    if input.base_score != 0.0 {
        object.key("BaseScore").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((input.base_score).into()),
        );
    }
    if let Some(var_898) = &input.base_vector {
        object.key("BaseVector").string(var_898.as_str());
    }
    if let Some(var_899) = &input.source {
        object.key("Source").string(var_899.as_str());
    }
    if let Some(var_900) = &input.adjustments {
        let mut array_901 = object.key("Adjustments").start_array();
        for item_902 in var_900 {
            {
                let mut object_903 = array_901.value().start_object();
                crate::json_ser::serialize_structure_crate_model_adjustment(
                    &mut object_903,
                    item_902,
                )?;
                object_903.finish();
            }
        }
        array_901.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_vulnerability_vendor(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VulnerabilityVendor,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_904) = &input.name {
        object.key("Name").string(var_904.as_str());
    }
    if let Some(var_905) = &input.url {
        object.key("Url").string(var_905.as_str());
    }
    if let Some(var_906) = &input.vendor_severity {
        object.key("VendorSeverity").string(var_906.as_str());
    }
    if let Some(var_907) = &input.vendor_created_at {
        object.key("VendorCreatedAt").string(var_907.as_str());
    }
    if let Some(var_908) = &input.vendor_updated_at {
        object.key("VendorUpdatedAt").string(var_908.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_network_connection_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NetworkConnectionAction,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_909) = &input.connection_direction {
        object.key("ConnectionDirection").string(var_909.as_str());
    }
    if let Some(var_910) = &input.remote_ip_details {
        let mut object_911 = object.key("RemoteIpDetails").start_object();
        crate::json_ser::serialize_structure_crate_model_action_remote_ip_details(
            &mut object_911,
            var_910,
        )?;
        object_911.finish();
    }
    if let Some(var_912) = &input.remote_port_details {
        let mut object_913 = object.key("RemotePortDetails").start_object();
        crate::json_ser::serialize_structure_crate_model_action_remote_port_details(
            &mut object_913,
            var_912,
        )?;
        object_913.finish();
    }
    if let Some(var_914) = &input.local_port_details {
        let mut object_915 = object.key("LocalPortDetails").start_object();
        crate::json_ser::serialize_structure_crate_model_action_local_port_details(
            &mut object_915,
            var_914,
        )?;
        object_915.finish();
    }
    if let Some(var_916) = &input.protocol {
        object.key("Protocol").string(var_916.as_str());
    }
    if input.blocked {
        object.key("Blocked").boolean(input.blocked);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_api_call_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsApiCallAction,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_917) = &input.api {
        object.key("Api").string(var_917.as_str());
    }
    if let Some(var_918) = &input.service_name {
        object.key("ServiceName").string(var_918.as_str());
    }
    if let Some(var_919) = &input.caller_type {
        object.key("CallerType").string(var_919.as_str());
    }
    if let Some(var_920) = &input.remote_ip_details {
        let mut object_921 = object.key("RemoteIpDetails").start_object();
        crate::json_ser::serialize_structure_crate_model_action_remote_ip_details(
            &mut object_921,
            var_920,
        )?;
        object_921.finish();
    }
    if let Some(var_922) = &input.domain_details {
        let mut object_923 = object.key("DomainDetails").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_api_call_action_domain_details(
            &mut object_923,
            var_922,
        )?;
        object_923.finish();
    }
    if let Some(var_924) = &input.affected_resources {
        let mut object_925 = object.key("AffectedResources").start_object();
        for (key_926, value_927) in var_924 {
            {
                object_925.key(key_926).string(value_927.as_str());
            }
        }
        object_925.finish();
    }
    if let Some(var_928) = &input.first_seen {
        object.key("FirstSeen").string(var_928.as_str());
    }
    if let Some(var_929) = &input.last_seen {
        object.key("LastSeen").string(var_929.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_dns_request_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DnsRequestAction,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_930) = &input.domain {
        object.key("Domain").string(var_930.as_str());
    }
    if let Some(var_931) = &input.protocol {
        object.key("Protocol").string(var_931.as_str());
    }
    if input.blocked {
        object.key("Blocked").boolean(input.blocked);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_port_probe_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PortProbeAction,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_932) = &input.port_probe_details {
        let mut array_933 = object.key("PortProbeDetails").start_array();
        for item_934 in var_932 {
            {
                let mut object_935 = array_933.value().start_object();
                crate::json_ser::serialize_structure_crate_model_port_probe_detail(
                    &mut object_935,
                    item_934,
                )?;
                object_935.finish();
            }
        }
        array_933.finish();
    }
    if input.blocked {
        object.key("Blocked").boolean(input.blocked);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_finding_provider_severity(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FindingProviderSeverity,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_936) = &input.label {
        object.key("Label").string(var_936.as_str());
    }
    if let Some(var_937) = &input.original {
        object.key("Original").string(var_937.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_date_range(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DateRange,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.value != 0 {
        object.key("Value").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.value).into()),
        );
    }
    if let Some(var_938) = &input.unit {
        object.key("Unit").string(var_938.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_network_path_component_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NetworkPathComponentDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_939) = &input.address {
        let mut array_940 = object.key("Address").start_array();
        for item_941 in var_939 {
            {
                array_940.value().string(item_941.as_str());
            }
        }
        array_940.finish();
    }
    if let Some(var_942) = &input.port_ranges {
        let mut array_943 = object.key("PortRanges").start_array();
        for item_944 in var_942 {
            {
                let mut object_945 = array_943.value().start_object();
                crate::json_ser::serialize_structure_crate_model_port_range(
                    &mut object_945,
                    item_944,
                )?;
                object_945.finish();
            }
        }
        array_943.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_classification_result(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ClassificationResult,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_946) = &input.mime_type {
        object.key("MimeType").string(var_946.as_str());
    }
    if input.size_classified != 0 {
        object.key("SizeClassified").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.size_classified).into()),
        );
    }
    if input.additional_occurrences {
        object
            .key("AdditionalOccurrences")
            .boolean(input.additional_occurrences);
    }
    if let Some(var_947) = &input.status {
        let mut object_948 = object.key("Status").start_object();
        crate::json_ser::serialize_structure_crate_model_classification_status(
            &mut object_948,
            var_947,
        )?;
        object_948.finish();
    }
    if let Some(var_949) = &input.sensitive_data {
        let mut array_950 = object.key("SensitiveData").start_array();
        for item_951 in var_949 {
            {
                let mut object_952 = array_950.value().start_object();
                crate::json_ser::serialize_structure_crate_model_sensitive_data_result(
                    &mut object_952,
                    item_951,
                )?;
                object_952.finish();
            }
        }
        array_950.finish();
    }
    if let Some(var_953) = &input.custom_data_identifiers {
        let mut object_954 = object.key("CustomDataIdentifiers").start_object();
        crate::json_ser::serialize_structure_crate_model_custom_data_identifiers_result(
            &mut object_954,
            var_953,
        )?;
        object_954.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_auto_scaling_auto_scaling_group_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsAutoScalingAutoScalingGroupDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_955) = &input.launch_configuration_name {
        object
            .key("LaunchConfigurationName")
            .string(var_955.as_str());
    }
    if let Some(var_956) = &input.load_balancer_names {
        let mut array_957 = object.key("LoadBalancerNames").start_array();
        for item_958 in var_956 {
            {
                array_957.value().string(item_958.as_str());
            }
        }
        array_957.finish();
    }
    if let Some(var_959) = &input.health_check_type {
        object.key("HealthCheckType").string(var_959.as_str());
    }
    if input.health_check_grace_period != 0 {
        object.key("HealthCheckGracePeriod").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.health_check_grace_period).into()),
        );
    }
    if let Some(var_960) = &input.created_time {
        object.key("CreatedTime").string(var_960.as_str());
    }
    if let Some(var_961) = &input.mixed_instances_policy {
        let mut object_962 = object.key("MixedInstancesPolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_auto_scaling_auto_scaling_group_mixed_instances_policy_details(&mut object_962, var_961)?;
        object_962.finish();
    }
    if let Some(var_963) = &input.availability_zones {
        let mut array_964 = object.key("AvailabilityZones").start_array();
        for item_965 in var_963 {
            {
                let mut object_966 = array_964.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_auto_scaling_auto_scaling_group_availability_zones_list_details(&mut object_966, item_965)?;
                object_966.finish();
            }
        }
        array_964.finish();
    }
    if let Some(var_967) = &input.launch_template {
        let mut object_968 = object.key("LaunchTemplate").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_auto_scaling_auto_scaling_group_launch_template_launch_template_specification(&mut object_968, var_967)?;
        object_968.finish();
    }
    if input.capacity_rebalance {
        object
            .key("CapacityRebalance")
            .boolean(input.capacity_rebalance);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_code_build_project_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCodeBuildProjectDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_969) = &input.encryption_key {
        object.key("EncryptionKey").string(var_969.as_str());
    }
    if let Some(var_970) = &input.artifacts {
        let mut array_971 = object.key("Artifacts").start_array();
        for item_972 in var_970 {
            {
                let mut object_973 = array_971.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_code_build_project_artifacts_details(&mut object_973, item_972)?;
                object_973.finish();
            }
        }
        array_971.finish();
    }
    if let Some(var_974) = &input.environment {
        let mut object_975 = object.key("Environment").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_code_build_project_environment(
            &mut object_975,
            var_974,
        )?;
        object_975.finish();
    }
    if let Some(var_976) = &input.name {
        object.key("Name").string(var_976.as_str());
    }
    if let Some(var_977) = &input.source {
        let mut object_978 = object.key("Source").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_code_build_project_source(
            &mut object_978,
            var_977,
        )?;
        object_978.finish();
    }
    if let Some(var_979) = &input.service_role {
        object.key("ServiceRole").string(var_979.as_str());
    }
    if let Some(var_980) = &input.logs_config {
        let mut object_981 = object.key("LogsConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_code_build_project_logs_config_details(&mut object_981, var_980)?;
        object_981.finish();
    }
    if let Some(var_982) = &input.vpc_config {
        let mut object_983 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_code_build_project_vpc_config(
            &mut object_983,
            var_982,
        )?;
        object_983.finish();
    }
    if let Some(var_984) = &input.secondary_artifacts {
        let mut array_985 = object.key("SecondaryArtifacts").start_array();
        for item_986 in var_984 {
            {
                let mut object_987 = array_985.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_code_build_project_artifacts_details(&mut object_987, item_986)?;
                object_987.finish();
            }
        }
        array_985.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_cloud_front_distribution_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCloudFrontDistributionDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_988) = &input.cache_behaviors {
        let mut object_989 = object.key("CacheBehaviors").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_cloud_front_distribution_cache_behaviors(&mut object_989, var_988)?;
        object_989.finish();
    }
    if let Some(var_990) = &input.default_cache_behavior {
        let mut object_991 = object.key("DefaultCacheBehavior").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_cloud_front_distribution_default_cache_behavior(&mut object_991, var_990)?;
        object_991.finish();
    }
    if let Some(var_992) = &input.default_root_object {
        object.key("DefaultRootObject").string(var_992.as_str());
    }
    if let Some(var_993) = &input.domain_name {
        object.key("DomainName").string(var_993.as_str());
    }
    if let Some(var_994) = &input.e_tag {
        object.key("ETag").string(var_994.as_str());
    }
    if let Some(var_995) = &input.last_modified_time {
        object.key("LastModifiedTime").string(var_995.as_str());
    }
    if let Some(var_996) = &input.logging {
        let mut object_997 = object.key("Logging").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_cloud_front_distribution_logging(
            &mut object_997,
            var_996,
        )?;
        object_997.finish();
    }
    if let Some(var_998) = &input.origins {
        let mut object_999 = object.key("Origins").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_cloud_front_distribution_origins(
            &mut object_999,
            var_998,
        )?;
        object_999.finish();
    }
    if let Some(var_1000) = &input.origin_groups {
        let mut object_1001 = object.key("OriginGroups").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_cloud_front_distribution_origin_groups(&mut object_1001, var_1000)?;
        object_1001.finish();
    }
    if let Some(var_1002) = &input.viewer_certificate {
        let mut object_1003 = object.key("ViewerCertificate").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_cloud_front_distribution_viewer_certificate(&mut object_1003, var_1002)?;
        object_1003.finish();
    }
    if let Some(var_1004) = &input.status {
        object.key("Status").string(var_1004.as_str());
    }
    if let Some(var_1005) = &input.web_acl_id {
        object.key("WebAclId").string(var_1005.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ec2_instance_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2InstanceDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1006) = &input.r#type {
        object.key("Type").string(var_1006.as_str());
    }
    if let Some(var_1007) = &input.image_id {
        object.key("ImageId").string(var_1007.as_str());
    }
    if let Some(var_1008) = &input.ip_v4_addresses {
        let mut array_1009 = object.key("IpV4Addresses").start_array();
        for item_1010 in var_1008 {
            {
                array_1009.value().string(item_1010.as_str());
            }
        }
        array_1009.finish();
    }
    if let Some(var_1011) = &input.ip_v6_addresses {
        let mut array_1012 = object.key("IpV6Addresses").start_array();
        for item_1013 in var_1011 {
            {
                array_1012.value().string(item_1013.as_str());
            }
        }
        array_1012.finish();
    }
    if let Some(var_1014) = &input.key_name {
        object.key("KeyName").string(var_1014.as_str());
    }
    if let Some(var_1015) = &input.iam_instance_profile_arn {
        object
            .key("IamInstanceProfileArn")
            .string(var_1015.as_str());
    }
    if let Some(var_1016) = &input.vpc_id {
        object.key("VpcId").string(var_1016.as_str());
    }
    if let Some(var_1017) = &input.subnet_id {
        object.key("SubnetId").string(var_1017.as_str());
    }
    if let Some(var_1018) = &input.launched_at {
        object.key("LaunchedAt").string(var_1018.as_str());
    }
    if let Some(var_1019) = &input.network_interfaces {
        let mut array_1020 = object.key("NetworkInterfaces").start_array();
        for item_1021 in var_1019 {
            {
                let mut object_1022 = array_1020.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ec2_instance_network_interfaces_details(&mut object_1022, item_1021)?;
                object_1022.finish();
            }
        }
        array_1020.finish();
    }
    if let Some(var_1023) = &input.virtualization_type {
        object.key("VirtualizationType").string(var_1023.as_str());
    }
    if let Some(var_1024) = &input.metadata_options {
        let mut object_1025 = object.key("MetadataOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ec2_instance_metadata_options(
            &mut object_1025,
            var_1024,
        )?;
        object_1025.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ec2_network_interface_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2NetworkInterfaceDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1026) = &input.attachment {
        let mut object_1027 = object.key("Attachment").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ec2_network_interface_attachment(
            &mut object_1027,
            var_1026,
        )?;
        object_1027.finish();
    }
    if let Some(var_1028) = &input.network_interface_id {
        object.key("NetworkInterfaceId").string(var_1028.as_str());
    }
    if let Some(var_1029) = &input.security_groups {
        let mut array_1030 = object.key("SecurityGroups").start_array();
        for item_1031 in var_1029 {
            {
                let mut object_1032 = array_1030.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ec2_network_interface_security_group(&mut object_1032, item_1031)?;
                object_1032.finish();
            }
        }
        array_1030.finish();
    }
    if input.source_dest_check {
        object
            .key("SourceDestCheck")
            .boolean(input.source_dest_check);
    }
    if let Some(var_1033) = &input.ip_v6_addresses {
        let mut array_1034 = object.key("IpV6Addresses").start_array();
        for item_1035 in var_1033 {
            {
                let mut object_1036 = array_1034.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ec2_network_interface_ip_v6_address_detail(&mut object_1036, item_1035)?;
                object_1036.finish();
            }
        }
        array_1034.finish();
    }
    if let Some(var_1037) = &input.private_ip_addresses {
        let mut array_1038 = object.key("PrivateIpAddresses").start_array();
        for item_1039 in var_1037 {
            {
                let mut object_1040 = array_1038.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ec2_network_interface_private_ip_address_detail(&mut object_1040, item_1039)?;
                object_1040.finish();
            }
        }
        array_1038.finish();
    }
    if let Some(var_1041) = &input.public_dns_name {
        object.key("PublicDnsName").string(var_1041.as_str());
    }
    if let Some(var_1042) = &input.public_ip {
        object.key("PublicIp").string(var_1042.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ec2_security_group_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2SecurityGroupDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1043) = &input.group_name {
        object.key("GroupName").string(var_1043.as_str());
    }
    if let Some(var_1044) = &input.group_id {
        object.key("GroupId").string(var_1044.as_str());
    }
    if let Some(var_1045) = &input.owner_id {
        object.key("OwnerId").string(var_1045.as_str());
    }
    if let Some(var_1046) = &input.vpc_id {
        object.key("VpcId").string(var_1046.as_str());
    }
    if let Some(var_1047) = &input.ip_permissions {
        let mut array_1048 = object.key("IpPermissions").start_array();
        for item_1049 in var_1047 {
            {
                let mut object_1050 = array_1048.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ec2_security_group_ip_permission(&mut object_1050, item_1049)?;
                object_1050.finish();
            }
        }
        array_1048.finish();
    }
    if let Some(var_1051) = &input.ip_permissions_egress {
        let mut array_1052 = object.key("IpPermissionsEgress").start_array();
        for item_1053 in var_1051 {
            {
                let mut object_1054 = array_1052.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ec2_security_group_ip_permission(&mut object_1054, item_1053)?;
                object_1054.finish();
            }
        }
        array_1052.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ec2_volume_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2VolumeDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1055) = &input.create_time {
        object.key("CreateTime").string(var_1055.as_str());
    }
    if let Some(var_1056) = &input.device_name {
        object.key("DeviceName").string(var_1056.as_str());
    }
    if input.encrypted {
        object.key("Encrypted").boolean(input.encrypted);
    }
    if input.size != 0 {
        object.key("Size").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.size).into()),
        );
    }
    if let Some(var_1057) = &input.snapshot_id {
        object.key("SnapshotId").string(var_1057.as_str());
    }
    if let Some(var_1058) = &input.status {
        object.key("Status").string(var_1058.as_str());
    }
    if let Some(var_1059) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1059.as_str());
    }
    if let Some(var_1060) = &input.attachments {
        let mut array_1061 = object.key("Attachments").start_array();
        for item_1062 in var_1060 {
            {
                let mut object_1063 = array_1061.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ec2_volume_attachment(
                    &mut object_1063,
                    item_1062,
                )?;
                object_1063.finish();
            }
        }
        array_1061.finish();
    }
    if let Some(var_1064) = &input.volume_id {
        object.key("VolumeId").string(var_1064.as_str());
    }
    if let Some(var_1065) = &input.volume_type {
        object.key("VolumeType").string(var_1065.as_str());
    }
    if let Some(var_1066) = &input.volume_scan_status {
        object.key("VolumeScanStatus").string(var_1066.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ec2_vpc_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2VpcDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1067) = &input.cidr_block_association_set {
        let mut array_1068 = object.key("CidrBlockAssociationSet").start_array();
        for item_1069 in var_1067 {
            {
                let mut object_1070 = array_1068.value().start_object();
                crate::json_ser::serialize_structure_crate_model_cidr_block_association(
                    &mut object_1070,
                    item_1069,
                )?;
                object_1070.finish();
            }
        }
        array_1068.finish();
    }
    if let Some(var_1071) = &input.ipv6_cidr_block_association_set {
        let mut array_1072 = object.key("Ipv6CidrBlockAssociationSet").start_array();
        for item_1073 in var_1071 {
            {
                let mut object_1074 = array_1072.value().start_object();
                crate::json_ser::serialize_structure_crate_model_ipv6_cidr_block_association(
                    &mut object_1074,
                    item_1073,
                )?;
                object_1074.finish();
            }
        }
        array_1072.finish();
    }
    if let Some(var_1075) = &input.dhcp_options_id {
        object.key("DhcpOptionsId").string(var_1075.as_str());
    }
    if let Some(var_1076) = &input.state {
        object.key("State").string(var_1076.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ec2_eip_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2EipDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1077) = &input.instance_id {
        object.key("InstanceId").string(var_1077.as_str());
    }
    if let Some(var_1078) = &input.public_ip {
        object.key("PublicIp").string(var_1078.as_str());
    }
    if let Some(var_1079) = &input.allocation_id {
        object.key("AllocationId").string(var_1079.as_str());
    }
    if let Some(var_1080) = &input.association_id {
        object.key("AssociationId").string(var_1080.as_str());
    }
    if let Some(var_1081) = &input.domain {
        object.key("Domain").string(var_1081.as_str());
    }
    if let Some(var_1082) = &input.public_ipv4_pool {
        object.key("PublicIpv4Pool").string(var_1082.as_str());
    }
    if let Some(var_1083) = &input.network_border_group {
        object.key("NetworkBorderGroup").string(var_1083.as_str());
    }
    if let Some(var_1084) = &input.network_interface_id {
        object.key("NetworkInterfaceId").string(var_1084.as_str());
    }
    if let Some(var_1085) = &input.network_interface_owner_id {
        object
            .key("NetworkInterfaceOwnerId")
            .string(var_1085.as_str());
    }
    if let Some(var_1086) = &input.private_ip_address {
        object.key("PrivateIpAddress").string(var_1086.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ec2_subnet_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2SubnetDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.assign_ipv6_address_on_creation {
        object
            .key("AssignIpv6AddressOnCreation")
            .boolean(input.assign_ipv6_address_on_creation);
    }
    if let Some(var_1087) = &input.availability_zone {
        object.key("AvailabilityZone").string(var_1087.as_str());
    }
    if let Some(var_1088) = &input.availability_zone_id {
        object.key("AvailabilityZoneId").string(var_1088.as_str());
    }
    if input.available_ip_address_count != 0 {
        object.key("AvailableIpAddressCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.available_ip_address_count).into()),
        );
    }
    if let Some(var_1089) = &input.cidr_block {
        object.key("CidrBlock").string(var_1089.as_str());
    }
    if input.default_for_az {
        object.key("DefaultForAz").boolean(input.default_for_az);
    }
    if input.map_public_ip_on_launch {
        object
            .key("MapPublicIpOnLaunch")
            .boolean(input.map_public_ip_on_launch);
    }
    if let Some(var_1090) = &input.owner_id {
        object.key("OwnerId").string(var_1090.as_str());
    }
    if let Some(var_1091) = &input.state {
        object.key("State").string(var_1091.as_str());
    }
    if let Some(var_1092) = &input.subnet_arn {
        object.key("SubnetArn").string(var_1092.as_str());
    }
    if let Some(var_1093) = &input.subnet_id {
        object.key("SubnetId").string(var_1093.as_str());
    }
    if let Some(var_1094) = &input.vpc_id {
        object.key("VpcId").string(var_1094.as_str());
    }
    if let Some(var_1095) = &input.ipv6_cidr_block_association_set {
        let mut array_1096 = object.key("Ipv6CidrBlockAssociationSet").start_array();
        for item_1097 in var_1095 {
            {
                let mut object_1098 = array_1096.value().start_object();
                crate::json_ser::serialize_structure_crate_model_ipv6_cidr_block_association(
                    &mut object_1098,
                    item_1097,
                )?;
                object_1098.finish();
            }
        }
        array_1096.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ec2_network_acl_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2NetworkAclDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.is_default {
        object.key("IsDefault").boolean(input.is_default);
    }
    if let Some(var_1099) = &input.network_acl_id {
        object.key("NetworkAclId").string(var_1099.as_str());
    }
    if let Some(var_1100) = &input.owner_id {
        object.key("OwnerId").string(var_1100.as_str());
    }
    if let Some(var_1101) = &input.vpc_id {
        object.key("VpcId").string(var_1101.as_str());
    }
    if let Some(var_1102) = &input.associations {
        let mut array_1103 = object.key("Associations").start_array();
        for item_1104 in var_1102 {
            {
                let mut object_1105 = array_1103.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ec2_network_acl_association(
                    &mut object_1105,
                    item_1104,
                )?;
                object_1105.finish();
            }
        }
        array_1103.finish();
    }
    if let Some(var_1106) = &input.entries {
        let mut array_1107 = object.key("Entries").start_array();
        for item_1108 in var_1106 {
            {
                let mut object_1109 = array_1107.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ec2_network_acl_entry(
                    &mut object_1109,
                    item_1108,
                )?;
                object_1109.finish();
            }
        }
        array_1107.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_elbv2_load_balancer_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElbv2LoadBalancerDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1110) = &input.availability_zones {
        let mut array_1111 = object.key("AvailabilityZones").start_array();
        for item_1112 in var_1110 {
            {
                let mut object_1113 = array_1111.value().start_object();
                crate::json_ser::serialize_structure_crate_model_availability_zone(
                    &mut object_1113,
                    item_1112,
                )?;
                object_1113.finish();
            }
        }
        array_1111.finish();
    }
    if let Some(var_1114) = &input.canonical_hosted_zone_id {
        object
            .key("CanonicalHostedZoneId")
            .string(var_1114.as_str());
    }
    if let Some(var_1115) = &input.created_time {
        object.key("CreatedTime").string(var_1115.as_str());
    }
    if let Some(var_1116) = &input.dns_name {
        object.key("DNSName").string(var_1116.as_str());
    }
    if let Some(var_1117) = &input.ip_address_type {
        object.key("IpAddressType").string(var_1117.as_str());
    }
    if let Some(var_1118) = &input.scheme {
        object.key("Scheme").string(var_1118.as_str());
    }
    if let Some(var_1119) = &input.security_groups {
        let mut array_1120 = object.key("SecurityGroups").start_array();
        for item_1121 in var_1119 {
            {
                array_1120.value().string(item_1121.as_str());
            }
        }
        array_1120.finish();
    }
    if let Some(var_1122) = &input.state {
        let mut object_1123 = object.key("State").start_object();
        crate::json_ser::serialize_structure_crate_model_load_balancer_state(
            &mut object_1123,
            var_1122,
        )?;
        object_1123.finish();
    }
    if let Some(var_1124) = &input.r#type {
        object.key("Type").string(var_1124.as_str());
    }
    if let Some(var_1125) = &input.vpc_id {
        object.key("VpcId").string(var_1125.as_str());
    }
    if let Some(var_1126) = &input.load_balancer_attributes {
        let mut array_1127 = object.key("LoadBalancerAttributes").start_array();
        for item_1128 in var_1126 {
            {
                let mut object_1129 = array_1127.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_elbv2_load_balancer_attribute(
                    &mut object_1129,
                    item_1128,
                )?;
                object_1129.finish();
            }
        }
        array_1127.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_elastic_beanstalk_environment_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElasticBeanstalkEnvironmentDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1130) = &input.application_name {
        object.key("ApplicationName").string(var_1130.as_str());
    }
    if let Some(var_1131) = &input.cname {
        object.key("Cname").string(var_1131.as_str());
    }
    if let Some(var_1132) = &input.date_created {
        object.key("DateCreated").string(var_1132.as_str());
    }
    if let Some(var_1133) = &input.date_updated {
        object.key("DateUpdated").string(var_1133.as_str());
    }
    if let Some(var_1134) = &input.description {
        object.key("Description").string(var_1134.as_str());
    }
    if let Some(var_1135) = &input.endpoint_url {
        object.key("EndpointUrl").string(var_1135.as_str());
    }
    if let Some(var_1136) = &input.environment_arn {
        object.key("EnvironmentArn").string(var_1136.as_str());
    }
    if let Some(var_1137) = &input.environment_id {
        object.key("EnvironmentId").string(var_1137.as_str());
    }
    if let Some(var_1138) = &input.environment_links {
        let mut array_1139 = object.key("EnvironmentLinks").start_array();
        for item_1140 in var_1138 {
            {
                let mut object_1141 = array_1139.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_elastic_beanstalk_environment_environment_link(&mut object_1141, item_1140)?;
                object_1141.finish();
            }
        }
        array_1139.finish();
    }
    if let Some(var_1142) = &input.environment_name {
        object.key("EnvironmentName").string(var_1142.as_str());
    }
    if let Some(var_1143) = &input.option_settings {
        let mut array_1144 = object.key("OptionSettings").start_array();
        for item_1145 in var_1143 {
            {
                let mut object_1146 = array_1144.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_elastic_beanstalk_environment_option_setting(&mut object_1146, item_1145)?;
                object_1146.finish();
            }
        }
        array_1144.finish();
    }
    if let Some(var_1147) = &input.platform_arn {
        object.key("PlatformArn").string(var_1147.as_str());
    }
    if let Some(var_1148) = &input.solution_stack_name {
        object.key("SolutionStackName").string(var_1148.as_str());
    }
    if let Some(var_1149) = &input.status {
        object.key("Status").string(var_1149.as_str());
    }
    if let Some(var_1150) = &input.tier {
        let mut object_1151 = object.key("Tier").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_elastic_beanstalk_environment_tier(
            &mut object_1151,
            var_1150,
        )?;
        object_1151.finish();
    }
    if let Some(var_1152) = &input.version_label {
        object.key("VersionLabel").string(var_1152.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_elasticsearch_domain_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElasticsearchDomainDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1153) = &input.access_policies {
        object.key("AccessPolicies").string(var_1153.as_str());
    }
    if let Some(var_1154) = &input.domain_endpoint_options {
        let mut object_1155 = object.key("DomainEndpointOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_elasticsearch_domain_domain_endpoint_options(&mut object_1155, var_1154)?;
        object_1155.finish();
    }
    if let Some(var_1156) = &input.domain_id {
        object.key("DomainId").string(var_1156.as_str());
    }
    if let Some(var_1157) = &input.domain_name {
        object.key("DomainName").string(var_1157.as_str());
    }
    if let Some(var_1158) = &input.endpoint {
        object.key("Endpoint").string(var_1158.as_str());
    }
    if let Some(var_1159) = &input.endpoints {
        let mut object_1160 = object.key("Endpoints").start_object();
        for (key_1161, value_1162) in var_1159 {
            {
                object_1160.key(key_1161).string(value_1162.as_str());
            }
        }
        object_1160.finish();
    }
    if let Some(var_1163) = &input.elasticsearch_version {
        object.key("ElasticsearchVersion").string(var_1163.as_str());
    }
    if let Some(var_1164) = &input.elasticsearch_cluster_config {
        let mut object_1165 = object.key("ElasticsearchClusterConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_elasticsearch_domain_elasticsearch_cluster_config_details(&mut object_1165, var_1164)?;
        object_1165.finish();
    }
    if let Some(var_1166) = &input.encryption_at_rest_options {
        let mut object_1167 = object.key("EncryptionAtRestOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_elasticsearch_domain_encryption_at_rest_options(&mut object_1167, var_1166)?;
        object_1167.finish();
    }
    if let Some(var_1168) = &input.log_publishing_options {
        let mut object_1169 = object.key("LogPublishingOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_elasticsearch_domain_log_publishing_options(&mut object_1169, var_1168)?;
        object_1169.finish();
    }
    if let Some(var_1170) = &input.node_to_node_encryption_options {
        let mut object_1171 = object.key("NodeToNodeEncryptionOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_elasticsearch_domain_node_to_node_encryption_options(&mut object_1171, var_1170)?;
        object_1171.finish();
    }
    if let Some(var_1172) = &input.service_software_options {
        let mut object_1173 = object.key("ServiceSoftwareOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_elasticsearch_domain_service_software_options(&mut object_1173, var_1172)?;
        object_1173.finish();
    }
    if let Some(var_1174) = &input.vpc_options {
        let mut object_1175 = object.key("VPCOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_elasticsearch_domain_vpc_options(
            &mut object_1175,
            var_1174,
        )?;
        object_1175.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_s3_bucket_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3BucketDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1176) = &input.owner_id {
        object.key("OwnerId").string(var_1176.as_str());
    }
    if let Some(var_1177) = &input.owner_name {
        object.key("OwnerName").string(var_1177.as_str());
    }
    if let Some(var_1178) = &input.owner_account_id {
        object.key("OwnerAccountId").string(var_1178.as_str());
    }
    if let Some(var_1179) = &input.created_at {
        object.key("CreatedAt").string(var_1179.as_str());
    }
    if let Some(var_1180) = &input.server_side_encryption_configuration {
        let mut object_1181 = object
            .key("ServerSideEncryptionConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_aws_s3_bucket_server_side_encryption_configuration(&mut object_1181, var_1180)?;
        object_1181.finish();
    }
    if let Some(var_1182) = &input.bucket_lifecycle_configuration {
        let mut object_1183 = object.key("BucketLifecycleConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_s3_bucket_bucket_lifecycle_configuration_details(&mut object_1183, var_1182)?;
        object_1183.finish();
    }
    if let Some(var_1184) = &input.public_access_block_configuration {
        let mut object_1185 = object.key("PublicAccessBlockConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_s3_account_public_access_block_details(&mut object_1185, var_1184)?;
        object_1185.finish();
    }
    if let Some(var_1186) = &input.access_control_list {
        object.key("AccessControlList").string(var_1186.as_str());
    }
    if let Some(var_1187) = &input.bucket_logging_configuration {
        let mut object_1188 = object.key("BucketLoggingConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_s3_bucket_logging_configuration(
            &mut object_1188,
            var_1187,
        )?;
        object_1188.finish();
    }
    if let Some(var_1189) = &input.bucket_website_configuration {
        let mut object_1190 = object.key("BucketWebsiteConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_s3_bucket_website_configuration(
            &mut object_1190,
            var_1189,
        )?;
        object_1190.finish();
    }
    if let Some(var_1191) = &input.bucket_notification_configuration {
        let mut object_1192 = object.key("BucketNotificationConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_s3_bucket_notification_configuration(
            &mut object_1192,
            var_1191,
        )?;
        object_1192.finish();
    }
    if let Some(var_1193) = &input.bucket_versioning_configuration {
        let mut object_1194 = object.key("BucketVersioningConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_s3_bucket_bucket_versioning_configuration(&mut object_1194, var_1193)?;
        object_1194.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_s3_account_public_access_block_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3AccountPublicAccessBlockDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.block_public_acls {
        object
            .key("BlockPublicAcls")
            .boolean(input.block_public_acls);
    }
    if input.block_public_policy {
        object
            .key("BlockPublicPolicy")
            .boolean(input.block_public_policy);
    }
    if input.ignore_public_acls {
        object
            .key("IgnorePublicAcls")
            .boolean(input.ignore_public_acls);
    }
    if input.restrict_public_buckets {
        object
            .key("RestrictPublicBuckets")
            .boolean(input.restrict_public_buckets);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_s3_object_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3ObjectDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1195) = &input.last_modified {
        object.key("LastModified").string(var_1195.as_str());
    }
    if let Some(var_1196) = &input.e_tag {
        object.key("ETag").string(var_1196.as_str());
    }
    if let Some(var_1197) = &input.version_id {
        object.key("VersionId").string(var_1197.as_str());
    }
    if let Some(var_1198) = &input.content_type {
        object.key("ContentType").string(var_1198.as_str());
    }
    if let Some(var_1199) = &input.server_side_encryption {
        object.key("ServerSideEncryption").string(var_1199.as_str());
    }
    if let Some(var_1200) = &input.ssekms_key_id {
        object.key("SSEKMSKeyId").string(var_1200.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_secrets_manager_secret_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsSecretsManagerSecretDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1201) = &input.rotation_rules {
        let mut object_1202 = object.key("RotationRules").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_secrets_manager_secret_rotation_rules(
            &mut object_1202,
            var_1201,
        )?;
        object_1202.finish();
    }
    if input.rotation_occurred_within_frequency {
        object
            .key("RotationOccurredWithinFrequency")
            .boolean(input.rotation_occurred_within_frequency);
    }
    if let Some(var_1203) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1203.as_str());
    }
    if input.rotation_enabled {
        object
            .key("RotationEnabled")
            .boolean(input.rotation_enabled);
    }
    if let Some(var_1204) = &input.rotation_lambda_arn {
        object.key("RotationLambdaArn").string(var_1204.as_str());
    }
    if input.deleted {
        object.key("Deleted").boolean(input.deleted);
    }
    if let Some(var_1205) = &input.name {
        object.key("Name").string(var_1205.as_str());
    }
    if let Some(var_1206) = &input.description {
        object.key("Description").string(var_1206.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_iam_access_key_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsIamAccessKeyDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1207) = &input.user_name {
        object.key("UserName").string(var_1207.as_str());
    }
    if let Some(var_1208) = &input.status {
        object.key("Status").string(var_1208.as_str());
    }
    if let Some(var_1209) = &input.created_at {
        object.key("CreatedAt").string(var_1209.as_str());
    }
    if let Some(var_1210) = &input.principal_id {
        object.key("PrincipalId").string(var_1210.as_str());
    }
    if let Some(var_1211) = &input.principal_type {
        object.key("PrincipalType").string(var_1211.as_str());
    }
    if let Some(var_1212) = &input.principal_name {
        object.key("PrincipalName").string(var_1212.as_str());
    }
    if let Some(var_1213) = &input.account_id {
        object.key("AccountId").string(var_1213.as_str());
    }
    if let Some(var_1214) = &input.access_key_id {
        object.key("AccessKeyId").string(var_1214.as_str());
    }
    if let Some(var_1215) = &input.session_context {
        let mut object_1216 = object.key("SessionContext").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_iam_access_key_session_context(
            &mut object_1216,
            var_1215,
        )?;
        object_1216.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_iam_user_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsIamUserDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1217) = &input.attached_managed_policies {
        let mut array_1218 = object.key("AttachedManagedPolicies").start_array();
        for item_1219 in var_1217 {
            {
                let mut object_1220 = array_1218.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_iam_attached_managed_policy(
                    &mut object_1220,
                    item_1219,
                )?;
                object_1220.finish();
            }
        }
        array_1218.finish();
    }
    if let Some(var_1221) = &input.create_date {
        object.key("CreateDate").string(var_1221.as_str());
    }
    if let Some(var_1222) = &input.group_list {
        let mut array_1223 = object.key("GroupList").start_array();
        for item_1224 in var_1222 {
            {
                array_1223.value().string(item_1224.as_str());
            }
        }
        array_1223.finish();
    }
    if let Some(var_1225) = &input.path {
        object.key("Path").string(var_1225.as_str());
    }
    if let Some(var_1226) = &input.permissions_boundary {
        let mut object_1227 = object.key("PermissionsBoundary").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_iam_permissions_boundary(
            &mut object_1227,
            var_1226,
        )?;
        object_1227.finish();
    }
    if let Some(var_1228) = &input.user_id {
        object.key("UserId").string(var_1228.as_str());
    }
    if let Some(var_1229) = &input.user_name {
        object.key("UserName").string(var_1229.as_str());
    }
    if let Some(var_1230) = &input.user_policy_list {
        let mut array_1231 = object.key("UserPolicyList").start_array();
        for item_1232 in var_1230 {
            {
                let mut object_1233 = array_1231.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_iam_user_policy(
                    &mut object_1233,
                    item_1232,
                )?;
                object_1233.finish();
            }
        }
        array_1231.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_iam_policy_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsIamPolicyDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.attachment_count != 0 {
        object.key("AttachmentCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.attachment_count).into()),
        );
    }
    if let Some(var_1234) = &input.create_date {
        object.key("CreateDate").string(var_1234.as_str());
    }
    if let Some(var_1235) = &input.default_version_id {
        object.key("DefaultVersionId").string(var_1235.as_str());
    }
    if let Some(var_1236) = &input.description {
        object.key("Description").string(var_1236.as_str());
    }
    if input.is_attachable {
        object.key("IsAttachable").boolean(input.is_attachable);
    }
    if let Some(var_1237) = &input.path {
        object.key("Path").string(var_1237.as_str());
    }
    if input.permissions_boundary_usage_count != 0 {
        object.key("PermissionsBoundaryUsageCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.permissions_boundary_usage_count).into()),
        );
    }
    if let Some(var_1238) = &input.policy_id {
        object.key("PolicyId").string(var_1238.as_str());
    }
    if let Some(var_1239) = &input.policy_name {
        object.key("PolicyName").string(var_1239.as_str());
    }
    if let Some(var_1240) = &input.policy_version_list {
        let mut array_1241 = object.key("PolicyVersionList").start_array();
        for item_1242 in var_1240 {
            {
                let mut object_1243 = array_1241.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_iam_policy_version(
                    &mut object_1243,
                    item_1242,
                )?;
                object_1243.finish();
            }
        }
        array_1241.finish();
    }
    if let Some(var_1244) = &input.update_date {
        object.key("UpdateDate").string(var_1244.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_api_gateway_v2_stage_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsApiGatewayV2StageDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1245) = &input.client_certificate_id {
        object.key("ClientCertificateId").string(var_1245.as_str());
    }
    if let Some(var_1246) = &input.created_date {
        object.key("CreatedDate").string(var_1246.as_str());
    }
    if let Some(var_1247) = &input.description {
        object.key("Description").string(var_1247.as_str());
    }
    if let Some(var_1248) = &input.default_route_settings {
        let mut object_1249 = object.key("DefaultRouteSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_api_gateway_v2_route_settings(
            &mut object_1249,
            var_1248,
        )?;
        object_1249.finish();
    }
    if let Some(var_1250) = &input.deployment_id {
        object.key("DeploymentId").string(var_1250.as_str());
    }
    if let Some(var_1251) = &input.last_updated_date {
        object.key("LastUpdatedDate").string(var_1251.as_str());
    }
    if let Some(var_1252) = &input.route_settings {
        let mut object_1253 = object.key("RouteSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_api_gateway_v2_route_settings(
            &mut object_1253,
            var_1252,
        )?;
        object_1253.finish();
    }
    if let Some(var_1254) = &input.stage_name {
        object.key("StageName").string(var_1254.as_str());
    }
    if let Some(var_1255) = &input.stage_variables {
        let mut object_1256 = object.key("StageVariables").start_object();
        for (key_1257, value_1258) in var_1255 {
            {
                object_1256.key(key_1257).string(value_1258.as_str());
            }
        }
        object_1256.finish();
    }
    if let Some(var_1259) = &input.access_log_settings {
        let mut object_1260 = object.key("AccessLogSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_api_gateway_access_log_settings(
            &mut object_1260,
            var_1259,
        )?;
        object_1260.finish();
    }
    if input.auto_deploy {
        object.key("AutoDeploy").boolean(input.auto_deploy);
    }
    if let Some(var_1261) = &input.last_deployment_status_message {
        object
            .key("LastDeploymentStatusMessage")
            .string(var_1261.as_str());
    }
    if input.api_gateway_managed {
        object
            .key("ApiGatewayManaged")
            .boolean(input.api_gateway_managed);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_api_gateway_v2_api_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsApiGatewayV2ApiDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1262) = &input.api_endpoint {
        object.key("ApiEndpoint").string(var_1262.as_str());
    }
    if let Some(var_1263) = &input.api_id {
        object.key("ApiId").string(var_1263.as_str());
    }
    if let Some(var_1264) = &input.api_key_selection_expression {
        object
            .key("ApiKeySelectionExpression")
            .string(var_1264.as_str());
    }
    if let Some(var_1265) = &input.created_date {
        object.key("CreatedDate").string(var_1265.as_str());
    }
    if let Some(var_1266) = &input.description {
        object.key("Description").string(var_1266.as_str());
    }
    if let Some(var_1267) = &input.version {
        object.key("Version").string(var_1267.as_str());
    }
    if let Some(var_1268) = &input.name {
        object.key("Name").string(var_1268.as_str());
    }
    if let Some(var_1269) = &input.protocol_type {
        object.key("ProtocolType").string(var_1269.as_str());
    }
    if let Some(var_1270) = &input.route_selection_expression {
        object
            .key("RouteSelectionExpression")
            .string(var_1270.as_str());
    }
    if let Some(var_1271) = &input.cors_configuration {
        let mut object_1272 = object.key("CorsConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_cors_configuration(
            &mut object_1272,
            var_1271,
        )?;
        object_1272.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_dynamo_db_table_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsDynamoDbTableDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1273) = &input.attribute_definitions {
        let mut array_1274 = object.key("AttributeDefinitions").start_array();
        for item_1275 in var_1273 {
            {
                let mut object_1276 = array_1274.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_dynamo_db_table_attribute_definition(&mut object_1276, item_1275)?;
                object_1276.finish();
            }
        }
        array_1274.finish();
    }
    if let Some(var_1277) = &input.billing_mode_summary {
        let mut object_1278 = object.key("BillingModeSummary").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_dynamo_db_table_billing_mode_summary(
            &mut object_1278,
            var_1277,
        )?;
        object_1278.finish();
    }
    if let Some(var_1279) = &input.creation_date_time {
        object.key("CreationDateTime").string(var_1279.as_str());
    }
    if let Some(var_1280) = &input.global_secondary_indexes {
        let mut array_1281 = object.key("GlobalSecondaryIndexes").start_array();
        for item_1282 in var_1280 {
            {
                let mut object_1283 = array_1281.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_dynamo_db_table_global_secondary_index(&mut object_1283, item_1282)?;
                object_1283.finish();
            }
        }
        array_1281.finish();
    }
    if let Some(var_1284) = &input.global_table_version {
        object.key("GlobalTableVersion").string(var_1284.as_str());
    }
    if input.item_count != 0 {
        object.key("ItemCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.item_count).into()),
        );
    }
    if let Some(var_1285) = &input.key_schema {
        let mut array_1286 = object.key("KeySchema").start_array();
        for item_1287 in var_1285 {
            {
                let mut object_1288 = array_1286.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_dynamo_db_table_key_schema(
                    &mut object_1288,
                    item_1287,
                )?;
                object_1288.finish();
            }
        }
        array_1286.finish();
    }
    if let Some(var_1289) = &input.latest_stream_arn {
        object.key("LatestStreamArn").string(var_1289.as_str());
    }
    if let Some(var_1290) = &input.latest_stream_label {
        object.key("LatestStreamLabel").string(var_1290.as_str());
    }
    if let Some(var_1291) = &input.local_secondary_indexes {
        let mut array_1292 = object.key("LocalSecondaryIndexes").start_array();
        for item_1293 in var_1291 {
            {
                let mut object_1294 = array_1292.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_dynamo_db_table_local_secondary_index(&mut object_1294, item_1293)?;
                object_1294.finish();
            }
        }
        array_1292.finish();
    }
    if let Some(var_1295) = &input.provisioned_throughput {
        let mut object_1296 = object.key("ProvisionedThroughput").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_dynamo_db_table_provisioned_throughput(&mut object_1296, var_1295)?;
        object_1296.finish();
    }
    if let Some(var_1297) = &input.replicas {
        let mut array_1298 = object.key("Replicas").start_array();
        for item_1299 in var_1297 {
            {
                let mut object_1300 = array_1298.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_dynamo_db_table_replica(
                    &mut object_1300,
                    item_1299,
                )?;
                object_1300.finish();
            }
        }
        array_1298.finish();
    }
    if let Some(var_1301) = &input.restore_summary {
        let mut object_1302 = object.key("RestoreSummary").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_dynamo_db_table_restore_summary(
            &mut object_1302,
            var_1301,
        )?;
        object_1302.finish();
    }
    if let Some(var_1303) = &input.sse_description {
        let mut object_1304 = object.key("SseDescription").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_dynamo_db_table_sse_description(
            &mut object_1304,
            var_1303,
        )?;
        object_1304.finish();
    }
    if let Some(var_1305) = &input.stream_specification {
        let mut object_1306 = object.key("StreamSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_dynamo_db_table_stream_specification(
            &mut object_1306,
            var_1305,
        )?;
        object_1306.finish();
    }
    if let Some(var_1307) = &input.table_id {
        object.key("TableId").string(var_1307.as_str());
    }
    if let Some(var_1308) = &input.table_name {
        object.key("TableName").string(var_1308.as_str());
    }
    if input.table_size_bytes != 0 {
        object.key("TableSizeBytes").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.table_size_bytes).into()),
        );
    }
    if let Some(var_1309) = &input.table_status {
        object.key("TableStatus").string(var_1309.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_api_gateway_stage_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsApiGatewayStageDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1310) = &input.deployment_id {
        object.key("DeploymentId").string(var_1310.as_str());
    }
    if let Some(var_1311) = &input.client_certificate_id {
        object.key("ClientCertificateId").string(var_1311.as_str());
    }
    if let Some(var_1312) = &input.stage_name {
        object.key("StageName").string(var_1312.as_str());
    }
    if let Some(var_1313) = &input.description {
        object.key("Description").string(var_1313.as_str());
    }
    if input.cache_cluster_enabled {
        object
            .key("CacheClusterEnabled")
            .boolean(input.cache_cluster_enabled);
    }
    if let Some(var_1314) = &input.cache_cluster_size {
        object.key("CacheClusterSize").string(var_1314.as_str());
    }
    if let Some(var_1315) = &input.cache_cluster_status {
        object.key("CacheClusterStatus").string(var_1315.as_str());
    }
    if let Some(var_1316) = &input.method_settings {
        let mut array_1317 = object.key("MethodSettings").start_array();
        for item_1318 in var_1316 {
            {
                let mut object_1319 = array_1317.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_api_gateway_method_settings(
                    &mut object_1319,
                    item_1318,
                )?;
                object_1319.finish();
            }
        }
        array_1317.finish();
    }
    if let Some(var_1320) = &input.variables {
        let mut object_1321 = object.key("Variables").start_object();
        for (key_1322, value_1323) in var_1320 {
            {
                object_1321.key(key_1322).string(value_1323.as_str());
            }
        }
        object_1321.finish();
    }
    if let Some(var_1324) = &input.documentation_version {
        object.key("DocumentationVersion").string(var_1324.as_str());
    }
    if let Some(var_1325) = &input.access_log_settings {
        let mut object_1326 = object.key("AccessLogSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_api_gateway_access_log_settings(
            &mut object_1326,
            var_1325,
        )?;
        object_1326.finish();
    }
    if let Some(var_1327) = &input.canary_settings {
        let mut object_1328 = object.key("CanarySettings").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_api_gateway_canary_settings(
            &mut object_1328,
            var_1327,
        )?;
        object_1328.finish();
    }
    if input.tracing_enabled {
        object.key("TracingEnabled").boolean(input.tracing_enabled);
    }
    if let Some(var_1329) = &input.created_date {
        object.key("CreatedDate").string(var_1329.as_str());
    }
    if let Some(var_1330) = &input.last_updated_date {
        object.key("LastUpdatedDate").string(var_1330.as_str());
    }
    if let Some(var_1331) = &input.web_acl_arn {
        object.key("WebAclArn").string(var_1331.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_api_gateway_rest_api_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsApiGatewayRestApiDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1332) = &input.id {
        object.key("Id").string(var_1332.as_str());
    }
    if let Some(var_1333) = &input.name {
        object.key("Name").string(var_1333.as_str());
    }
    if let Some(var_1334) = &input.description {
        object.key("Description").string(var_1334.as_str());
    }
    if let Some(var_1335) = &input.created_date {
        object.key("CreatedDate").string(var_1335.as_str());
    }
    if let Some(var_1336) = &input.version {
        object.key("Version").string(var_1336.as_str());
    }
    if let Some(var_1337) = &input.binary_media_types {
        let mut array_1338 = object.key("BinaryMediaTypes").start_array();
        for item_1339 in var_1337 {
            {
                array_1338.value().string(item_1339.as_str());
            }
        }
        array_1338.finish();
    }
    if input.minimum_compression_size != 0 {
        object.key("MinimumCompressionSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.minimum_compression_size).into()),
        );
    }
    if let Some(var_1340) = &input.api_key_source {
        object.key("ApiKeySource").string(var_1340.as_str());
    }
    if let Some(var_1341) = &input.endpoint_configuration {
        let mut object_1342 = object.key("EndpointConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_api_gateway_endpoint_configuration(
            &mut object_1342,
            var_1341,
        )?;
        object_1342.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_cloud_trail_trail_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCloudTrailTrailDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1343) = &input.cloud_watch_logs_log_group_arn {
        object
            .key("CloudWatchLogsLogGroupArn")
            .string(var_1343.as_str());
    }
    if let Some(var_1344) = &input.cloud_watch_logs_role_arn {
        object
            .key("CloudWatchLogsRoleArn")
            .string(var_1344.as_str());
    }
    if input.has_custom_event_selectors {
        object
            .key("HasCustomEventSelectors")
            .boolean(input.has_custom_event_selectors);
    }
    if let Some(var_1345) = &input.home_region {
        object.key("HomeRegion").string(var_1345.as_str());
    }
    if input.include_global_service_events {
        object
            .key("IncludeGlobalServiceEvents")
            .boolean(input.include_global_service_events);
    }
    if input.is_multi_region_trail {
        object
            .key("IsMultiRegionTrail")
            .boolean(input.is_multi_region_trail);
    }
    if input.is_organization_trail {
        object
            .key("IsOrganizationTrail")
            .boolean(input.is_organization_trail);
    }
    if let Some(var_1346) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1346.as_str());
    }
    if input.log_file_validation_enabled {
        object
            .key("LogFileValidationEnabled")
            .boolean(input.log_file_validation_enabled);
    }
    if let Some(var_1347) = &input.name {
        object.key("Name").string(var_1347.as_str());
    }
    if let Some(var_1348) = &input.s3_bucket_name {
        object.key("S3BucketName").string(var_1348.as_str());
    }
    if let Some(var_1349) = &input.s3_key_prefix {
        object.key("S3KeyPrefix").string(var_1349.as_str());
    }
    if let Some(var_1350) = &input.sns_topic_arn {
        object.key("SnsTopicArn").string(var_1350.as_str());
    }
    if let Some(var_1351) = &input.sns_topic_name {
        object.key("SnsTopicName").string(var_1351.as_str());
    }
    if let Some(var_1352) = &input.trail_arn {
        object.key("TrailArn").string(var_1352.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ssm_patch_compliance_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsSsmPatchComplianceDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1353) = &input.patch {
        let mut object_1354 = object.key("Patch").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ssm_patch(&mut object_1354, var_1353)?;
        object_1354.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_certificate_manager_certificate_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCertificateManagerCertificateDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1355) = &input.certificate_authority_arn {
        object
            .key("CertificateAuthorityArn")
            .string(var_1355.as_str());
    }
    if let Some(var_1356) = &input.created_at {
        object.key("CreatedAt").string(var_1356.as_str());
    }
    if let Some(var_1357) = &input.domain_name {
        object.key("DomainName").string(var_1357.as_str());
    }
    if let Some(var_1358) = &input.domain_validation_options {
        let mut array_1359 = object.key("DomainValidationOptions").start_array();
        for item_1360 in var_1358 {
            {
                let mut object_1361 = array_1359.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_certificate_manager_certificate_domain_validation_option(&mut object_1361, item_1360)?;
                object_1361.finish();
            }
        }
        array_1359.finish();
    }
    if let Some(var_1362) = &input.extended_key_usages {
        let mut array_1363 = object.key("ExtendedKeyUsages").start_array();
        for item_1364 in var_1362 {
            {
                let mut object_1365 = array_1363.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_certificate_manager_certificate_extended_key_usage(&mut object_1365, item_1364)?;
                object_1365.finish();
            }
        }
        array_1363.finish();
    }
    if let Some(var_1366) = &input.failure_reason {
        object.key("FailureReason").string(var_1366.as_str());
    }
    if let Some(var_1367) = &input.imported_at {
        object.key("ImportedAt").string(var_1367.as_str());
    }
    if let Some(var_1368) = &input.in_use_by {
        let mut array_1369 = object.key("InUseBy").start_array();
        for item_1370 in var_1368 {
            {
                array_1369.value().string(item_1370.as_str());
            }
        }
        array_1369.finish();
    }
    if let Some(var_1371) = &input.issued_at {
        object.key("IssuedAt").string(var_1371.as_str());
    }
    if let Some(var_1372) = &input.issuer {
        object.key("Issuer").string(var_1372.as_str());
    }
    if let Some(var_1373) = &input.key_algorithm {
        object.key("KeyAlgorithm").string(var_1373.as_str());
    }
    if let Some(var_1374) = &input.key_usages {
        let mut array_1375 = object.key("KeyUsages").start_array();
        for item_1376 in var_1374 {
            {
                let mut object_1377 = array_1375.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_certificate_manager_certificate_key_usage(&mut object_1377, item_1376)?;
                object_1377.finish();
            }
        }
        array_1375.finish();
    }
    if let Some(var_1378) = &input.not_after {
        object.key("NotAfter").string(var_1378.as_str());
    }
    if let Some(var_1379) = &input.not_before {
        object.key("NotBefore").string(var_1379.as_str());
    }
    if let Some(var_1380) = &input.options {
        let mut object_1381 = object.key("Options").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_certificate_manager_certificate_options(&mut object_1381, var_1380)?;
        object_1381.finish();
    }
    if let Some(var_1382) = &input.renewal_eligibility {
        object.key("RenewalEligibility").string(var_1382.as_str());
    }
    if let Some(var_1383) = &input.renewal_summary {
        let mut object_1384 = object.key("RenewalSummary").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_certificate_manager_certificate_renewal_summary(&mut object_1384, var_1383)?;
        object_1384.finish();
    }
    if let Some(var_1385) = &input.serial {
        object.key("Serial").string(var_1385.as_str());
    }
    if let Some(var_1386) = &input.signature_algorithm {
        object.key("SignatureAlgorithm").string(var_1386.as_str());
    }
    if let Some(var_1387) = &input.status {
        object.key("Status").string(var_1387.as_str());
    }
    if let Some(var_1388) = &input.subject {
        object.key("Subject").string(var_1388.as_str());
    }
    if let Some(var_1389) = &input.subject_alternative_names {
        let mut array_1390 = object.key("SubjectAlternativeNames").start_array();
        for item_1391 in var_1389 {
            {
                array_1390.value().string(item_1391.as_str());
            }
        }
        array_1390.finish();
    }
    if let Some(var_1392) = &input.r#type {
        object.key("Type").string(var_1392.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_redshift_cluster_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRedshiftClusterDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.allow_version_upgrade {
        object
            .key("AllowVersionUpgrade")
            .boolean(input.allow_version_upgrade);
    }
    if input.automated_snapshot_retention_period != 0 {
        object.key("AutomatedSnapshotRetentionPeriod").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.automated_snapshot_retention_period).into()),
        );
    }
    if let Some(var_1393) = &input.availability_zone {
        object.key("AvailabilityZone").string(var_1393.as_str());
    }
    if let Some(var_1394) = &input.cluster_availability_status {
        object
            .key("ClusterAvailabilityStatus")
            .string(var_1394.as_str());
    }
    if let Some(var_1395) = &input.cluster_create_time {
        object.key("ClusterCreateTime").string(var_1395.as_str());
    }
    if let Some(var_1396) = &input.cluster_identifier {
        object.key("ClusterIdentifier").string(var_1396.as_str());
    }
    if let Some(var_1397) = &input.cluster_nodes {
        let mut array_1398 = object.key("ClusterNodes").start_array();
        for item_1399 in var_1397 {
            {
                let mut object_1400 = array_1398.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_redshift_cluster_cluster_node(
                    &mut object_1400,
                    item_1399,
                )?;
                object_1400.finish();
            }
        }
        array_1398.finish();
    }
    if let Some(var_1401) = &input.cluster_parameter_groups {
        let mut array_1402 = object.key("ClusterParameterGroups").start_array();
        for item_1403 in var_1401 {
            {
                let mut object_1404 = array_1402.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_redshift_cluster_cluster_parameter_group(&mut object_1404, item_1403)?;
                object_1404.finish();
            }
        }
        array_1402.finish();
    }
    if let Some(var_1405) = &input.cluster_public_key {
        object.key("ClusterPublicKey").string(var_1405.as_str());
    }
    if let Some(var_1406) = &input.cluster_revision_number {
        object
            .key("ClusterRevisionNumber")
            .string(var_1406.as_str());
    }
    if let Some(var_1407) = &input.cluster_security_groups {
        let mut array_1408 = object.key("ClusterSecurityGroups").start_array();
        for item_1409 in var_1407 {
            {
                let mut object_1410 = array_1408.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_redshift_cluster_cluster_security_group(&mut object_1410, item_1409)?;
                object_1410.finish();
            }
        }
        array_1408.finish();
    }
    if let Some(var_1411) = &input.cluster_snapshot_copy_status {
        let mut object_1412 = object.key("ClusterSnapshotCopyStatus").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_redshift_cluster_cluster_snapshot_copy_status(&mut object_1412, var_1411)?;
        object_1412.finish();
    }
    if let Some(var_1413) = &input.cluster_status {
        object.key("ClusterStatus").string(var_1413.as_str());
    }
    if let Some(var_1414) = &input.cluster_subnet_group_name {
        object
            .key("ClusterSubnetGroupName")
            .string(var_1414.as_str());
    }
    if let Some(var_1415) = &input.cluster_version {
        object.key("ClusterVersion").string(var_1415.as_str());
    }
    if let Some(var_1416) = &input.db_name {
        object.key("DBName").string(var_1416.as_str());
    }
    if let Some(var_1417) = &input.deferred_maintenance_windows {
        let mut array_1418 = object.key("DeferredMaintenanceWindows").start_array();
        for item_1419 in var_1417 {
            {
                let mut object_1420 = array_1418.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_redshift_cluster_deferred_maintenance_window(&mut object_1420, item_1419)?;
                object_1420.finish();
            }
        }
        array_1418.finish();
    }
    if let Some(var_1421) = &input.elastic_ip_status {
        let mut object_1422 = object.key("ElasticIpStatus").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_redshift_cluster_elastic_ip_status(
            &mut object_1422,
            var_1421,
        )?;
        object_1422.finish();
    }
    if let Some(var_1423) = &input.elastic_resize_number_of_node_options {
        object
            .key("ElasticResizeNumberOfNodeOptions")
            .string(var_1423.as_str());
    }
    if input.encrypted {
        object.key("Encrypted").boolean(input.encrypted);
    }
    if let Some(var_1424) = &input.endpoint {
        let mut object_1425 = object.key("Endpoint").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_redshift_cluster_endpoint(
            &mut object_1425,
            var_1424,
        )?;
        object_1425.finish();
    }
    if input.enhanced_vpc_routing {
        object
            .key("EnhancedVpcRouting")
            .boolean(input.enhanced_vpc_routing);
    }
    if let Some(var_1426) = &input.expected_next_snapshot_schedule_time {
        object
            .key("ExpectedNextSnapshotScheduleTime")
            .string(var_1426.as_str());
    }
    if let Some(var_1427) = &input.expected_next_snapshot_schedule_time_status {
        object
            .key("ExpectedNextSnapshotScheduleTimeStatus")
            .string(var_1427.as_str());
    }
    if let Some(var_1428) = &input.hsm_status {
        let mut object_1429 = object.key("HsmStatus").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_redshift_cluster_hsm_status(
            &mut object_1429,
            var_1428,
        )?;
        object_1429.finish();
    }
    if let Some(var_1430) = &input.iam_roles {
        let mut array_1431 = object.key("IamRoles").start_array();
        for item_1432 in var_1430 {
            {
                let mut object_1433 = array_1431.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_redshift_cluster_iam_role(
                    &mut object_1433,
                    item_1432,
                )?;
                object_1433.finish();
            }
        }
        array_1431.finish();
    }
    if let Some(var_1434) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1434.as_str());
    }
    if let Some(var_1435) = &input.maintenance_track_name {
        object.key("MaintenanceTrackName").string(var_1435.as_str());
    }
    if input.manual_snapshot_retention_period != 0 {
        object.key("ManualSnapshotRetentionPeriod").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.manual_snapshot_retention_period).into()),
        );
    }
    if let Some(var_1436) = &input.master_username {
        object.key("MasterUsername").string(var_1436.as_str());
    }
    if let Some(var_1437) = &input.next_maintenance_window_start_time {
        object
            .key("NextMaintenanceWindowStartTime")
            .string(var_1437.as_str());
    }
    if let Some(var_1438) = &input.node_type {
        object.key("NodeType").string(var_1438.as_str());
    }
    if input.number_of_nodes != 0 {
        object.key("NumberOfNodes").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_nodes).into()),
        );
    }
    if let Some(var_1439) = &input.pending_actions {
        let mut array_1440 = object.key("PendingActions").start_array();
        for item_1441 in var_1439 {
            {
                array_1440.value().string(item_1441.as_str());
            }
        }
        array_1440.finish();
    }
    if let Some(var_1442) = &input.pending_modified_values {
        let mut object_1443 = object.key("PendingModifiedValues").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_redshift_cluster_pending_modified_values(&mut object_1443, var_1442)?;
        object_1443.finish();
    }
    if let Some(var_1444) = &input.preferred_maintenance_window {
        object
            .key("PreferredMaintenanceWindow")
            .string(var_1444.as_str());
    }
    if input.publicly_accessible {
        object
            .key("PubliclyAccessible")
            .boolean(input.publicly_accessible);
    }
    if let Some(var_1445) = &input.resize_info {
        let mut object_1446 = object.key("ResizeInfo").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_redshift_cluster_resize_info(
            &mut object_1446,
            var_1445,
        )?;
        object_1446.finish();
    }
    if let Some(var_1447) = &input.restore_status {
        let mut object_1448 = object.key("RestoreStatus").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_redshift_cluster_restore_status(
            &mut object_1448,
            var_1447,
        )?;
        object_1448.finish();
    }
    if let Some(var_1449) = &input.snapshot_schedule_identifier {
        object
            .key("SnapshotScheduleIdentifier")
            .string(var_1449.as_str());
    }
    if let Some(var_1450) = &input.snapshot_schedule_state {
        object
            .key("SnapshotScheduleState")
            .string(var_1450.as_str());
    }
    if let Some(var_1451) = &input.vpc_id {
        object.key("VpcId").string(var_1451.as_str());
    }
    if let Some(var_1452) = &input.vpc_security_groups {
        let mut array_1453 = object.key("VpcSecurityGroups").start_array();
        for item_1454 in var_1452 {
            {
                let mut object_1455 = array_1453.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_redshift_cluster_vpc_security_group(&mut object_1455, item_1454)?;
                object_1455.finish();
            }
        }
        array_1453.finish();
    }
    if let Some(var_1456) = &input.logging_status {
        let mut object_1457 = object.key("LoggingStatus").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_redshift_cluster_logging_status(
            &mut object_1457,
            var_1456,
        )?;
        object_1457.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_elb_load_balancer_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElbLoadBalancerDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1458) = &input.availability_zones {
        let mut array_1459 = object.key("AvailabilityZones").start_array();
        for item_1460 in var_1458 {
            {
                array_1459.value().string(item_1460.as_str());
            }
        }
        array_1459.finish();
    }
    if let Some(var_1461) = &input.backend_server_descriptions {
        let mut array_1462 = object.key("BackendServerDescriptions").start_array();
        for item_1463 in var_1461 {
            {
                let mut object_1464 = array_1462.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_elb_load_balancer_backend_server_description(&mut object_1464, item_1463)?;
                object_1464.finish();
            }
        }
        array_1462.finish();
    }
    if let Some(var_1465) = &input.canonical_hosted_zone_name {
        object
            .key("CanonicalHostedZoneName")
            .string(var_1465.as_str());
    }
    if let Some(var_1466) = &input.canonical_hosted_zone_name_id {
        object
            .key("CanonicalHostedZoneNameID")
            .string(var_1466.as_str());
    }
    if let Some(var_1467) = &input.created_time {
        object.key("CreatedTime").string(var_1467.as_str());
    }
    if let Some(var_1468) = &input.dns_name {
        object.key("DnsName").string(var_1468.as_str());
    }
    if let Some(var_1469) = &input.health_check {
        let mut object_1470 = object.key("HealthCheck").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_elb_load_balancer_health_check(
            &mut object_1470,
            var_1469,
        )?;
        object_1470.finish();
    }
    if let Some(var_1471) = &input.instances {
        let mut array_1472 = object.key("Instances").start_array();
        for item_1473 in var_1471 {
            {
                let mut object_1474 = array_1472.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_elb_load_balancer_instance(
                    &mut object_1474,
                    item_1473,
                )?;
                object_1474.finish();
            }
        }
        array_1472.finish();
    }
    if let Some(var_1475) = &input.listener_descriptions {
        let mut array_1476 = object.key("ListenerDescriptions").start_array();
        for item_1477 in var_1475 {
            {
                let mut object_1478 = array_1476.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_elb_load_balancer_listener_description(&mut object_1478, item_1477)?;
                object_1478.finish();
            }
        }
        array_1476.finish();
    }
    if let Some(var_1479) = &input.load_balancer_attributes {
        let mut object_1480 = object.key("LoadBalancerAttributes").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_elb_load_balancer_attributes(
            &mut object_1480,
            var_1479,
        )?;
        object_1480.finish();
    }
    if let Some(var_1481) = &input.load_balancer_name {
        object.key("LoadBalancerName").string(var_1481.as_str());
    }
    if let Some(var_1482) = &input.policies {
        let mut object_1483 = object.key("Policies").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_elb_load_balancer_policies(
            &mut object_1483,
            var_1482,
        )?;
        object_1483.finish();
    }
    if let Some(var_1484) = &input.scheme {
        object.key("Scheme").string(var_1484.as_str());
    }
    if let Some(var_1485) = &input.security_groups {
        let mut array_1486 = object.key("SecurityGroups").start_array();
        for item_1487 in var_1485 {
            {
                array_1486.value().string(item_1487.as_str());
            }
        }
        array_1486.finish();
    }
    if let Some(var_1488) = &input.source_security_group {
        let mut object_1489 = object.key("SourceSecurityGroup").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_elb_load_balancer_source_security_group(&mut object_1489, var_1488)?;
        object_1489.finish();
    }
    if let Some(var_1490) = &input.subnets {
        let mut array_1491 = object.key("Subnets").start_array();
        for item_1492 in var_1490 {
            {
                array_1491.value().string(item_1492.as_str());
            }
        }
        array_1491.finish();
    }
    if let Some(var_1493) = &input.vpc_id {
        object.key("VpcId").string(var_1493.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_iam_group_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsIamGroupDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1494) = &input.attached_managed_policies {
        let mut array_1495 = object.key("AttachedManagedPolicies").start_array();
        for item_1496 in var_1494 {
            {
                let mut object_1497 = array_1495.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_iam_attached_managed_policy(
                    &mut object_1497,
                    item_1496,
                )?;
                object_1497.finish();
            }
        }
        array_1495.finish();
    }
    if let Some(var_1498) = &input.create_date {
        object.key("CreateDate").string(var_1498.as_str());
    }
    if let Some(var_1499) = &input.group_id {
        object.key("GroupId").string(var_1499.as_str());
    }
    if let Some(var_1500) = &input.group_name {
        object.key("GroupName").string(var_1500.as_str());
    }
    if let Some(var_1501) = &input.group_policy_list {
        let mut array_1502 = object.key("GroupPolicyList").start_array();
        for item_1503 in var_1501 {
            {
                let mut object_1504 = array_1502.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_iam_group_policy(
                    &mut object_1504,
                    item_1503,
                )?;
                object_1504.finish();
            }
        }
        array_1502.finish();
    }
    if let Some(var_1505) = &input.path {
        object.key("Path").string(var_1505.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_iam_role_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsIamRoleDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1506) = &input.assume_role_policy_document {
        object
            .key("AssumeRolePolicyDocument")
            .string(var_1506.as_str());
    }
    if let Some(var_1507) = &input.attached_managed_policies {
        let mut array_1508 = object.key("AttachedManagedPolicies").start_array();
        for item_1509 in var_1507 {
            {
                let mut object_1510 = array_1508.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_iam_attached_managed_policy(
                    &mut object_1510,
                    item_1509,
                )?;
                object_1510.finish();
            }
        }
        array_1508.finish();
    }
    if let Some(var_1511) = &input.create_date {
        object.key("CreateDate").string(var_1511.as_str());
    }
    if let Some(var_1512) = &input.instance_profile_list {
        let mut array_1513 = object.key("InstanceProfileList").start_array();
        for item_1514 in var_1512 {
            {
                let mut object_1515 = array_1513.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_iam_instance_profile(
                    &mut object_1515,
                    item_1514,
                )?;
                object_1515.finish();
            }
        }
        array_1513.finish();
    }
    if let Some(var_1516) = &input.permissions_boundary {
        let mut object_1517 = object.key("PermissionsBoundary").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_iam_permissions_boundary(
            &mut object_1517,
            var_1516,
        )?;
        object_1517.finish();
    }
    if let Some(var_1518) = &input.role_id {
        object.key("RoleId").string(var_1518.as_str());
    }
    if let Some(var_1519) = &input.role_name {
        object.key("RoleName").string(var_1519.as_str());
    }
    if let Some(var_1520) = &input.role_policy_list {
        let mut array_1521 = object.key("RolePolicyList").start_array();
        for item_1522 in var_1520 {
            {
                let mut object_1523 = array_1521.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_iam_role_policy(
                    &mut object_1523,
                    item_1522,
                )?;
                object_1523.finish();
            }
        }
        array_1521.finish();
    }
    if input.max_session_duration != 0 {
        object.key("MaxSessionDuration").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_session_duration).into()),
        );
    }
    if let Some(var_1524) = &input.path {
        object.key("Path").string(var_1524.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_kms_key_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsKmsKeyDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1525) = &input.aws_account_id {
        object.key("AWSAccountId").string(var_1525.as_str());
    }
    if input.creation_date != 0.0 {
        object.key("CreationDate").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((input.creation_date).into()),
        );
    }
    if let Some(var_1526) = &input.key_id {
        object.key("KeyId").string(var_1526.as_str());
    }
    if let Some(var_1527) = &input.key_manager {
        object.key("KeyManager").string(var_1527.as_str());
    }
    if let Some(var_1528) = &input.key_state {
        object.key("KeyState").string(var_1528.as_str());
    }
    if let Some(var_1529) = &input.origin {
        object.key("Origin").string(var_1529.as_str());
    }
    if let Some(var_1530) = &input.description {
        object.key("Description").string(var_1530.as_str());
    }
    if input.key_rotation_status {
        object
            .key("KeyRotationStatus")
            .boolean(input.key_rotation_status);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_lambda_function_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsLambdaFunctionDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1531) = &input.code {
        let mut object_1532 = object.key("Code").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_lambda_function_code(
            &mut object_1532,
            var_1531,
        )?;
        object_1532.finish();
    }
    if let Some(var_1533) = &input.code_sha256 {
        object.key("CodeSha256").string(var_1533.as_str());
    }
    if let Some(var_1534) = &input.dead_letter_config {
        let mut object_1535 = object.key("DeadLetterConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_lambda_function_dead_letter_config(
            &mut object_1535,
            var_1534,
        )?;
        object_1535.finish();
    }
    if let Some(var_1536) = &input.environment {
        let mut object_1537 = object.key("Environment").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_lambda_function_environment(
            &mut object_1537,
            var_1536,
        )?;
        object_1537.finish();
    }
    if let Some(var_1538) = &input.function_name {
        object.key("FunctionName").string(var_1538.as_str());
    }
    if let Some(var_1539) = &input.handler {
        object.key("Handler").string(var_1539.as_str());
    }
    if let Some(var_1540) = &input.kms_key_arn {
        object.key("KmsKeyArn").string(var_1540.as_str());
    }
    if let Some(var_1541) = &input.last_modified {
        object.key("LastModified").string(var_1541.as_str());
    }
    if let Some(var_1542) = &input.layers {
        let mut array_1543 = object.key("Layers").start_array();
        for item_1544 in var_1542 {
            {
                let mut object_1545 = array_1543.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_lambda_function_layer(
                    &mut object_1545,
                    item_1544,
                )?;
                object_1545.finish();
            }
        }
        array_1543.finish();
    }
    if let Some(var_1546) = &input.master_arn {
        object.key("MasterArn").string(var_1546.as_str());
    }
    if input.memory_size != 0 {
        object.key("MemorySize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.memory_size).into()),
        );
    }
    if let Some(var_1547) = &input.revision_id {
        object.key("RevisionId").string(var_1547.as_str());
    }
    if let Some(var_1548) = &input.role {
        object.key("Role").string(var_1548.as_str());
    }
    if let Some(var_1549) = &input.runtime {
        object.key("Runtime").string(var_1549.as_str());
    }
    if input.timeout != 0 {
        object.key("Timeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.timeout).into()),
        );
    }
    if let Some(var_1550) = &input.tracing_config {
        let mut object_1551 = object.key("TracingConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_lambda_function_tracing_config(
            &mut object_1551,
            var_1550,
        )?;
        object_1551.finish();
    }
    if let Some(var_1552) = &input.vpc_config {
        let mut object_1553 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_lambda_function_vpc_config(
            &mut object_1553,
            var_1552,
        )?;
        object_1553.finish();
    }
    if let Some(var_1554) = &input.version {
        object.key("Version").string(var_1554.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_lambda_layer_version_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsLambdaLayerVersionDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.version != 0 {
        object.key("Version").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.version).into()),
        );
    }
    if let Some(var_1555) = &input.compatible_runtimes {
        let mut array_1556 = object.key("CompatibleRuntimes").start_array();
        for item_1557 in var_1555 {
            {
                array_1556.value().string(item_1557.as_str());
            }
        }
        array_1556.finish();
    }
    if let Some(var_1558) = &input.created_date {
        object.key("CreatedDate").string(var_1558.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_rds_db_instance_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsDbInstanceDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1559) = &input.associated_roles {
        let mut array_1560 = object.key("AssociatedRoles").start_array();
        for item_1561 in var_1559 {
            {
                let mut object_1562 = array_1560.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_rds_db_instance_associated_role(&mut object_1562, item_1561)?;
                object_1562.finish();
            }
        }
        array_1560.finish();
    }
    if let Some(var_1563) = &input.ca_certificate_identifier {
        object
            .key("CACertificateIdentifier")
            .string(var_1563.as_str());
    }
    if let Some(var_1564) = &input.db_cluster_identifier {
        object.key("DBClusterIdentifier").string(var_1564.as_str());
    }
    if let Some(var_1565) = &input.db_instance_identifier {
        object.key("DBInstanceIdentifier").string(var_1565.as_str());
    }
    if let Some(var_1566) = &input.db_instance_class {
        object.key("DBInstanceClass").string(var_1566.as_str());
    }
    if input.db_instance_port != 0 {
        object.key("DbInstancePort").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.db_instance_port).into()),
        );
    }
    if let Some(var_1567) = &input.dbi_resource_id {
        object.key("DbiResourceId").string(var_1567.as_str());
    }
    if let Some(var_1568) = &input.db_name {
        object.key("DBName").string(var_1568.as_str());
    }
    if input.deletion_protection {
        object
            .key("DeletionProtection")
            .boolean(input.deletion_protection);
    }
    if let Some(var_1569) = &input.endpoint {
        let mut object_1570 = object.key("Endpoint").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_rds_db_instance_endpoint(
            &mut object_1570,
            var_1569,
        )?;
        object_1570.finish();
    }
    if let Some(var_1571) = &input.engine {
        object.key("Engine").string(var_1571.as_str());
    }
    if let Some(var_1572) = &input.engine_version {
        object.key("EngineVersion").string(var_1572.as_str());
    }
    if input.iam_database_authentication_enabled {
        object
            .key("IAMDatabaseAuthenticationEnabled")
            .boolean(input.iam_database_authentication_enabled);
    }
    if let Some(var_1573) = &input.instance_create_time {
        object.key("InstanceCreateTime").string(var_1573.as_str());
    }
    if let Some(var_1574) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1574.as_str());
    }
    if input.publicly_accessible {
        object
            .key("PubliclyAccessible")
            .boolean(input.publicly_accessible);
    }
    if input.storage_encrypted {
        object
            .key("StorageEncrypted")
            .boolean(input.storage_encrypted);
    }
    if let Some(var_1575) = &input.tde_credential_arn {
        object.key("TdeCredentialArn").string(var_1575.as_str());
    }
    if let Some(var_1576) = &input.vpc_security_groups {
        let mut array_1577 = object.key("VpcSecurityGroups").start_array();
        for item_1578 in var_1576 {
            {
                let mut object_1579 = array_1577.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_rds_db_instance_vpc_security_group(&mut object_1579, item_1578)?;
                object_1579.finish();
            }
        }
        array_1577.finish();
    }
    if input.multi_az {
        object.key("MultiAz").boolean(input.multi_az);
    }
    if let Some(var_1580) = &input.enhanced_monitoring_resource_arn {
        object
            .key("EnhancedMonitoringResourceArn")
            .string(var_1580.as_str());
    }
    if let Some(var_1581) = &input.db_instance_status {
        object.key("DbInstanceStatus").string(var_1581.as_str());
    }
    if let Some(var_1582) = &input.master_username {
        object.key("MasterUsername").string(var_1582.as_str());
    }
    if input.allocated_storage != 0 {
        object.key("AllocatedStorage").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.allocated_storage).into()),
        );
    }
    if let Some(var_1583) = &input.preferred_backup_window {
        object
            .key("PreferredBackupWindow")
            .string(var_1583.as_str());
    }
    if input.backup_retention_period != 0 {
        object.key("BackupRetentionPeriod").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.backup_retention_period).into()),
        );
    }
    if let Some(var_1584) = &input.db_security_groups {
        let mut array_1585 = object.key("DbSecurityGroups").start_array();
        for item_1586 in var_1584 {
            {
                array_1585.value().string(item_1586.as_str());
            }
        }
        array_1585.finish();
    }
    if let Some(var_1587) = &input.db_parameter_groups {
        let mut array_1588 = object.key("DbParameterGroups").start_array();
        for item_1589 in var_1587 {
            {
                let mut object_1590 = array_1588.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_rds_db_parameter_group(
                    &mut object_1590,
                    item_1589,
                )?;
                object_1590.finish();
            }
        }
        array_1588.finish();
    }
    if let Some(var_1591) = &input.availability_zone {
        object.key("AvailabilityZone").string(var_1591.as_str());
    }
    if let Some(var_1592) = &input.db_subnet_group {
        let mut object_1593 = object.key("DbSubnetGroup").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_rds_db_subnet_group(
            &mut object_1593,
            var_1592,
        )?;
        object_1593.finish();
    }
    if let Some(var_1594) = &input.preferred_maintenance_window {
        object
            .key("PreferredMaintenanceWindow")
            .string(var_1594.as_str());
    }
    if let Some(var_1595) = &input.pending_modified_values {
        let mut object_1596 = object.key("PendingModifiedValues").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_rds_db_pending_modified_values(
            &mut object_1596,
            var_1595,
        )?;
        object_1596.finish();
    }
    if let Some(var_1597) = &input.latest_restorable_time {
        object.key("LatestRestorableTime").string(var_1597.as_str());
    }
    if input.auto_minor_version_upgrade {
        object
            .key("AutoMinorVersionUpgrade")
            .boolean(input.auto_minor_version_upgrade);
    }
    if let Some(var_1598) = &input.read_replica_source_db_instance_identifier {
        object
            .key("ReadReplicaSourceDBInstanceIdentifier")
            .string(var_1598.as_str());
    }
    if let Some(var_1599) = &input.read_replica_db_instance_identifiers {
        let mut array_1600 = object.key("ReadReplicaDBInstanceIdentifiers").start_array();
        for item_1601 in var_1599 {
            {
                array_1600.value().string(item_1601.as_str());
            }
        }
        array_1600.finish();
    }
    if let Some(var_1602) = &input.read_replica_db_cluster_identifiers {
        let mut array_1603 = object.key("ReadReplicaDBClusterIdentifiers").start_array();
        for item_1604 in var_1602 {
            {
                array_1603.value().string(item_1604.as_str());
            }
        }
        array_1603.finish();
    }
    if let Some(var_1605) = &input.license_model {
        object.key("LicenseModel").string(var_1605.as_str());
    }
    if input.iops != 0 {
        object.key("Iops").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.iops).into()),
        );
    }
    if let Some(var_1606) = &input.option_group_memberships {
        let mut array_1607 = object.key("OptionGroupMemberships").start_array();
        for item_1608 in var_1606 {
            {
                let mut object_1609 = array_1607.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_rds_db_option_group_membership(&mut object_1609, item_1608)?;
                object_1609.finish();
            }
        }
        array_1607.finish();
    }
    if let Some(var_1610) = &input.character_set_name {
        object.key("CharacterSetName").string(var_1610.as_str());
    }
    if let Some(var_1611) = &input.secondary_availability_zone {
        object
            .key("SecondaryAvailabilityZone")
            .string(var_1611.as_str());
    }
    if let Some(var_1612) = &input.status_infos {
        let mut array_1613 = object.key("StatusInfos").start_array();
        for item_1614 in var_1612 {
            {
                let mut object_1615 = array_1613.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_rds_db_status_info(
                    &mut object_1615,
                    item_1614,
                )?;
                object_1615.finish();
            }
        }
        array_1613.finish();
    }
    if let Some(var_1616) = &input.storage_type {
        object.key("StorageType").string(var_1616.as_str());
    }
    if let Some(var_1617) = &input.domain_memberships {
        let mut array_1618 = object.key("DomainMemberships").start_array();
        for item_1619 in var_1617 {
            {
                let mut object_1620 = array_1618.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_rds_db_domain_membership(
                    &mut object_1620,
                    item_1619,
                )?;
                object_1620.finish();
            }
        }
        array_1618.finish();
    }
    if input.copy_tags_to_snapshot {
        object
            .key("CopyTagsToSnapshot")
            .boolean(input.copy_tags_to_snapshot);
    }
    if input.monitoring_interval != 0 {
        object.key("MonitoringInterval").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.monitoring_interval).into()),
        );
    }
    if let Some(var_1621) = &input.monitoring_role_arn {
        object.key("MonitoringRoleArn").string(var_1621.as_str());
    }
    if input.promotion_tier != 0 {
        object.key("PromotionTier").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.promotion_tier).into()),
        );
    }
    if let Some(var_1622) = &input.timezone {
        object.key("Timezone").string(var_1622.as_str());
    }
    if input.performance_insights_enabled {
        object
            .key("PerformanceInsightsEnabled")
            .boolean(input.performance_insights_enabled);
    }
    if let Some(var_1623) = &input.performance_insights_kms_key_id {
        object
            .key("PerformanceInsightsKmsKeyId")
            .string(var_1623.as_str());
    }
    if input.performance_insights_retention_period != 0 {
        object.key("PerformanceInsightsRetentionPeriod").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.performance_insights_retention_period).into()),
        );
    }
    if let Some(var_1624) = &input.enabled_cloud_watch_logs_exports {
        let mut array_1625 = object.key("EnabledCloudWatchLogsExports").start_array();
        for item_1626 in var_1624 {
            {
                array_1625.value().string(item_1626.as_str());
            }
        }
        array_1625.finish();
    }
    if let Some(var_1627) = &input.processor_features {
        let mut array_1628 = object.key("ProcessorFeatures").start_array();
        for item_1629 in var_1627 {
            {
                let mut object_1630 = array_1628.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_rds_db_processor_feature(
                    &mut object_1630,
                    item_1629,
                )?;
                object_1630.finish();
            }
        }
        array_1628.finish();
    }
    if let Some(var_1631) = &input.listener_endpoint {
        let mut object_1632 = object.key("ListenerEndpoint").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_rds_db_instance_endpoint(
            &mut object_1632,
            var_1631,
        )?;
        object_1632.finish();
    }
    if input.max_allocated_storage != 0 {
        object.key("MaxAllocatedStorage").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_allocated_storage).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_sns_topic_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsSnsTopicDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1633) = &input.kms_master_key_id {
        object.key("KmsMasterKeyId").string(var_1633.as_str());
    }
    if let Some(var_1634) = &input.subscription {
        let mut array_1635 = object.key("Subscription").start_array();
        for item_1636 in var_1634 {
            {
                let mut object_1637 = array_1635.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_sns_topic_subscription(
                    &mut object_1637,
                    item_1636,
                )?;
                object_1637.finish();
            }
        }
        array_1635.finish();
    }
    if let Some(var_1638) = &input.topic_name {
        object.key("TopicName").string(var_1638.as_str());
    }
    if let Some(var_1639) = &input.owner {
        object.key("Owner").string(var_1639.as_str());
    }
    if let Some(var_1640) = &input.sqs_success_feedback_role_arn {
        object
            .key("SqsSuccessFeedbackRoleArn")
            .string(var_1640.as_str());
    }
    if let Some(var_1641) = &input.sqs_failure_feedback_role_arn {
        object
            .key("SqsFailureFeedbackRoleArn")
            .string(var_1641.as_str());
    }
    if let Some(var_1642) = &input.application_success_feedback_role_arn {
        object
            .key("ApplicationSuccessFeedbackRoleArn")
            .string(var_1642.as_str());
    }
    if let Some(var_1643) = &input.firehose_success_feedback_role_arn {
        object
            .key("FirehoseSuccessFeedbackRoleArn")
            .string(var_1643.as_str());
    }
    if let Some(var_1644) = &input.firehose_failure_feedback_role_arn {
        object
            .key("FirehoseFailureFeedbackRoleArn")
            .string(var_1644.as_str());
    }
    if let Some(var_1645) = &input.http_success_feedback_role_arn {
        object
            .key("HttpSuccessFeedbackRoleArn")
            .string(var_1645.as_str());
    }
    if let Some(var_1646) = &input.http_failure_feedback_role_arn {
        object
            .key("HttpFailureFeedbackRoleArn")
            .string(var_1646.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_sqs_queue_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsSqsQueueDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.kms_data_key_reuse_period_seconds != 0 {
        object.key("KmsDataKeyReusePeriodSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.kms_data_key_reuse_period_seconds).into()),
        );
    }
    if let Some(var_1647) = &input.kms_master_key_id {
        object.key("KmsMasterKeyId").string(var_1647.as_str());
    }
    if let Some(var_1648) = &input.queue_name {
        object.key("QueueName").string(var_1648.as_str());
    }
    if let Some(var_1649) = &input.dead_letter_target_arn {
        object.key("DeadLetterTargetArn").string(var_1649.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_waf_web_acl_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsWafWebAclDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1650) = &input.name {
        object.key("Name").string(var_1650.as_str());
    }
    if let Some(var_1651) = &input.default_action {
        object.key("DefaultAction").string(var_1651.as_str());
    }
    if let Some(var_1652) = &input.rules {
        let mut array_1653 = object.key("Rules").start_array();
        for item_1654 in var_1652 {
            {
                let mut object_1655 = array_1653.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_waf_web_acl_rule(
                    &mut object_1655,
                    item_1654,
                )?;
                object_1655.finish();
            }
        }
        array_1653.finish();
    }
    if let Some(var_1656) = &input.web_acl_id {
        object.key("WebAclId").string(var_1656.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_rds_db_snapshot_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsDbSnapshotDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1657) = &input.db_snapshot_identifier {
        object.key("DbSnapshotIdentifier").string(var_1657.as_str());
    }
    if let Some(var_1658) = &input.db_instance_identifier {
        object.key("DbInstanceIdentifier").string(var_1658.as_str());
    }
    if let Some(var_1659) = &input.snapshot_create_time {
        object.key("SnapshotCreateTime").string(var_1659.as_str());
    }
    if let Some(var_1660) = &input.engine {
        object.key("Engine").string(var_1660.as_str());
    }
    if input.allocated_storage != 0 {
        object.key("AllocatedStorage").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.allocated_storage).into()),
        );
    }
    if let Some(var_1661) = &input.status {
        object.key("Status").string(var_1661.as_str());
    }
    if input.port != 0 {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.port).into()),
        );
    }
    if let Some(var_1662) = &input.availability_zone {
        object.key("AvailabilityZone").string(var_1662.as_str());
    }
    if let Some(var_1663) = &input.vpc_id {
        object.key("VpcId").string(var_1663.as_str());
    }
    if let Some(var_1664) = &input.instance_create_time {
        object.key("InstanceCreateTime").string(var_1664.as_str());
    }
    if let Some(var_1665) = &input.master_username {
        object.key("MasterUsername").string(var_1665.as_str());
    }
    if let Some(var_1666) = &input.engine_version {
        object.key("EngineVersion").string(var_1666.as_str());
    }
    if let Some(var_1667) = &input.license_model {
        object.key("LicenseModel").string(var_1667.as_str());
    }
    if let Some(var_1668) = &input.snapshot_type {
        object.key("SnapshotType").string(var_1668.as_str());
    }
    if input.iops != 0 {
        object.key("Iops").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.iops).into()),
        );
    }
    if let Some(var_1669) = &input.option_group_name {
        object.key("OptionGroupName").string(var_1669.as_str());
    }
    if input.percent_progress != 0 {
        object.key("PercentProgress").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.percent_progress).into()),
        );
    }
    if let Some(var_1670) = &input.source_region {
        object.key("SourceRegion").string(var_1670.as_str());
    }
    if let Some(var_1671) = &input.source_db_snapshot_identifier {
        object
            .key("SourceDbSnapshotIdentifier")
            .string(var_1671.as_str());
    }
    if let Some(var_1672) = &input.storage_type {
        object.key("StorageType").string(var_1672.as_str());
    }
    if let Some(var_1673) = &input.tde_credential_arn {
        object.key("TdeCredentialArn").string(var_1673.as_str());
    }
    if input.encrypted {
        object.key("Encrypted").boolean(input.encrypted);
    }
    if let Some(var_1674) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1674.as_str());
    }
    if let Some(var_1675) = &input.timezone {
        object.key("Timezone").string(var_1675.as_str());
    }
    if input.iam_database_authentication_enabled {
        object
            .key("IamDatabaseAuthenticationEnabled")
            .boolean(input.iam_database_authentication_enabled);
    }
    if let Some(var_1676) = &input.processor_features {
        let mut array_1677 = object.key("ProcessorFeatures").start_array();
        for item_1678 in var_1676 {
            {
                let mut object_1679 = array_1677.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_rds_db_processor_feature(
                    &mut object_1679,
                    item_1678,
                )?;
                object_1679.finish();
            }
        }
        array_1677.finish();
    }
    if let Some(var_1680) = &input.dbi_resource_id {
        object.key("DbiResourceId").string(var_1680.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_rds_db_cluster_snapshot_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsDbClusterSnapshotDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1681) = &input.availability_zones {
        let mut array_1682 = object.key("AvailabilityZones").start_array();
        for item_1683 in var_1681 {
            {
                array_1682.value().string(item_1683.as_str());
            }
        }
        array_1682.finish();
    }
    if let Some(var_1684) = &input.snapshot_create_time {
        object.key("SnapshotCreateTime").string(var_1684.as_str());
    }
    if let Some(var_1685) = &input.engine {
        object.key("Engine").string(var_1685.as_str());
    }
    if input.allocated_storage != 0 {
        object.key("AllocatedStorage").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.allocated_storage).into()),
        );
    }
    if let Some(var_1686) = &input.status {
        object.key("Status").string(var_1686.as_str());
    }
    if input.port != 0 {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.port).into()),
        );
    }
    if let Some(var_1687) = &input.vpc_id {
        object.key("VpcId").string(var_1687.as_str());
    }
    if let Some(var_1688) = &input.cluster_create_time {
        object.key("ClusterCreateTime").string(var_1688.as_str());
    }
    if let Some(var_1689) = &input.master_username {
        object.key("MasterUsername").string(var_1689.as_str());
    }
    if let Some(var_1690) = &input.engine_version {
        object.key("EngineVersion").string(var_1690.as_str());
    }
    if let Some(var_1691) = &input.license_model {
        object.key("LicenseModel").string(var_1691.as_str());
    }
    if let Some(var_1692) = &input.snapshot_type {
        object.key("SnapshotType").string(var_1692.as_str());
    }
    if input.percent_progress != 0 {
        object.key("PercentProgress").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.percent_progress).into()),
        );
    }
    if input.storage_encrypted {
        object
            .key("StorageEncrypted")
            .boolean(input.storage_encrypted);
    }
    if let Some(var_1693) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1693.as_str());
    }
    if let Some(var_1694) = &input.db_cluster_identifier {
        object.key("DbClusterIdentifier").string(var_1694.as_str());
    }
    if let Some(var_1695) = &input.db_cluster_snapshot_identifier {
        object
            .key("DbClusterSnapshotIdentifier")
            .string(var_1695.as_str());
    }
    if input.iam_database_authentication_enabled {
        object
            .key("IamDatabaseAuthenticationEnabled")
            .boolean(input.iam_database_authentication_enabled);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_rds_db_cluster_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsDbClusterDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.allocated_storage != 0 {
        object.key("AllocatedStorage").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.allocated_storage).into()),
        );
    }
    if let Some(var_1696) = &input.availability_zones {
        let mut array_1697 = object.key("AvailabilityZones").start_array();
        for item_1698 in var_1696 {
            {
                array_1697.value().string(item_1698.as_str());
            }
        }
        array_1697.finish();
    }
    if input.backup_retention_period != 0 {
        object.key("BackupRetentionPeriod").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.backup_retention_period).into()),
        );
    }
    if let Some(var_1699) = &input.database_name {
        object.key("DatabaseName").string(var_1699.as_str());
    }
    if let Some(var_1700) = &input.status {
        object.key("Status").string(var_1700.as_str());
    }
    if let Some(var_1701) = &input.endpoint {
        object.key("Endpoint").string(var_1701.as_str());
    }
    if let Some(var_1702) = &input.reader_endpoint {
        object.key("ReaderEndpoint").string(var_1702.as_str());
    }
    if let Some(var_1703) = &input.custom_endpoints {
        let mut array_1704 = object.key("CustomEndpoints").start_array();
        for item_1705 in var_1703 {
            {
                array_1704.value().string(item_1705.as_str());
            }
        }
        array_1704.finish();
    }
    if input.multi_az {
        object.key("MultiAz").boolean(input.multi_az);
    }
    if let Some(var_1706) = &input.engine {
        object.key("Engine").string(var_1706.as_str());
    }
    if let Some(var_1707) = &input.engine_version {
        object.key("EngineVersion").string(var_1707.as_str());
    }
    if input.port != 0 {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.port).into()),
        );
    }
    if let Some(var_1708) = &input.master_username {
        object.key("MasterUsername").string(var_1708.as_str());
    }
    if let Some(var_1709) = &input.preferred_backup_window {
        object
            .key("PreferredBackupWindow")
            .string(var_1709.as_str());
    }
    if let Some(var_1710) = &input.preferred_maintenance_window {
        object
            .key("PreferredMaintenanceWindow")
            .string(var_1710.as_str());
    }
    if let Some(var_1711) = &input.read_replica_identifiers {
        let mut array_1712 = object.key("ReadReplicaIdentifiers").start_array();
        for item_1713 in var_1711 {
            {
                array_1712.value().string(item_1713.as_str());
            }
        }
        array_1712.finish();
    }
    if let Some(var_1714) = &input.vpc_security_groups {
        let mut array_1715 = object.key("VpcSecurityGroups").start_array();
        for item_1716 in var_1714 {
            {
                let mut object_1717 = array_1715.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_rds_db_instance_vpc_security_group(&mut object_1717, item_1716)?;
                object_1717.finish();
            }
        }
        array_1715.finish();
    }
    if let Some(var_1718) = &input.hosted_zone_id {
        object.key("HostedZoneId").string(var_1718.as_str());
    }
    if input.storage_encrypted {
        object
            .key("StorageEncrypted")
            .boolean(input.storage_encrypted);
    }
    if let Some(var_1719) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_1719.as_str());
    }
    if let Some(var_1720) = &input.db_cluster_resource_id {
        object.key("DbClusterResourceId").string(var_1720.as_str());
    }
    if let Some(var_1721) = &input.associated_roles {
        let mut array_1722 = object.key("AssociatedRoles").start_array();
        for item_1723 in var_1721 {
            {
                let mut object_1724 = array_1722.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_rds_db_cluster_associated_role(&mut object_1724, item_1723)?;
                object_1724.finish();
            }
        }
        array_1722.finish();
    }
    if let Some(var_1725) = &input.cluster_create_time {
        object.key("ClusterCreateTime").string(var_1725.as_str());
    }
    if let Some(var_1726) = &input.enabled_cloud_watch_logs_exports {
        let mut array_1727 = object.key("EnabledCloudWatchLogsExports").start_array();
        for item_1728 in var_1726 {
            {
                array_1727.value().string(item_1728.as_str());
            }
        }
        array_1727.finish();
    }
    if let Some(var_1729) = &input.engine_mode {
        object.key("EngineMode").string(var_1729.as_str());
    }
    if input.deletion_protection {
        object
            .key("DeletionProtection")
            .boolean(input.deletion_protection);
    }
    if input.http_endpoint_enabled {
        object
            .key("HttpEndpointEnabled")
            .boolean(input.http_endpoint_enabled);
    }
    if let Some(var_1730) = &input.activity_stream_status {
        object.key("ActivityStreamStatus").string(var_1730.as_str());
    }
    if input.copy_tags_to_snapshot {
        object
            .key("CopyTagsToSnapshot")
            .boolean(input.copy_tags_to_snapshot);
    }
    if input.cross_account_clone {
        object
            .key("CrossAccountClone")
            .boolean(input.cross_account_clone);
    }
    if let Some(var_1731) = &input.domain_memberships {
        let mut array_1732 = object.key("DomainMemberships").start_array();
        for item_1733 in var_1731 {
            {
                let mut object_1734 = array_1732.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_rds_db_domain_membership(
                    &mut object_1734,
                    item_1733,
                )?;
                object_1734.finish();
            }
        }
        array_1732.finish();
    }
    if let Some(var_1735) = &input.db_cluster_parameter_group {
        object
            .key("DbClusterParameterGroup")
            .string(var_1735.as_str());
    }
    if let Some(var_1736) = &input.db_subnet_group {
        object.key("DbSubnetGroup").string(var_1736.as_str());
    }
    if let Some(var_1737) = &input.db_cluster_option_group_memberships {
        let mut array_1738 = object.key("DbClusterOptionGroupMemberships").start_array();
        for item_1739 in var_1737 {
            {
                let mut object_1740 = array_1738.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_rds_db_cluster_option_group_membership(&mut object_1740, item_1739)?;
                object_1740.finish();
            }
        }
        array_1738.finish();
    }
    if let Some(var_1741) = &input.db_cluster_identifier {
        object.key("DbClusterIdentifier").string(var_1741.as_str());
    }
    if let Some(var_1742) = &input.db_cluster_members {
        let mut array_1743 = object.key("DbClusterMembers").start_array();
        for item_1744 in var_1742 {
            {
                let mut object_1745 = array_1743.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_rds_db_cluster_member(
                    &mut object_1745,
                    item_1744,
                )?;
                object_1745.finish();
            }
        }
        array_1743.finish();
    }
    if input.iam_database_authentication_enabled {
        object
            .key("IamDatabaseAuthenticationEnabled")
            .boolean(input.iam_database_authentication_enabled);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_cluster_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsClusterDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1746) = &input.cluster_arn {
        object.key("ClusterArn").string(var_1746.as_str());
    }
    if input.active_services_count != 0 {
        object.key("ActiveServicesCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.active_services_count).into()),
        );
    }
    if let Some(var_1747) = &input.capacity_providers {
        let mut array_1748 = object.key("CapacityProviders").start_array();
        for item_1749 in var_1747 {
            {
                array_1748.value().string(item_1749.as_str());
            }
        }
        array_1748.finish();
    }
    if let Some(var_1750) = &input.cluster_settings {
        let mut array_1751 = object.key("ClusterSettings").start_array();
        for item_1752 in var_1750 {
            {
                let mut object_1753 = array_1751.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ecs_cluster_cluster_settings_details(&mut object_1753, item_1752)?;
                object_1753.finish();
            }
        }
        array_1751.finish();
    }
    if let Some(var_1754) = &input.configuration {
        let mut object_1755 = object.key("Configuration").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ecs_cluster_configuration_details(
            &mut object_1755,
            var_1754,
        )?;
        object_1755.finish();
    }
    if let Some(var_1756) = &input.default_capacity_provider_strategy {
        let mut array_1757 = object.key("DefaultCapacityProviderStrategy").start_array();
        for item_1758 in var_1756 {
            {
                let mut object_1759 = array_1757.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ecs_cluster_default_capacity_provider_strategy_details(&mut object_1759, item_1758)?;
                object_1759.finish();
            }
        }
        array_1757.finish();
    }
    if let Some(var_1760) = &input.cluster_name {
        object.key("ClusterName").string(var_1760.as_str());
    }
    if input.registered_container_instances_count != 0 {
        object.key("RegisteredContainerInstancesCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.registered_container_instances_count).into()),
        );
    }
    if input.running_tasks_count != 0 {
        object.key("RunningTasksCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.running_tasks_count).into()),
        );
    }
    if let Some(var_1761) = &input.status {
        object.key("Status").string(var_1761.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_container_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsContainerDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1762) = &input.name {
        object.key("Name").string(var_1762.as_str());
    }
    if let Some(var_1763) = &input.image {
        object.key("Image").string(var_1763.as_str());
    }
    if let Some(var_1764) = &input.mount_points {
        let mut array_1765 = object.key("MountPoints").start_array();
        for item_1766 in var_1764 {
            {
                let mut object_1767 = array_1765.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_mount_point(
                    &mut object_1767,
                    item_1766,
                )?;
                object_1767.finish();
            }
        }
        array_1765.finish();
    }
    if input.privileged {
        object.key("Privileged").boolean(input.privileged);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_task_definition_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1768) = &input.container_definitions {
        let mut array_1769 = object.key("ContainerDefinitions").start_array();
        for item_1770 in var_1768 {
            {
                let mut object_1771 = array_1769.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_details(&mut object_1771, item_1770)?;
                object_1771.finish();
            }
        }
        array_1769.finish();
    }
    if let Some(var_1772) = &input.cpu {
        object.key("Cpu").string(var_1772.as_str());
    }
    if let Some(var_1773) = &input.execution_role_arn {
        object.key("ExecutionRoleArn").string(var_1773.as_str());
    }
    if let Some(var_1774) = &input.family {
        object.key("Family").string(var_1774.as_str());
    }
    if let Some(var_1775) = &input.inference_accelerators {
        let mut array_1776 = object.key("InferenceAccelerators").start_array();
        for item_1777 in var_1775 {
            {
                let mut object_1778 = array_1776.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ecs_task_definition_inference_accelerators_details(&mut object_1778, item_1777)?;
                object_1778.finish();
            }
        }
        array_1776.finish();
    }
    if let Some(var_1779) = &input.ipc_mode {
        object.key("IpcMode").string(var_1779.as_str());
    }
    if let Some(var_1780) = &input.memory {
        object.key("Memory").string(var_1780.as_str());
    }
    if let Some(var_1781) = &input.network_mode {
        object.key("NetworkMode").string(var_1781.as_str());
    }
    if let Some(var_1782) = &input.pid_mode {
        object.key("PidMode").string(var_1782.as_str());
    }
    if let Some(var_1783) = &input.placement_constraints {
        let mut array_1784 = object.key("PlacementConstraints").start_array();
        for item_1785 in var_1783 {
            {
                let mut object_1786 = array_1784.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ecs_task_definition_placement_constraints_details(&mut object_1786, item_1785)?;
                object_1786.finish();
            }
        }
        array_1784.finish();
    }
    if let Some(var_1787) = &input.proxy_configuration {
        let mut object_1788 = object.key("ProxyConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ecs_task_definition_proxy_configuration_details(&mut object_1788, var_1787)?;
        object_1788.finish();
    }
    if let Some(var_1789) = &input.requires_compatibilities {
        let mut array_1790 = object.key("RequiresCompatibilities").start_array();
        for item_1791 in var_1789 {
            {
                array_1790.value().string(item_1791.as_str());
            }
        }
        array_1790.finish();
    }
    if let Some(var_1792) = &input.task_role_arn {
        object.key("TaskRoleArn").string(var_1792.as_str());
    }
    if let Some(var_1793) = &input.volumes {
        let mut array_1794 = object.key("Volumes").start_array();
        for item_1795 in var_1793 {
            {
                let mut object_1796 = array_1794.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ecs_task_definition_volumes_details(&mut object_1796, item_1795)?;
                object_1796.finish();
            }
        }
        array_1794.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_container_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ContainerDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1797) = &input.container_runtime {
        object.key("ContainerRuntime").string(var_1797.as_str());
    }
    if let Some(var_1798) = &input.name {
        object.key("Name").string(var_1798.as_str());
    }
    if let Some(var_1799) = &input.image_id {
        object.key("ImageId").string(var_1799.as_str());
    }
    if let Some(var_1800) = &input.image_name {
        object.key("ImageName").string(var_1800.as_str());
    }
    if let Some(var_1801) = &input.launched_at {
        object.key("LaunchedAt").string(var_1801.as_str());
    }
    if let Some(var_1802) = &input.volume_mounts {
        let mut array_1803 = object.key("VolumeMounts").start_array();
        for item_1804 in var_1802 {
            {
                let mut object_1805 = array_1803.value().start_object();
                crate::json_ser::serialize_structure_crate_model_volume_mount(
                    &mut object_1805,
                    item_1804,
                )?;
                object_1805.finish();
            }
        }
        array_1803.finish();
    }
    if input.privileged {
        object.key("Privileged").boolean(input.privileged);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_rds_event_subscription_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsEventSubscriptionDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1806) = &input.cust_subscription_id {
        object.key("CustSubscriptionId").string(var_1806.as_str());
    }
    if let Some(var_1807) = &input.customer_aws_id {
        object.key("CustomerAwsId").string(var_1807.as_str());
    }
    if input.enabled {
        object.key("Enabled").boolean(input.enabled);
    }
    if let Some(var_1808) = &input.event_categories_list {
        let mut array_1809 = object.key("EventCategoriesList").start_array();
        for item_1810 in var_1808 {
            {
                array_1809.value().string(item_1810.as_str());
            }
        }
        array_1809.finish();
    }
    if let Some(var_1811) = &input.event_subscription_arn {
        object.key("EventSubscriptionArn").string(var_1811.as_str());
    }
    if let Some(var_1812) = &input.sns_topic_arn {
        object.key("SnsTopicArn").string(var_1812.as_str());
    }
    if let Some(var_1813) = &input.source_ids_list {
        let mut array_1814 = object.key("SourceIdsList").start_array();
        for item_1815 in var_1813 {
            {
                array_1814.value().string(item_1815.as_str());
            }
        }
        array_1814.finish();
    }
    if let Some(var_1816) = &input.source_type {
        object.key("SourceType").string(var_1816.as_str());
    }
    if let Some(var_1817) = &input.status {
        object.key("Status").string(var_1817.as_str());
    }
    if let Some(var_1818) = &input.subscription_creation_time {
        object
            .key("SubscriptionCreationTime")
            .string(var_1818.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_service_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsServiceDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1819) = &input.capacity_provider_strategy {
        let mut array_1820 = object.key("CapacityProviderStrategy").start_array();
        for item_1821 in var_1819 {
            {
                let mut object_1822 = array_1820.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ecs_service_capacity_provider_strategy_details(&mut object_1822, item_1821)?;
                object_1822.finish();
            }
        }
        array_1820.finish();
    }
    if let Some(var_1823) = &input.cluster {
        object.key("Cluster").string(var_1823.as_str());
    }
    if let Some(var_1824) = &input.deployment_configuration {
        let mut object_1825 = object.key("DeploymentConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ecs_service_deployment_configuration_details(&mut object_1825, var_1824)?;
        object_1825.finish();
    }
    if let Some(var_1826) = &input.deployment_controller {
        let mut object_1827 = object.key("DeploymentController").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ecs_service_deployment_controller_details(&mut object_1827, var_1826)?;
        object_1827.finish();
    }
    if input.desired_count != 0 {
        object.key("DesiredCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.desired_count).into()),
        );
    }
    if input.enable_ecs_managed_tags {
        object
            .key("EnableEcsManagedTags")
            .boolean(input.enable_ecs_managed_tags);
    }
    if input.enable_execute_command {
        object
            .key("EnableExecuteCommand")
            .boolean(input.enable_execute_command);
    }
    if input.health_check_grace_period_seconds != 0 {
        object.key("HealthCheckGracePeriodSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.health_check_grace_period_seconds).into()),
        );
    }
    if let Some(var_1828) = &input.launch_type {
        object.key("LaunchType").string(var_1828.as_str());
    }
    if let Some(var_1829) = &input.load_balancers {
        let mut array_1830 = object.key("LoadBalancers").start_array();
        for item_1831 in var_1829 {
            {
                let mut object_1832 = array_1830.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ecs_service_load_balancers_details(&mut object_1832, item_1831)?;
                object_1832.finish();
            }
        }
        array_1830.finish();
    }
    if let Some(var_1833) = &input.name {
        object.key("Name").string(var_1833.as_str());
    }
    if let Some(var_1834) = &input.network_configuration {
        let mut object_1835 = object.key("NetworkConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ecs_service_network_configuration_details(&mut object_1835, var_1834)?;
        object_1835.finish();
    }
    if let Some(var_1836) = &input.placement_constraints {
        let mut array_1837 = object.key("PlacementConstraints").start_array();
        for item_1838 in var_1836 {
            {
                let mut object_1839 = array_1837.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ecs_service_placement_constraints_details(&mut object_1839, item_1838)?;
                object_1839.finish();
            }
        }
        array_1837.finish();
    }
    if let Some(var_1840) = &input.placement_strategies {
        let mut array_1841 = object.key("PlacementStrategies").start_array();
        for item_1842 in var_1840 {
            {
                let mut object_1843 = array_1841.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ecs_service_placement_strategies_details(&mut object_1843, item_1842)?;
                object_1843.finish();
            }
        }
        array_1841.finish();
    }
    if let Some(var_1844) = &input.platform_version {
        object.key("PlatformVersion").string(var_1844.as_str());
    }
    if let Some(var_1845) = &input.propagate_tags {
        object.key("PropagateTags").string(var_1845.as_str());
    }
    if let Some(var_1846) = &input.role {
        object.key("Role").string(var_1846.as_str());
    }
    if let Some(var_1847) = &input.scheduling_strategy {
        object.key("SchedulingStrategy").string(var_1847.as_str());
    }
    if let Some(var_1848) = &input.service_arn {
        object.key("ServiceArn").string(var_1848.as_str());
    }
    if let Some(var_1849) = &input.service_name {
        object.key("ServiceName").string(var_1849.as_str());
    }
    if let Some(var_1850) = &input.service_registries {
        let mut array_1851 = object.key("ServiceRegistries").start_array();
        for item_1852 in var_1850 {
            {
                let mut object_1853 = array_1851.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ecs_service_service_registries_details(&mut object_1853, item_1852)?;
                object_1853.finish();
            }
        }
        array_1851.finish();
    }
    if let Some(var_1854) = &input.task_definition {
        object.key("TaskDefinition").string(var_1854.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_auto_scaling_launch_configuration_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsAutoScalingLaunchConfigurationDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.associate_public_ip_address {
        object
            .key("AssociatePublicIpAddress")
            .boolean(input.associate_public_ip_address);
    }
    if let Some(var_1855) = &input.block_device_mappings {
        let mut array_1856 = object.key("BlockDeviceMappings").start_array();
        for item_1857 in var_1855 {
            {
                let mut object_1858 = array_1856.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_auto_scaling_launch_configuration_block_device_mappings_details(&mut object_1858, item_1857)?;
                object_1858.finish();
            }
        }
        array_1856.finish();
    }
    if let Some(var_1859) = &input.classic_link_vpc_id {
        object.key("ClassicLinkVpcId").string(var_1859.as_str());
    }
    if let Some(var_1860) = &input.classic_link_vpc_security_groups {
        let mut array_1861 = object.key("ClassicLinkVpcSecurityGroups").start_array();
        for item_1862 in var_1860 {
            {
                array_1861.value().string(item_1862.as_str());
            }
        }
        array_1861.finish();
    }
    if let Some(var_1863) = &input.created_time {
        object.key("CreatedTime").string(var_1863.as_str());
    }
    if input.ebs_optimized {
        object.key("EbsOptimized").boolean(input.ebs_optimized);
    }
    if let Some(var_1864) = &input.iam_instance_profile {
        object.key("IamInstanceProfile").string(var_1864.as_str());
    }
    if let Some(var_1865) = &input.image_id {
        object.key("ImageId").string(var_1865.as_str());
    }
    if let Some(var_1866) = &input.instance_monitoring {
        let mut object_1867 = object.key("InstanceMonitoring").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_auto_scaling_launch_configuration_instance_monitoring_details(&mut object_1867, var_1866)?;
        object_1867.finish();
    }
    if let Some(var_1868) = &input.instance_type {
        object.key("InstanceType").string(var_1868.as_str());
    }
    if let Some(var_1869) = &input.kernel_id {
        object.key("KernelId").string(var_1869.as_str());
    }
    if let Some(var_1870) = &input.key_name {
        object.key("KeyName").string(var_1870.as_str());
    }
    if let Some(var_1871) = &input.launch_configuration_name {
        object
            .key("LaunchConfigurationName")
            .string(var_1871.as_str());
    }
    if let Some(var_1872) = &input.placement_tenancy {
        object.key("PlacementTenancy").string(var_1872.as_str());
    }
    if let Some(var_1873) = &input.ramdisk_id {
        object.key("RamdiskId").string(var_1873.as_str());
    }
    if let Some(var_1874) = &input.security_groups {
        let mut array_1875 = object.key("SecurityGroups").start_array();
        for item_1876 in var_1874 {
            {
                array_1875.value().string(item_1876.as_str());
            }
        }
        array_1875.finish();
    }
    if let Some(var_1877) = &input.spot_price {
        object.key("SpotPrice").string(var_1877.as_str());
    }
    if let Some(var_1878) = &input.user_data {
        object.key("UserData").string(var_1878.as_str());
    }
    if let Some(var_1879) = &input.metadata_options {
        let mut object_1880 = object.key("MetadataOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_auto_scaling_launch_configuration_metadata_options(&mut object_1880, var_1879)?;
        object_1880.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ec2_vpn_connection_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2VpnConnectionDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1881) = &input.vpn_connection_id {
        object.key("VpnConnectionId").string(var_1881.as_str());
    }
    if let Some(var_1882) = &input.state {
        object.key("State").string(var_1882.as_str());
    }
    if let Some(var_1883) = &input.customer_gateway_id {
        object.key("CustomerGatewayId").string(var_1883.as_str());
    }
    if let Some(var_1884) = &input.customer_gateway_configuration {
        object
            .key("CustomerGatewayConfiguration")
            .string(var_1884.as_str());
    }
    if let Some(var_1885) = &input.r#type {
        object.key("Type").string(var_1885.as_str());
    }
    if let Some(var_1886) = &input.vpn_gateway_id {
        object.key("VpnGatewayId").string(var_1886.as_str());
    }
    if let Some(var_1887) = &input.category {
        object.key("Category").string(var_1887.as_str());
    }
    if let Some(var_1888) = &input.vgw_telemetry {
        let mut array_1889 = object.key("VgwTelemetry").start_array();
        for item_1890 in var_1888 {
            {
                let mut object_1891 = array_1889.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ec2_vpn_connection_vgw_telemetry_details(&mut object_1891, item_1890)?;
                object_1891.finish();
            }
        }
        array_1889.finish();
    }
    if let Some(var_1892) = &input.options {
        let mut object_1893 = object.key("Options").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ec2_vpn_connection_options_details(
            &mut object_1893,
            var_1892,
        )?;
        object_1893.finish();
    }
    if let Some(var_1894) = &input.routes {
        let mut array_1895 = object.key("Routes").start_array();
        for item_1896 in var_1894 {
            {
                let mut object_1897 = array_1895.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ec2_vpn_connection_routes_details(&mut object_1897, item_1896)?;
                object_1897.finish();
            }
        }
        array_1895.finish();
    }
    if let Some(var_1898) = &input.transit_gateway_id {
        object.key("TransitGatewayId").string(var_1898.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecr_container_image_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcrContainerImageDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1899) = &input.registry_id {
        object.key("RegistryId").string(var_1899.as_str());
    }
    if let Some(var_1900) = &input.repository_name {
        object.key("RepositoryName").string(var_1900.as_str());
    }
    if let Some(var_1901) = &input.architecture {
        object.key("Architecture").string(var_1901.as_str());
    }
    if let Some(var_1902) = &input.image_digest {
        object.key("ImageDigest").string(var_1902.as_str());
    }
    if let Some(var_1903) = &input.image_tags {
        let mut array_1904 = object.key("ImageTags").start_array();
        for item_1905 in var_1903 {
            {
                array_1904.value().string(item_1905.as_str());
            }
        }
        array_1904.finish();
    }
    if let Some(var_1906) = &input.image_published_at {
        object.key("ImagePublishedAt").string(var_1906.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_open_search_service_domain_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsOpenSearchServiceDomainDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1907) = &input.arn {
        object.key("Arn").string(var_1907.as_str());
    }
    if let Some(var_1908) = &input.access_policies {
        object.key("AccessPolicies").string(var_1908.as_str());
    }
    if let Some(var_1909) = &input.domain_name {
        object.key("DomainName").string(var_1909.as_str());
    }
    if let Some(var_1910) = &input.id {
        object.key("Id").string(var_1910.as_str());
    }
    if let Some(var_1911) = &input.domain_endpoint {
        object.key("DomainEndpoint").string(var_1911.as_str());
    }
    if let Some(var_1912) = &input.engine_version {
        object.key("EngineVersion").string(var_1912.as_str());
    }
    if let Some(var_1913) = &input.encryption_at_rest_options {
        let mut object_1914 = object.key("EncryptionAtRestOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_open_search_service_domain_encryption_at_rest_options_details(&mut object_1914, var_1913)?;
        object_1914.finish();
    }
    if let Some(var_1915) = &input.node_to_node_encryption_options {
        let mut object_1916 = object.key("NodeToNodeEncryptionOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_open_search_service_domain_node_to_node_encryption_options_details(&mut object_1916, var_1915)?;
        object_1916.finish();
    }
    if let Some(var_1917) = &input.service_software_options {
        let mut object_1918 = object.key("ServiceSoftwareOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_open_search_service_domain_service_software_options_details(&mut object_1918, var_1917)?;
        object_1918.finish();
    }
    if let Some(var_1919) = &input.cluster_config {
        let mut object_1920 = object.key("ClusterConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_open_search_service_domain_cluster_config_details(&mut object_1920, var_1919)?;
        object_1920.finish();
    }
    if let Some(var_1921) = &input.domain_endpoint_options {
        let mut object_1922 = object.key("DomainEndpointOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_open_search_service_domain_domain_endpoint_options_details(&mut object_1922, var_1921)?;
        object_1922.finish();
    }
    if let Some(var_1923) = &input.vpc_options {
        let mut object_1924 = object.key("VpcOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_open_search_service_domain_vpc_options_details(&mut object_1924, var_1923)?;
        object_1924.finish();
    }
    if let Some(var_1925) = &input.log_publishing_options {
        let mut object_1926 = object.key("LogPublishingOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_open_search_service_domain_log_publishing_options_details(&mut object_1926, var_1925)?;
        object_1926.finish();
    }
    if let Some(var_1927) = &input.domain_endpoints {
        let mut object_1928 = object.key("DomainEndpoints").start_object();
        for (key_1929, value_1930) in var_1927 {
            {
                object_1928.key(key_1929).string(value_1930.as_str());
            }
        }
        object_1928.finish();
    }
    if let Some(var_1931) = &input.advanced_security_options {
        let mut object_1932 = object.key("AdvancedSecurityOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_open_search_service_domain_advanced_security_options_details(&mut object_1932, var_1931)?;
        object_1932.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ec2_vpc_endpoint_service_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2VpcEndpointServiceDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.acceptance_required {
        object
            .key("AcceptanceRequired")
            .boolean(input.acceptance_required);
    }
    if let Some(var_1933) = &input.availability_zones {
        let mut array_1934 = object.key("AvailabilityZones").start_array();
        for item_1935 in var_1933 {
            {
                array_1934.value().string(item_1935.as_str());
            }
        }
        array_1934.finish();
    }
    if let Some(var_1936) = &input.base_endpoint_dns_names {
        let mut array_1937 = object.key("BaseEndpointDnsNames").start_array();
        for item_1938 in var_1936 {
            {
                array_1937.value().string(item_1938.as_str());
            }
        }
        array_1937.finish();
    }
    if input.manages_vpc_endpoints {
        object
            .key("ManagesVpcEndpoints")
            .boolean(input.manages_vpc_endpoints);
    }
    if let Some(var_1939) = &input.gateway_load_balancer_arns {
        let mut array_1940 = object.key("GatewayLoadBalancerArns").start_array();
        for item_1941 in var_1939 {
            {
                array_1940.value().string(item_1941.as_str());
            }
        }
        array_1940.finish();
    }
    if let Some(var_1942) = &input.network_load_balancer_arns {
        let mut array_1943 = object.key("NetworkLoadBalancerArns").start_array();
        for item_1944 in var_1942 {
            {
                array_1943.value().string(item_1944.as_str());
            }
        }
        array_1943.finish();
    }
    if let Some(var_1945) = &input.private_dns_name {
        object.key("PrivateDnsName").string(var_1945.as_str());
    }
    if let Some(var_1946) = &input.service_id {
        object.key("ServiceId").string(var_1946.as_str());
    }
    if let Some(var_1947) = &input.service_name {
        object.key("ServiceName").string(var_1947.as_str());
    }
    if let Some(var_1948) = &input.service_state {
        object.key("ServiceState").string(var_1948.as_str());
    }
    if let Some(var_1949) = &input.service_type {
        let mut array_1950 = object.key("ServiceType").start_array();
        for item_1951 in var_1949 {
            {
                let mut object_1952 = array_1950.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ec2_vpc_endpoint_service_service_type_details(&mut object_1952, item_1951)?;
                object_1952.finish();
            }
        }
        array_1950.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_xray_encryption_config_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsXrayEncryptionConfigDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1953) = &input.key_id {
        object.key("KeyId").string(var_1953.as_str());
    }
    if let Some(var_1954) = &input.status {
        object.key("Status").string(var_1954.as_str());
    }
    if let Some(var_1955) = &input.r#type {
        object.key("Type").string(var_1955.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_waf_rate_based_rule_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsWafRateBasedRuleDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1956) = &input.metric_name {
        object.key("MetricName").string(var_1956.as_str());
    }
    if let Some(var_1957) = &input.name {
        object.key("Name").string(var_1957.as_str());
    }
    if let Some(var_1958) = &input.rate_key {
        object.key("RateKey").string(var_1958.as_str());
    }
    if input.rate_limit != 0 {
        object.key("RateLimit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.rate_limit).into()),
        );
    }
    if let Some(var_1959) = &input.rule_id {
        object.key("RuleId").string(var_1959.as_str());
    }
    if let Some(var_1960) = &input.match_predicates {
        let mut array_1961 = object.key("MatchPredicates").start_array();
        for item_1962 in var_1960 {
            {
                let mut object_1963 = array_1961.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_waf_rate_based_rule_match_predicate(&mut object_1963, item_1962)?;
                object_1963.finish();
            }
        }
        array_1961.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_waf_regional_rate_based_rule_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsWafRegionalRateBasedRuleDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1964) = &input.metric_name {
        object.key("MetricName").string(var_1964.as_str());
    }
    if let Some(var_1965) = &input.name {
        object.key("Name").string(var_1965.as_str());
    }
    if let Some(var_1966) = &input.rate_key {
        object.key("RateKey").string(var_1966.as_str());
    }
    if input.rate_limit != 0 {
        object.key("RateLimit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.rate_limit).into()),
        );
    }
    if let Some(var_1967) = &input.rule_id {
        object.key("RuleId").string(var_1967.as_str());
    }
    if let Some(var_1968) = &input.match_predicates {
        let mut array_1969 = object.key("MatchPredicates").start_array();
        for item_1970 in var_1968 {
            {
                let mut object_1971 = array_1969.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_waf_regional_rate_based_rule_match_predicate(&mut object_1971, item_1970)?;
                object_1971.finish();
            }
        }
        array_1969.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecr_repository_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcrRepositoryDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1972) = &input.arn {
        object.key("Arn").string(var_1972.as_str());
    }
    if let Some(var_1973) = &input.image_scanning_configuration {
        let mut object_1974 = object.key("ImageScanningConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ecr_repository_image_scanning_configuration_details(&mut object_1974, var_1973)?;
        object_1974.finish();
    }
    if let Some(var_1975) = &input.image_tag_mutability {
        object.key("ImageTagMutability").string(var_1975.as_str());
    }
    if let Some(var_1976) = &input.lifecycle_policy {
        let mut object_1977 = object.key("LifecyclePolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ecr_repository_lifecycle_policy_details(&mut object_1977, var_1976)?;
        object_1977.finish();
    }
    if let Some(var_1978) = &input.repository_name {
        object.key("RepositoryName").string(var_1978.as_str());
    }
    if let Some(var_1979) = &input.repository_policy_text {
        object.key("RepositoryPolicyText").string(var_1979.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_eks_cluster_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEksClusterDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1980) = &input.arn {
        object.key("Arn").string(var_1980.as_str());
    }
    if let Some(var_1981) = &input.certificate_authority_data {
        object
            .key("CertificateAuthorityData")
            .string(var_1981.as_str());
    }
    if let Some(var_1982) = &input.cluster_status {
        object.key("ClusterStatus").string(var_1982.as_str());
    }
    if let Some(var_1983) = &input.endpoint {
        object.key("Endpoint").string(var_1983.as_str());
    }
    if let Some(var_1984) = &input.name {
        object.key("Name").string(var_1984.as_str());
    }
    if let Some(var_1985) = &input.resources_vpc_config {
        let mut object_1986 = object.key("ResourcesVpcConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_eks_cluster_resources_vpc_config_details(&mut object_1986, var_1985)?;
        object_1986.finish();
    }
    if let Some(var_1987) = &input.role_arn {
        object.key("RoleArn").string(var_1987.as_str());
    }
    if let Some(var_1988) = &input.version {
        object.key("Version").string(var_1988.as_str());
    }
    if let Some(var_1989) = &input.logging {
        let mut object_1990 = object.key("Logging").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_eks_cluster_logging_details(
            &mut object_1990,
            var_1989,
        )?;
        object_1990.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_network_firewall_firewall_policy_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsNetworkFirewallFirewallPolicyDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1991) = &input.firewall_policy {
        let mut object_1992 = object.key("FirewallPolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_firewall_policy_details(
            &mut object_1992,
            var_1991,
        )?;
        object_1992.finish();
    }
    if let Some(var_1993) = &input.firewall_policy_arn {
        object.key("FirewallPolicyArn").string(var_1993.as_str());
    }
    if let Some(var_1994) = &input.firewall_policy_id {
        object.key("FirewallPolicyId").string(var_1994.as_str());
    }
    if let Some(var_1995) = &input.firewall_policy_name {
        object.key("FirewallPolicyName").string(var_1995.as_str());
    }
    if let Some(var_1996) = &input.description {
        object.key("Description").string(var_1996.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_network_firewall_firewall_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsNetworkFirewallFirewallDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.delete_protection {
        object
            .key("DeleteProtection")
            .boolean(input.delete_protection);
    }
    if let Some(var_1997) = &input.description {
        object.key("Description").string(var_1997.as_str());
    }
    if let Some(var_1998) = &input.firewall_arn {
        object.key("FirewallArn").string(var_1998.as_str());
    }
    if let Some(var_1999) = &input.firewall_id {
        object.key("FirewallId").string(var_1999.as_str());
    }
    if let Some(var_2000) = &input.firewall_name {
        object.key("FirewallName").string(var_2000.as_str());
    }
    if let Some(var_2001) = &input.firewall_policy_arn {
        object.key("FirewallPolicyArn").string(var_2001.as_str());
    }
    if input.firewall_policy_change_protection {
        object
            .key("FirewallPolicyChangeProtection")
            .boolean(input.firewall_policy_change_protection);
    }
    if input.subnet_change_protection {
        object
            .key("SubnetChangeProtection")
            .boolean(input.subnet_change_protection);
    }
    if let Some(var_2002) = &input.subnet_mappings {
        let mut array_2003 = object.key("SubnetMappings").start_array();
        for item_2004 in var_2002 {
            {
                let mut object_2005 = array_2003.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_network_firewall_firewall_subnet_mappings_details(&mut object_2005, item_2004)?;
                object_2005.finish();
            }
        }
        array_2003.finish();
    }
    if let Some(var_2006) = &input.vpc_id {
        object.key("VpcId").string(var_2006.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_network_firewall_rule_group_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsNetworkFirewallRuleGroupDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.capacity != 0 {
        object.key("Capacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.capacity).into()),
        );
    }
    if let Some(var_2007) = &input.description {
        object.key("Description").string(var_2007.as_str());
    }
    if let Some(var_2008) = &input.rule_group {
        let mut object_2009 = object.key("RuleGroup").start_object();
        crate::json_ser::serialize_structure_crate_model_rule_group_details(
            &mut object_2009,
            var_2008,
        )?;
        object_2009.finish();
    }
    if let Some(var_2010) = &input.rule_group_arn {
        object.key("RuleGroupArn").string(var_2010.as_str());
    }
    if let Some(var_2011) = &input.rule_group_id {
        object.key("RuleGroupId").string(var_2011.as_str());
    }
    if let Some(var_2012) = &input.rule_group_name {
        object.key("RuleGroupName").string(var_2012.as_str());
    }
    if let Some(var_2013) = &input.r#type {
        object.key("Type").string(var_2013.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_rds_db_security_group_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsDbSecurityGroupDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2014) = &input.db_security_group_arn {
        object.key("DbSecurityGroupArn").string(var_2014.as_str());
    }
    if let Some(var_2015) = &input.db_security_group_description {
        object
            .key("DbSecurityGroupDescription")
            .string(var_2015.as_str());
    }
    if let Some(var_2016) = &input.db_security_group_name {
        object.key("DbSecurityGroupName").string(var_2016.as_str());
    }
    if let Some(var_2017) = &input.ec2_security_groups {
        let mut array_2018 = object.key("Ec2SecurityGroups").start_array();
        for item_2019 in var_2017 {
            {
                let mut object_2020 = array_2018.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_rds_db_security_group_ec2_security_group(&mut object_2020, item_2019)?;
                object_2020.finish();
            }
        }
        array_2018.finish();
    }
    if let Some(var_2021) = &input.ip_ranges {
        let mut array_2022 = object.key("IpRanges").start_array();
        for item_2023 in var_2021 {
            {
                let mut object_2024 = array_2022.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_rds_db_security_group_ip_range(&mut object_2024, item_2023)?;
                object_2024.finish();
            }
        }
        array_2022.finish();
    }
    if let Some(var_2025) = &input.owner_id {
        object.key("OwnerId").string(var_2025.as_str());
    }
    if let Some(var_2026) = &input.vpc_id {
        object.key("VpcId").string(var_2026.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_kinesis_stream_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsKinesisStreamDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2027) = &input.name {
        object.key("Name").string(var_2027.as_str());
    }
    if let Some(var_2028) = &input.arn {
        object.key("Arn").string(var_2028.as_str());
    }
    if let Some(var_2029) = &input.stream_encryption {
        let mut object_2030 = object.key("StreamEncryption").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_kinesis_stream_stream_encryption_details(&mut object_2030, var_2029)?;
        object_2030.finish();
    }
    if input.shard_count != 0 {
        object.key("ShardCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.shard_count).into()),
        );
    }
    if input.retention_period_hours != 0 {
        object.key("RetentionPeriodHours").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.retention_period_hours).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ec2_transit_gateway_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2TransitGatewayDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2031) = &input.id {
        object.key("Id").string(var_2031.as_str());
    }
    if let Some(var_2032) = &input.description {
        object.key("Description").string(var_2032.as_str());
    }
    if let Some(var_2033) = &input.default_route_table_propagation {
        object
            .key("DefaultRouteTablePropagation")
            .string(var_2033.as_str());
    }
    if let Some(var_2034) = &input.auto_accept_shared_attachments {
        object
            .key("AutoAcceptSharedAttachments")
            .string(var_2034.as_str());
    }
    if let Some(var_2035) = &input.default_route_table_association {
        object
            .key("DefaultRouteTableAssociation")
            .string(var_2035.as_str());
    }
    if let Some(var_2036) = &input.transit_gateway_cidr_blocks {
        let mut array_2037 = object.key("TransitGatewayCidrBlocks").start_array();
        for item_2038 in var_2036 {
            {
                array_2037.value().string(item_2038.as_str());
            }
        }
        array_2037.finish();
    }
    if let Some(var_2039) = &input.association_default_route_table_id {
        object
            .key("AssociationDefaultRouteTableId")
            .string(var_2039.as_str());
    }
    if let Some(var_2040) = &input.propagation_default_route_table_id {
        object
            .key("PropagationDefaultRouteTableId")
            .string(var_2040.as_str());
    }
    if let Some(var_2041) = &input.vpn_ecmp_support {
        object.key("VpnEcmpSupport").string(var_2041.as_str());
    }
    if let Some(var_2042) = &input.dns_support {
        object.key("DnsSupport").string(var_2042.as_str());
    }
    if let Some(var_2043) = &input.multicast_support {
        object.key("MulticastSupport").string(var_2043.as_str());
    }
    if input.amazon_side_asn != 0 {
        object.key("AmazonSideAsn").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.amazon_side_asn).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_efs_access_point_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEfsAccessPointDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2044) = &input.access_point_id {
        object.key("AccessPointId").string(var_2044.as_str());
    }
    if let Some(var_2045) = &input.arn {
        object.key("Arn").string(var_2045.as_str());
    }
    if let Some(var_2046) = &input.client_token {
        object.key("ClientToken").string(var_2046.as_str());
    }
    if let Some(var_2047) = &input.file_system_id {
        object.key("FileSystemId").string(var_2047.as_str());
    }
    if let Some(var_2048) = &input.posix_user {
        let mut object_2049 = object.key("PosixUser").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_efs_access_point_posix_user_details(
            &mut object_2049,
            var_2048,
        )?;
        object_2049.finish();
    }
    if let Some(var_2050) = &input.root_directory {
        let mut object_2051 = object.key("RootDirectory").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_efs_access_point_root_directory_details(&mut object_2051, var_2050)?;
        object_2051.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_cloud_formation_stack_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCloudFormationStackDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2052) = &input.capabilities {
        let mut array_2053 = object.key("Capabilities").start_array();
        for item_2054 in var_2052 {
            {
                array_2053.value().string(item_2054.as_str());
            }
        }
        array_2053.finish();
    }
    if let Some(var_2055) = &input.creation_time {
        object.key("CreationTime").string(var_2055.as_str());
    }
    if let Some(var_2056) = &input.description {
        object.key("Description").string(var_2056.as_str());
    }
    if input.disable_rollback {
        object
            .key("DisableRollback")
            .boolean(input.disable_rollback);
    }
    if let Some(var_2057) = &input.drift_information {
        let mut object_2058 = object.key("DriftInformation").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_cloud_formation_stack_drift_information_details(&mut object_2058, var_2057)?;
        object_2058.finish();
    }
    if input.enable_termination_protection {
        object
            .key("EnableTerminationProtection")
            .boolean(input.enable_termination_protection);
    }
    if let Some(var_2059) = &input.last_updated_time {
        object.key("LastUpdatedTime").string(var_2059.as_str());
    }
    if let Some(var_2060) = &input.notification_arns {
        let mut array_2061 = object.key("NotificationArns").start_array();
        for item_2062 in var_2060 {
            {
                array_2061.value().string(item_2062.as_str());
            }
        }
        array_2061.finish();
    }
    if let Some(var_2063) = &input.outputs {
        let mut array_2064 = object.key("Outputs").start_array();
        for item_2065 in var_2063 {
            {
                let mut object_2066 = array_2064.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_cloud_formation_stack_outputs_details(&mut object_2066, item_2065)?;
                object_2066.finish();
            }
        }
        array_2064.finish();
    }
    if let Some(var_2067) = &input.role_arn {
        object.key("RoleArn").string(var_2067.as_str());
    }
    if let Some(var_2068) = &input.stack_id {
        object.key("StackId").string(var_2068.as_str());
    }
    if let Some(var_2069) = &input.stack_name {
        object.key("StackName").string(var_2069.as_str());
    }
    if let Some(var_2070) = &input.stack_status {
        object.key("StackStatus").string(var_2070.as_str());
    }
    if let Some(var_2071) = &input.stack_status_reason {
        object.key("StackStatusReason").string(var_2071.as_str());
    }
    if input.timeout_in_minutes != 0 {
        object.key("TimeoutInMinutes").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.timeout_in_minutes).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_cloud_watch_alarm_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCloudWatchAlarmDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.actions_enabled {
        object.key("ActionsEnabled").boolean(input.actions_enabled);
    }
    if let Some(var_2072) = &input.alarm_actions {
        let mut array_2073 = object.key("AlarmActions").start_array();
        for item_2074 in var_2072 {
            {
                array_2073.value().string(item_2074.as_str());
            }
        }
        array_2073.finish();
    }
    if let Some(var_2075) = &input.alarm_arn {
        object.key("AlarmArn").string(var_2075.as_str());
    }
    if let Some(var_2076) = &input.alarm_configuration_updated_timestamp {
        object
            .key("AlarmConfigurationUpdatedTimestamp")
            .string(var_2076.as_str());
    }
    if let Some(var_2077) = &input.alarm_description {
        object.key("AlarmDescription").string(var_2077.as_str());
    }
    if let Some(var_2078) = &input.alarm_name {
        object.key("AlarmName").string(var_2078.as_str());
    }
    if let Some(var_2079) = &input.comparison_operator {
        object.key("ComparisonOperator").string(var_2079.as_str());
    }
    if input.datapoints_to_alarm != 0 {
        object.key("DatapointsToAlarm").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.datapoints_to_alarm).into()),
        );
    }
    if let Some(var_2080) = &input.dimensions {
        let mut array_2081 = object.key("Dimensions").start_array();
        for item_2082 in var_2080 {
            {
                let mut object_2083 = array_2081.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_cloud_watch_alarm_dimensions_details(&mut object_2083, item_2082)?;
                object_2083.finish();
            }
        }
        array_2081.finish();
    }
    if let Some(var_2084) = &input.evaluate_low_sample_count_percentile {
        object
            .key("EvaluateLowSampleCountPercentile")
            .string(var_2084.as_str());
    }
    if input.evaluation_periods != 0 {
        object.key("EvaluationPeriods").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.evaluation_periods).into()),
        );
    }
    if let Some(var_2085) = &input.extended_statistic {
        object.key("ExtendedStatistic").string(var_2085.as_str());
    }
    if let Some(var_2086) = &input.insufficient_data_actions {
        let mut array_2087 = object.key("InsufficientDataActions").start_array();
        for item_2088 in var_2086 {
            {
                array_2087.value().string(item_2088.as_str());
            }
        }
        array_2087.finish();
    }
    if let Some(var_2089) = &input.metric_name {
        object.key("MetricName").string(var_2089.as_str());
    }
    if let Some(var_2090) = &input.namespace {
        object.key("Namespace").string(var_2090.as_str());
    }
    if let Some(var_2091) = &input.ok_actions {
        let mut array_2092 = object.key("OkActions").start_array();
        for item_2093 in var_2091 {
            {
                array_2092.value().string(item_2093.as_str());
            }
        }
        array_2092.finish();
    }
    if input.period != 0 {
        object.key("Period").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.period).into()),
        );
    }
    if let Some(var_2094) = &input.statistic {
        object.key("Statistic").string(var_2094.as_str());
    }
    if input.threshold != 0.0 {
        object.key("Threshold").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((input.threshold).into()),
        );
    }
    if let Some(var_2095) = &input.threshold_metric_id {
        object.key("ThresholdMetricId").string(var_2095.as_str());
    }
    if let Some(var_2096) = &input.treat_missing_data {
        object.key("TreatMissingData").string(var_2096.as_str());
    }
    if let Some(var_2097) = &input.unit {
        object.key("Unit").string(var_2097.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ec2_vpc_peering_connection_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2VpcPeeringConnectionDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2098) = &input.accepter_vpc_info {
        let mut object_2099 = object.key("AccepterVpcInfo").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ec2_vpc_peering_connection_vpc_info_details(&mut object_2099, var_2098)?;
        object_2099.finish();
    }
    if let Some(var_2100) = &input.expiration_time {
        object.key("ExpirationTime").string(var_2100.as_str());
    }
    if let Some(var_2101) = &input.requester_vpc_info {
        let mut object_2102 = object.key("RequesterVpcInfo").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ec2_vpc_peering_connection_vpc_info_details(&mut object_2102, var_2101)?;
        object_2102.finish();
    }
    if let Some(var_2103) = &input.status {
        let mut object_2104 = object.key("Status").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ec2_vpc_peering_connection_status_details(&mut object_2104, var_2103)?;
        object_2104.finish();
    }
    if let Some(var_2105) = &input.vpc_peering_connection_id {
        object
            .key("VpcPeeringConnectionId")
            .string(var_2105.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_waf_regional_rule_group_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsWafRegionalRuleGroupDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2106) = &input.metric_name {
        object.key("MetricName").string(var_2106.as_str());
    }
    if let Some(var_2107) = &input.name {
        object.key("Name").string(var_2107.as_str());
    }
    if let Some(var_2108) = &input.rule_group_id {
        object.key("RuleGroupId").string(var_2108.as_str());
    }
    if let Some(var_2109) = &input.rules {
        let mut array_2110 = object.key("Rules").start_array();
        for item_2111 in var_2109 {
            {
                let mut object_2112 = array_2110.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_waf_regional_rule_group_rules_details(&mut object_2112, item_2111)?;
                object_2112.finish();
            }
        }
        array_2110.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_waf_regional_rule_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsWafRegionalRuleDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2113) = &input.metric_name {
        object.key("MetricName").string(var_2113.as_str());
    }
    if let Some(var_2114) = &input.name {
        object.key("Name").string(var_2114.as_str());
    }
    if let Some(var_2115) = &input.predicate_list {
        let mut array_2116 = object.key("PredicateList").start_array();
        for item_2117 in var_2115 {
            {
                let mut object_2118 = array_2116.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_waf_regional_rule_predicate_list_details(&mut object_2118, item_2117)?;
                object_2118.finish();
            }
        }
        array_2116.finish();
    }
    if let Some(var_2119) = &input.rule_id {
        object.key("RuleId").string(var_2119.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_waf_regional_web_acl_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsWafRegionalWebAclDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2120) = &input.default_action {
        object.key("DefaultAction").string(var_2120.as_str());
    }
    if let Some(var_2121) = &input.metric_name {
        object.key("MetricName").string(var_2121.as_str());
    }
    if let Some(var_2122) = &input.name {
        object.key("Name").string(var_2122.as_str());
    }
    if let Some(var_2123) = &input.rules_list {
        let mut array_2124 = object.key("RulesList").start_array();
        for item_2125 in var_2123 {
            {
                let mut object_2126 = array_2124.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_waf_regional_web_acl_rules_list_details(&mut object_2126, item_2125)?;
                object_2126.finish();
            }
        }
        array_2124.finish();
    }
    if let Some(var_2127) = &input.web_acl_id {
        object.key("WebAclId").string(var_2127.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_waf_rule_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsWafRuleDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2128) = &input.metric_name {
        object.key("MetricName").string(var_2128.as_str());
    }
    if let Some(var_2129) = &input.name {
        object.key("Name").string(var_2129.as_str());
    }
    if let Some(var_2130) = &input.predicate_list {
        let mut array_2131 = object.key("PredicateList").start_array();
        for item_2132 in var_2130 {
            {
                let mut object_2133 = array_2131.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_waf_rule_predicate_list_details(&mut object_2133, item_2132)?;
                object_2133.finish();
            }
        }
        array_2131.finish();
    }
    if let Some(var_2134) = &input.rule_id {
        object.key("RuleId").string(var_2134.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_waf_rule_group_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsWafRuleGroupDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2135) = &input.metric_name {
        object.key("MetricName").string(var_2135.as_str());
    }
    if let Some(var_2136) = &input.name {
        object.key("Name").string(var_2136.as_str());
    }
    if let Some(var_2137) = &input.rule_group_id {
        object.key("RuleGroupId").string(var_2137.as_str());
    }
    if let Some(var_2138) = &input.rules {
        let mut array_2139 = object.key("Rules").start_array();
        for item_2140 in var_2138 {
            {
                let mut object_2141 = array_2139.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_waf_rule_group_rules_details(
                    &mut object_2141,
                    item_2140,
                )?;
                object_2141.finish();
            }
        }
        array_2139.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_task_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2142) = &input.cluster_arn {
        object.key("ClusterArn").string(var_2142.as_str());
    }
    if let Some(var_2143) = &input.task_definition_arn {
        object.key("TaskDefinitionArn").string(var_2143.as_str());
    }
    if let Some(var_2144) = &input.version {
        object.key("Version").string(var_2144.as_str());
    }
    if let Some(var_2145) = &input.created_at {
        object.key("CreatedAt").string(var_2145.as_str());
    }
    if let Some(var_2146) = &input.started_at {
        object.key("StartedAt").string(var_2146.as_str());
    }
    if let Some(var_2147) = &input.started_by {
        object.key("StartedBy").string(var_2147.as_str());
    }
    if let Some(var_2148) = &input.group {
        object.key("Group").string(var_2148.as_str());
    }
    if let Some(var_2149) = &input.volumes {
        let mut array_2150 = object.key("Volumes").start_array();
        for item_2151 in var_2149 {
            {
                let mut object_2152 = array_2150.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ecs_task_volume_details(
                    &mut object_2152,
                    item_2151,
                )?;
                object_2152.finish();
            }
        }
        array_2150.finish();
    }
    if let Some(var_2153) = &input.containers {
        let mut array_2154 = object.key("Containers").start_array();
        for item_2155 in var_2153 {
            {
                let mut object_2156 = array_2154.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ecs_container_details(
                    &mut object_2156,
                    item_2155,
                )?;
                object_2156.finish();
            }
        }
        array_2154.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_backup_backup_vault_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsBackupBackupVaultDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2157) = &input.backup_vault_arn {
        object.key("BackupVaultArn").string(var_2157.as_str());
    }
    if let Some(var_2158) = &input.backup_vault_name {
        object.key("BackupVaultName").string(var_2158.as_str());
    }
    if let Some(var_2159) = &input.encryption_key_arn {
        object.key("EncryptionKeyArn").string(var_2159.as_str());
    }
    if let Some(var_2160) = &input.notifications {
        let mut object_2161 = object.key("Notifications").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_backup_backup_vault_notifications_details(&mut object_2161, var_2160)?;
        object_2161.finish();
    }
    if let Some(var_2162) = &input.access_policy {
        object.key("AccessPolicy").string(var_2162.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_backup_backup_plan_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsBackupBackupPlanDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2163) = &input.backup_plan {
        let mut object_2164 = object.key("BackupPlan").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_backup_backup_plan_backup_plan_details(&mut object_2164, var_2163)?;
        object_2164.finish();
    }
    if let Some(var_2165) = &input.backup_plan_arn {
        object.key("BackupPlanArn").string(var_2165.as_str());
    }
    if let Some(var_2166) = &input.backup_plan_id {
        object.key("BackupPlanId").string(var_2166.as_str());
    }
    if let Some(var_2167) = &input.version_id {
        object.key("VersionId").string(var_2167.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_backup_recovery_point_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsBackupRecoveryPointDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.backup_size_in_bytes != 0 {
        object.key("BackupSizeInBytes").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.backup_size_in_bytes).into()),
        );
    }
    if let Some(var_2168) = &input.backup_vault_arn {
        object.key("BackupVaultArn").string(var_2168.as_str());
    }
    if let Some(var_2169) = &input.backup_vault_name {
        object.key("BackupVaultName").string(var_2169.as_str());
    }
    if let Some(var_2170) = &input.calculated_lifecycle {
        let mut object_2171 = object.key("CalculatedLifecycle").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_backup_recovery_point_calculated_lifecycle_details(&mut object_2171, var_2170)?;
        object_2171.finish();
    }
    if let Some(var_2172) = &input.completion_date {
        object.key("CompletionDate").string(var_2172.as_str());
    }
    if let Some(var_2173) = &input.created_by {
        let mut object_2174 = object.key("CreatedBy").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_backup_recovery_point_created_by_details(&mut object_2174, var_2173)?;
        object_2174.finish();
    }
    if let Some(var_2175) = &input.creation_date {
        object.key("CreationDate").string(var_2175.as_str());
    }
    if let Some(var_2176) = &input.encryption_key_arn {
        object.key("EncryptionKeyArn").string(var_2176.as_str());
    }
    if let Some(var_2177) = &input.iam_role_arn {
        object.key("IamRoleArn").string(var_2177.as_str());
    }
    if input.is_encrypted {
        object.key("IsEncrypted").boolean(input.is_encrypted);
    }
    if let Some(var_2178) = &input.last_restore_time {
        object.key("LastRestoreTime").string(var_2178.as_str());
    }
    if let Some(var_2179) = &input.lifecycle {
        let mut object_2180 = object.key("Lifecycle").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_backup_recovery_point_lifecycle_details(&mut object_2180, var_2179)?;
        object_2180.finish();
    }
    if let Some(var_2181) = &input.recovery_point_arn {
        object.key("RecoveryPointArn").string(var_2181.as_str());
    }
    if let Some(var_2182) = &input.resource_arn {
        object.key("ResourceArn").string(var_2182.as_str());
    }
    if let Some(var_2183) = &input.resource_type {
        object.key("ResourceType").string(var_2183.as_str());
    }
    if let Some(var_2184) = &input.source_backup_vault_arn {
        object.key("SourceBackupVaultArn").string(var_2184.as_str());
    }
    if let Some(var_2185) = &input.status {
        object.key("Status").string(var_2185.as_str());
    }
    if let Some(var_2186) = &input.status_message {
        object.key("StatusMessage").string(var_2186.as_str());
    }
    if let Some(var_2187) = &input.storage_class {
        object.key("StorageClass").string(var_2187.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_adjustment(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Adjustment,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2188) = &input.metric {
        object.key("Metric").string(var_2188.as_str());
    }
    if let Some(var_2189) = &input.reason {
        object.key("Reason").string(var_2189.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_action_remote_ip_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ActionRemoteIpDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2190) = &input.ip_address_v4 {
        object.key("IpAddressV4").string(var_2190.as_str());
    }
    if let Some(var_2191) = &input.organization {
        let mut object_2192 = object.key("Organization").start_object();
        crate::json_ser::serialize_structure_crate_model_ip_organization_details(
            &mut object_2192,
            var_2191,
        )?;
        object_2192.finish();
    }
    if let Some(var_2193) = &input.country {
        let mut object_2194 = object.key("Country").start_object();
        crate::json_ser::serialize_structure_crate_model_country(&mut object_2194, var_2193)?;
        object_2194.finish();
    }
    if let Some(var_2195) = &input.city {
        let mut object_2196 = object.key("City").start_object();
        crate::json_ser::serialize_structure_crate_model_city(&mut object_2196, var_2195)?;
        object_2196.finish();
    }
    if let Some(var_2197) = &input.geo_location {
        let mut object_2198 = object.key("GeoLocation").start_object();
        crate::json_ser::serialize_structure_crate_model_geo_location(&mut object_2198, var_2197)?;
        object_2198.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_action_remote_port_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ActionRemotePortDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.port != 0 {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.port).into()),
        );
    }
    if let Some(var_2199) = &input.port_name {
        object.key("PortName").string(var_2199.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_action_local_port_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ActionLocalPortDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.port != 0 {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.port).into()),
        );
    }
    if let Some(var_2200) = &input.port_name {
        object.key("PortName").string(var_2200.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_api_call_action_domain_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsApiCallActionDomainDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2201) = &input.domain {
        object.key("Domain").string(var_2201.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_port_probe_detail(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PortProbeDetail,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2202) = &input.local_port_details {
        let mut object_2203 = object.key("LocalPortDetails").start_object();
        crate::json_ser::serialize_structure_crate_model_action_local_port_details(
            &mut object_2203,
            var_2202,
        )?;
        object_2203.finish();
    }
    if let Some(var_2204) = &input.local_ip_details {
        let mut object_2205 = object.key("LocalIpDetails").start_object();
        crate::json_ser::serialize_structure_crate_model_action_local_ip_details(
            &mut object_2205,
            var_2204,
        )?;
        object_2205.finish();
    }
    if let Some(var_2206) = &input.remote_ip_details {
        let mut object_2207 = object.key("RemoteIpDetails").start_object();
        crate::json_ser::serialize_structure_crate_model_action_remote_ip_details(
            &mut object_2207,
            var_2206,
        )?;
        object_2207.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_classification_status(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ClassificationStatus,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2208) = &input.code {
        object.key("Code").string(var_2208.as_str());
    }
    if let Some(var_2209) = &input.reason {
        object.key("Reason").string(var_2209.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sensitive_data_result(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SensitiveDataResult,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2210) = &input.category {
        object.key("Category").string(var_2210.as_str());
    }
    if let Some(var_2211) = &input.detections {
        let mut array_2212 = object.key("Detections").start_array();
        for item_2213 in var_2211 {
            {
                let mut object_2214 = array_2212.value().start_object();
                crate::json_ser::serialize_structure_crate_model_sensitive_data_detections(
                    &mut object_2214,
                    item_2213,
                )?;
                object_2214.finish();
            }
        }
        array_2212.finish();
    }
    if input.total_count != 0 {
        object.key("TotalCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.total_count).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_custom_data_identifiers_result(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CustomDataIdentifiersResult,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2215) = &input.detections {
        let mut array_2216 = object.key("Detections").start_array();
        for item_2217 in var_2215 {
            {
                let mut object_2218 = array_2216.value().start_object();
                crate::json_ser::serialize_structure_crate_model_custom_data_identifiers_detections(&mut object_2218, item_2217)?;
                object_2218.finish();
            }
        }
        array_2216.finish();
    }
    if input.total_count != 0 {
        object.key("TotalCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.total_count).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_auto_scaling_auto_scaling_group_mixed_instances_policy_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsAutoScalingAutoScalingGroupMixedInstancesPolicyDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2219) = &input.instances_distribution {
        let mut object_2220 = object.key("InstancesDistribution").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_auto_scaling_auto_scaling_group_mixed_instances_policy_instances_distribution_details(&mut object_2220, var_2219)?;
        object_2220.finish();
    }
    if let Some(var_2221) = &input.launch_template {
        let mut object_2222 = object.key("LaunchTemplate").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_auto_scaling_auto_scaling_group_mixed_instances_policy_launch_template_details(&mut object_2222, var_2221)?;
        object_2222.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_auto_scaling_auto_scaling_group_availability_zones_list_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsAutoScalingAutoScalingGroupAvailabilityZonesListDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2223) = &input.value {
        object.key("Value").string(var_2223.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_auto_scaling_auto_scaling_group_launch_template_launch_template_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsAutoScalingAutoScalingGroupLaunchTemplateLaunchTemplateSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2224) = &input.launch_template_id {
        object.key("LaunchTemplateId").string(var_2224.as_str());
    }
    if let Some(var_2225) = &input.launch_template_name {
        object.key("LaunchTemplateName").string(var_2225.as_str());
    }
    if let Some(var_2226) = &input.version {
        object.key("Version").string(var_2226.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_code_build_project_artifacts_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCodeBuildProjectArtifactsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2227) = &input.artifact_identifier {
        object.key("ArtifactIdentifier").string(var_2227.as_str());
    }
    if input.encryption_disabled {
        object
            .key("EncryptionDisabled")
            .boolean(input.encryption_disabled);
    }
    if let Some(var_2228) = &input.location {
        object.key("Location").string(var_2228.as_str());
    }
    if let Some(var_2229) = &input.name {
        object.key("Name").string(var_2229.as_str());
    }
    if let Some(var_2230) = &input.namespace_type {
        object.key("NamespaceType").string(var_2230.as_str());
    }
    if input.override_artifact_name {
        object
            .key("OverrideArtifactName")
            .boolean(input.override_artifact_name);
    }
    if let Some(var_2231) = &input.packaging {
        object.key("Packaging").string(var_2231.as_str());
    }
    if let Some(var_2232) = &input.path {
        object.key("Path").string(var_2232.as_str());
    }
    if let Some(var_2233) = &input.r#type {
        object.key("Type").string(var_2233.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_code_build_project_environment(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCodeBuildProjectEnvironment,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2234) = &input.certificate {
        object.key("Certificate").string(var_2234.as_str());
    }
    if let Some(var_2235) = &input.environment_variables {
        let mut array_2236 = object.key("EnvironmentVariables").start_array();
        for item_2237 in var_2235 {
            {
                let mut object_2238 = array_2236.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_code_build_project_environment_environment_variables_details(&mut object_2238, item_2237)?;
                object_2238.finish();
            }
        }
        array_2236.finish();
    }
    if input.privileged_mode {
        object.key("PrivilegedMode").boolean(input.privileged_mode);
    }
    if let Some(var_2239) = &input.image_pull_credentials_type {
        object
            .key("ImagePullCredentialsType")
            .string(var_2239.as_str());
    }
    if let Some(var_2240) = &input.registry_credential {
        let mut object_2241 = object.key("RegistryCredential").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_code_build_project_environment_registry_credential(&mut object_2241, var_2240)?;
        object_2241.finish();
    }
    if let Some(var_2242) = &input.r#type {
        object.key("Type").string(var_2242.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_code_build_project_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCodeBuildProjectSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2243) = &input.r#type {
        object.key("Type").string(var_2243.as_str());
    }
    if let Some(var_2244) = &input.location {
        object.key("Location").string(var_2244.as_str());
    }
    if input.git_clone_depth != 0 {
        object.key("GitCloneDepth").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.git_clone_depth).into()),
        );
    }
    if input.insecure_ssl {
        object.key("InsecureSsl").boolean(input.insecure_ssl);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_code_build_project_logs_config_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCodeBuildProjectLogsConfigDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2245) = &input.cloud_watch_logs {
        let mut object_2246 = object.key("CloudWatchLogs").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_code_build_project_logs_config_cloud_watch_logs_details(&mut object_2246, var_2245)?;
        object_2246.finish();
    }
    if let Some(var_2247) = &input.s3_logs {
        let mut object_2248 = object.key("S3Logs").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_code_build_project_logs_config_s3_logs_details(&mut object_2248, var_2247)?;
        object_2248.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_code_build_project_vpc_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCodeBuildProjectVpcConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2249) = &input.vpc_id {
        object.key("VpcId").string(var_2249.as_str());
    }
    if let Some(var_2250) = &input.subnets {
        let mut array_2251 = object.key("Subnets").start_array();
        for item_2252 in var_2250 {
            {
                array_2251.value().string(item_2252.as_str());
            }
        }
        array_2251.finish();
    }
    if let Some(var_2253) = &input.security_group_ids {
        let mut array_2254 = object.key("SecurityGroupIds").start_array();
        for item_2255 in var_2253 {
            {
                array_2254.value().string(item_2255.as_str());
            }
        }
        array_2254.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_cloud_front_distribution_cache_behaviors(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCloudFrontDistributionCacheBehaviors,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2256) = &input.items {
        let mut array_2257 = object.key("Items").start_array();
        for item_2258 in var_2256 {
            {
                let mut object_2259 = array_2257.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_cloud_front_distribution_cache_behavior(&mut object_2259, item_2258)?;
                object_2259.finish();
            }
        }
        array_2257.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_cloud_front_distribution_default_cache_behavior(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCloudFrontDistributionDefaultCacheBehavior,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2260) = &input.viewer_protocol_policy {
        object.key("ViewerProtocolPolicy").string(var_2260.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_cloud_front_distribution_logging(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCloudFrontDistributionLogging,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2261) = &input.bucket {
        object.key("Bucket").string(var_2261.as_str());
    }
    if input.enabled {
        object.key("Enabled").boolean(input.enabled);
    }
    if input.include_cookies {
        object.key("IncludeCookies").boolean(input.include_cookies);
    }
    if let Some(var_2262) = &input.prefix {
        object.key("Prefix").string(var_2262.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_cloud_front_distribution_origins(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCloudFrontDistributionOrigins,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2263) = &input.items {
        let mut array_2264 = object.key("Items").start_array();
        for item_2265 in var_2263 {
            {
                let mut object_2266 = array_2264.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_cloud_front_distribution_origin_item(&mut object_2266, item_2265)?;
                object_2266.finish();
            }
        }
        array_2264.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_cloud_front_distribution_origin_groups(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCloudFrontDistributionOriginGroups,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2267) = &input.items {
        let mut array_2268 = object.key("Items").start_array();
        for item_2269 in var_2267 {
            {
                let mut object_2270 = array_2268.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_cloud_front_distribution_origin_group(&mut object_2270, item_2269)?;
                object_2270.finish();
            }
        }
        array_2268.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_cloud_front_distribution_viewer_certificate(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCloudFrontDistributionViewerCertificate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2271) = &input.acm_certificate_arn {
        object.key("AcmCertificateArn").string(var_2271.as_str());
    }
    if let Some(var_2272) = &input.certificate {
        object.key("Certificate").string(var_2272.as_str());
    }
    if let Some(var_2273) = &input.certificate_source {
        object.key("CertificateSource").string(var_2273.as_str());
    }
    if input.cloud_front_default_certificate {
        object
            .key("CloudFrontDefaultCertificate")
            .boolean(input.cloud_front_default_certificate);
    }
    if let Some(var_2274) = &input.iam_certificate_id {
        object.key("IamCertificateId").string(var_2274.as_str());
    }
    if let Some(var_2275) = &input.minimum_protocol_version {
        object
            .key("MinimumProtocolVersion")
            .string(var_2275.as_str());
    }
    if let Some(var_2276) = &input.ssl_support_method {
        object.key("SslSupportMethod").string(var_2276.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ec2_instance_network_interfaces_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2InstanceNetworkInterfacesDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2277) = &input.network_interface_id {
        object.key("NetworkInterfaceId").string(var_2277.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ec2_instance_metadata_options(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2InstanceMetadataOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2278) = &input.http_endpoint {
        object.key("HttpEndpoint").string(var_2278.as_str());
    }
    if let Some(var_2279) = &input.http_protocol_ipv6 {
        object.key("HttpProtocolIpv6").string(var_2279.as_str());
    }
    if input.http_put_response_hop_limit != 0 {
        object.key("HttpPutResponseHopLimit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.http_put_response_hop_limit).into()),
        );
    }
    if let Some(var_2280) = &input.http_tokens {
        object.key("HttpTokens").string(var_2280.as_str());
    }
    if let Some(var_2281) = &input.instance_metadata_tags {
        object.key("InstanceMetadataTags").string(var_2281.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ec2_network_interface_attachment(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2NetworkInterfaceAttachment,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2282) = &input.attach_time {
        object.key("AttachTime").string(var_2282.as_str());
    }
    if let Some(var_2283) = &input.attachment_id {
        object.key("AttachmentId").string(var_2283.as_str());
    }
    if input.delete_on_termination {
        object
            .key("DeleteOnTermination")
            .boolean(input.delete_on_termination);
    }
    if input.device_index != 0 {
        object.key("DeviceIndex").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.device_index).into()),
        );
    }
    if let Some(var_2284) = &input.instance_id {
        object.key("InstanceId").string(var_2284.as_str());
    }
    if let Some(var_2285) = &input.instance_owner_id {
        object.key("InstanceOwnerId").string(var_2285.as_str());
    }
    if let Some(var_2286) = &input.status {
        object.key("Status").string(var_2286.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ec2_network_interface_security_group(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2NetworkInterfaceSecurityGroup,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2287) = &input.group_name {
        object.key("GroupName").string(var_2287.as_str());
    }
    if let Some(var_2288) = &input.group_id {
        object.key("GroupId").string(var_2288.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ec2_network_interface_ip_v6_address_detail(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2NetworkInterfaceIpV6AddressDetail,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2289) = &input.ip_v6_address {
        object.key("IpV6Address").string(var_2289.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ec2_network_interface_private_ip_address_detail(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2NetworkInterfacePrivateIpAddressDetail,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2290) = &input.private_ip_address {
        object.key("PrivateIpAddress").string(var_2290.as_str());
    }
    if let Some(var_2291) = &input.private_dns_name {
        object.key("PrivateDnsName").string(var_2291.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ec2_security_group_ip_permission(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2SecurityGroupIpPermission,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2292) = &input.ip_protocol {
        object.key("IpProtocol").string(var_2292.as_str());
    }
    if input.from_port != 0 {
        object.key("FromPort").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.from_port).into()),
        );
    }
    if input.to_port != 0 {
        object.key("ToPort").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.to_port).into()),
        );
    }
    if let Some(var_2293) = &input.user_id_group_pairs {
        let mut array_2294 = object.key("UserIdGroupPairs").start_array();
        for item_2295 in var_2293 {
            {
                let mut object_2296 = array_2294.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ec2_security_group_user_id_group_pair(&mut object_2296, item_2295)?;
                object_2296.finish();
            }
        }
        array_2294.finish();
    }
    if let Some(var_2297) = &input.ip_ranges {
        let mut array_2298 = object.key("IpRanges").start_array();
        for item_2299 in var_2297 {
            {
                let mut object_2300 = array_2298.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ec2_security_group_ip_range(
                    &mut object_2300,
                    item_2299,
                )?;
                object_2300.finish();
            }
        }
        array_2298.finish();
    }
    if let Some(var_2301) = &input.ipv6_ranges {
        let mut array_2302 = object.key("Ipv6Ranges").start_array();
        for item_2303 in var_2301 {
            {
                let mut object_2304 = array_2302.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ec2_security_group_ipv6_range(
                    &mut object_2304,
                    item_2303,
                )?;
                object_2304.finish();
            }
        }
        array_2302.finish();
    }
    if let Some(var_2305) = &input.prefix_list_ids {
        let mut array_2306 = object.key("PrefixListIds").start_array();
        for item_2307 in var_2305 {
            {
                let mut object_2308 = array_2306.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ec2_security_group_prefix_list_id(&mut object_2308, item_2307)?;
                object_2308.finish();
            }
        }
        array_2306.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ec2_volume_attachment(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2VolumeAttachment,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2309) = &input.attach_time {
        object.key("AttachTime").string(var_2309.as_str());
    }
    if input.delete_on_termination {
        object
            .key("DeleteOnTermination")
            .boolean(input.delete_on_termination);
    }
    if let Some(var_2310) = &input.instance_id {
        object.key("InstanceId").string(var_2310.as_str());
    }
    if let Some(var_2311) = &input.status {
        object.key("Status").string(var_2311.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_cidr_block_association(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CidrBlockAssociation,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2312) = &input.association_id {
        object.key("AssociationId").string(var_2312.as_str());
    }
    if let Some(var_2313) = &input.cidr_block {
        object.key("CidrBlock").string(var_2313.as_str());
    }
    if let Some(var_2314) = &input.cidr_block_state {
        object.key("CidrBlockState").string(var_2314.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ipv6_cidr_block_association(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Ipv6CidrBlockAssociation,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2315) = &input.association_id {
        object.key("AssociationId").string(var_2315.as_str());
    }
    if let Some(var_2316) = &input.ipv6_cidr_block {
        object.key("Ipv6CidrBlock").string(var_2316.as_str());
    }
    if let Some(var_2317) = &input.cidr_block_state {
        object.key("CidrBlockState").string(var_2317.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ec2_network_acl_association(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2NetworkAclAssociation,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2318) = &input.network_acl_association_id {
        object
            .key("NetworkAclAssociationId")
            .string(var_2318.as_str());
    }
    if let Some(var_2319) = &input.network_acl_id {
        object.key("NetworkAclId").string(var_2319.as_str());
    }
    if let Some(var_2320) = &input.subnet_id {
        object.key("SubnetId").string(var_2320.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ec2_network_acl_entry(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2NetworkAclEntry,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2321) = &input.cidr_block {
        object.key("CidrBlock").string(var_2321.as_str());
    }
    if input.egress {
        object.key("Egress").boolean(input.egress);
    }
    if let Some(var_2322) = &input.icmp_type_code {
        let mut object_2323 = object.key("IcmpTypeCode").start_object();
        crate::json_ser::serialize_structure_crate_model_icmp_type_code(
            &mut object_2323,
            var_2322,
        )?;
        object_2323.finish();
    }
    if let Some(var_2324) = &input.ipv6_cidr_block {
        object.key("Ipv6CidrBlock").string(var_2324.as_str());
    }
    if let Some(var_2325) = &input.port_range {
        let mut object_2326 = object.key("PortRange").start_object();
        crate::json_ser::serialize_structure_crate_model_port_range_from_to(
            &mut object_2326,
            var_2325,
        )?;
        object_2326.finish();
    }
    if let Some(var_2327) = &input.protocol {
        object.key("Protocol").string(var_2327.as_str());
    }
    if let Some(var_2328) = &input.rule_action {
        object.key("RuleAction").string(var_2328.as_str());
    }
    if input.rule_number != 0 {
        object.key("RuleNumber").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.rule_number).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_availability_zone(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AvailabilityZone,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2329) = &input.zone_name {
        object.key("ZoneName").string(var_2329.as_str());
    }
    if let Some(var_2330) = &input.subnet_id {
        object.key("SubnetId").string(var_2330.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_load_balancer_state(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LoadBalancerState,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2331) = &input.code {
        object.key("Code").string(var_2331.as_str());
    }
    if let Some(var_2332) = &input.reason {
        object.key("Reason").string(var_2332.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_elbv2_load_balancer_attribute(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElbv2LoadBalancerAttribute,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2333) = &input.key {
        object.key("Key").string(var_2333.as_str());
    }
    if let Some(var_2334) = &input.value {
        object.key("Value").string(var_2334.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_elastic_beanstalk_environment_environment_link(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElasticBeanstalkEnvironmentEnvironmentLink,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2335) = &input.environment_name {
        object.key("EnvironmentName").string(var_2335.as_str());
    }
    if let Some(var_2336) = &input.link_name {
        object.key("LinkName").string(var_2336.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_elastic_beanstalk_environment_option_setting(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElasticBeanstalkEnvironmentOptionSetting,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2337) = &input.namespace {
        object.key("Namespace").string(var_2337.as_str());
    }
    if let Some(var_2338) = &input.option_name {
        object.key("OptionName").string(var_2338.as_str());
    }
    if let Some(var_2339) = &input.resource_name {
        object.key("ResourceName").string(var_2339.as_str());
    }
    if let Some(var_2340) = &input.value {
        object.key("Value").string(var_2340.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_elastic_beanstalk_environment_tier(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElasticBeanstalkEnvironmentTier,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2341) = &input.name {
        object.key("Name").string(var_2341.as_str());
    }
    if let Some(var_2342) = &input.r#type {
        object.key("Type").string(var_2342.as_str());
    }
    if let Some(var_2343) = &input.version {
        object.key("Version").string(var_2343.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_elasticsearch_domain_domain_endpoint_options(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElasticsearchDomainDomainEndpointOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.enforce_https {
        object.key("EnforceHTTPS").boolean(input.enforce_https);
    }
    if let Some(var_2344) = &input.tls_security_policy {
        object.key("TLSSecurityPolicy").string(var_2344.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_elasticsearch_domain_elasticsearch_cluster_config_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElasticsearchDomainElasticsearchClusterConfigDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.dedicated_master_count != 0 {
        object.key("DedicatedMasterCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.dedicated_master_count).into()),
        );
    }
    if input.dedicated_master_enabled {
        object
            .key("DedicatedMasterEnabled")
            .boolean(input.dedicated_master_enabled);
    }
    if let Some(var_2345) = &input.dedicated_master_type {
        object.key("DedicatedMasterType").string(var_2345.as_str());
    }
    if input.instance_count != 0 {
        object.key("InstanceCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.instance_count).into()),
        );
    }
    if let Some(var_2346) = &input.instance_type {
        object.key("InstanceType").string(var_2346.as_str());
    }
    if let Some(var_2347) = &input.zone_awareness_config {
        let mut object_2348 = object.key("ZoneAwarenessConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_elasticsearch_domain_elasticsearch_cluster_config_zone_awareness_config_details(&mut object_2348, var_2347)?;
        object_2348.finish();
    }
    if input.zone_awareness_enabled {
        object
            .key("ZoneAwarenessEnabled")
            .boolean(input.zone_awareness_enabled);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_elasticsearch_domain_encryption_at_rest_options(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElasticsearchDomainEncryptionAtRestOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.enabled {
        object.key("Enabled").boolean(input.enabled);
    }
    if let Some(var_2349) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_2349.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_elasticsearch_domain_log_publishing_options(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElasticsearchDomainLogPublishingOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2350) = &input.index_slow_logs {
        let mut object_2351 = object.key("IndexSlowLogs").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_elasticsearch_domain_log_publishing_options_log_config(&mut object_2351, var_2350)?;
        object_2351.finish();
    }
    if let Some(var_2352) = &input.search_slow_logs {
        let mut object_2353 = object.key("SearchSlowLogs").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_elasticsearch_domain_log_publishing_options_log_config(&mut object_2353, var_2352)?;
        object_2353.finish();
    }
    if let Some(var_2354) = &input.audit_logs {
        let mut object_2355 = object.key("AuditLogs").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_elasticsearch_domain_log_publishing_options_log_config(&mut object_2355, var_2354)?;
        object_2355.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_elasticsearch_domain_node_to_node_encryption_options(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElasticsearchDomainNodeToNodeEncryptionOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.enabled {
        object.key("Enabled").boolean(input.enabled);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_elasticsearch_domain_service_software_options(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElasticsearchDomainServiceSoftwareOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2356) = &input.automated_update_date {
        object.key("AutomatedUpdateDate").string(var_2356.as_str());
    }
    if input.cancellable {
        object.key("Cancellable").boolean(input.cancellable);
    }
    if let Some(var_2357) = &input.current_version {
        object.key("CurrentVersion").string(var_2357.as_str());
    }
    if let Some(var_2358) = &input.description {
        object.key("Description").string(var_2358.as_str());
    }
    if let Some(var_2359) = &input.new_version {
        object.key("NewVersion").string(var_2359.as_str());
    }
    if input.update_available {
        object
            .key("UpdateAvailable")
            .boolean(input.update_available);
    }
    if let Some(var_2360) = &input.update_status {
        object.key("UpdateStatus").string(var_2360.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_elasticsearch_domain_vpc_options(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElasticsearchDomainVpcOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2361) = &input.availability_zones {
        let mut array_2362 = object.key("AvailabilityZones").start_array();
        for item_2363 in var_2361 {
            {
                array_2362.value().string(item_2363.as_str());
            }
        }
        array_2362.finish();
    }
    if let Some(var_2364) = &input.security_group_ids {
        let mut array_2365 = object.key("SecurityGroupIds").start_array();
        for item_2366 in var_2364 {
            {
                array_2365.value().string(item_2366.as_str());
            }
        }
        array_2365.finish();
    }
    if let Some(var_2367) = &input.subnet_ids {
        let mut array_2368 = object.key("SubnetIds").start_array();
        for item_2369 in var_2367 {
            {
                array_2368.value().string(item_2369.as_str());
            }
        }
        array_2368.finish();
    }
    if let Some(var_2370) = &input.vpc_id {
        object.key("VPCId").string(var_2370.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_s3_bucket_server_side_encryption_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3BucketServerSideEncryptionConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2371) = &input.rules {
        let mut array_2372 = object.key("Rules").start_array();
        for item_2373 in var_2371 {
            {
                let mut object_2374 = array_2372.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_s3_bucket_server_side_encryption_rule(&mut object_2374, item_2373)?;
                object_2374.finish();
            }
        }
        array_2372.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_s3_bucket_bucket_lifecycle_configuration_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3BucketBucketLifecycleConfigurationDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2375) = &input.rules {
        let mut array_2376 = object.key("Rules").start_array();
        for item_2377 in var_2375 {
            {
                let mut object_2378 = array_2376.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_s3_bucket_bucket_lifecycle_configuration_rules_details(&mut object_2378, item_2377)?;
                object_2378.finish();
            }
        }
        array_2376.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_s3_bucket_logging_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3BucketLoggingConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2379) = &input.destination_bucket_name {
        object
            .key("DestinationBucketName")
            .string(var_2379.as_str());
    }
    if let Some(var_2380) = &input.log_file_prefix {
        object.key("LogFilePrefix").string(var_2380.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_s3_bucket_website_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3BucketWebsiteConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2381) = &input.error_document {
        object.key("ErrorDocument").string(var_2381.as_str());
    }
    if let Some(var_2382) = &input.index_document_suffix {
        object.key("IndexDocumentSuffix").string(var_2382.as_str());
    }
    if let Some(var_2383) = &input.redirect_all_requests_to {
        let mut object_2384 = object.key("RedirectAllRequestsTo").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_s3_bucket_website_configuration_redirect_to(&mut object_2384, var_2383)?;
        object_2384.finish();
    }
    if let Some(var_2385) = &input.routing_rules {
        let mut array_2386 = object.key("RoutingRules").start_array();
        for item_2387 in var_2385 {
            {
                let mut object_2388 = array_2386.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_s3_bucket_website_configuration_routing_rule(&mut object_2388, item_2387)?;
                object_2388.finish();
            }
        }
        array_2386.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_s3_bucket_notification_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3BucketNotificationConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2389) = &input.configurations {
        let mut array_2390 = object.key("Configurations").start_array();
        for item_2391 in var_2389 {
            {
                let mut object_2392 = array_2390.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_s3_bucket_notification_configuration_detail(&mut object_2392, item_2391)?;
                object_2392.finish();
            }
        }
        array_2390.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_s3_bucket_bucket_versioning_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3BucketBucketVersioningConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.is_mfa_delete_enabled {
        object
            .key("IsMfaDeleteEnabled")
            .boolean(input.is_mfa_delete_enabled);
    }
    if let Some(var_2393) = &input.status {
        object.key("Status").string(var_2393.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_secrets_manager_secret_rotation_rules(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsSecretsManagerSecretRotationRules,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.automatically_after_days != 0 {
        object.key("AutomaticallyAfterDays").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.automatically_after_days).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_iam_access_key_session_context(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsIamAccessKeySessionContext,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2394) = &input.attributes {
        let mut object_2395 = object.key("Attributes").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_iam_access_key_session_context_attributes(&mut object_2395, var_2394)?;
        object_2395.finish();
    }
    if let Some(var_2396) = &input.session_issuer {
        let mut object_2397 = object.key("SessionIssuer").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_iam_access_key_session_context_session_issuer(&mut object_2397, var_2396)?;
        object_2397.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_iam_attached_managed_policy(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsIamAttachedManagedPolicy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2398) = &input.policy_name {
        object.key("PolicyName").string(var_2398.as_str());
    }
    if let Some(var_2399) = &input.policy_arn {
        object.key("PolicyArn").string(var_2399.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_iam_permissions_boundary(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsIamPermissionsBoundary,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2400) = &input.permissions_boundary_arn {
        object
            .key("PermissionsBoundaryArn")
            .string(var_2400.as_str());
    }
    if let Some(var_2401) = &input.permissions_boundary_type {
        object
            .key("PermissionsBoundaryType")
            .string(var_2401.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_iam_user_policy(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsIamUserPolicy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2402) = &input.policy_name {
        object.key("PolicyName").string(var_2402.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_iam_policy_version(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsIamPolicyVersion,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2403) = &input.version_id {
        object.key("VersionId").string(var_2403.as_str());
    }
    if input.is_default_version {
        object
            .key("IsDefaultVersion")
            .boolean(input.is_default_version);
    }
    if let Some(var_2404) = &input.create_date {
        object.key("CreateDate").string(var_2404.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_api_gateway_v2_route_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsApiGatewayV2RouteSettings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.detailed_metrics_enabled {
        object
            .key("DetailedMetricsEnabled")
            .boolean(input.detailed_metrics_enabled);
    }
    if let Some(var_2405) = &input.logging_level {
        object.key("LoggingLevel").string(var_2405.as_str());
    }
    if input.data_trace_enabled {
        object
            .key("DataTraceEnabled")
            .boolean(input.data_trace_enabled);
    }
    if input.throttling_burst_limit != 0 {
        object.key("ThrottlingBurstLimit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.throttling_burst_limit).into()),
        );
    }
    if input.throttling_rate_limit != 0.0 {
        object.key("ThrottlingRateLimit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((input.throttling_rate_limit).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_api_gateway_access_log_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsApiGatewayAccessLogSettings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2406) = &input.format {
        object.key("Format").string(var_2406.as_str());
    }
    if let Some(var_2407) = &input.destination_arn {
        object.key("DestinationArn").string(var_2407.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_cors_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCorsConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2408) = &input.allow_origins {
        let mut array_2409 = object.key("AllowOrigins").start_array();
        for item_2410 in var_2408 {
            {
                array_2409.value().string(item_2410.as_str());
            }
        }
        array_2409.finish();
    }
    if input.allow_credentials {
        object
            .key("AllowCredentials")
            .boolean(input.allow_credentials);
    }
    if let Some(var_2411) = &input.expose_headers {
        let mut array_2412 = object.key("ExposeHeaders").start_array();
        for item_2413 in var_2411 {
            {
                array_2412.value().string(item_2413.as_str());
            }
        }
        array_2412.finish();
    }
    if input.max_age != 0 {
        object.key("MaxAge").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_age).into()),
        );
    }
    if let Some(var_2414) = &input.allow_methods {
        let mut array_2415 = object.key("AllowMethods").start_array();
        for item_2416 in var_2414 {
            {
                array_2415.value().string(item_2416.as_str());
            }
        }
        array_2415.finish();
    }
    if let Some(var_2417) = &input.allow_headers {
        let mut array_2418 = object.key("AllowHeaders").start_array();
        for item_2419 in var_2417 {
            {
                array_2418.value().string(item_2419.as_str());
            }
        }
        array_2418.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_dynamo_db_table_attribute_definition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsDynamoDbTableAttributeDefinition,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2420) = &input.attribute_name {
        object.key("AttributeName").string(var_2420.as_str());
    }
    if let Some(var_2421) = &input.attribute_type {
        object.key("AttributeType").string(var_2421.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_dynamo_db_table_billing_mode_summary(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsDynamoDbTableBillingModeSummary,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2422) = &input.billing_mode {
        object.key("BillingMode").string(var_2422.as_str());
    }
    if let Some(var_2423) = &input.last_update_to_pay_per_request_date_time {
        object
            .key("LastUpdateToPayPerRequestDateTime")
            .string(var_2423.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_dynamo_db_table_global_secondary_index(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsDynamoDbTableGlobalSecondaryIndex,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.backfilling {
        object.key("Backfilling").boolean(input.backfilling);
    }
    if let Some(var_2424) = &input.index_arn {
        object.key("IndexArn").string(var_2424.as_str());
    }
    if let Some(var_2425) = &input.index_name {
        object.key("IndexName").string(var_2425.as_str());
    }
    if input.index_size_bytes != 0 {
        object.key("IndexSizeBytes").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.index_size_bytes).into()),
        );
    }
    if let Some(var_2426) = &input.index_status {
        object.key("IndexStatus").string(var_2426.as_str());
    }
    if input.item_count != 0 {
        object.key("ItemCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.item_count).into()),
        );
    }
    if let Some(var_2427) = &input.key_schema {
        let mut array_2428 = object.key("KeySchema").start_array();
        for item_2429 in var_2427 {
            {
                let mut object_2430 = array_2428.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_dynamo_db_table_key_schema(
                    &mut object_2430,
                    item_2429,
                )?;
                object_2430.finish();
            }
        }
        array_2428.finish();
    }
    if let Some(var_2431) = &input.projection {
        let mut object_2432 = object.key("Projection").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_dynamo_db_table_projection(
            &mut object_2432,
            var_2431,
        )?;
        object_2432.finish();
    }
    if let Some(var_2433) = &input.provisioned_throughput {
        let mut object_2434 = object.key("ProvisionedThroughput").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_dynamo_db_table_provisioned_throughput(&mut object_2434, var_2433)?;
        object_2434.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_dynamo_db_table_key_schema(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsDynamoDbTableKeySchema,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2435) = &input.attribute_name {
        object.key("AttributeName").string(var_2435.as_str());
    }
    if let Some(var_2436) = &input.key_type {
        object.key("KeyType").string(var_2436.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_dynamo_db_table_local_secondary_index(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsDynamoDbTableLocalSecondaryIndex,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2437) = &input.index_arn {
        object.key("IndexArn").string(var_2437.as_str());
    }
    if let Some(var_2438) = &input.index_name {
        object.key("IndexName").string(var_2438.as_str());
    }
    if let Some(var_2439) = &input.key_schema {
        let mut array_2440 = object.key("KeySchema").start_array();
        for item_2441 in var_2439 {
            {
                let mut object_2442 = array_2440.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_dynamo_db_table_key_schema(
                    &mut object_2442,
                    item_2441,
                )?;
                object_2442.finish();
            }
        }
        array_2440.finish();
    }
    if let Some(var_2443) = &input.projection {
        let mut object_2444 = object.key("Projection").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_dynamo_db_table_projection(
            &mut object_2444,
            var_2443,
        )?;
        object_2444.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_dynamo_db_table_provisioned_throughput(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsDynamoDbTableProvisionedThroughput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2445) = &input.last_decrease_date_time {
        object.key("LastDecreaseDateTime").string(var_2445.as_str());
    }
    if let Some(var_2446) = &input.last_increase_date_time {
        object.key("LastIncreaseDateTime").string(var_2446.as_str());
    }
    if input.number_of_decreases_today != 0 {
        object.key("NumberOfDecreasesToday").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_decreases_today).into()),
        );
    }
    if input.read_capacity_units != 0 {
        object.key("ReadCapacityUnits").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.read_capacity_units).into()),
        );
    }
    if input.write_capacity_units != 0 {
        object.key("WriteCapacityUnits").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.write_capacity_units).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_dynamo_db_table_replica(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsDynamoDbTableReplica,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2447) = &input.global_secondary_indexes {
        let mut array_2448 = object.key("GlobalSecondaryIndexes").start_array();
        for item_2449 in var_2447 {
            {
                let mut object_2450 = array_2448.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_dynamo_db_table_replica_global_secondary_index(&mut object_2450, item_2449)?;
                object_2450.finish();
            }
        }
        array_2448.finish();
    }
    if let Some(var_2451) = &input.kms_master_key_id {
        object.key("KmsMasterKeyId").string(var_2451.as_str());
    }
    if let Some(var_2452) = &input.provisioned_throughput_override {
        let mut object_2453 = object.key("ProvisionedThroughputOverride").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_dynamo_db_table_provisioned_throughput_override(&mut object_2453, var_2452)?;
        object_2453.finish();
    }
    if let Some(var_2454) = &input.region_name {
        object.key("RegionName").string(var_2454.as_str());
    }
    if let Some(var_2455) = &input.replica_status {
        object.key("ReplicaStatus").string(var_2455.as_str());
    }
    if let Some(var_2456) = &input.replica_status_description {
        object
            .key("ReplicaStatusDescription")
            .string(var_2456.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_dynamo_db_table_restore_summary(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsDynamoDbTableRestoreSummary,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2457) = &input.source_backup_arn {
        object.key("SourceBackupArn").string(var_2457.as_str());
    }
    if let Some(var_2458) = &input.source_table_arn {
        object.key("SourceTableArn").string(var_2458.as_str());
    }
    if let Some(var_2459) = &input.restore_date_time {
        object.key("RestoreDateTime").string(var_2459.as_str());
    }
    if input.restore_in_progress {
        object
            .key("RestoreInProgress")
            .boolean(input.restore_in_progress);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_dynamo_db_table_sse_description(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsDynamoDbTableSseDescription,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2460) = &input.inaccessible_encryption_date_time {
        object
            .key("InaccessibleEncryptionDateTime")
            .string(var_2460.as_str());
    }
    if let Some(var_2461) = &input.status {
        object.key("Status").string(var_2461.as_str());
    }
    if let Some(var_2462) = &input.sse_type {
        object.key("SseType").string(var_2462.as_str());
    }
    if let Some(var_2463) = &input.kms_master_key_arn {
        object.key("KmsMasterKeyArn").string(var_2463.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_dynamo_db_table_stream_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsDynamoDbTableStreamSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.stream_enabled {
        object.key("StreamEnabled").boolean(input.stream_enabled);
    }
    if let Some(var_2464) = &input.stream_view_type {
        object.key("StreamViewType").string(var_2464.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_api_gateway_method_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsApiGatewayMethodSettings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.metrics_enabled {
        object.key("MetricsEnabled").boolean(input.metrics_enabled);
    }
    if let Some(var_2465) = &input.logging_level {
        object.key("LoggingLevel").string(var_2465.as_str());
    }
    if input.data_trace_enabled {
        object
            .key("DataTraceEnabled")
            .boolean(input.data_trace_enabled);
    }
    if input.throttling_burst_limit != 0 {
        object.key("ThrottlingBurstLimit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.throttling_burst_limit).into()),
        );
    }
    if input.throttling_rate_limit != 0.0 {
        object.key("ThrottlingRateLimit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((input.throttling_rate_limit).into()),
        );
    }
    if input.caching_enabled {
        object.key("CachingEnabled").boolean(input.caching_enabled);
    }
    if input.cache_ttl_in_seconds != 0 {
        object.key("CacheTtlInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.cache_ttl_in_seconds).into()),
        );
    }
    if input.cache_data_encrypted {
        object
            .key("CacheDataEncrypted")
            .boolean(input.cache_data_encrypted);
    }
    if input.require_authorization_for_cache_control {
        object
            .key("RequireAuthorizationForCacheControl")
            .boolean(input.require_authorization_for_cache_control);
    }
    if let Some(var_2466) = &input.unauthorized_cache_control_header_strategy {
        object
            .key("UnauthorizedCacheControlHeaderStrategy")
            .string(var_2466.as_str());
    }
    if let Some(var_2467) = &input.http_method {
        object.key("HttpMethod").string(var_2467.as_str());
    }
    if let Some(var_2468) = &input.resource_path {
        object.key("ResourcePath").string(var_2468.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_api_gateway_canary_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsApiGatewayCanarySettings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.percent_traffic != 0.0 {
        object.key("PercentTraffic").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((input.percent_traffic).into()),
        );
    }
    if let Some(var_2469) = &input.deployment_id {
        object.key("DeploymentId").string(var_2469.as_str());
    }
    if let Some(var_2470) = &input.stage_variable_overrides {
        let mut object_2471 = object.key("StageVariableOverrides").start_object();
        for (key_2472, value_2473) in var_2470 {
            {
                object_2471.key(key_2472).string(value_2473.as_str());
            }
        }
        object_2471.finish();
    }
    if input.use_stage_cache {
        object.key("UseStageCache").boolean(input.use_stage_cache);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_api_gateway_endpoint_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsApiGatewayEndpointConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2474) = &input.types {
        let mut array_2475 = object.key("Types").start_array();
        for item_2476 in var_2474 {
            {
                array_2475.value().string(item_2476.as_str());
            }
        }
        array_2475.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ssm_patch(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsSsmPatch,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2477) = &input.compliance_summary {
        let mut object_2478 = object.key("ComplianceSummary").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ssm_compliance_summary(
            &mut object_2478,
            var_2477,
        )?;
        object_2478.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_certificate_manager_certificate_domain_validation_option(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCertificateManagerCertificateDomainValidationOption,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2479) = &input.domain_name {
        object.key("DomainName").string(var_2479.as_str());
    }
    if let Some(var_2480) = &input.resource_record {
        let mut object_2481 = object.key("ResourceRecord").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_certificate_manager_certificate_resource_record(&mut object_2481, var_2480)?;
        object_2481.finish();
    }
    if let Some(var_2482) = &input.validation_domain {
        object.key("ValidationDomain").string(var_2482.as_str());
    }
    if let Some(var_2483) = &input.validation_emails {
        let mut array_2484 = object.key("ValidationEmails").start_array();
        for item_2485 in var_2483 {
            {
                array_2484.value().string(item_2485.as_str());
            }
        }
        array_2484.finish();
    }
    if let Some(var_2486) = &input.validation_method {
        object.key("ValidationMethod").string(var_2486.as_str());
    }
    if let Some(var_2487) = &input.validation_status {
        object.key("ValidationStatus").string(var_2487.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_certificate_manager_certificate_extended_key_usage(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCertificateManagerCertificateExtendedKeyUsage,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2488) = &input.name {
        object.key("Name").string(var_2488.as_str());
    }
    if let Some(var_2489) = &input.o_id {
        object.key("OId").string(var_2489.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_certificate_manager_certificate_key_usage(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCertificateManagerCertificateKeyUsage,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2490) = &input.name {
        object.key("Name").string(var_2490.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_certificate_manager_certificate_options(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCertificateManagerCertificateOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2491) = &input.certificate_transparency_logging_preference {
        object
            .key("CertificateTransparencyLoggingPreference")
            .string(var_2491.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_certificate_manager_certificate_renewal_summary(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCertificateManagerCertificateRenewalSummary,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2492) = &input.domain_validation_options {
        let mut array_2493 = object.key("DomainValidationOptions").start_array();
        for item_2494 in var_2492 {
            {
                let mut object_2495 = array_2493.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_certificate_manager_certificate_domain_validation_option(&mut object_2495, item_2494)?;
                object_2495.finish();
            }
        }
        array_2493.finish();
    }
    if let Some(var_2496) = &input.renewal_status {
        object.key("RenewalStatus").string(var_2496.as_str());
    }
    if let Some(var_2497) = &input.renewal_status_reason {
        object.key("RenewalStatusReason").string(var_2497.as_str());
    }
    if let Some(var_2498) = &input.updated_at {
        object.key("UpdatedAt").string(var_2498.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_redshift_cluster_cluster_node(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRedshiftClusterClusterNode,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2499) = &input.node_role {
        object.key("NodeRole").string(var_2499.as_str());
    }
    if let Some(var_2500) = &input.private_ip_address {
        object.key("PrivateIpAddress").string(var_2500.as_str());
    }
    if let Some(var_2501) = &input.public_ip_address {
        object.key("PublicIpAddress").string(var_2501.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_redshift_cluster_cluster_parameter_group(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRedshiftClusterClusterParameterGroup,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2502) = &input.cluster_parameter_status_list {
        let mut array_2503 = object.key("ClusterParameterStatusList").start_array();
        for item_2504 in var_2502 {
            {
                let mut object_2505 = array_2503.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_redshift_cluster_cluster_parameter_status(&mut object_2505, item_2504)?;
                object_2505.finish();
            }
        }
        array_2503.finish();
    }
    if let Some(var_2506) = &input.parameter_apply_status {
        object.key("ParameterApplyStatus").string(var_2506.as_str());
    }
    if let Some(var_2507) = &input.parameter_group_name {
        object.key("ParameterGroupName").string(var_2507.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_redshift_cluster_cluster_security_group(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRedshiftClusterClusterSecurityGroup,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2508) = &input.cluster_security_group_name {
        object
            .key("ClusterSecurityGroupName")
            .string(var_2508.as_str());
    }
    if let Some(var_2509) = &input.status {
        object.key("Status").string(var_2509.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_redshift_cluster_cluster_snapshot_copy_status(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRedshiftClusterClusterSnapshotCopyStatus,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2510) = &input.destination_region {
        object.key("DestinationRegion").string(var_2510.as_str());
    }
    if input.manual_snapshot_retention_period != 0 {
        object.key("ManualSnapshotRetentionPeriod").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.manual_snapshot_retention_period).into()),
        );
    }
    if input.retention_period != 0 {
        object.key("RetentionPeriod").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.retention_period).into()),
        );
    }
    if let Some(var_2511) = &input.snapshot_copy_grant_name {
        object
            .key("SnapshotCopyGrantName")
            .string(var_2511.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_redshift_cluster_deferred_maintenance_window(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRedshiftClusterDeferredMaintenanceWindow,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2512) = &input.defer_maintenance_end_time {
        object
            .key("DeferMaintenanceEndTime")
            .string(var_2512.as_str());
    }
    if let Some(var_2513) = &input.defer_maintenance_identifier {
        object
            .key("DeferMaintenanceIdentifier")
            .string(var_2513.as_str());
    }
    if let Some(var_2514) = &input.defer_maintenance_start_time {
        object
            .key("DeferMaintenanceStartTime")
            .string(var_2514.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_redshift_cluster_elastic_ip_status(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRedshiftClusterElasticIpStatus,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2515) = &input.elastic_ip {
        object.key("ElasticIp").string(var_2515.as_str());
    }
    if let Some(var_2516) = &input.status {
        object.key("Status").string(var_2516.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_redshift_cluster_endpoint(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRedshiftClusterEndpoint,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2517) = &input.address {
        object.key("Address").string(var_2517.as_str());
    }
    if input.port != 0 {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.port).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_redshift_cluster_hsm_status(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRedshiftClusterHsmStatus,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2518) = &input.hsm_client_certificate_identifier {
        object
            .key("HsmClientCertificateIdentifier")
            .string(var_2518.as_str());
    }
    if let Some(var_2519) = &input.hsm_configuration_identifier {
        object
            .key("HsmConfigurationIdentifier")
            .string(var_2519.as_str());
    }
    if let Some(var_2520) = &input.status {
        object.key("Status").string(var_2520.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_redshift_cluster_iam_role(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRedshiftClusterIamRole,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2521) = &input.apply_status {
        object.key("ApplyStatus").string(var_2521.as_str());
    }
    if let Some(var_2522) = &input.iam_role_arn {
        object.key("IamRoleArn").string(var_2522.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_redshift_cluster_pending_modified_values(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRedshiftClusterPendingModifiedValues,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.automated_snapshot_retention_period != 0 {
        object.key("AutomatedSnapshotRetentionPeriod").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.automated_snapshot_retention_period).into()),
        );
    }
    if let Some(var_2523) = &input.cluster_identifier {
        object.key("ClusterIdentifier").string(var_2523.as_str());
    }
    if let Some(var_2524) = &input.cluster_type {
        object.key("ClusterType").string(var_2524.as_str());
    }
    if let Some(var_2525) = &input.cluster_version {
        object.key("ClusterVersion").string(var_2525.as_str());
    }
    if let Some(var_2526) = &input.encryption_type {
        object.key("EncryptionType").string(var_2526.as_str());
    }
    if input.enhanced_vpc_routing {
        object
            .key("EnhancedVpcRouting")
            .boolean(input.enhanced_vpc_routing);
    }
    if let Some(var_2527) = &input.maintenance_track_name {
        object.key("MaintenanceTrackName").string(var_2527.as_str());
    }
    if let Some(var_2528) = &input.master_user_password {
        object.key("MasterUserPassword").string(var_2528.as_str());
    }
    if let Some(var_2529) = &input.node_type {
        object.key("NodeType").string(var_2529.as_str());
    }
    if input.number_of_nodes != 0 {
        object.key("NumberOfNodes").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_nodes).into()),
        );
    }
    if input.publicly_accessible {
        object
            .key("PubliclyAccessible")
            .boolean(input.publicly_accessible);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_redshift_cluster_resize_info(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRedshiftClusterResizeInfo,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.allow_cancel_resize {
        object
            .key("AllowCancelResize")
            .boolean(input.allow_cancel_resize);
    }
    if let Some(var_2530) = &input.resize_type {
        object.key("ResizeType").string(var_2530.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_redshift_cluster_restore_status(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRedshiftClusterRestoreStatus,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.current_restore_rate_in_mega_bytes_per_second != 0.0 {
        object.key("CurrentRestoreRateInMegaBytesPerSecond").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float(
                (input.current_restore_rate_in_mega_bytes_per_second).into(),
            ),
        );
    }
    if input.elapsed_time_in_seconds != 0 {
        object.key("ElapsedTimeInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.elapsed_time_in_seconds).into()),
        );
    }
    if input.estimated_time_to_completion_in_seconds != 0 {
        object.key("EstimatedTimeToCompletionInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt(
                (input.estimated_time_to_completion_in_seconds).into(),
            ),
        );
    }
    if input.progress_in_mega_bytes != 0 {
        object.key("ProgressInMegaBytes").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.progress_in_mega_bytes).into()),
        );
    }
    if input.snapshot_size_in_mega_bytes != 0 {
        object.key("SnapshotSizeInMegaBytes").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.snapshot_size_in_mega_bytes).into()),
        );
    }
    if let Some(var_2531) = &input.status {
        object.key("Status").string(var_2531.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_redshift_cluster_vpc_security_group(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRedshiftClusterVpcSecurityGroup,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2532) = &input.status {
        object.key("Status").string(var_2532.as_str());
    }
    if let Some(var_2533) = &input.vpc_security_group_id {
        object.key("VpcSecurityGroupId").string(var_2533.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_redshift_cluster_logging_status(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRedshiftClusterLoggingStatus,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2534) = &input.bucket_name {
        object.key("BucketName").string(var_2534.as_str());
    }
    if let Some(var_2535) = &input.last_failure_message {
        object.key("LastFailureMessage").string(var_2535.as_str());
    }
    if let Some(var_2536) = &input.last_failure_time {
        object.key("LastFailureTime").string(var_2536.as_str());
    }
    if let Some(var_2537) = &input.last_successful_delivery_time {
        object
            .key("LastSuccessfulDeliveryTime")
            .string(var_2537.as_str());
    }
    if input.logging_enabled {
        object.key("LoggingEnabled").boolean(input.logging_enabled);
    }
    if let Some(var_2538) = &input.s3_key_prefix {
        object.key("S3KeyPrefix").string(var_2538.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_elb_load_balancer_backend_server_description(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElbLoadBalancerBackendServerDescription,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.instance_port != 0 {
        object.key("InstancePort").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.instance_port).into()),
        );
    }
    if let Some(var_2539) = &input.policy_names {
        let mut array_2540 = object.key("PolicyNames").start_array();
        for item_2541 in var_2539 {
            {
                array_2540.value().string(item_2541.as_str());
            }
        }
        array_2540.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_elb_load_balancer_health_check(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElbLoadBalancerHealthCheck,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.healthy_threshold != 0 {
        object.key("HealthyThreshold").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.healthy_threshold).into()),
        );
    }
    if input.interval != 0 {
        object.key("Interval").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.interval).into()),
        );
    }
    if let Some(var_2542) = &input.target {
        object.key("Target").string(var_2542.as_str());
    }
    if input.timeout != 0 {
        object.key("Timeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.timeout).into()),
        );
    }
    if input.unhealthy_threshold != 0 {
        object.key("UnhealthyThreshold").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.unhealthy_threshold).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_elb_load_balancer_instance(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElbLoadBalancerInstance,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2543) = &input.instance_id {
        object.key("InstanceId").string(var_2543.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_elb_load_balancer_listener_description(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElbLoadBalancerListenerDescription,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2544) = &input.listener {
        let mut object_2545 = object.key("Listener").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_elb_load_balancer_listener(
            &mut object_2545,
            var_2544,
        )?;
        object_2545.finish();
    }
    if let Some(var_2546) = &input.policy_names {
        let mut array_2547 = object.key("PolicyNames").start_array();
        for item_2548 in var_2546 {
            {
                array_2547.value().string(item_2548.as_str());
            }
        }
        array_2547.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_elb_load_balancer_attributes(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElbLoadBalancerAttributes,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2549) = &input.access_log {
        let mut object_2550 = object.key("AccessLog").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_elb_load_balancer_access_log(
            &mut object_2550,
            var_2549,
        )?;
        object_2550.finish();
    }
    if let Some(var_2551) = &input.connection_draining {
        let mut object_2552 = object.key("ConnectionDraining").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_elb_load_balancer_connection_draining(
            &mut object_2552,
            var_2551,
        )?;
        object_2552.finish();
    }
    if let Some(var_2553) = &input.connection_settings {
        let mut object_2554 = object.key("ConnectionSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_elb_load_balancer_connection_settings(
            &mut object_2554,
            var_2553,
        )?;
        object_2554.finish();
    }
    if let Some(var_2555) = &input.cross_zone_load_balancing {
        let mut object_2556 = object.key("CrossZoneLoadBalancing").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_elb_load_balancer_cross_zone_load_balancing(&mut object_2556, var_2555)?;
        object_2556.finish();
    }
    if let Some(var_2557) = &input.additional_attributes {
        let mut array_2558 = object.key("AdditionalAttributes").start_array();
        for item_2559 in var_2557 {
            {
                let mut object_2560 = array_2558.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_elb_load_balancer_additional_attribute(&mut object_2560, item_2559)?;
                object_2560.finish();
            }
        }
        array_2558.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_elb_load_balancer_policies(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElbLoadBalancerPolicies,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2561) = &input.app_cookie_stickiness_policies {
        let mut array_2562 = object.key("AppCookieStickinessPolicies").start_array();
        for item_2563 in var_2561 {
            {
                let mut object_2564 = array_2562.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_elb_app_cookie_stickiness_policy(&mut object_2564, item_2563)?;
                object_2564.finish();
            }
        }
        array_2562.finish();
    }
    if let Some(var_2565) = &input.lb_cookie_stickiness_policies {
        let mut array_2566 = object.key("LbCookieStickinessPolicies").start_array();
        for item_2567 in var_2565 {
            {
                let mut object_2568 = array_2566.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_elb_lb_cookie_stickiness_policy(&mut object_2568, item_2567)?;
                object_2568.finish();
            }
        }
        array_2566.finish();
    }
    if let Some(var_2569) = &input.other_policies {
        let mut array_2570 = object.key("OtherPolicies").start_array();
        for item_2571 in var_2569 {
            {
                array_2570.value().string(item_2571.as_str());
            }
        }
        array_2570.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_elb_load_balancer_source_security_group(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElbLoadBalancerSourceSecurityGroup,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2572) = &input.group_name {
        object.key("GroupName").string(var_2572.as_str());
    }
    if let Some(var_2573) = &input.owner_alias {
        object.key("OwnerAlias").string(var_2573.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_iam_group_policy(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsIamGroupPolicy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2574) = &input.policy_name {
        object.key("PolicyName").string(var_2574.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_iam_instance_profile(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsIamInstanceProfile,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2575) = &input.arn {
        object.key("Arn").string(var_2575.as_str());
    }
    if let Some(var_2576) = &input.create_date {
        object.key("CreateDate").string(var_2576.as_str());
    }
    if let Some(var_2577) = &input.instance_profile_id {
        object.key("InstanceProfileId").string(var_2577.as_str());
    }
    if let Some(var_2578) = &input.instance_profile_name {
        object.key("InstanceProfileName").string(var_2578.as_str());
    }
    if let Some(var_2579) = &input.path {
        object.key("Path").string(var_2579.as_str());
    }
    if let Some(var_2580) = &input.roles {
        let mut array_2581 = object.key("Roles").start_array();
        for item_2582 in var_2580 {
            {
                let mut object_2583 = array_2581.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_iam_instance_profile_role(
                    &mut object_2583,
                    item_2582,
                )?;
                object_2583.finish();
            }
        }
        array_2581.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_iam_role_policy(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsIamRolePolicy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2584) = &input.policy_name {
        object.key("PolicyName").string(var_2584.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_lambda_function_code(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsLambdaFunctionCode,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2585) = &input.s3_bucket {
        object.key("S3Bucket").string(var_2585.as_str());
    }
    if let Some(var_2586) = &input.s3_key {
        object.key("S3Key").string(var_2586.as_str());
    }
    if let Some(var_2587) = &input.s3_object_version {
        object.key("S3ObjectVersion").string(var_2587.as_str());
    }
    if let Some(var_2588) = &input.zip_file {
        object.key("ZipFile").string(var_2588.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_lambda_function_dead_letter_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsLambdaFunctionDeadLetterConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2589) = &input.target_arn {
        object.key("TargetArn").string(var_2589.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_lambda_function_environment(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsLambdaFunctionEnvironment,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2590) = &input.variables {
        let mut object_2591 = object.key("Variables").start_object();
        for (key_2592, value_2593) in var_2590 {
            {
                object_2591.key(key_2592).string(value_2593.as_str());
            }
        }
        object_2591.finish();
    }
    if let Some(var_2594) = &input.error {
        let mut object_2595 = object.key("Error").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_lambda_function_environment_error(
            &mut object_2595,
            var_2594,
        )?;
        object_2595.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_lambda_function_layer(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsLambdaFunctionLayer,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2596) = &input.arn {
        object.key("Arn").string(var_2596.as_str());
    }
    if input.code_size != 0 {
        object.key("CodeSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.code_size).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_lambda_function_tracing_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsLambdaFunctionTracingConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2597) = &input.mode {
        object.key("Mode").string(var_2597.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_lambda_function_vpc_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsLambdaFunctionVpcConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2598) = &input.security_group_ids {
        let mut array_2599 = object.key("SecurityGroupIds").start_array();
        for item_2600 in var_2598 {
            {
                array_2599.value().string(item_2600.as_str());
            }
        }
        array_2599.finish();
    }
    if let Some(var_2601) = &input.subnet_ids {
        let mut array_2602 = object.key("SubnetIds").start_array();
        for item_2603 in var_2601 {
            {
                array_2602.value().string(item_2603.as_str());
            }
        }
        array_2602.finish();
    }
    if let Some(var_2604) = &input.vpc_id {
        object.key("VpcId").string(var_2604.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_rds_db_instance_associated_role(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsDbInstanceAssociatedRole,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2605) = &input.role_arn {
        object.key("RoleArn").string(var_2605.as_str());
    }
    if let Some(var_2606) = &input.feature_name {
        object.key("FeatureName").string(var_2606.as_str());
    }
    if let Some(var_2607) = &input.status {
        object.key("Status").string(var_2607.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_rds_db_instance_endpoint(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsDbInstanceEndpoint,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2608) = &input.address {
        object.key("Address").string(var_2608.as_str());
    }
    if input.port != 0 {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.port).into()),
        );
    }
    if let Some(var_2609) = &input.hosted_zone_id {
        object.key("HostedZoneId").string(var_2609.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_rds_db_instance_vpc_security_group(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsDbInstanceVpcSecurityGroup,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2610) = &input.vpc_security_group_id {
        object.key("VpcSecurityGroupId").string(var_2610.as_str());
    }
    if let Some(var_2611) = &input.status {
        object.key("Status").string(var_2611.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_rds_db_parameter_group(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsDbParameterGroup,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2612) = &input.db_parameter_group_name {
        object.key("DbParameterGroupName").string(var_2612.as_str());
    }
    if let Some(var_2613) = &input.parameter_apply_status {
        object.key("ParameterApplyStatus").string(var_2613.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_rds_db_subnet_group(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsDbSubnetGroup,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2614) = &input.db_subnet_group_name {
        object.key("DbSubnetGroupName").string(var_2614.as_str());
    }
    if let Some(var_2615) = &input.db_subnet_group_description {
        object
            .key("DbSubnetGroupDescription")
            .string(var_2615.as_str());
    }
    if let Some(var_2616) = &input.vpc_id {
        object.key("VpcId").string(var_2616.as_str());
    }
    if let Some(var_2617) = &input.subnet_group_status {
        object.key("SubnetGroupStatus").string(var_2617.as_str());
    }
    if let Some(var_2618) = &input.subnets {
        let mut array_2619 = object.key("Subnets").start_array();
        for item_2620 in var_2618 {
            {
                let mut object_2621 = array_2619.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_rds_db_subnet_group_subnet(
                    &mut object_2621,
                    item_2620,
                )?;
                object_2621.finish();
            }
        }
        array_2619.finish();
    }
    if let Some(var_2622) = &input.db_subnet_group_arn {
        object.key("DbSubnetGroupArn").string(var_2622.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_rds_db_pending_modified_values(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsDbPendingModifiedValues,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2623) = &input.db_instance_class {
        object.key("DbInstanceClass").string(var_2623.as_str());
    }
    if input.allocated_storage != 0 {
        object.key("AllocatedStorage").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.allocated_storage).into()),
        );
    }
    if let Some(var_2624) = &input.master_user_password {
        object.key("MasterUserPassword").string(var_2624.as_str());
    }
    if input.port != 0 {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.port).into()),
        );
    }
    if input.backup_retention_period != 0 {
        object.key("BackupRetentionPeriod").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.backup_retention_period).into()),
        );
    }
    if input.multi_az {
        object.key("MultiAZ").boolean(input.multi_az);
    }
    if let Some(var_2625) = &input.engine_version {
        object.key("EngineVersion").string(var_2625.as_str());
    }
    if let Some(var_2626) = &input.license_model {
        object.key("LicenseModel").string(var_2626.as_str());
    }
    if input.iops != 0 {
        object.key("Iops").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.iops).into()),
        );
    }
    if let Some(var_2627) = &input.db_instance_identifier {
        object.key("DbInstanceIdentifier").string(var_2627.as_str());
    }
    if let Some(var_2628) = &input.storage_type {
        object.key("StorageType").string(var_2628.as_str());
    }
    if let Some(var_2629) = &input.ca_certificate_identifier {
        object
            .key("CaCertificateIdentifier")
            .string(var_2629.as_str());
    }
    if let Some(var_2630) = &input.db_subnet_group_name {
        object.key("DbSubnetGroupName").string(var_2630.as_str());
    }
    if let Some(var_2631) = &input.pending_cloud_watch_logs_exports {
        let mut object_2632 = object.key("PendingCloudWatchLogsExports").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_rds_pending_cloud_watch_logs_exports(
            &mut object_2632,
            var_2631,
        )?;
        object_2632.finish();
    }
    if let Some(var_2633) = &input.processor_features {
        let mut array_2634 = object.key("ProcessorFeatures").start_array();
        for item_2635 in var_2633 {
            {
                let mut object_2636 = array_2634.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_rds_db_processor_feature(
                    &mut object_2636,
                    item_2635,
                )?;
                object_2636.finish();
            }
        }
        array_2634.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_rds_db_option_group_membership(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsDbOptionGroupMembership,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2637) = &input.option_group_name {
        object.key("OptionGroupName").string(var_2637.as_str());
    }
    if let Some(var_2638) = &input.status {
        object.key("Status").string(var_2638.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_rds_db_status_info(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsDbStatusInfo,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2639) = &input.status_type {
        object.key("StatusType").string(var_2639.as_str());
    }
    if input.normal {
        object.key("Normal").boolean(input.normal);
    }
    if let Some(var_2640) = &input.status {
        object.key("Status").string(var_2640.as_str());
    }
    if let Some(var_2641) = &input.message {
        object.key("Message").string(var_2641.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_rds_db_domain_membership(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsDbDomainMembership,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2642) = &input.domain {
        object.key("Domain").string(var_2642.as_str());
    }
    if let Some(var_2643) = &input.status {
        object.key("Status").string(var_2643.as_str());
    }
    if let Some(var_2644) = &input.fqdn {
        object.key("Fqdn").string(var_2644.as_str());
    }
    if let Some(var_2645) = &input.iam_role_name {
        object.key("IamRoleName").string(var_2645.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_rds_db_processor_feature(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsDbProcessorFeature,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2646) = &input.name {
        object.key("Name").string(var_2646.as_str());
    }
    if let Some(var_2647) = &input.value {
        object.key("Value").string(var_2647.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_sns_topic_subscription(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsSnsTopicSubscription,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2648) = &input.endpoint {
        object.key("Endpoint").string(var_2648.as_str());
    }
    if let Some(var_2649) = &input.protocol {
        object.key("Protocol").string(var_2649.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_waf_web_acl_rule(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsWafWebAclRule,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2650) = &input.action {
        let mut object_2651 = object.key("Action").start_object();
        crate::json_ser::serialize_structure_crate_model_waf_action(&mut object_2651, var_2650)?;
        object_2651.finish();
    }
    if let Some(var_2652) = &input.excluded_rules {
        let mut array_2653 = object.key("ExcludedRules").start_array();
        for item_2654 in var_2652 {
            {
                let mut object_2655 = array_2653.value().start_object();
                crate::json_ser::serialize_structure_crate_model_waf_excluded_rule(
                    &mut object_2655,
                    item_2654,
                )?;
                object_2655.finish();
            }
        }
        array_2653.finish();
    }
    if let Some(var_2656) = &input.override_action {
        let mut object_2657 = object.key("OverrideAction").start_object();
        crate::json_ser::serialize_structure_crate_model_waf_override_action(
            &mut object_2657,
            var_2656,
        )?;
        object_2657.finish();
    }
    if input.priority != 0 {
        object.key("Priority").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.priority).into()),
        );
    }
    if let Some(var_2658) = &input.rule_id {
        object.key("RuleId").string(var_2658.as_str());
    }
    if let Some(var_2659) = &input.r#type {
        object.key("Type").string(var_2659.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_rds_db_cluster_associated_role(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsDbClusterAssociatedRole,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2660) = &input.role_arn {
        object.key("RoleArn").string(var_2660.as_str());
    }
    if let Some(var_2661) = &input.status {
        object.key("Status").string(var_2661.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_rds_db_cluster_option_group_membership(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsDbClusterOptionGroupMembership,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2662) = &input.db_cluster_option_group_name {
        object
            .key("DbClusterOptionGroupName")
            .string(var_2662.as_str());
    }
    if let Some(var_2663) = &input.status {
        object.key("Status").string(var_2663.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_rds_db_cluster_member(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsDbClusterMember,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.is_cluster_writer {
        object
            .key("IsClusterWriter")
            .boolean(input.is_cluster_writer);
    }
    if input.promotion_tier != 0 {
        object.key("PromotionTier").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.promotion_tier).into()),
        );
    }
    if let Some(var_2664) = &input.db_instance_identifier {
        object.key("DbInstanceIdentifier").string(var_2664.as_str());
    }
    if let Some(var_2665) = &input.db_cluster_parameter_group_status {
        object
            .key("DbClusterParameterGroupStatus")
            .string(var_2665.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_cluster_cluster_settings_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsClusterClusterSettingsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2666) = &input.name {
        object.key("Name").string(var_2666.as_str());
    }
    if let Some(var_2667) = &input.value {
        object.key("Value").string(var_2667.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_cluster_configuration_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsClusterConfigurationDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2668) = &input.execute_command_configuration {
        let mut object_2669 = object.key("ExecuteCommandConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ecs_cluster_configuration_execute_command_configuration_details(&mut object_2669, var_2668)?;
        object_2669.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_cluster_default_capacity_provider_strategy_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsClusterDefaultCapacityProviderStrategyDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.base != 0 {
        object.key("Base").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.base).into()),
        );
    }
    if let Some(var_2670) = &input.capacity_provider {
        object.key("CapacityProvider").string(var_2670.as_str());
    }
    if input.weight != 0 {
        object.key("Weight").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.weight).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_mount_point(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsMountPoint,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2671) = &input.source_volume {
        object.key("SourceVolume").string(var_2671.as_str());
    }
    if let Some(var_2672) = &input.container_path {
        object.key("ContainerPath").string(var_2672.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionContainerDefinitionsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2673) = &input.command {
        let mut array_2674 = object.key("Command").start_array();
        for item_2675 in var_2673 {
            {
                array_2674.value().string(item_2675.as_str());
            }
        }
        array_2674.finish();
    }
    if input.cpu != 0 {
        object.key("Cpu").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.cpu).into()),
        );
    }
    if let Some(var_2676) = &input.depends_on {
        let mut array_2677 = object.key("DependsOn").start_array();
        for item_2678 in var_2676 {
            {
                let mut object_2679 = array_2677.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_depends_on_details(&mut object_2679, item_2678)?;
                object_2679.finish();
            }
        }
        array_2677.finish();
    }
    if input.disable_networking {
        object
            .key("DisableNetworking")
            .boolean(input.disable_networking);
    }
    if let Some(var_2680) = &input.dns_search_domains {
        let mut array_2681 = object.key("DnsSearchDomains").start_array();
        for item_2682 in var_2680 {
            {
                array_2681.value().string(item_2682.as_str());
            }
        }
        array_2681.finish();
    }
    if let Some(var_2683) = &input.dns_servers {
        let mut array_2684 = object.key("DnsServers").start_array();
        for item_2685 in var_2683 {
            {
                array_2684.value().string(item_2685.as_str());
            }
        }
        array_2684.finish();
    }
    if let Some(var_2686) = &input.docker_labels {
        let mut object_2687 = object.key("DockerLabels").start_object();
        for (key_2688, value_2689) in var_2686 {
            {
                object_2687.key(key_2688).string(value_2689.as_str());
            }
        }
        object_2687.finish();
    }
    if let Some(var_2690) = &input.docker_security_options {
        let mut array_2691 = object.key("DockerSecurityOptions").start_array();
        for item_2692 in var_2690 {
            {
                array_2691.value().string(item_2692.as_str());
            }
        }
        array_2691.finish();
    }
    if let Some(var_2693) = &input.entry_point {
        let mut array_2694 = object.key("EntryPoint").start_array();
        for item_2695 in var_2693 {
            {
                array_2694.value().string(item_2695.as_str());
            }
        }
        array_2694.finish();
    }
    if let Some(var_2696) = &input.environment {
        let mut array_2697 = object.key("Environment").start_array();
        for item_2698 in var_2696 {
            {
                let mut object_2699 = array_2697.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_environment_details(&mut object_2699, item_2698)?;
                object_2699.finish();
            }
        }
        array_2697.finish();
    }
    if let Some(var_2700) = &input.environment_files {
        let mut array_2701 = object.key("EnvironmentFiles").start_array();
        for item_2702 in var_2700 {
            {
                let mut object_2703 = array_2701.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_environment_files_details(&mut object_2703, item_2702)?;
                object_2703.finish();
            }
        }
        array_2701.finish();
    }
    if input.essential {
        object.key("Essential").boolean(input.essential);
    }
    if let Some(var_2704) = &input.extra_hosts {
        let mut array_2705 = object.key("ExtraHosts").start_array();
        for item_2706 in var_2704 {
            {
                let mut object_2707 = array_2705.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_extra_hosts_details(&mut object_2707, item_2706)?;
                object_2707.finish();
            }
        }
        array_2705.finish();
    }
    if let Some(var_2708) = &input.firelens_configuration {
        let mut object_2709 = object.key("FirelensConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_firelens_configuration_details(&mut object_2709, var_2708)?;
        object_2709.finish();
    }
    if let Some(var_2710) = &input.health_check {
        let mut object_2711 = object.key("HealthCheck").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_health_check_details(&mut object_2711, var_2710)?;
        object_2711.finish();
    }
    if let Some(var_2712) = &input.hostname {
        object.key("Hostname").string(var_2712.as_str());
    }
    if let Some(var_2713) = &input.image {
        object.key("Image").string(var_2713.as_str());
    }
    if input.interactive {
        object.key("Interactive").boolean(input.interactive);
    }
    if let Some(var_2714) = &input.links {
        let mut array_2715 = object.key("Links").start_array();
        for item_2716 in var_2714 {
            {
                array_2715.value().string(item_2716.as_str());
            }
        }
        array_2715.finish();
    }
    if let Some(var_2717) = &input.linux_parameters {
        let mut object_2718 = object.key("LinuxParameters").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_linux_parameters_details(&mut object_2718, var_2717)?;
        object_2718.finish();
    }
    if let Some(var_2719) = &input.log_configuration {
        let mut object_2720 = object.key("LogConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_log_configuration_details(&mut object_2720, var_2719)?;
        object_2720.finish();
    }
    if input.memory != 0 {
        object.key("Memory").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.memory).into()),
        );
    }
    if input.memory_reservation != 0 {
        object.key("MemoryReservation").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.memory_reservation).into()),
        );
    }
    if let Some(var_2721) = &input.mount_points {
        let mut array_2722 = object.key("MountPoints").start_array();
        for item_2723 in var_2721 {
            {
                let mut object_2724 = array_2722.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_mount_points_details(&mut object_2724, item_2723)?;
                object_2724.finish();
            }
        }
        array_2722.finish();
    }
    if let Some(var_2725) = &input.name {
        object.key("Name").string(var_2725.as_str());
    }
    if let Some(var_2726) = &input.port_mappings {
        let mut array_2727 = object.key("PortMappings").start_array();
        for item_2728 in var_2726 {
            {
                let mut object_2729 = array_2727.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_port_mappings_details(&mut object_2729, item_2728)?;
                object_2729.finish();
            }
        }
        array_2727.finish();
    }
    if input.privileged {
        object.key("Privileged").boolean(input.privileged);
    }
    if input.pseudo_terminal {
        object.key("PseudoTerminal").boolean(input.pseudo_terminal);
    }
    if input.readonly_root_filesystem {
        object
            .key("ReadonlyRootFilesystem")
            .boolean(input.readonly_root_filesystem);
    }
    if let Some(var_2730) = &input.repository_credentials {
        let mut object_2731 = object.key("RepositoryCredentials").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_repository_credentials_details(&mut object_2731, var_2730)?;
        object_2731.finish();
    }
    if let Some(var_2732) = &input.resource_requirements {
        let mut array_2733 = object.key("ResourceRequirements").start_array();
        for item_2734 in var_2732 {
            {
                let mut object_2735 = array_2733.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_resource_requirements_details(&mut object_2735, item_2734)?;
                object_2735.finish();
            }
        }
        array_2733.finish();
    }
    if let Some(var_2736) = &input.secrets {
        let mut array_2737 = object.key("Secrets").start_array();
        for item_2738 in var_2736 {
            {
                let mut object_2739 = array_2737.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_secrets_details(&mut object_2739, item_2738)?;
                object_2739.finish();
            }
        }
        array_2737.finish();
    }
    if input.start_timeout != 0 {
        object.key("StartTimeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.start_timeout).into()),
        );
    }
    if input.stop_timeout != 0 {
        object.key("StopTimeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.stop_timeout).into()),
        );
    }
    if let Some(var_2740) = &input.system_controls {
        let mut array_2741 = object.key("SystemControls").start_array();
        for item_2742 in var_2740 {
            {
                let mut object_2743 = array_2741.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_system_controls_details(&mut object_2743, item_2742)?;
                object_2743.finish();
            }
        }
        array_2741.finish();
    }
    if let Some(var_2744) = &input.ulimits {
        let mut array_2745 = object.key("Ulimits").start_array();
        for item_2746 in var_2744 {
            {
                let mut object_2747 = array_2745.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_ulimits_details(&mut object_2747, item_2746)?;
                object_2747.finish();
            }
        }
        array_2745.finish();
    }
    if let Some(var_2748) = &input.user {
        object.key("User").string(var_2748.as_str());
    }
    if let Some(var_2749) = &input.volumes_from {
        let mut array_2750 = object.key("VolumesFrom").start_array();
        for item_2751 in var_2749 {
            {
                let mut object_2752 = array_2750.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_volumes_from_details(&mut object_2752, item_2751)?;
                object_2752.finish();
            }
        }
        array_2750.finish();
    }
    if let Some(var_2753) = &input.working_directory {
        object.key("WorkingDirectory").string(var_2753.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_task_definition_inference_accelerators_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionInferenceAcceleratorsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2754) = &input.device_name {
        object.key("DeviceName").string(var_2754.as_str());
    }
    if let Some(var_2755) = &input.device_type {
        object.key("DeviceType").string(var_2755.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_task_definition_placement_constraints_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionPlacementConstraintsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2756) = &input.expression {
        object.key("Expression").string(var_2756.as_str());
    }
    if let Some(var_2757) = &input.r#type {
        object.key("Type").string(var_2757.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_task_definition_proxy_configuration_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionProxyConfigurationDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2758) = &input.container_name {
        object.key("ContainerName").string(var_2758.as_str());
    }
    if let Some(var_2759) = &input.proxy_configuration_properties {
        let mut array_2760 = object.key("ProxyConfigurationProperties").start_array();
        for item_2761 in var_2759 {
            {
                let mut object_2762 = array_2760.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ecs_task_definition_proxy_configuration_proxy_configuration_properties_details(&mut object_2762, item_2761)?;
                object_2762.finish();
            }
        }
        array_2760.finish();
    }
    if let Some(var_2763) = &input.r#type {
        object.key("Type").string(var_2763.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_task_definition_volumes_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionVolumesDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2764) = &input.docker_volume_configuration {
        let mut object_2765 = object.key("DockerVolumeConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ecs_task_definition_volumes_docker_volume_configuration_details(&mut object_2765, var_2764)?;
        object_2765.finish();
    }
    if let Some(var_2766) = &input.efs_volume_configuration {
        let mut object_2767 = object.key("EfsVolumeConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ecs_task_definition_volumes_efs_volume_configuration_details(&mut object_2767, var_2766)?;
        object_2767.finish();
    }
    if let Some(var_2768) = &input.host {
        let mut object_2769 = object.key("Host").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ecs_task_definition_volumes_host_details(&mut object_2769, var_2768)?;
        object_2769.finish();
    }
    if let Some(var_2770) = &input.name {
        object.key("Name").string(var_2770.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_volume_mount(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VolumeMount,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2771) = &input.name {
        object.key("Name").string(var_2771.as_str());
    }
    if let Some(var_2772) = &input.mount_path {
        object.key("MountPath").string(var_2772.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_service_capacity_provider_strategy_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsServiceCapacityProviderStrategyDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.base != 0 {
        object.key("Base").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.base).into()),
        );
    }
    if let Some(var_2773) = &input.capacity_provider {
        object.key("CapacityProvider").string(var_2773.as_str());
    }
    if input.weight != 0 {
        object.key("Weight").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.weight).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_service_deployment_configuration_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsServiceDeploymentConfigurationDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2774) = &input.deployment_circuit_breaker {
        let mut object_2775 = object.key("DeploymentCircuitBreaker").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ecs_service_deployment_configuration_deployment_circuit_breaker_details(&mut object_2775, var_2774)?;
        object_2775.finish();
    }
    if input.maximum_percent != 0 {
        object.key("MaximumPercent").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.maximum_percent).into()),
        );
    }
    if input.minimum_healthy_percent != 0 {
        object.key("MinimumHealthyPercent").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.minimum_healthy_percent).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_service_deployment_controller_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsServiceDeploymentControllerDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2776) = &input.r#type {
        object.key("Type").string(var_2776.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_service_load_balancers_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsServiceLoadBalancersDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2777) = &input.container_name {
        object.key("ContainerName").string(var_2777.as_str());
    }
    if input.container_port != 0 {
        object.key("ContainerPort").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.container_port).into()),
        );
    }
    if let Some(var_2778) = &input.load_balancer_name {
        object.key("LoadBalancerName").string(var_2778.as_str());
    }
    if let Some(var_2779) = &input.target_group_arn {
        object.key("TargetGroupArn").string(var_2779.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_service_network_configuration_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsServiceNetworkConfigurationDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2780) = &input.aws_vpc_configuration {
        let mut object_2781 = object.key("AwsVpcConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ecs_service_network_configuration_aws_vpc_configuration_details(&mut object_2781, var_2780)?;
        object_2781.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_service_placement_constraints_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsServicePlacementConstraintsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2782) = &input.expression {
        object.key("Expression").string(var_2782.as_str());
    }
    if let Some(var_2783) = &input.r#type {
        object.key("Type").string(var_2783.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_service_placement_strategies_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsServicePlacementStrategiesDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2784) = &input.field {
        object.key("Field").string(var_2784.as_str());
    }
    if let Some(var_2785) = &input.r#type {
        object.key("Type").string(var_2785.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_service_service_registries_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsServiceServiceRegistriesDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2786) = &input.container_name {
        object.key("ContainerName").string(var_2786.as_str());
    }
    if input.container_port != 0 {
        object.key("ContainerPort").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.container_port).into()),
        );
    }
    if input.port != 0 {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.port).into()),
        );
    }
    if let Some(var_2787) = &input.registry_arn {
        object.key("RegistryArn").string(var_2787.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_auto_scaling_launch_configuration_block_device_mappings_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsAutoScalingLaunchConfigurationBlockDeviceMappingsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2788) = &input.device_name {
        object.key("DeviceName").string(var_2788.as_str());
    }
    if let Some(var_2789) = &input.ebs {
        let mut object_2790 = object.key("Ebs").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_auto_scaling_launch_configuration_block_device_mappings_ebs_details(&mut object_2790, var_2789)?;
        object_2790.finish();
    }
    if input.no_device {
        object.key("NoDevice").boolean(input.no_device);
    }
    if let Some(var_2791) = &input.virtual_name {
        object.key("VirtualName").string(var_2791.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_auto_scaling_launch_configuration_instance_monitoring_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsAutoScalingLaunchConfigurationInstanceMonitoringDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.enabled {
        object.key("Enabled").boolean(input.enabled);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_auto_scaling_launch_configuration_metadata_options(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsAutoScalingLaunchConfigurationMetadataOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2792) = &input.http_endpoint {
        object.key("HttpEndpoint").string(var_2792.as_str());
    }
    if input.http_put_response_hop_limit != 0 {
        object.key("HttpPutResponseHopLimit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.http_put_response_hop_limit).into()),
        );
    }
    if let Some(var_2793) = &input.http_tokens {
        object.key("HttpTokens").string(var_2793.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ec2_vpn_connection_vgw_telemetry_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2VpnConnectionVgwTelemetryDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.accepted_route_count != 0 {
        object.key("AcceptedRouteCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.accepted_route_count).into()),
        );
    }
    if let Some(var_2794) = &input.certificate_arn {
        object.key("CertificateArn").string(var_2794.as_str());
    }
    if let Some(var_2795) = &input.last_status_change {
        object.key("LastStatusChange").string(var_2795.as_str());
    }
    if let Some(var_2796) = &input.outside_ip_address {
        object.key("OutsideIpAddress").string(var_2796.as_str());
    }
    if let Some(var_2797) = &input.status {
        object.key("Status").string(var_2797.as_str());
    }
    if let Some(var_2798) = &input.status_message {
        object.key("StatusMessage").string(var_2798.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ec2_vpn_connection_options_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2VpnConnectionOptionsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.static_routes_only {
        object
            .key("StaticRoutesOnly")
            .boolean(input.static_routes_only);
    }
    if let Some(var_2799) = &input.tunnel_options {
        let mut array_2800 = object.key("TunnelOptions").start_array();
        for item_2801 in var_2799 {
            {
                let mut object_2802 = array_2800.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ec2_vpn_connection_options_tunnel_options_details(&mut object_2802, item_2801)?;
                object_2802.finish();
            }
        }
        array_2800.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ec2_vpn_connection_routes_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2VpnConnectionRoutesDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2803) = &input.destination_cidr_block {
        object.key("DestinationCidrBlock").string(var_2803.as_str());
    }
    if let Some(var_2804) = &input.state {
        object.key("State").string(var_2804.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_open_search_service_domain_encryption_at_rest_options_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsOpenSearchServiceDomainEncryptionAtRestOptionsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.enabled {
        object.key("Enabled").boolean(input.enabled);
    }
    if let Some(var_2805) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_2805.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_open_search_service_domain_node_to_node_encryption_options_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsOpenSearchServiceDomainNodeToNodeEncryptionOptionsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.enabled {
        object.key("Enabled").boolean(input.enabled);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_open_search_service_domain_service_software_options_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsOpenSearchServiceDomainServiceSoftwareOptionsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2806) = &input.automated_update_date {
        object.key("AutomatedUpdateDate").string(var_2806.as_str());
    }
    if input.cancellable {
        object.key("Cancellable").boolean(input.cancellable);
    }
    if let Some(var_2807) = &input.current_version {
        object.key("CurrentVersion").string(var_2807.as_str());
    }
    if let Some(var_2808) = &input.description {
        object.key("Description").string(var_2808.as_str());
    }
    if let Some(var_2809) = &input.new_version {
        object.key("NewVersion").string(var_2809.as_str());
    }
    if input.update_available {
        object
            .key("UpdateAvailable")
            .boolean(input.update_available);
    }
    if let Some(var_2810) = &input.update_status {
        object.key("UpdateStatus").string(var_2810.as_str());
    }
    if input.optional_deployment {
        object
            .key("OptionalDeployment")
            .boolean(input.optional_deployment);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_open_search_service_domain_cluster_config_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsOpenSearchServiceDomainClusterConfigDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.instance_count != 0 {
        object.key("InstanceCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.instance_count).into()),
        );
    }
    if input.warm_enabled {
        object.key("WarmEnabled").boolean(input.warm_enabled);
    }
    if input.warm_count != 0 {
        object.key("WarmCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.warm_count).into()),
        );
    }
    if input.dedicated_master_enabled {
        object
            .key("DedicatedMasterEnabled")
            .boolean(input.dedicated_master_enabled);
    }
    if let Some(var_2811) = &input.zone_awareness_config {
        let mut object_2812 = object.key("ZoneAwarenessConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_open_search_service_domain_cluster_config_zone_awareness_config_details(&mut object_2812, var_2811)?;
        object_2812.finish();
    }
    if input.dedicated_master_count != 0 {
        object.key("DedicatedMasterCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.dedicated_master_count).into()),
        );
    }
    if let Some(var_2813) = &input.instance_type {
        object.key("InstanceType").string(var_2813.as_str());
    }
    if let Some(var_2814) = &input.warm_type {
        object.key("WarmType").string(var_2814.as_str());
    }
    if input.zone_awareness_enabled {
        object
            .key("ZoneAwarenessEnabled")
            .boolean(input.zone_awareness_enabled);
    }
    if let Some(var_2815) = &input.dedicated_master_type {
        object.key("DedicatedMasterType").string(var_2815.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_open_search_service_domain_domain_endpoint_options_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsOpenSearchServiceDomainDomainEndpointOptionsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2816) = &input.custom_endpoint_certificate_arn {
        object
            .key("CustomEndpointCertificateArn")
            .string(var_2816.as_str());
    }
    if input.custom_endpoint_enabled {
        object
            .key("CustomEndpointEnabled")
            .boolean(input.custom_endpoint_enabled);
    }
    if input.enforce_https {
        object.key("EnforceHTTPS").boolean(input.enforce_https);
    }
    if let Some(var_2817) = &input.custom_endpoint {
        object.key("CustomEndpoint").string(var_2817.as_str());
    }
    if let Some(var_2818) = &input.tls_security_policy {
        object.key("TLSSecurityPolicy").string(var_2818.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_open_search_service_domain_vpc_options_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsOpenSearchServiceDomainVpcOptionsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2819) = &input.security_group_ids {
        let mut array_2820 = object.key("SecurityGroupIds").start_array();
        for item_2821 in var_2819 {
            {
                array_2820.value().string(item_2821.as_str());
            }
        }
        array_2820.finish();
    }
    if let Some(var_2822) = &input.subnet_ids {
        let mut array_2823 = object.key("SubnetIds").start_array();
        for item_2824 in var_2822 {
            {
                array_2823.value().string(item_2824.as_str());
            }
        }
        array_2823.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_open_search_service_domain_log_publishing_options_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsOpenSearchServiceDomainLogPublishingOptionsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2825) = &input.index_slow_logs {
        let mut object_2826 = object.key("IndexSlowLogs").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_open_search_service_domain_log_publishing_option(&mut object_2826, var_2825)?;
        object_2826.finish();
    }
    if let Some(var_2827) = &input.search_slow_logs {
        let mut object_2828 = object.key("SearchSlowLogs").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_open_search_service_domain_log_publishing_option(&mut object_2828, var_2827)?;
        object_2828.finish();
    }
    if let Some(var_2829) = &input.audit_logs {
        let mut object_2830 = object.key("AuditLogs").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_open_search_service_domain_log_publishing_option(&mut object_2830, var_2829)?;
        object_2830.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_open_search_service_domain_advanced_security_options_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsOpenSearchServiceDomainAdvancedSecurityOptionsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.enabled {
        object.key("Enabled").boolean(input.enabled);
    }
    if input.internal_user_database_enabled {
        object
            .key("InternalUserDatabaseEnabled")
            .boolean(input.internal_user_database_enabled);
    }
    if let Some(var_2831) = &input.master_user_options {
        let mut object_2832 = object.key("MasterUserOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_open_search_service_domain_master_user_options_details(&mut object_2832, var_2831)?;
        object_2832.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ec2_vpc_endpoint_service_service_type_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2VpcEndpointServiceServiceTypeDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2833) = &input.service_type {
        object.key("ServiceType").string(var_2833.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_waf_rate_based_rule_match_predicate(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsWafRateBasedRuleMatchPredicate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2834) = &input.data_id {
        object.key("DataId").string(var_2834.as_str());
    }
    if input.negated {
        object.key("Negated").boolean(input.negated);
    }
    if let Some(var_2835) = &input.r#type {
        object.key("Type").string(var_2835.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_waf_regional_rate_based_rule_match_predicate(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsWafRegionalRateBasedRuleMatchPredicate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2836) = &input.data_id {
        object.key("DataId").string(var_2836.as_str());
    }
    if input.negated {
        object.key("Negated").boolean(input.negated);
    }
    if let Some(var_2837) = &input.r#type {
        object.key("Type").string(var_2837.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecr_repository_image_scanning_configuration_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcrRepositoryImageScanningConfigurationDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.scan_on_push {
        object.key("ScanOnPush").boolean(input.scan_on_push);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecr_repository_lifecycle_policy_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcrRepositoryLifecyclePolicyDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2838) = &input.lifecycle_policy_text {
        object.key("LifecyclePolicyText").string(var_2838.as_str());
    }
    if let Some(var_2839) = &input.registry_id {
        object.key("RegistryId").string(var_2839.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_eks_cluster_resources_vpc_config_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEksClusterResourcesVpcConfigDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2840) = &input.security_group_ids {
        let mut array_2841 = object.key("SecurityGroupIds").start_array();
        for item_2842 in var_2840 {
            {
                array_2841.value().string(item_2842.as_str());
            }
        }
        array_2841.finish();
    }
    if let Some(var_2843) = &input.subnet_ids {
        let mut array_2844 = object.key("SubnetIds").start_array();
        for item_2845 in var_2843 {
            {
                array_2844.value().string(item_2845.as_str());
            }
        }
        array_2844.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_eks_cluster_logging_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEksClusterLoggingDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2846) = &input.cluster_logging {
        let mut array_2847 = object.key("ClusterLogging").start_array();
        for item_2848 in var_2846 {
            {
                let mut object_2849 = array_2847.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_eks_cluster_logging_cluster_logging_details(&mut object_2849, item_2848)?;
                object_2849.finish();
            }
        }
        array_2847.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_firewall_policy_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FirewallPolicyDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2850) = &input.stateful_rule_group_references {
        let mut array_2851 = object.key("StatefulRuleGroupReferences").start_array();
        for item_2852 in var_2850 {
            {
                let mut object_2853 = array_2851.value().start_object();
                crate::json_ser::serialize_structure_crate_model_firewall_policy_stateful_rule_group_references_details(&mut object_2853, item_2852)?;
                object_2853.finish();
            }
        }
        array_2851.finish();
    }
    if let Some(var_2854) = &input.stateless_custom_actions {
        let mut array_2855 = object.key("StatelessCustomActions").start_array();
        for item_2856 in var_2854 {
            {
                let mut object_2857 = array_2855.value().start_object();
                crate::json_ser::serialize_structure_crate_model_firewall_policy_stateless_custom_actions_details(&mut object_2857, item_2856)?;
                object_2857.finish();
            }
        }
        array_2855.finish();
    }
    if let Some(var_2858) = &input.stateless_default_actions {
        let mut array_2859 = object.key("StatelessDefaultActions").start_array();
        for item_2860 in var_2858 {
            {
                array_2859.value().string(item_2860.as_str());
            }
        }
        array_2859.finish();
    }
    if let Some(var_2861) = &input.stateless_fragment_default_actions {
        let mut array_2862 = object.key("StatelessFragmentDefaultActions").start_array();
        for item_2863 in var_2861 {
            {
                array_2862.value().string(item_2863.as_str());
            }
        }
        array_2862.finish();
    }
    if let Some(var_2864) = &input.stateless_rule_group_references {
        let mut array_2865 = object.key("StatelessRuleGroupReferences").start_array();
        for item_2866 in var_2864 {
            {
                let mut object_2867 = array_2865.value().start_object();
                crate::json_ser::serialize_structure_crate_model_firewall_policy_stateless_rule_group_references_details(&mut object_2867, item_2866)?;
                object_2867.finish();
            }
        }
        array_2865.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_network_firewall_firewall_subnet_mappings_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsNetworkFirewallFirewallSubnetMappingsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2868) = &input.subnet_id {
        object.key("SubnetId").string(var_2868.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rule_group_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RuleGroupDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2869) = &input.rule_variables {
        let mut object_2870 = object.key("RuleVariables").start_object();
        crate::json_ser::serialize_structure_crate_model_rule_group_variables(
            &mut object_2870,
            var_2869,
        )?;
        object_2870.finish();
    }
    if let Some(var_2871) = &input.rules_source {
        let mut object_2872 = object.key("RulesSource").start_object();
        crate::json_ser::serialize_structure_crate_model_rule_group_source(
            &mut object_2872,
            var_2871,
        )?;
        object_2872.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_rds_db_security_group_ec2_security_group(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsDbSecurityGroupEc2SecurityGroup,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2873) = &input.ec2_security_group_id {
        object.key("Ec2SecurityGroupId").string(var_2873.as_str());
    }
    if let Some(var_2874) = &input.ec2_security_group_name {
        object.key("Ec2SecurityGroupName").string(var_2874.as_str());
    }
    if let Some(var_2875) = &input.ec2_security_group_owner_id {
        object
            .key("Ec2SecurityGroupOwnerId")
            .string(var_2875.as_str());
    }
    if let Some(var_2876) = &input.status {
        object.key("Status").string(var_2876.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_rds_db_security_group_ip_range(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsDbSecurityGroupIpRange,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2877) = &input.cidr_ip {
        object.key("CidrIp").string(var_2877.as_str());
    }
    if let Some(var_2878) = &input.status {
        object.key("Status").string(var_2878.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_kinesis_stream_stream_encryption_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsKinesisStreamStreamEncryptionDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2879) = &input.encryption_type {
        object.key("EncryptionType").string(var_2879.as_str());
    }
    if let Some(var_2880) = &input.key_id {
        object.key("KeyId").string(var_2880.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_efs_access_point_posix_user_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEfsAccessPointPosixUserDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2881) = &input.gid {
        object.key("Gid").string(var_2881.as_str());
    }
    if let Some(var_2882) = &input.secondary_gids {
        let mut array_2883 = object.key("SecondaryGids").start_array();
        for item_2884 in var_2882 {
            {
                array_2883.value().string(item_2884.as_str());
            }
        }
        array_2883.finish();
    }
    if let Some(var_2885) = &input.uid {
        object.key("Uid").string(var_2885.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_efs_access_point_root_directory_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEfsAccessPointRootDirectoryDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2886) = &input.creation_info {
        let mut object_2887 = object.key("CreationInfo").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_efs_access_point_root_directory_creation_info_details(&mut object_2887, var_2886)?;
        object_2887.finish();
    }
    if let Some(var_2888) = &input.path {
        object.key("Path").string(var_2888.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_cloud_formation_stack_drift_information_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCloudFormationStackDriftInformationDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2889) = &input.stack_drift_status {
        object.key("StackDriftStatus").string(var_2889.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_cloud_formation_stack_outputs_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCloudFormationStackOutputsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2890) = &input.description {
        object.key("Description").string(var_2890.as_str());
    }
    if let Some(var_2891) = &input.output_key {
        object.key("OutputKey").string(var_2891.as_str());
    }
    if let Some(var_2892) = &input.output_value {
        object.key("OutputValue").string(var_2892.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_cloud_watch_alarm_dimensions_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCloudWatchAlarmDimensionsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2893) = &input.name {
        object.key("Name").string(var_2893.as_str());
    }
    if let Some(var_2894) = &input.value {
        object.key("Value").string(var_2894.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ec2_vpc_peering_connection_vpc_info_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2VpcPeeringConnectionVpcInfoDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2895) = &input.cidr_block {
        object.key("CidrBlock").string(var_2895.as_str());
    }
    if let Some(var_2896) = &input.cidr_block_set {
        let mut array_2897 = object.key("CidrBlockSet").start_array();
        for item_2898 in var_2896 {
            {
                let mut object_2899 = array_2897.value().start_object();
                crate::json_ser::serialize_structure_crate_model_vpc_info_cidr_block_set_details(
                    &mut object_2899,
                    item_2898,
                )?;
                object_2899.finish();
            }
        }
        array_2897.finish();
    }
    if let Some(var_2900) = &input.ipv6_cidr_block_set {
        let mut array_2901 = object.key("Ipv6CidrBlockSet").start_array();
        for item_2902 in var_2900 {
            {
                let mut object_2903 = array_2901.value().start_object();
                crate::json_ser::serialize_structure_crate_model_vpc_info_ipv6_cidr_block_set_details(&mut object_2903, item_2902)?;
                object_2903.finish();
            }
        }
        array_2901.finish();
    }
    if let Some(var_2904) = &input.owner_id {
        object.key("OwnerId").string(var_2904.as_str());
    }
    if let Some(var_2905) = &input.peering_options {
        let mut object_2906 = object.key("PeeringOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_vpc_info_peering_options_details(
            &mut object_2906,
            var_2905,
        )?;
        object_2906.finish();
    }
    if let Some(var_2907) = &input.region {
        object.key("Region").string(var_2907.as_str());
    }
    if let Some(var_2908) = &input.vpc_id {
        object.key("VpcId").string(var_2908.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ec2_vpc_peering_connection_status_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2VpcPeeringConnectionStatusDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2909) = &input.code {
        object.key("Code").string(var_2909.as_str());
    }
    if let Some(var_2910) = &input.message {
        object.key("Message").string(var_2910.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_waf_regional_rule_group_rules_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsWafRegionalRuleGroupRulesDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2911) = &input.action {
        let mut object_2912 = object.key("Action").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_waf_regional_rule_group_rules_action_details(&mut object_2912, var_2911)?;
        object_2912.finish();
    }
    if input.priority != 0 {
        object.key("Priority").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.priority).into()),
        );
    }
    if let Some(var_2913) = &input.rule_id {
        object.key("RuleId").string(var_2913.as_str());
    }
    if let Some(var_2914) = &input.r#type {
        object.key("Type").string(var_2914.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_waf_regional_rule_predicate_list_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsWafRegionalRulePredicateListDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2915) = &input.data_id {
        object.key("DataId").string(var_2915.as_str());
    }
    if input.negated {
        object.key("Negated").boolean(input.negated);
    }
    if let Some(var_2916) = &input.r#type {
        object.key("Type").string(var_2916.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_waf_regional_web_acl_rules_list_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsWafRegionalWebAclRulesListDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2917) = &input.action {
        let mut object_2918 = object.key("Action").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_waf_regional_web_acl_rules_list_action_details(&mut object_2918, var_2917)?;
        object_2918.finish();
    }
    if let Some(var_2919) = &input.override_action {
        let mut object_2920 = object.key("OverrideAction").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_waf_regional_web_acl_rules_list_override_action_details(&mut object_2920, var_2919)?;
        object_2920.finish();
    }
    if input.priority != 0 {
        object.key("Priority").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.priority).into()),
        );
    }
    if let Some(var_2921) = &input.rule_id {
        object.key("RuleId").string(var_2921.as_str());
    }
    if let Some(var_2922) = &input.r#type {
        object.key("Type").string(var_2922.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_waf_rule_predicate_list_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsWafRulePredicateListDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2923) = &input.data_id {
        object.key("DataId").string(var_2923.as_str());
    }
    if input.negated {
        object.key("Negated").boolean(input.negated);
    }
    if let Some(var_2924) = &input.r#type {
        object.key("Type").string(var_2924.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_waf_rule_group_rules_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsWafRuleGroupRulesDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2925) = &input.action {
        let mut object_2926 = object.key("Action").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_waf_rule_group_rules_action_details(
            &mut object_2926,
            var_2925,
        )?;
        object_2926.finish();
    }
    if input.priority != 0 {
        object.key("Priority").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.priority).into()),
        );
    }
    if let Some(var_2927) = &input.rule_id {
        object.key("RuleId").string(var_2927.as_str());
    }
    if let Some(var_2928) = &input.r#type {
        object.key("Type").string(var_2928.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_task_volume_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskVolumeDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2929) = &input.name {
        object.key("Name").string(var_2929.as_str());
    }
    if let Some(var_2930) = &input.host {
        let mut object_2931 = object.key("Host").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ecs_task_volume_host_details(
            &mut object_2931,
            var_2930,
        )?;
        object_2931.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_backup_backup_vault_notifications_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsBackupBackupVaultNotificationsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2932) = &input.backup_vault_events {
        let mut array_2933 = object.key("BackupVaultEvents").start_array();
        for item_2934 in var_2932 {
            {
                array_2933.value().string(item_2934.as_str());
            }
        }
        array_2933.finish();
    }
    if let Some(var_2935) = &input.sns_topic_arn {
        object.key("SnsTopicArn").string(var_2935.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_backup_backup_plan_backup_plan_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsBackupBackupPlanBackupPlanDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2936) = &input.backup_plan_name {
        object.key("BackupPlanName").string(var_2936.as_str());
    }
    if let Some(var_2937) = &input.advanced_backup_settings {
        let mut array_2938 = object.key("AdvancedBackupSettings").start_array();
        for item_2939 in var_2937 {
            {
                let mut object_2940 = array_2938.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_backup_backup_plan_advanced_backup_settings_details(&mut object_2940, item_2939)?;
                object_2940.finish();
            }
        }
        array_2938.finish();
    }
    if let Some(var_2941) = &input.backup_plan_rule {
        let mut array_2942 = object.key("BackupPlanRule").start_array();
        for item_2943 in var_2941 {
            {
                let mut object_2944 = array_2942.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_backup_backup_plan_rule_details(&mut object_2944, item_2943)?;
                object_2944.finish();
            }
        }
        array_2942.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_backup_recovery_point_calculated_lifecycle_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsBackupRecoveryPointCalculatedLifecycleDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2945) = &input.delete_at {
        object.key("DeleteAt").string(var_2945.as_str());
    }
    if let Some(var_2946) = &input.move_to_cold_storage_at {
        object.key("MoveToColdStorageAt").string(var_2946.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_backup_recovery_point_created_by_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsBackupRecoveryPointCreatedByDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2947) = &input.backup_plan_arn {
        object.key("BackupPlanArn").string(var_2947.as_str());
    }
    if let Some(var_2948) = &input.backup_plan_id {
        object.key("BackupPlanId").string(var_2948.as_str());
    }
    if let Some(var_2949) = &input.backup_plan_version {
        object.key("BackupPlanVersion").string(var_2949.as_str());
    }
    if let Some(var_2950) = &input.backup_rule_id {
        object.key("BackupRuleId").string(var_2950.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_backup_recovery_point_lifecycle_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsBackupRecoveryPointLifecycleDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.delete_after_days != 0 {
        object.key("DeleteAfterDays").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.delete_after_days).into()),
        );
    }
    if input.move_to_cold_storage_after_days != 0 {
        object.key("MoveToColdStorageAfterDays").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.move_to_cold_storage_after_days).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ip_organization_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IpOrganizationDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.asn != 0 {
        object.key("Asn").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.asn).into()),
        );
    }
    if let Some(var_2951) = &input.asn_org {
        object.key("AsnOrg").string(var_2951.as_str());
    }
    if let Some(var_2952) = &input.isp {
        object.key("Isp").string(var_2952.as_str());
    }
    if let Some(var_2953) = &input.org {
        object.key("Org").string(var_2953.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_country(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Country,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2954) = &input.country_code {
        object.key("CountryCode").string(var_2954.as_str());
    }
    if let Some(var_2955) = &input.country_name {
        object.key("CountryName").string(var_2955.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_city(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::City,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2956) = &input.city_name {
        object.key("CityName").string(var_2956.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_geo_location(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GeoLocation,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.lon != 0.0 {
        object.key("Lon").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((input.lon).into()),
        );
    }
    if input.lat != 0.0 {
        object.key("Lat").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((input.lat).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_action_local_ip_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ActionLocalIpDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2957) = &input.ip_address_v4 {
        object.key("IpAddressV4").string(var_2957.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sensitive_data_detections(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SensitiveDataDetections,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.count != 0 {
        object.key("Count").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.count).into()),
        );
    }
    if let Some(var_2958) = &input.r#type {
        object.key("Type").string(var_2958.as_str());
    }
    if let Some(var_2959) = &input.occurrences {
        let mut object_2960 = object.key("Occurrences").start_object();
        crate::json_ser::serialize_structure_crate_model_occurrences(&mut object_2960, var_2959)?;
        object_2960.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_custom_data_identifiers_detections(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CustomDataIdentifiersDetections,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.count != 0 {
        object.key("Count").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.count).into()),
        );
    }
    if let Some(var_2961) = &input.arn {
        object.key("Arn").string(var_2961.as_str());
    }
    if let Some(var_2962) = &input.name {
        object.key("Name").string(var_2962.as_str());
    }
    if let Some(var_2963) = &input.occurrences {
        let mut object_2964 = object.key("Occurrences").start_object();
        crate::json_ser::serialize_structure_crate_model_occurrences(&mut object_2964, var_2963)?;
        object_2964.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_auto_scaling_auto_scaling_group_mixed_instances_policy_instances_distribution_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsAutoScalingAutoScalingGroupMixedInstancesPolicyInstancesDistributionDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2965) = &input.on_demand_allocation_strategy {
        object
            .key("OnDemandAllocationStrategy")
            .string(var_2965.as_str());
    }
    if input.on_demand_base_capacity != 0 {
        object.key("OnDemandBaseCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.on_demand_base_capacity).into()),
        );
    }
    if input.on_demand_percentage_above_base_capacity != 0 {
        object.key("OnDemandPercentageAboveBaseCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt(
                (input.on_demand_percentage_above_base_capacity).into(),
            ),
        );
    }
    if let Some(var_2966) = &input.spot_allocation_strategy {
        object
            .key("SpotAllocationStrategy")
            .string(var_2966.as_str());
    }
    if input.spot_instance_pools != 0 {
        object.key("SpotInstancePools").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.spot_instance_pools).into()),
        );
    }
    if let Some(var_2967) = &input.spot_max_price {
        object.key("SpotMaxPrice").string(var_2967.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_auto_scaling_auto_scaling_group_mixed_instances_policy_launch_template_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsAutoScalingAutoScalingGroupMixedInstancesPolicyLaunchTemplateDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2968) = &input.launch_template_specification {
        let mut object_2969 = object.key("LaunchTemplateSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_auto_scaling_auto_scaling_group_mixed_instances_policy_launch_template_launch_template_specification(&mut object_2969, var_2968)?;
        object_2969.finish();
    }
    if let Some(var_2970) = &input.overrides {
        let mut array_2971 = object.key("Overrides").start_array();
        for item_2972 in var_2970 {
            {
                let mut object_2973 = array_2971.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_auto_scaling_auto_scaling_group_mixed_instances_policy_launch_template_overrides_list_details(&mut object_2973, item_2972)?;
                object_2973.finish();
            }
        }
        array_2971.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_code_build_project_environment_environment_variables_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCodeBuildProjectEnvironmentEnvironmentVariablesDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2974) = &input.name {
        object.key("Name").string(var_2974.as_str());
    }
    if let Some(var_2975) = &input.r#type {
        object.key("Type").string(var_2975.as_str());
    }
    if let Some(var_2976) = &input.value {
        object.key("Value").string(var_2976.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_code_build_project_environment_registry_credential(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCodeBuildProjectEnvironmentRegistryCredential,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2977) = &input.credential {
        object.key("Credential").string(var_2977.as_str());
    }
    if let Some(var_2978) = &input.credential_provider {
        object.key("CredentialProvider").string(var_2978.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_code_build_project_logs_config_cloud_watch_logs_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCodeBuildProjectLogsConfigCloudWatchLogsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2979) = &input.group_name {
        object.key("GroupName").string(var_2979.as_str());
    }
    if let Some(var_2980) = &input.status {
        object.key("Status").string(var_2980.as_str());
    }
    if let Some(var_2981) = &input.stream_name {
        object.key("StreamName").string(var_2981.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_code_build_project_logs_config_s3_logs_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCodeBuildProjectLogsConfigS3LogsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.encryption_disabled {
        object
            .key("EncryptionDisabled")
            .boolean(input.encryption_disabled);
    }
    if let Some(var_2982) = &input.location {
        object.key("Location").string(var_2982.as_str());
    }
    if let Some(var_2983) = &input.status {
        object.key("Status").string(var_2983.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_cloud_front_distribution_cache_behavior(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCloudFrontDistributionCacheBehavior,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2984) = &input.viewer_protocol_policy {
        object.key("ViewerProtocolPolicy").string(var_2984.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_cloud_front_distribution_origin_item(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCloudFrontDistributionOriginItem,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2985) = &input.domain_name {
        object.key("DomainName").string(var_2985.as_str());
    }
    if let Some(var_2986) = &input.id {
        object.key("Id").string(var_2986.as_str());
    }
    if let Some(var_2987) = &input.origin_path {
        object.key("OriginPath").string(var_2987.as_str());
    }
    if let Some(var_2988) = &input.s3_origin_config {
        let mut object_2989 = object.key("S3OriginConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_cloud_front_distribution_origin_s3_origin_config(&mut object_2989, var_2988)?;
        object_2989.finish();
    }
    if let Some(var_2990) = &input.custom_origin_config {
        let mut object_2991 = object.key("CustomOriginConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_cloud_front_distribution_origin_custom_origin_config(&mut object_2991, var_2990)?;
        object_2991.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_cloud_front_distribution_origin_group(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCloudFrontDistributionOriginGroup,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2992) = &input.failover_criteria {
        let mut object_2993 = object.key("FailoverCriteria").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_cloud_front_distribution_origin_group_failover(&mut object_2993, var_2992)?;
        object_2993.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ec2_security_group_user_id_group_pair(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2SecurityGroupUserIdGroupPair,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2994) = &input.group_id {
        object.key("GroupId").string(var_2994.as_str());
    }
    if let Some(var_2995) = &input.group_name {
        object.key("GroupName").string(var_2995.as_str());
    }
    if let Some(var_2996) = &input.peering_status {
        object.key("PeeringStatus").string(var_2996.as_str());
    }
    if let Some(var_2997) = &input.user_id {
        object.key("UserId").string(var_2997.as_str());
    }
    if let Some(var_2998) = &input.vpc_id {
        object.key("VpcId").string(var_2998.as_str());
    }
    if let Some(var_2999) = &input.vpc_peering_connection_id {
        object
            .key("VpcPeeringConnectionId")
            .string(var_2999.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ec2_security_group_ip_range(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2SecurityGroupIpRange,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3000) = &input.cidr_ip {
        object.key("CidrIp").string(var_3000.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ec2_security_group_ipv6_range(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2SecurityGroupIpv6Range,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3001) = &input.cidr_ipv6 {
        object.key("CidrIpv6").string(var_3001.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ec2_security_group_prefix_list_id(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2SecurityGroupPrefixListId,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3002) = &input.prefix_list_id {
        object.key("PrefixListId").string(var_3002.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_icmp_type_code(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IcmpTypeCode,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.code != 0 {
        object.key("Code").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.code).into()),
        );
    }
    if input.r#type != 0 {
        object.key("Type").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.r#type).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_port_range_from_to(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PortRangeFromTo,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.from != 0 {
        object.key("From").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.from).into()),
        );
    }
    if input.to != 0 {
        object.key("To").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.to).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_elasticsearch_domain_elasticsearch_cluster_config_zone_awareness_config_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElasticsearchDomainElasticsearchClusterConfigZoneAwarenessConfigDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.availability_zone_count != 0 {
        object.key("AvailabilityZoneCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.availability_zone_count).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_elasticsearch_domain_log_publishing_options_log_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElasticsearchDomainLogPublishingOptionsLogConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3003) = &input.cloud_watch_logs_log_group_arn {
        object
            .key("CloudWatchLogsLogGroupArn")
            .string(var_3003.as_str());
    }
    if input.enabled {
        object.key("Enabled").boolean(input.enabled);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_s3_bucket_server_side_encryption_rule(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3BucketServerSideEncryptionRule,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3004) = &input.apply_server_side_encryption_by_default {
        let mut object_3005 = object
            .key("ApplyServerSideEncryptionByDefault")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_aws_s3_bucket_server_side_encryption_by_default(&mut object_3005, var_3004)?;
        object_3005.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_s3_bucket_bucket_lifecycle_configuration_rules_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3BucketBucketLifecycleConfigurationRulesDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3006) = &input.abort_incomplete_multipart_upload {
        let mut object_3007 = object.key("AbortIncompleteMultipartUpload").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_s3_bucket_bucket_lifecycle_configuration_rules_abort_incomplete_multipart_upload_details(&mut object_3007, var_3006)?;
        object_3007.finish();
    }
    if let Some(var_3008) = &input.expiration_date {
        object.key("ExpirationDate").string(var_3008.as_str());
    }
    if input.expiration_in_days != 0 {
        object.key("ExpirationInDays").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.expiration_in_days).into()),
        );
    }
    if input.expired_object_delete_marker {
        object
            .key("ExpiredObjectDeleteMarker")
            .boolean(input.expired_object_delete_marker);
    }
    if let Some(var_3009) = &input.filter {
        let mut object_3010 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_s3_bucket_bucket_lifecycle_configuration_rules_filter_details(&mut object_3010, var_3009)?;
        object_3010.finish();
    }
    if let Some(var_3011) = &input.id {
        object.key("ID").string(var_3011.as_str());
    }
    if input.noncurrent_version_expiration_in_days != 0 {
        object.key("NoncurrentVersionExpirationInDays").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.noncurrent_version_expiration_in_days).into()),
        );
    }
    if let Some(var_3012) = &input.noncurrent_version_transitions {
        let mut array_3013 = object.key("NoncurrentVersionTransitions").start_array();
        for item_3014 in var_3012 {
            {
                let mut object_3015 = array_3013.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_s3_bucket_bucket_lifecycle_configuration_rules_noncurrent_version_transitions_details(&mut object_3015, item_3014)?;
                object_3015.finish();
            }
        }
        array_3013.finish();
    }
    if let Some(var_3016) = &input.prefix {
        object.key("Prefix").string(var_3016.as_str());
    }
    if let Some(var_3017) = &input.status {
        object.key("Status").string(var_3017.as_str());
    }
    if let Some(var_3018) = &input.transitions {
        let mut array_3019 = object.key("Transitions").start_array();
        for item_3020 in var_3018 {
            {
                let mut object_3021 = array_3019.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_s3_bucket_bucket_lifecycle_configuration_rules_transitions_details(&mut object_3021, item_3020)?;
                object_3021.finish();
            }
        }
        array_3019.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_s3_bucket_website_configuration_redirect_to(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3BucketWebsiteConfigurationRedirectTo,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3022) = &input.hostname {
        object.key("Hostname").string(var_3022.as_str());
    }
    if let Some(var_3023) = &input.protocol {
        object.key("Protocol").string(var_3023.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_s3_bucket_website_configuration_routing_rule(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3BucketWebsiteConfigurationRoutingRule,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3024) = &input.condition {
        let mut object_3025 = object.key("Condition").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_s3_bucket_website_configuration_routing_rule_condition(&mut object_3025, var_3024)?;
        object_3025.finish();
    }
    if let Some(var_3026) = &input.redirect {
        let mut object_3027 = object.key("Redirect").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_s3_bucket_website_configuration_routing_rule_redirect(&mut object_3027, var_3026)?;
        object_3027.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_s3_bucket_notification_configuration_detail(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3BucketNotificationConfigurationDetail,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3028) = &input.events {
        let mut array_3029 = object.key("Events").start_array();
        for item_3030 in var_3028 {
            {
                array_3029.value().string(item_3030.as_str());
            }
        }
        array_3029.finish();
    }
    if let Some(var_3031) = &input.filter {
        let mut object_3032 = object.key("Filter").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_s3_bucket_notification_configuration_filter(&mut object_3032, var_3031)?;
        object_3032.finish();
    }
    if let Some(var_3033) = &input.destination {
        object.key("Destination").string(var_3033.as_str());
    }
    if let Some(var_3034) = &input.r#type {
        object.key("Type").string(var_3034.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_iam_access_key_session_context_attributes(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsIamAccessKeySessionContextAttributes,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.mfa_authenticated {
        object
            .key("MfaAuthenticated")
            .boolean(input.mfa_authenticated);
    }
    if let Some(var_3035) = &input.creation_date {
        object.key("CreationDate").string(var_3035.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_iam_access_key_session_context_session_issuer(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsIamAccessKeySessionContextSessionIssuer,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3036) = &input.r#type {
        object.key("Type").string(var_3036.as_str());
    }
    if let Some(var_3037) = &input.principal_id {
        object.key("PrincipalId").string(var_3037.as_str());
    }
    if let Some(var_3038) = &input.arn {
        object.key("Arn").string(var_3038.as_str());
    }
    if let Some(var_3039) = &input.account_id {
        object.key("AccountId").string(var_3039.as_str());
    }
    if let Some(var_3040) = &input.user_name {
        object.key("UserName").string(var_3040.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_dynamo_db_table_projection(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsDynamoDbTableProjection,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3041) = &input.non_key_attributes {
        let mut array_3042 = object.key("NonKeyAttributes").start_array();
        for item_3043 in var_3041 {
            {
                array_3042.value().string(item_3043.as_str());
            }
        }
        array_3042.finish();
    }
    if let Some(var_3044) = &input.projection_type {
        object.key("ProjectionType").string(var_3044.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_dynamo_db_table_replica_global_secondary_index(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsDynamoDbTableReplicaGlobalSecondaryIndex,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3045) = &input.index_name {
        object.key("IndexName").string(var_3045.as_str());
    }
    if let Some(var_3046) = &input.provisioned_throughput_override {
        let mut object_3047 = object.key("ProvisionedThroughputOverride").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_dynamo_db_table_provisioned_throughput_override(&mut object_3047, var_3046)?;
        object_3047.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_dynamo_db_table_provisioned_throughput_override(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsDynamoDbTableProvisionedThroughputOverride,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.read_capacity_units != 0 {
        object.key("ReadCapacityUnits").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.read_capacity_units).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ssm_compliance_summary(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsSsmComplianceSummary,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3048) = &input.status {
        object.key("Status").string(var_3048.as_str());
    }
    if input.compliant_critical_count != 0 {
        object.key("CompliantCriticalCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.compliant_critical_count).into()),
        );
    }
    if input.compliant_high_count != 0 {
        object.key("CompliantHighCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.compliant_high_count).into()),
        );
    }
    if input.compliant_medium_count != 0 {
        object.key("CompliantMediumCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.compliant_medium_count).into()),
        );
    }
    if let Some(var_3049) = &input.execution_type {
        object.key("ExecutionType").string(var_3049.as_str());
    }
    if input.non_compliant_critical_count != 0 {
        object.key("NonCompliantCriticalCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.non_compliant_critical_count).into()),
        );
    }
    if input.compliant_informational_count != 0 {
        object.key("CompliantInformationalCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.compliant_informational_count).into()),
        );
    }
    if input.non_compliant_informational_count != 0 {
        object.key("NonCompliantInformationalCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.non_compliant_informational_count).into()),
        );
    }
    if input.compliant_unspecified_count != 0 {
        object.key("CompliantUnspecifiedCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.compliant_unspecified_count).into()),
        );
    }
    if input.non_compliant_low_count != 0 {
        object.key("NonCompliantLowCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.non_compliant_low_count).into()),
        );
    }
    if input.non_compliant_high_count != 0 {
        object.key("NonCompliantHighCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.non_compliant_high_count).into()),
        );
    }
    if input.compliant_low_count != 0 {
        object.key("CompliantLowCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.compliant_low_count).into()),
        );
    }
    if let Some(var_3050) = &input.compliance_type {
        object.key("ComplianceType").string(var_3050.as_str());
    }
    if let Some(var_3051) = &input.patch_baseline_id {
        object.key("PatchBaselineId").string(var_3051.as_str());
    }
    if let Some(var_3052) = &input.overall_severity {
        object.key("OverallSeverity").string(var_3052.as_str());
    }
    if input.non_compliant_medium_count != 0 {
        object.key("NonCompliantMediumCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.non_compliant_medium_count).into()),
        );
    }
    if input.non_compliant_unspecified_count != 0 {
        object.key("NonCompliantUnspecifiedCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.non_compliant_unspecified_count).into()),
        );
    }
    if let Some(var_3053) = &input.patch_group {
        object.key("PatchGroup").string(var_3053.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_certificate_manager_certificate_resource_record(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCertificateManagerCertificateResourceRecord,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3054) = &input.name {
        object.key("Name").string(var_3054.as_str());
    }
    if let Some(var_3055) = &input.r#type {
        object.key("Type").string(var_3055.as_str());
    }
    if let Some(var_3056) = &input.value {
        object.key("Value").string(var_3056.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_redshift_cluster_cluster_parameter_status(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRedshiftClusterClusterParameterStatus,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3057) = &input.parameter_name {
        object.key("ParameterName").string(var_3057.as_str());
    }
    if let Some(var_3058) = &input.parameter_apply_status {
        object.key("ParameterApplyStatus").string(var_3058.as_str());
    }
    if let Some(var_3059) = &input.parameter_apply_error_description {
        object
            .key("ParameterApplyErrorDescription")
            .string(var_3059.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_elb_load_balancer_listener(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElbLoadBalancerListener,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.instance_port != 0 {
        object.key("InstancePort").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.instance_port).into()),
        );
    }
    if let Some(var_3060) = &input.instance_protocol {
        object.key("InstanceProtocol").string(var_3060.as_str());
    }
    if input.load_balancer_port != 0 {
        object.key("LoadBalancerPort").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.load_balancer_port).into()),
        );
    }
    if let Some(var_3061) = &input.protocol {
        object.key("Protocol").string(var_3061.as_str());
    }
    if let Some(var_3062) = &input.ssl_certificate_id {
        object.key("SslCertificateId").string(var_3062.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_elb_load_balancer_access_log(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElbLoadBalancerAccessLog,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.emit_interval != 0 {
        object.key("EmitInterval").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.emit_interval).into()),
        );
    }
    if input.enabled {
        object.key("Enabled").boolean(input.enabled);
    }
    if let Some(var_3063) = &input.s3_bucket_name {
        object.key("S3BucketName").string(var_3063.as_str());
    }
    if let Some(var_3064) = &input.s3_bucket_prefix {
        object.key("S3BucketPrefix").string(var_3064.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_elb_load_balancer_connection_draining(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElbLoadBalancerConnectionDraining,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.enabled {
        object.key("Enabled").boolean(input.enabled);
    }
    if input.timeout != 0 {
        object.key("Timeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.timeout).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_elb_load_balancer_connection_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElbLoadBalancerConnectionSettings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.idle_timeout != 0 {
        object.key("IdleTimeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.idle_timeout).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_elb_load_balancer_cross_zone_load_balancing(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElbLoadBalancerCrossZoneLoadBalancing,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.enabled {
        object.key("Enabled").boolean(input.enabled);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_elb_load_balancer_additional_attribute(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElbLoadBalancerAdditionalAttribute,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3065) = &input.key {
        object.key("Key").string(var_3065.as_str());
    }
    if let Some(var_3066) = &input.value {
        object.key("Value").string(var_3066.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_elb_app_cookie_stickiness_policy(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElbAppCookieStickinessPolicy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3067) = &input.cookie_name {
        object.key("CookieName").string(var_3067.as_str());
    }
    if let Some(var_3068) = &input.policy_name {
        object.key("PolicyName").string(var_3068.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_elb_lb_cookie_stickiness_policy(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsElbLbCookieStickinessPolicy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.cookie_expiration_period != 0 {
        object.key("CookieExpirationPeriod").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.cookie_expiration_period).into()),
        );
    }
    if let Some(var_3069) = &input.policy_name {
        object.key("PolicyName").string(var_3069.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_iam_instance_profile_role(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsIamInstanceProfileRole,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3070) = &input.arn {
        object.key("Arn").string(var_3070.as_str());
    }
    if let Some(var_3071) = &input.assume_role_policy_document {
        object
            .key("AssumeRolePolicyDocument")
            .string(var_3071.as_str());
    }
    if let Some(var_3072) = &input.create_date {
        object.key("CreateDate").string(var_3072.as_str());
    }
    if let Some(var_3073) = &input.path {
        object.key("Path").string(var_3073.as_str());
    }
    if let Some(var_3074) = &input.role_id {
        object.key("RoleId").string(var_3074.as_str());
    }
    if let Some(var_3075) = &input.role_name {
        object.key("RoleName").string(var_3075.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_lambda_function_environment_error(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsLambdaFunctionEnvironmentError,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3076) = &input.error_code {
        object.key("ErrorCode").string(var_3076.as_str());
    }
    if let Some(var_3077) = &input.message {
        object.key("Message").string(var_3077.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_rds_db_subnet_group_subnet(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsDbSubnetGroupSubnet,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3078) = &input.subnet_identifier {
        object.key("SubnetIdentifier").string(var_3078.as_str());
    }
    if let Some(var_3079) = &input.subnet_availability_zone {
        let mut object_3080 = object.key("SubnetAvailabilityZone").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_rds_db_subnet_group_subnet_availability_zone(&mut object_3080, var_3079)?;
        object_3080.finish();
    }
    if let Some(var_3081) = &input.subnet_status {
        object.key("SubnetStatus").string(var_3081.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_rds_pending_cloud_watch_logs_exports(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsPendingCloudWatchLogsExports,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3082) = &input.log_types_to_enable {
        let mut array_3083 = object.key("LogTypesToEnable").start_array();
        for item_3084 in var_3082 {
            {
                array_3083.value().string(item_3084.as_str());
            }
        }
        array_3083.finish();
    }
    if let Some(var_3085) = &input.log_types_to_disable {
        let mut array_3086 = object.key("LogTypesToDisable").start_array();
        for item_3087 in var_3085 {
            {
                array_3086.value().string(item_3087.as_str());
            }
        }
        array_3086.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_waf_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::WafAction,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3088) = &input.r#type {
        object.key("Type").string(var_3088.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_waf_excluded_rule(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::WafExcludedRule,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3089) = &input.rule_id {
        object.key("RuleId").string(var_3089.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_waf_override_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::WafOverrideAction,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3090) = &input.r#type {
        object.key("Type").string(var_3090.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_cluster_configuration_execute_command_configuration_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsClusterConfigurationExecuteCommandConfigurationDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3091) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_3091.as_str());
    }
    if let Some(var_3092) = &input.log_configuration {
        let mut object_3093 = object.key("LogConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ecs_cluster_configuration_execute_command_configuration_log_configuration_details(&mut object_3093, var_3092)?;
        object_3093.finish();
    }
    if let Some(var_3094) = &input.logging {
        object.key("Logging").string(var_3094.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_depends_on_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionContainerDefinitionsDependsOnDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3095) = &input.condition {
        object.key("Condition").string(var_3095.as_str());
    }
    if let Some(var_3096) = &input.container_name {
        object.key("ContainerName").string(var_3096.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_environment_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionContainerDefinitionsEnvironmentDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3097) = &input.name {
        object.key("Name").string(var_3097.as_str());
    }
    if let Some(var_3098) = &input.value {
        object.key("Value").string(var_3098.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_environment_files_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionContainerDefinitionsEnvironmentFilesDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3099) = &input.r#type {
        object.key("Type").string(var_3099.as_str());
    }
    if let Some(var_3100) = &input.value {
        object.key("Value").string(var_3100.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_extra_hosts_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionContainerDefinitionsExtraHostsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3101) = &input.hostname {
        object.key("Hostname").string(var_3101.as_str());
    }
    if let Some(var_3102) = &input.ip_address {
        object.key("IpAddress").string(var_3102.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_firelens_configuration_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionContainerDefinitionsFirelensConfigurationDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3103) = &input.options {
        let mut object_3104 = object.key("Options").start_object();
        for (key_3105, value_3106) in var_3103 {
            {
                object_3104.key(key_3105).string(value_3106.as_str());
            }
        }
        object_3104.finish();
    }
    if let Some(var_3107) = &input.r#type {
        object.key("Type").string(var_3107.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_health_check_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionContainerDefinitionsHealthCheckDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3108) = &input.command {
        let mut array_3109 = object.key("Command").start_array();
        for item_3110 in var_3108 {
            {
                array_3109.value().string(item_3110.as_str());
            }
        }
        array_3109.finish();
    }
    if input.interval != 0 {
        object.key("Interval").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.interval).into()),
        );
    }
    if input.retries != 0 {
        object.key("Retries").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.retries).into()),
        );
    }
    if input.start_period != 0 {
        object.key("StartPeriod").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.start_period).into()),
        );
    }
    if input.timeout != 0 {
        object.key("Timeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.timeout).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_linux_parameters_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionContainerDefinitionsLinuxParametersDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3111) = &input.capabilities {
        let mut object_3112 = object.key("Capabilities").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_linux_parameters_capabilities_details(&mut object_3112, var_3111)?;
        object_3112.finish();
    }
    if let Some(var_3113) = &input.devices {
        let mut array_3114 = object.key("Devices").start_array();
        for item_3115 in var_3113 {
            {
                let mut object_3116 = array_3114.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_linux_parameters_devices_details(&mut object_3116, item_3115)?;
                object_3116.finish();
            }
        }
        array_3114.finish();
    }
    if input.init_process_enabled {
        object
            .key("InitProcessEnabled")
            .boolean(input.init_process_enabled);
    }
    if input.max_swap != 0 {
        object.key("MaxSwap").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_swap).into()),
        );
    }
    if input.shared_memory_size != 0 {
        object.key("SharedMemorySize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.shared_memory_size).into()),
        );
    }
    if input.swappiness != 0 {
        object.key("Swappiness").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.swappiness).into()),
        );
    }
    if let Some(var_3117) = &input.tmpfs {
        let mut array_3118 = object.key("Tmpfs").start_array();
        for item_3119 in var_3117 {
            {
                let mut object_3120 = array_3118.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_linux_parameters_tmpfs_details(&mut object_3120, item_3119)?;
                object_3120.finish();
            }
        }
        array_3118.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_log_configuration_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionContainerDefinitionsLogConfigurationDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3121) = &input.log_driver {
        object.key("LogDriver").string(var_3121.as_str());
    }
    if let Some(var_3122) = &input.options {
        let mut object_3123 = object.key("Options").start_object();
        for (key_3124, value_3125) in var_3122 {
            {
                object_3123.key(key_3124).string(value_3125.as_str());
            }
        }
        object_3123.finish();
    }
    if let Some(var_3126) = &input.secret_options {
        let mut array_3127 = object.key("SecretOptions").start_array();
        for item_3128 in var_3126 {
            {
                let mut object_3129 = array_3127.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_log_configuration_secret_options_details(&mut object_3129, item_3128)?;
                object_3129.finish();
            }
        }
        array_3127.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_mount_points_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionContainerDefinitionsMountPointsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3130) = &input.container_path {
        object.key("ContainerPath").string(var_3130.as_str());
    }
    if input.read_only {
        object.key("ReadOnly").boolean(input.read_only);
    }
    if let Some(var_3131) = &input.source_volume {
        object.key("SourceVolume").string(var_3131.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_port_mappings_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionContainerDefinitionsPortMappingsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.container_port != 0 {
        object.key("ContainerPort").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.container_port).into()),
        );
    }
    if input.host_port != 0 {
        object.key("HostPort").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.host_port).into()),
        );
    }
    if let Some(var_3132) = &input.protocol {
        object.key("Protocol").string(var_3132.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_repository_credentials_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionContainerDefinitionsRepositoryCredentialsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3133) = &input.credentials_parameter {
        object.key("CredentialsParameter").string(var_3133.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_resource_requirements_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionContainerDefinitionsResourceRequirementsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3134) = &input.r#type {
        object.key("Type").string(var_3134.as_str());
    }
    if let Some(var_3135) = &input.value {
        object.key("Value").string(var_3135.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_secrets_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionContainerDefinitionsSecretsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3136) = &input.name {
        object.key("Name").string(var_3136.as_str());
    }
    if let Some(var_3137) = &input.value_from {
        object.key("ValueFrom").string(var_3137.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_system_controls_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionContainerDefinitionsSystemControlsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3138) = &input.namespace {
        object.key("Namespace").string(var_3138.as_str());
    }
    if let Some(var_3139) = &input.value {
        object.key("Value").string(var_3139.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_ulimits_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionContainerDefinitionsUlimitsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.hard_limit != 0 {
        object.key("HardLimit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.hard_limit).into()),
        );
    }
    if let Some(var_3140) = &input.name {
        object.key("Name").string(var_3140.as_str());
    }
    if input.soft_limit != 0 {
        object.key("SoftLimit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.soft_limit).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_volumes_from_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionContainerDefinitionsVolumesFromDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.read_only {
        object.key("ReadOnly").boolean(input.read_only);
    }
    if let Some(var_3141) = &input.source_container {
        object.key("SourceContainer").string(var_3141.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_task_definition_proxy_configuration_proxy_configuration_properties_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionProxyConfigurationProxyConfigurationPropertiesDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3142) = &input.name {
        object.key("Name").string(var_3142.as_str());
    }
    if let Some(var_3143) = &input.value {
        object.key("Value").string(var_3143.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_task_definition_volumes_docker_volume_configuration_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionVolumesDockerVolumeConfigurationDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.autoprovision {
        object.key("Autoprovision").boolean(input.autoprovision);
    }
    if let Some(var_3144) = &input.driver {
        object.key("Driver").string(var_3144.as_str());
    }
    if let Some(var_3145) = &input.driver_opts {
        let mut object_3146 = object.key("DriverOpts").start_object();
        for (key_3147, value_3148) in var_3145 {
            {
                object_3146.key(key_3147).string(value_3148.as_str());
            }
        }
        object_3146.finish();
    }
    if let Some(var_3149) = &input.labels {
        let mut object_3150 = object.key("Labels").start_object();
        for (key_3151, value_3152) in var_3149 {
            {
                object_3150.key(key_3151).string(value_3152.as_str());
            }
        }
        object_3150.finish();
    }
    if let Some(var_3153) = &input.scope {
        object.key("Scope").string(var_3153.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_task_definition_volumes_efs_volume_configuration_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionVolumesEfsVolumeConfigurationDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3154) = &input.authorization_config {
        let mut object_3155 = object.key("AuthorizationConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_ecs_task_definition_volumes_efs_volume_configuration_authorization_config_details(&mut object_3155, var_3154)?;
        object_3155.finish();
    }
    if let Some(var_3156) = &input.filesystem_id {
        object.key("FilesystemId").string(var_3156.as_str());
    }
    if let Some(var_3157) = &input.root_directory {
        object.key("RootDirectory").string(var_3157.as_str());
    }
    if let Some(var_3158) = &input.transit_encryption {
        object.key("TransitEncryption").string(var_3158.as_str());
    }
    if input.transit_encryption_port != 0 {
        object.key("TransitEncryptionPort").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.transit_encryption_port).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_task_definition_volumes_host_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionVolumesHostDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3159) = &input.source_path {
        object.key("SourcePath").string(var_3159.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_service_deployment_configuration_deployment_circuit_breaker_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsServiceDeploymentConfigurationDeploymentCircuitBreakerDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.enable {
        object.key("Enable").boolean(input.enable);
    }
    if input.rollback {
        object.key("Rollback").boolean(input.rollback);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_service_network_configuration_aws_vpc_configuration_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsServiceNetworkConfigurationAwsVpcConfigurationDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3160) = &input.assign_public_ip {
        object.key("AssignPublicIp").string(var_3160.as_str());
    }
    if let Some(var_3161) = &input.security_groups {
        let mut array_3162 = object.key("SecurityGroups").start_array();
        for item_3163 in var_3161 {
            {
                array_3162.value().string(item_3163.as_str());
            }
        }
        array_3162.finish();
    }
    if let Some(var_3164) = &input.subnets {
        let mut array_3165 = object.key("Subnets").start_array();
        for item_3166 in var_3164 {
            {
                array_3165.value().string(item_3166.as_str());
            }
        }
        array_3165.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_auto_scaling_launch_configuration_block_device_mappings_ebs_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsAutoScalingLaunchConfigurationBlockDeviceMappingsEbsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.delete_on_termination {
        object
            .key("DeleteOnTermination")
            .boolean(input.delete_on_termination);
    }
    if input.encrypted {
        object.key("Encrypted").boolean(input.encrypted);
    }
    if input.iops != 0 {
        object.key("Iops").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.iops).into()),
        );
    }
    if let Some(var_3167) = &input.snapshot_id {
        object.key("SnapshotId").string(var_3167.as_str());
    }
    if input.volume_size != 0 {
        object.key("VolumeSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.volume_size).into()),
        );
    }
    if let Some(var_3168) = &input.volume_type {
        object.key("VolumeType").string(var_3168.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ec2_vpn_connection_options_tunnel_options_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEc2VpnConnectionOptionsTunnelOptionsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.dpd_timeout_seconds != 0 {
        object.key("DpdTimeoutSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.dpd_timeout_seconds).into()),
        );
    }
    if let Some(var_3169) = &input.ike_versions {
        let mut array_3170 = object.key("IkeVersions").start_array();
        for item_3171 in var_3169 {
            {
                array_3170.value().string(item_3171.as_str());
            }
        }
        array_3170.finish();
    }
    if let Some(var_3172) = &input.outside_ip_address {
        object.key("OutsideIpAddress").string(var_3172.as_str());
    }
    if let Some(var_3173) = &input.phase1_dh_group_numbers {
        let mut array_3174 = object.key("Phase1DhGroupNumbers").start_array();
        for item_3175 in var_3173 {
            {
                array_3174.value().number(
                    #[allow(clippy::useless_conversion)]
                    aws_smithy_types::Number::NegInt((*item_3175).into()),
                );
            }
        }
        array_3174.finish();
    }
    if let Some(var_3176) = &input.phase1_encryption_algorithms {
        let mut array_3177 = object.key("Phase1EncryptionAlgorithms").start_array();
        for item_3178 in var_3176 {
            {
                array_3177.value().string(item_3178.as_str());
            }
        }
        array_3177.finish();
    }
    if let Some(var_3179) = &input.phase1_integrity_algorithms {
        let mut array_3180 = object.key("Phase1IntegrityAlgorithms").start_array();
        for item_3181 in var_3179 {
            {
                array_3180.value().string(item_3181.as_str());
            }
        }
        array_3180.finish();
    }
    if input.phase1_lifetime_seconds != 0 {
        object.key("Phase1LifetimeSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.phase1_lifetime_seconds).into()),
        );
    }
    if let Some(var_3182) = &input.phase2_dh_group_numbers {
        let mut array_3183 = object.key("Phase2DhGroupNumbers").start_array();
        for item_3184 in var_3182 {
            {
                array_3183.value().number(
                    #[allow(clippy::useless_conversion)]
                    aws_smithy_types::Number::NegInt((*item_3184).into()),
                );
            }
        }
        array_3183.finish();
    }
    if let Some(var_3185) = &input.phase2_encryption_algorithms {
        let mut array_3186 = object.key("Phase2EncryptionAlgorithms").start_array();
        for item_3187 in var_3185 {
            {
                array_3186.value().string(item_3187.as_str());
            }
        }
        array_3186.finish();
    }
    if let Some(var_3188) = &input.phase2_integrity_algorithms {
        let mut array_3189 = object.key("Phase2IntegrityAlgorithms").start_array();
        for item_3190 in var_3188 {
            {
                array_3189.value().string(item_3190.as_str());
            }
        }
        array_3189.finish();
    }
    if input.phase2_lifetime_seconds != 0 {
        object.key("Phase2LifetimeSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.phase2_lifetime_seconds).into()),
        );
    }
    if let Some(var_3191) = &input.pre_shared_key {
        object.key("PreSharedKey").string(var_3191.as_str());
    }
    if input.rekey_fuzz_percentage != 0 {
        object.key("RekeyFuzzPercentage").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.rekey_fuzz_percentage).into()),
        );
    }
    if input.rekey_margin_time_seconds != 0 {
        object.key("RekeyMarginTimeSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.rekey_margin_time_seconds).into()),
        );
    }
    if input.replay_window_size != 0 {
        object.key("ReplayWindowSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.replay_window_size).into()),
        );
    }
    if let Some(var_3192) = &input.tunnel_inside_cidr {
        object.key("TunnelInsideCidr").string(var_3192.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_open_search_service_domain_cluster_config_zone_awareness_config_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsOpenSearchServiceDomainClusterConfigZoneAwarenessConfigDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.availability_zone_count != 0 {
        object.key("AvailabilityZoneCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.availability_zone_count).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_open_search_service_domain_log_publishing_option(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsOpenSearchServiceDomainLogPublishingOption,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3193) = &input.cloud_watch_logs_log_group_arn {
        object
            .key("CloudWatchLogsLogGroupArn")
            .string(var_3193.as_str());
    }
    if input.enabled {
        object.key("Enabled").boolean(input.enabled);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_open_search_service_domain_master_user_options_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsOpenSearchServiceDomainMasterUserOptionsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3194) = &input.master_user_arn {
        object.key("MasterUserArn").string(var_3194.as_str());
    }
    if let Some(var_3195) = &input.master_user_name {
        object.key("MasterUserName").string(var_3195.as_str());
    }
    if let Some(var_3196) = &input.master_user_password {
        object.key("MasterUserPassword").string(var_3196.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_eks_cluster_logging_cluster_logging_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEksClusterLoggingClusterLoggingDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.enabled {
        object.key("Enabled").boolean(input.enabled);
    }
    if let Some(var_3197) = &input.types {
        let mut array_3198 = object.key("Types").start_array();
        for item_3199 in var_3197 {
            {
                array_3198.value().string(item_3199.as_str());
            }
        }
        array_3198.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_firewall_policy_stateful_rule_group_references_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FirewallPolicyStatefulRuleGroupReferencesDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3200) = &input.resource_arn {
        object.key("ResourceArn").string(var_3200.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_firewall_policy_stateless_custom_actions_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FirewallPolicyStatelessCustomActionsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3201) = &input.action_definition {
        let mut object_3202 = object.key("ActionDefinition").start_object();
        crate::json_ser::serialize_structure_crate_model_stateless_custom_action_definition(
            &mut object_3202,
            var_3201,
        )?;
        object_3202.finish();
    }
    if let Some(var_3203) = &input.action_name {
        object.key("ActionName").string(var_3203.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_firewall_policy_stateless_rule_group_references_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FirewallPolicyStatelessRuleGroupReferencesDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.priority != 0 {
        object.key("Priority").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.priority).into()),
        );
    }
    if let Some(var_3204) = &input.resource_arn {
        object.key("ResourceArn").string(var_3204.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rule_group_variables(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RuleGroupVariables,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3205) = &input.ip_sets {
        let mut object_3206 = object.key("IpSets").start_object();
        crate::json_ser::serialize_structure_crate_model_rule_group_variables_ip_sets_details(
            &mut object_3206,
            var_3205,
        )?;
        object_3206.finish();
    }
    if let Some(var_3207) = &input.port_sets {
        let mut object_3208 = object.key("PortSets").start_object();
        crate::json_ser::serialize_structure_crate_model_rule_group_variables_port_sets_details(
            &mut object_3208,
            var_3207,
        )?;
        object_3208.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rule_group_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RuleGroupSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3209) = &input.rules_source_list {
        let mut object_3210 = object.key("RulesSourceList").start_object();
        crate::json_ser::serialize_structure_crate_model_rule_group_source_list_details(
            &mut object_3210,
            var_3209,
        )?;
        object_3210.finish();
    }
    if let Some(var_3211) = &input.rules_string {
        object.key("RulesString").string(var_3211.as_str());
    }
    if let Some(var_3212) = &input.stateful_rules {
        let mut array_3213 = object.key("StatefulRules").start_array();
        for item_3214 in var_3212 {
            {
                let mut object_3215 = array_3213.value().start_object();
                crate::json_ser::serialize_structure_crate_model_rule_group_source_stateful_rules_details(&mut object_3215, item_3214)?;
                object_3215.finish();
            }
        }
        array_3213.finish();
    }
    if let Some(var_3216) = &input.stateless_rules_and_custom_actions {
        let mut object_3217 = object.key("StatelessRulesAndCustomActions").start_object();
        crate::json_ser::serialize_structure_crate_model_rule_group_source_stateless_rules_and_custom_actions_details(&mut object_3217, var_3216)?;
        object_3217.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_efs_access_point_root_directory_creation_info_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEfsAccessPointRootDirectoryCreationInfoDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3218) = &input.owner_gid {
        object.key("OwnerGid").string(var_3218.as_str());
    }
    if let Some(var_3219) = &input.owner_uid {
        object.key("OwnerUid").string(var_3219.as_str());
    }
    if let Some(var_3220) = &input.permissions {
        object.key("Permissions").string(var_3220.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_vpc_info_cidr_block_set_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VpcInfoCidrBlockSetDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3221) = &input.cidr_block {
        object.key("CidrBlock").string(var_3221.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_vpc_info_ipv6_cidr_block_set_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VpcInfoIpv6CidrBlockSetDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3222) = &input.ipv6_cidr_block {
        object.key("Ipv6CidrBlock").string(var_3222.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_vpc_info_peering_options_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VpcInfoPeeringOptionsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.allow_dns_resolution_from_remote_vpc {
        object
            .key("AllowDnsResolutionFromRemoteVpc")
            .boolean(input.allow_dns_resolution_from_remote_vpc);
    }
    if input.allow_egress_from_local_classic_link_to_remote_vpc {
        object
            .key("AllowEgressFromLocalClassicLinkToRemoteVpc")
            .boolean(input.allow_egress_from_local_classic_link_to_remote_vpc);
    }
    if input.allow_egress_from_local_vpc_to_remote_classic_link {
        object
            .key("AllowEgressFromLocalVpcToRemoteClassicLink")
            .boolean(input.allow_egress_from_local_vpc_to_remote_classic_link);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_waf_regional_rule_group_rules_action_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsWafRegionalRuleGroupRulesActionDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3223) = &input.r#type {
        object.key("Type").string(var_3223.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_waf_regional_web_acl_rules_list_action_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsWafRegionalWebAclRulesListActionDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3224) = &input.r#type {
        object.key("Type").string(var_3224.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_waf_regional_web_acl_rules_list_override_action_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsWafRegionalWebAclRulesListOverrideActionDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3225) = &input.r#type {
        object.key("Type").string(var_3225.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_waf_rule_group_rules_action_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsWafRuleGroupRulesActionDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3226) = &input.r#type {
        object.key("Type").string(var_3226.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_task_volume_host_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskVolumeHostDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3227) = &input.source_path {
        object.key("SourcePath").string(var_3227.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_backup_backup_plan_advanced_backup_settings_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsBackupBackupPlanAdvancedBackupSettingsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3228) = &input.backup_options {
        let mut object_3229 = object.key("BackupOptions").start_object();
        for (key_3230, value_3231) in var_3228 {
            {
                object_3229.key(key_3230).string(value_3231.as_str());
            }
        }
        object_3229.finish();
    }
    if let Some(var_3232) = &input.resource_type {
        object.key("ResourceType").string(var_3232.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_backup_backup_plan_rule_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsBackupBackupPlanRuleDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3233) = &input.target_backup_vault {
        object.key("TargetBackupVault").string(var_3233.as_str());
    }
    if input.start_window_minutes != 0 {
        object.key("StartWindowMinutes").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.start_window_minutes).into()),
        );
    }
    if let Some(var_3234) = &input.schedule_expression {
        object.key("ScheduleExpression").string(var_3234.as_str());
    }
    if let Some(var_3235) = &input.rule_name {
        object.key("RuleName").string(var_3235.as_str());
    }
    if let Some(var_3236) = &input.rule_id {
        object.key("RuleId").string(var_3236.as_str());
    }
    if input.enable_continuous_backup {
        object
            .key("EnableContinuousBackup")
            .boolean(input.enable_continuous_backup);
    }
    if input.completion_window_minutes != 0 {
        object.key("CompletionWindowMinutes").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.completion_window_minutes).into()),
        );
    }
    if let Some(var_3237) = &input.copy_actions {
        let mut array_3238 = object.key("CopyActions").start_array();
        for item_3239 in var_3237 {
            {
                let mut object_3240 = array_3238.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_backup_backup_plan_rule_copy_actions_details(&mut object_3240, item_3239)?;
                object_3240.finish();
            }
        }
        array_3238.finish();
    }
    if let Some(var_3241) = &input.lifecycle {
        let mut object_3242 = object.key("Lifecycle").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_backup_backup_plan_lifecycle_details(
            &mut object_3242,
            var_3241,
        )?;
        object_3242.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_occurrences(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Occurrences,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3243) = &input.line_ranges {
        let mut array_3244 = object.key("LineRanges").start_array();
        for item_3245 in var_3243 {
            {
                let mut object_3246 = array_3244.value().start_object();
                crate::json_ser::serialize_structure_crate_model_range(
                    &mut object_3246,
                    item_3245,
                )?;
                object_3246.finish();
            }
        }
        array_3244.finish();
    }
    if let Some(var_3247) = &input.offset_ranges {
        let mut array_3248 = object.key("OffsetRanges").start_array();
        for item_3249 in var_3247 {
            {
                let mut object_3250 = array_3248.value().start_object();
                crate::json_ser::serialize_structure_crate_model_range(
                    &mut object_3250,
                    item_3249,
                )?;
                object_3250.finish();
            }
        }
        array_3248.finish();
    }
    if let Some(var_3251) = &input.pages {
        let mut array_3252 = object.key("Pages").start_array();
        for item_3253 in var_3251 {
            {
                let mut object_3254 = array_3252.value().start_object();
                crate::json_ser::serialize_structure_crate_model_page(&mut object_3254, item_3253)?;
                object_3254.finish();
            }
        }
        array_3252.finish();
    }
    if let Some(var_3255) = &input.records {
        let mut array_3256 = object.key("Records").start_array();
        for item_3257 in var_3255 {
            {
                let mut object_3258 = array_3256.value().start_object();
                crate::json_ser::serialize_structure_crate_model_record(
                    &mut object_3258,
                    item_3257,
                )?;
                object_3258.finish();
            }
        }
        array_3256.finish();
    }
    if let Some(var_3259) = &input.cells {
        let mut array_3260 = object.key("Cells").start_array();
        for item_3261 in var_3259 {
            {
                let mut object_3262 = array_3260.value().start_object();
                crate::json_ser::serialize_structure_crate_model_cell(&mut object_3262, item_3261)?;
                object_3262.finish();
            }
        }
        array_3260.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_auto_scaling_auto_scaling_group_mixed_instances_policy_launch_template_launch_template_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsAutoScalingAutoScalingGroupMixedInstancesPolicyLaunchTemplateLaunchTemplateSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3263) = &input.launch_template_id {
        object.key("LaunchTemplateId").string(var_3263.as_str());
    }
    if let Some(var_3264) = &input.launch_template_name {
        object.key("LaunchTemplateName").string(var_3264.as_str());
    }
    if let Some(var_3265) = &input.version {
        object.key("Version").string(var_3265.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_auto_scaling_auto_scaling_group_mixed_instances_policy_launch_template_overrides_list_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsAutoScalingAutoScalingGroupMixedInstancesPolicyLaunchTemplateOverridesListDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3266) = &input.instance_type {
        object.key("InstanceType").string(var_3266.as_str());
    }
    if let Some(var_3267) = &input.weighted_capacity {
        object.key("WeightedCapacity").string(var_3267.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_cloud_front_distribution_origin_s3_origin_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCloudFrontDistributionOriginS3OriginConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3268) = &input.origin_access_identity {
        object.key("OriginAccessIdentity").string(var_3268.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_cloud_front_distribution_origin_custom_origin_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCloudFrontDistributionOriginCustomOriginConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.http_port != 0 {
        object.key("HttpPort").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.http_port).into()),
        );
    }
    if input.https_port != 0 {
        object.key("HttpsPort").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.https_port).into()),
        );
    }
    if input.origin_keepalive_timeout != 0 {
        object.key("OriginKeepaliveTimeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.origin_keepalive_timeout).into()),
        );
    }
    if let Some(var_3269) = &input.origin_protocol_policy {
        object.key("OriginProtocolPolicy").string(var_3269.as_str());
    }
    if input.origin_read_timeout != 0 {
        object.key("OriginReadTimeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.origin_read_timeout).into()),
        );
    }
    if let Some(var_3270) = &input.origin_ssl_protocols {
        let mut object_3271 = object.key("OriginSslProtocols").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_cloud_front_distribution_origin_ssl_protocols(&mut object_3271, var_3270)?;
        object_3271.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_cloud_front_distribution_origin_group_failover(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCloudFrontDistributionOriginGroupFailover,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3272) = &input.status_codes {
        let mut object_3273 = object.key("StatusCodes").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_cloud_front_distribution_origin_group_failover_status_codes(&mut object_3273, var_3272)?;
        object_3273.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_s3_bucket_server_side_encryption_by_default(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3BucketServerSideEncryptionByDefault,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3274) = &input.sse_algorithm {
        object.key("SSEAlgorithm").string(var_3274.as_str());
    }
    if let Some(var_3275) = &input.kms_master_key_id {
        object.key("KMSMasterKeyID").string(var_3275.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_s3_bucket_bucket_lifecycle_configuration_rules_abort_incomplete_multipart_upload_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3BucketBucketLifecycleConfigurationRulesAbortIncompleteMultipartUploadDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.days_after_initiation != 0 {
        object.key("DaysAfterInitiation").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.days_after_initiation).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_s3_bucket_bucket_lifecycle_configuration_rules_filter_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3BucketBucketLifecycleConfigurationRulesFilterDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3276) = &input.predicate {
        let mut object_3277 = object.key("Predicate").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_s3_bucket_bucket_lifecycle_configuration_rules_filter_predicate_details(&mut object_3277, var_3276)?;
        object_3277.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_s3_bucket_bucket_lifecycle_configuration_rules_noncurrent_version_transitions_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3BucketBucketLifecycleConfigurationRulesNoncurrentVersionTransitionsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.days != 0 {
        object.key("Days").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.days).into()),
        );
    }
    if let Some(var_3278) = &input.storage_class {
        object.key("StorageClass").string(var_3278.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_s3_bucket_bucket_lifecycle_configuration_rules_transitions_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3BucketBucketLifecycleConfigurationRulesTransitionsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3279) = &input.date {
        object.key("Date").string(var_3279.as_str());
    }
    if input.days != 0 {
        object.key("Days").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.days).into()),
        );
    }
    if let Some(var_3280) = &input.storage_class {
        object.key("StorageClass").string(var_3280.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_s3_bucket_website_configuration_routing_rule_condition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3BucketWebsiteConfigurationRoutingRuleCondition,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3281) = &input.http_error_code_returned_equals {
        object
            .key("HttpErrorCodeReturnedEquals")
            .string(var_3281.as_str());
    }
    if let Some(var_3282) = &input.key_prefix_equals {
        object.key("KeyPrefixEquals").string(var_3282.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_s3_bucket_website_configuration_routing_rule_redirect(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3BucketWebsiteConfigurationRoutingRuleRedirect,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3283) = &input.hostname {
        object.key("Hostname").string(var_3283.as_str());
    }
    if let Some(var_3284) = &input.http_redirect_code {
        object.key("HttpRedirectCode").string(var_3284.as_str());
    }
    if let Some(var_3285) = &input.protocol {
        object.key("Protocol").string(var_3285.as_str());
    }
    if let Some(var_3286) = &input.replace_key_prefix_with {
        object.key("ReplaceKeyPrefixWith").string(var_3286.as_str());
    }
    if let Some(var_3287) = &input.replace_key_with {
        object.key("ReplaceKeyWith").string(var_3287.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_s3_bucket_notification_configuration_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3BucketNotificationConfigurationFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3288) = &input.s3_key_filter {
        let mut object_3289 = object.key("S3KeyFilter").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_s3_bucket_notification_configuration_s3_key_filter(&mut object_3289, var_3288)?;
        object_3289.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_rds_db_subnet_group_subnet_availability_zone(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsRdsDbSubnetGroupSubnetAvailabilityZone,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3290) = &input.name {
        object.key("Name").string(var_3290.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_cluster_configuration_execute_command_configuration_log_configuration_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsClusterConfigurationExecuteCommandConfigurationLogConfigurationDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.cloud_watch_encryption_enabled {
        object
            .key("CloudWatchEncryptionEnabled")
            .boolean(input.cloud_watch_encryption_enabled);
    }
    if let Some(var_3291) = &input.cloud_watch_log_group_name {
        object
            .key("CloudWatchLogGroupName")
            .string(var_3291.as_str());
    }
    if let Some(var_3292) = &input.s3_bucket_name {
        object.key("S3BucketName").string(var_3292.as_str());
    }
    if input.s3_encryption_enabled {
        object
            .key("S3EncryptionEnabled")
            .boolean(input.s3_encryption_enabled);
    }
    if let Some(var_3293) = &input.s3_key_prefix {
        object.key("S3KeyPrefix").string(var_3293.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_linux_parameters_capabilities_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionContainerDefinitionsLinuxParametersCapabilitiesDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3294) = &input.add {
        let mut array_3295 = object.key("Add").start_array();
        for item_3296 in var_3294 {
            {
                array_3295.value().string(item_3296.as_str());
            }
        }
        array_3295.finish();
    }
    if let Some(var_3297) = &input.drop {
        let mut array_3298 = object.key("Drop").start_array();
        for item_3299 in var_3297 {
            {
                array_3298.value().string(item_3299.as_str());
            }
        }
        array_3298.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_linux_parameters_devices_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionContainerDefinitionsLinuxParametersDevicesDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3300) = &input.container_path {
        object.key("ContainerPath").string(var_3300.as_str());
    }
    if let Some(var_3301) = &input.host_path {
        object.key("HostPath").string(var_3301.as_str());
    }
    if let Some(var_3302) = &input.permissions {
        let mut array_3303 = object.key("Permissions").start_array();
        for item_3304 in var_3302 {
            {
                array_3303.value().string(item_3304.as_str());
            }
        }
        array_3303.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_linux_parameters_tmpfs_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionContainerDefinitionsLinuxParametersTmpfsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3305) = &input.container_path {
        object.key("ContainerPath").string(var_3305.as_str());
    }
    if let Some(var_3306) = &input.mount_options {
        let mut array_3307 = object.key("MountOptions").start_array();
        for item_3308 in var_3306 {
            {
                array_3307.value().string(item_3308.as_str());
            }
        }
        array_3307.finish();
    }
    if input.size != 0 {
        object.key("Size").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.size).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_task_definition_container_definitions_log_configuration_secret_options_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionContainerDefinitionsLogConfigurationSecretOptionsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3309) = &input.name {
        object.key("Name").string(var_3309.as_str());
    }
    if let Some(var_3310) = &input.value_from {
        object.key("ValueFrom").string(var_3310.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_ecs_task_definition_volumes_efs_volume_configuration_authorization_config_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsEcsTaskDefinitionVolumesEfsVolumeConfigurationAuthorizationConfigDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3311) = &input.access_point_id {
        object.key("AccessPointId").string(var_3311.as_str());
    }
    if let Some(var_3312) = &input.iam {
        object.key("Iam").string(var_3312.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_stateless_custom_action_definition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StatelessCustomActionDefinition,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3313) = &input.publish_metric_action {
        let mut object_3314 = object.key("PublishMetricAction").start_object();
        crate::json_ser::serialize_structure_crate_model_stateless_custom_publish_metric_action(
            &mut object_3314,
            var_3313,
        )?;
        object_3314.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rule_group_variables_ip_sets_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RuleGroupVariablesIpSetsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3315) = &input.definition {
        let mut array_3316 = object.key("Definition").start_array();
        for item_3317 in var_3315 {
            {
                array_3316.value().string(item_3317.as_str());
            }
        }
        array_3316.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rule_group_variables_port_sets_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RuleGroupVariablesPortSetsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3318) = &input.definition {
        let mut array_3319 = object.key("Definition").start_array();
        for item_3320 in var_3318 {
            {
                array_3319.value().string(item_3320.as_str());
            }
        }
        array_3319.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rule_group_source_list_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RuleGroupSourceListDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3321) = &input.generated_rules_type {
        object.key("GeneratedRulesType").string(var_3321.as_str());
    }
    if let Some(var_3322) = &input.target_types {
        let mut array_3323 = object.key("TargetTypes").start_array();
        for item_3324 in var_3322 {
            {
                array_3323.value().string(item_3324.as_str());
            }
        }
        array_3323.finish();
    }
    if let Some(var_3325) = &input.targets {
        let mut array_3326 = object.key("Targets").start_array();
        for item_3327 in var_3325 {
            {
                array_3326.value().string(item_3327.as_str());
            }
        }
        array_3326.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rule_group_source_stateful_rules_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RuleGroupSourceStatefulRulesDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3328) = &input.action {
        object.key("Action").string(var_3328.as_str());
    }
    if let Some(var_3329) = &input.header {
        let mut object_3330 = object.key("Header").start_object();
        crate::json_ser::serialize_structure_crate_model_rule_group_source_stateful_rules_header_details(&mut object_3330, var_3329)?;
        object_3330.finish();
    }
    if let Some(var_3331) = &input.rule_options {
        let mut array_3332 = object.key("RuleOptions").start_array();
        for item_3333 in var_3331 {
            {
                let mut object_3334 = array_3332.value().start_object();
                crate::json_ser::serialize_structure_crate_model_rule_group_source_stateful_rules_options_details(&mut object_3334, item_3333)?;
                object_3334.finish();
            }
        }
        array_3332.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rule_group_source_stateless_rules_and_custom_actions_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RuleGroupSourceStatelessRulesAndCustomActionsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3335) = &input.custom_actions {
        let mut array_3336 = object.key("CustomActions").start_array();
        for item_3337 in var_3335 {
            {
                let mut object_3338 = array_3336.value().start_object();
                crate::json_ser::serialize_structure_crate_model_rule_group_source_custom_actions_details(&mut object_3338, item_3337)?;
                object_3338.finish();
            }
        }
        array_3336.finish();
    }
    if let Some(var_3339) = &input.stateless_rules {
        let mut array_3340 = object.key("StatelessRules").start_array();
        for item_3341 in var_3339 {
            {
                let mut object_3342 = array_3340.value().start_object();
                crate::json_ser::serialize_structure_crate_model_rule_group_source_stateless_rules_details(&mut object_3342, item_3341)?;
                object_3342.finish();
            }
        }
        array_3340.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_backup_backup_plan_rule_copy_actions_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsBackupBackupPlanRuleCopyActionsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3343) = &input.destination_backup_vault_arn {
        object
            .key("DestinationBackupVaultArn")
            .string(var_3343.as_str());
    }
    if let Some(var_3344) = &input.lifecycle {
        let mut object_3345 = object.key("Lifecycle").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_backup_backup_plan_lifecycle_details(
            &mut object_3345,
            var_3344,
        )?;
        object_3345.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_backup_backup_plan_lifecycle_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsBackupBackupPlanLifecycleDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.delete_after_days != 0 {
        object.key("DeleteAfterDays").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.delete_after_days).into()),
        );
    }
    if input.move_to_cold_storage_after_days != 0 {
        object.key("MoveToColdStorageAfterDays").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.move_to_cold_storage_after_days).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_range(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Range,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.start != 0 {
        object.key("Start").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.start).into()),
        );
    }
    if input.end != 0 {
        object.key("End").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.end).into()),
        );
    }
    if input.start_column != 0 {
        object.key("StartColumn").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.start_column).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_page(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Page,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.page_number != 0 {
        object.key("PageNumber").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.page_number).into()),
        );
    }
    if let Some(var_3346) = &input.line_range {
        let mut object_3347 = object.key("LineRange").start_object();
        crate::json_ser::serialize_structure_crate_model_range(&mut object_3347, var_3346)?;
        object_3347.finish();
    }
    if let Some(var_3348) = &input.offset_range {
        let mut object_3349 = object.key("OffsetRange").start_object();
        crate::json_ser::serialize_structure_crate_model_range(&mut object_3349, var_3348)?;
        object_3349.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_record(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Record,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3350) = &input.json_path {
        object.key("JsonPath").string(var_3350.as_str());
    }
    if input.record_index != 0 {
        object.key("RecordIndex").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.record_index).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_cell(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Cell,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.column != 0 {
        object.key("Column").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.column).into()),
        );
    }
    if input.row != 0 {
        object.key("Row").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.row).into()),
        );
    }
    if let Some(var_3351) = &input.column_name {
        object.key("ColumnName").string(var_3351.as_str());
    }
    if let Some(var_3352) = &input.cell_reference {
        object.key("CellReference").string(var_3352.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_cloud_front_distribution_origin_ssl_protocols(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCloudFrontDistributionOriginSslProtocols,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3353) = &input.items {
        let mut array_3354 = object.key("Items").start_array();
        for item_3355 in var_3353 {
            {
                array_3354.value().string(item_3355.as_str());
            }
        }
        array_3354.finish();
    }
    if input.quantity != 0 {
        object.key("Quantity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.quantity).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_cloud_front_distribution_origin_group_failover_status_codes(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsCloudFrontDistributionOriginGroupFailoverStatusCodes,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3356) = &input.items {
        let mut array_3357 = object.key("Items").start_array();
        for item_3358 in var_3356 {
            {
                array_3357.value().number(
                    #[allow(clippy::useless_conversion)]
                    aws_smithy_types::Number::NegInt((*item_3358).into()),
                );
            }
        }
        array_3357.finish();
    }
    if input.quantity != 0 {
        object.key("Quantity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.quantity).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_s3_bucket_bucket_lifecycle_configuration_rules_filter_predicate_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3BucketBucketLifecycleConfigurationRulesFilterPredicateDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3359) = &input.operands {
        let mut array_3360 = object.key("Operands").start_array();
        for item_3361 in var_3359 {
            {
                let mut object_3362 = array_3360.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_s3_bucket_bucket_lifecycle_configuration_rules_filter_predicate_operands_details(&mut object_3362, item_3361)?;
                object_3362.finish();
            }
        }
        array_3360.finish();
    }
    if let Some(var_3363) = &input.prefix {
        object.key("Prefix").string(var_3363.as_str());
    }
    if let Some(var_3364) = &input.tag {
        let mut object_3365 = object.key("Tag").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_s3_bucket_bucket_lifecycle_configuration_rules_filter_predicate_tag_details(&mut object_3365, var_3364)?;
        object_3365.finish();
    }
    if let Some(var_3366) = &input.r#type {
        object.key("Type").string(var_3366.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_s3_bucket_notification_configuration_s3_key_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3BucketNotificationConfigurationS3KeyFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3367) = &input.filter_rules {
        let mut array_3368 = object.key("FilterRules").start_array();
        for item_3369 in var_3367 {
            {
                let mut object_3370 = array_3368.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_s3_bucket_notification_configuration_s3_key_filter_rule(&mut object_3370, item_3369)?;
                object_3370.finish();
            }
        }
        array_3368.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_stateless_custom_publish_metric_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StatelessCustomPublishMetricAction,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3371) = &input.dimensions {
        let mut array_3372 = object.key("Dimensions").start_array();
        for item_3373 in var_3371 {
            {
                let mut object_3374 = array_3372.value().start_object();
                crate::json_ser::serialize_structure_crate_model_stateless_custom_publish_metric_action_dimension(&mut object_3374, item_3373)?;
                object_3374.finish();
            }
        }
        array_3372.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rule_group_source_stateful_rules_header_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RuleGroupSourceStatefulRulesHeaderDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3375) = &input.destination {
        object.key("Destination").string(var_3375.as_str());
    }
    if let Some(var_3376) = &input.destination_port {
        object.key("DestinationPort").string(var_3376.as_str());
    }
    if let Some(var_3377) = &input.direction {
        object.key("Direction").string(var_3377.as_str());
    }
    if let Some(var_3378) = &input.protocol {
        object.key("Protocol").string(var_3378.as_str());
    }
    if let Some(var_3379) = &input.source {
        object.key("Source").string(var_3379.as_str());
    }
    if let Some(var_3380) = &input.source_port {
        object.key("SourcePort").string(var_3380.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rule_group_source_stateful_rules_options_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RuleGroupSourceStatefulRulesOptionsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3381) = &input.keyword {
        object.key("Keyword").string(var_3381.as_str());
    }
    if let Some(var_3382) = &input.settings {
        let mut array_3383 = object.key("Settings").start_array();
        for item_3384 in var_3382 {
            {
                array_3383.value().string(item_3384.as_str());
            }
        }
        array_3383.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rule_group_source_custom_actions_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RuleGroupSourceCustomActionsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3385) = &input.action_definition {
        let mut object_3386 = object.key("ActionDefinition").start_object();
        crate::json_ser::serialize_structure_crate_model_stateless_custom_action_definition(
            &mut object_3386,
            var_3385,
        )?;
        object_3386.finish();
    }
    if let Some(var_3387) = &input.action_name {
        object.key("ActionName").string(var_3387.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rule_group_source_stateless_rules_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RuleGroupSourceStatelessRulesDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.priority != 0 {
        object.key("Priority").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.priority).into()),
        );
    }
    if let Some(var_3388) = &input.rule_definition {
        let mut object_3389 = object.key("RuleDefinition").start_object();
        crate::json_ser::serialize_structure_crate_model_rule_group_source_stateless_rule_definition(&mut object_3389, var_3388)?;
        object_3389.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_s3_bucket_bucket_lifecycle_configuration_rules_filter_predicate_operands_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3BucketBucketLifecycleConfigurationRulesFilterPredicateOperandsDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3390) = &input.prefix {
        object.key("Prefix").string(var_3390.as_str());
    }
    if let Some(var_3391) = &input.tag {
        let mut object_3392 = object.key("Tag").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_s3_bucket_bucket_lifecycle_configuration_rules_filter_predicate_operands_tag_details(&mut object_3392, var_3391)?;
        object_3392.finish();
    }
    if let Some(var_3393) = &input.r#type {
        object.key("Type").string(var_3393.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_s3_bucket_bucket_lifecycle_configuration_rules_filter_predicate_tag_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3BucketBucketLifecycleConfigurationRulesFilterPredicateTagDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3394) = &input.key {
        object.key("Key").string(var_3394.as_str());
    }
    if let Some(var_3395) = &input.value {
        object.key("Value").string(var_3395.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_s3_bucket_notification_configuration_s3_key_filter_rule(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3BucketNotificationConfigurationS3KeyFilterRule,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3396) = &input.name {
        object.key("Name").string(var_3396.as_str());
    }
    if let Some(var_3397) = &input.value {
        object.key("Value").string(var_3397.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_stateless_custom_publish_metric_action_dimension(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StatelessCustomPublishMetricActionDimension,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3398) = &input.value {
        object.key("Value").string(var_3398.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rule_group_source_stateless_rule_definition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RuleGroupSourceStatelessRuleDefinition,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3399) = &input.actions {
        let mut array_3400 = object.key("Actions").start_array();
        for item_3401 in var_3399 {
            {
                array_3400.value().string(item_3401.as_str());
            }
        }
        array_3400.finish();
    }
    if let Some(var_3402) = &input.match_attributes {
        let mut object_3403 = object.key("MatchAttributes").start_object();
        crate::json_ser::serialize_structure_crate_model_rule_group_source_stateless_rule_match_attributes(&mut object_3403, var_3402)?;
        object_3403.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_s3_bucket_bucket_lifecycle_configuration_rules_filter_predicate_operands_tag_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsS3BucketBucketLifecycleConfigurationRulesFilterPredicateOperandsTagDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3404) = &input.key {
        object.key("Key").string(var_3404.as_str());
    }
    if let Some(var_3405) = &input.value {
        object.key("Value").string(var_3405.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rule_group_source_stateless_rule_match_attributes(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RuleGroupSourceStatelessRuleMatchAttributes,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3406) = &input.destination_ports {
        let mut array_3407 = object.key("DestinationPorts").start_array();
        for item_3408 in var_3406 {
            {
                let mut object_3409 = array_3407.value().start_object();
                crate::json_ser::serialize_structure_crate_model_rule_group_source_stateless_rule_match_attributes_destination_ports(&mut object_3409, item_3408)?;
                object_3409.finish();
            }
        }
        array_3407.finish();
    }
    if let Some(var_3410) = &input.destinations {
        let mut array_3411 = object.key("Destinations").start_array();
        for item_3412 in var_3410 {
            {
                let mut object_3413 = array_3411.value().start_object();
                crate::json_ser::serialize_structure_crate_model_rule_group_source_stateless_rule_match_attributes_destinations(&mut object_3413, item_3412)?;
                object_3413.finish();
            }
        }
        array_3411.finish();
    }
    if let Some(var_3414) = &input.protocols {
        let mut array_3415 = object.key("Protocols").start_array();
        for item_3416 in var_3414 {
            {
                array_3415.value().number(
                    #[allow(clippy::useless_conversion)]
                    aws_smithy_types::Number::NegInt((*item_3416).into()),
                );
            }
        }
        array_3415.finish();
    }
    if let Some(var_3417) = &input.source_ports {
        let mut array_3418 = object.key("SourcePorts").start_array();
        for item_3419 in var_3417 {
            {
                let mut object_3420 = array_3418.value().start_object();
                crate::json_ser::serialize_structure_crate_model_rule_group_source_stateless_rule_match_attributes_source_ports(&mut object_3420, item_3419)?;
                object_3420.finish();
            }
        }
        array_3418.finish();
    }
    if let Some(var_3421) = &input.sources {
        let mut array_3422 = object.key("Sources").start_array();
        for item_3423 in var_3421 {
            {
                let mut object_3424 = array_3422.value().start_object();
                crate::json_ser::serialize_structure_crate_model_rule_group_source_stateless_rule_match_attributes_sources(&mut object_3424, item_3423)?;
                object_3424.finish();
            }
        }
        array_3422.finish();
    }
    if let Some(var_3425) = &input.tcp_flags {
        let mut array_3426 = object.key("TcpFlags").start_array();
        for item_3427 in var_3425 {
            {
                let mut object_3428 = array_3426.value().start_object();
                crate::json_ser::serialize_structure_crate_model_rule_group_source_stateless_rule_match_attributes_tcp_flags(&mut object_3428, item_3427)?;
                object_3428.finish();
            }
        }
        array_3426.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rule_group_source_stateless_rule_match_attributes_destination_ports(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RuleGroupSourceStatelessRuleMatchAttributesDestinationPorts,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.from_port != 0 {
        object.key("FromPort").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.from_port).into()),
        );
    }
    if input.to_port != 0 {
        object.key("ToPort").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.to_port).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rule_group_source_stateless_rule_match_attributes_destinations(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RuleGroupSourceStatelessRuleMatchAttributesDestinations,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3429) = &input.address_definition {
        object.key("AddressDefinition").string(var_3429.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rule_group_source_stateless_rule_match_attributes_source_ports(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RuleGroupSourceStatelessRuleMatchAttributesSourcePorts,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.from_port != 0 {
        object.key("FromPort").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.from_port).into()),
        );
    }
    if input.to_port != 0 {
        object.key("ToPort").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.to_port).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rule_group_source_stateless_rule_match_attributes_sources(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RuleGroupSourceStatelessRuleMatchAttributesSources,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3430) = &input.address_definition {
        object.key("AddressDefinition").string(var_3430.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rule_group_source_stateless_rule_match_attributes_tcp_flags(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RuleGroupSourceStatelessRuleMatchAttributesTcpFlags,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3431) = &input.flags {
        let mut array_3432 = object.key("Flags").start_array();
        for item_3433 in var_3431 {
            {
                array_3432.value().string(item_3433.as_str());
            }
        }
        array_3432.finish();
    }
    if let Some(var_3434) = &input.masks {
        let mut array_3435 = object.key("Masks").start_array();
        for item_3436 in var_3434 {
            {
                array_3435.value().string(item_3436.as_str());
            }
        }
        array_3435.finish();
    }
    Ok(())
}
