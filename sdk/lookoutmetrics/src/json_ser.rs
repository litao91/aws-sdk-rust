// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_activate_anomaly_detector_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ActivateAnomalyDetectorInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.anomaly_detector_arn {
        object.key("AnomalyDetectorArn").string(var_1.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_back_test_anomaly_detector_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BackTestAnomalyDetectorInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2) = &input.anomaly_detector_arn {
        object.key("AnomalyDetectorArn").string(var_2.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_alert_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAlertInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3) = &input.action {
        let mut object_4 = object.key("Action").start_object();
        crate::json_ser::serialize_structure_crate_model_action(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.alert_description {
        object.key("AlertDescription").string(var_5.as_str());
    }
    if let Some(var_6) = &input.alert_filters {
        let mut object_7 = object.key("AlertFilters").start_object();
        crate::json_ser::serialize_structure_crate_model_alert_filters(&mut object_7, var_6)?;
        object_7.finish();
    }
    if let Some(var_8) = &input.alert_name {
        object.key("AlertName").string(var_8.as_str());
    }
    if input.alert_sensitivity_threshold != 0 {
        object.key("AlertSensitivityThreshold").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.alert_sensitivity_threshold).into()),
        );
    }
    if let Some(var_9) = &input.anomaly_detector_arn {
        object.key("AnomalyDetectorArn").string(var_9.as_str());
    }
    if let Some(var_10) = &input.tags {
        let mut object_11 = object.key("Tags").start_object();
        for (key_12, value_13) in var_10 {
            {
                object_11.key(key_12).string(value_13.as_str());
            }
        }
        object_11.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_anomaly_detector_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAnomalyDetectorInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_14) = &input.anomaly_detector_config {
        let mut object_15 = object.key("AnomalyDetectorConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_anomaly_detector_config(
            &mut object_15,
            var_14,
        )?;
        object_15.finish();
    }
    if let Some(var_16) = &input.anomaly_detector_description {
        object
            .key("AnomalyDetectorDescription")
            .string(var_16.as_str());
    }
    if let Some(var_17) = &input.anomaly_detector_name {
        object.key("AnomalyDetectorName").string(var_17.as_str());
    }
    if let Some(var_18) = &input.kms_key_arn {
        object.key("KmsKeyArn").string(var_18.as_str());
    }
    if let Some(var_19) = &input.tags {
        let mut object_20 = object.key("Tags").start_object();
        for (key_21, value_22) in var_19 {
            {
                object_20.key(key_21).string(value_22.as_str());
            }
        }
        object_20.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_metric_set_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateMetricSetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_23) = &input.anomaly_detector_arn {
        object.key("AnomalyDetectorArn").string(var_23.as_str());
    }
    if let Some(var_24) = &input.dimension_list {
        let mut array_25 = object.key("DimensionList").start_array();
        for item_26 in var_24 {
            {
                array_25.value().string(item_26.as_str());
            }
        }
        array_25.finish();
    }
    if let Some(var_27) = &input.metric_list {
        let mut array_28 = object.key("MetricList").start_array();
        for item_29 in var_27 {
            {
                let mut object_30 = array_28.value().start_object();
                crate::json_ser::serialize_structure_crate_model_metric(&mut object_30, item_29)?;
                object_30.finish();
            }
        }
        array_28.finish();
    }
    if let Some(var_31) = &input.metric_set_description {
        object.key("MetricSetDescription").string(var_31.as_str());
    }
    if let Some(var_32) = &input.metric_set_frequency {
        object.key("MetricSetFrequency").string(var_32.as_str());
    }
    if let Some(var_33) = &input.metric_set_name {
        object.key("MetricSetName").string(var_33.as_str());
    }
    if let Some(var_34) = &input.metric_source {
        let mut object_35 = object.key("MetricSource").start_object();
        crate::json_ser::serialize_structure_crate_model_metric_source(&mut object_35, var_34)?;
        object_35.finish();
    }
    if let Some(var_36) = &input.offset {
        object.key("Offset").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_36).into()),
        );
    }
    if let Some(var_37) = &input.tags {
        let mut object_38 = object.key("Tags").start_object();
        for (key_39, value_40) in var_37 {
            {
                object_38.key(key_39).string(value_40.as_str());
            }
        }
        object_38.finish();
    }
    if let Some(var_41) = &input.timestamp_column {
        let mut object_42 = object.key("TimestampColumn").start_object();
        crate::json_ser::serialize_structure_crate_model_timestamp_column(&mut object_42, var_41)?;
        object_42.finish();
    }
    if let Some(var_43) = &input.timezone {
        object.key("Timezone").string(var_43.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_deactivate_anomaly_detector_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeactivateAnomalyDetectorInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_44) = &input.anomaly_detector_arn {
        object.key("AnomalyDetectorArn").string(var_44.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_alert_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteAlertInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_45) = &input.alert_arn {
        object.key("AlertArn").string(var_45.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_anomaly_detector_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteAnomalyDetectorInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_46) = &input.anomaly_detector_arn {
        object.key("AnomalyDetectorArn").string(var_46.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_alert_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeAlertInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_47) = &input.alert_arn {
        object.key("AlertArn").string(var_47.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_anomaly_detection_executions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeAnomalyDetectionExecutionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_48) = &input.anomaly_detector_arn {
        object.key("AnomalyDetectorArn").string(var_48.as_str());
    }
    if let Some(var_49) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_49).into()),
        );
    }
    if let Some(var_50) = &input.next_token {
        object.key("NextToken").string(var_50.as_str());
    }
    if let Some(var_51) = &input.timestamp {
        object.key("Timestamp").string(var_51.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_anomaly_detector_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeAnomalyDetectorInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_52) = &input.anomaly_detector_arn {
        object.key("AnomalyDetectorArn").string(var_52.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_metric_set_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeMetricSetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_53) = &input.metric_set_arn {
        object.key("MetricSetArn").string(var_53.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_detect_metric_set_config_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DetectMetricSetConfigInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_54) = &input.anomaly_detector_arn {
        object.key("AnomalyDetectorArn").string(var_54.as_str());
    }
    if let Some(var_55) = &input.auto_detection_metric_source {
        let mut object_56 = object.key("AutoDetectionMetricSource").start_object();
        crate::json_ser::serialize_structure_crate_model_auto_detection_metric_source(
            &mut object_56,
            var_55,
        )?;
        object_56.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_anomaly_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetAnomalyGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_57) = &input.anomaly_detector_arn {
        object.key("AnomalyDetectorArn").string(var_57.as_str());
    }
    if let Some(var_58) = &input.anomaly_group_id {
        object.key("AnomalyGroupId").string(var_58.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_data_quality_metrics_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetDataQualityMetricsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_59) = &input.anomaly_detector_arn {
        object.key("AnomalyDetectorArn").string(var_59.as_str());
    }
    if let Some(var_60) = &input.metric_set_arn {
        object.key("MetricSetArn").string(var_60.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_feedback_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetFeedbackInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_61) = &input.anomaly_detector_arn {
        object.key("AnomalyDetectorArn").string(var_61.as_str());
    }
    if let Some(var_62) = &input.anomaly_group_time_series_feedback {
        let mut object_63 = object.key("AnomalyGroupTimeSeriesFeedback").start_object();
        crate::json_ser::serialize_structure_crate_model_anomaly_group_time_series(
            &mut object_63,
            var_62,
        )?;
        object_63.finish();
    }
    if let Some(var_64) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_64).into()),
        );
    }
    if let Some(var_65) = &input.next_token {
        object.key("NextToken").string(var_65.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_sample_data_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetSampleDataInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_66) = &input.s3_source_config {
        let mut object_67 = object.key("S3SourceConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_sample_data_s3_source_config(
            &mut object_67,
            var_66,
        )?;
        object_67.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_alerts_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAlertsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_68) = &input.anomaly_detector_arn {
        object.key("AnomalyDetectorArn").string(var_68.as_str());
    }
    if let Some(var_69) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_69).into()),
        );
    }
    if let Some(var_70) = &input.next_token {
        object.key("NextToken").string(var_70.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_anomaly_detectors_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAnomalyDetectorsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_71) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_71).into()),
        );
    }
    if let Some(var_72) = &input.next_token {
        object.key("NextToken").string(var_72.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_anomaly_group_related_metrics_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAnomalyGroupRelatedMetricsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_73) = &input.anomaly_detector_arn {
        object.key("AnomalyDetectorArn").string(var_73.as_str());
    }
    if let Some(var_74) = &input.anomaly_group_id {
        object.key("AnomalyGroupId").string(var_74.as_str());
    }
    if let Some(var_75) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_75).into()),
        );
    }
    if let Some(var_76) = &input.next_token {
        object.key("NextToken").string(var_76.as_str());
    }
    if let Some(var_77) = &input.relationship_type_filter {
        object.key("RelationshipTypeFilter").string(var_77.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_anomaly_group_summaries_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAnomalyGroupSummariesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_78) = &input.anomaly_detector_arn {
        object.key("AnomalyDetectorArn").string(var_78.as_str());
    }
    if let Some(var_79) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_79).into()),
        );
    }
    if let Some(var_80) = &input.next_token {
        object.key("NextToken").string(var_80.as_str());
    }
    {
        object.key("SensitivityThreshold").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.sensitivity_threshold).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_anomaly_group_time_series_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAnomalyGroupTimeSeriesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_81) = &input.anomaly_detector_arn {
        object.key("AnomalyDetectorArn").string(var_81.as_str());
    }
    if let Some(var_82) = &input.anomaly_group_id {
        object.key("AnomalyGroupId").string(var_82.as_str());
    }
    if let Some(var_83) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_83).into()),
        );
    }
    if let Some(var_84) = &input.metric_name {
        object.key("MetricName").string(var_84.as_str());
    }
    if let Some(var_85) = &input.next_token {
        object.key("NextToken").string(var_85.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_metric_sets_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListMetricSetsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_86) = &input.anomaly_detector_arn {
        object.key("AnomalyDetectorArn").string(var_86.as_str());
    }
    if let Some(var_87) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_87).into()),
        );
    }
    if let Some(var_88) = &input.next_token {
        object.key("NextToken").string(var_88.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_feedback_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutFeedbackInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_89) = &input.anomaly_detector_arn {
        object.key("AnomalyDetectorArn").string(var_89.as_str());
    }
    if let Some(var_90) = &input.anomaly_group_time_series_feedback {
        let mut object_91 = object.key("AnomalyGroupTimeSeriesFeedback").start_object();
        crate::json_ser::serialize_structure_crate_model_anomaly_group_time_series_feedback(
            &mut object_91,
            var_90,
        )?;
        object_91.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_92) = &input.tags {
        let mut object_93 = object.key("tags").start_object();
        for (key_94, value_95) in var_92 {
            {
                object_93.key(key_94).string(value_95.as_str());
            }
        }
        object_93.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_alert_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateAlertInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_96) = &input.action {
        let mut object_97 = object.key("Action").start_object();
        crate::json_ser::serialize_structure_crate_model_action(&mut object_97, var_96)?;
        object_97.finish();
    }
    if let Some(var_98) = &input.alert_arn {
        object.key("AlertArn").string(var_98.as_str());
    }
    if let Some(var_99) = &input.alert_description {
        object.key("AlertDescription").string(var_99.as_str());
    }
    if let Some(var_100) = &input.alert_filters {
        let mut object_101 = object.key("AlertFilters").start_object();
        crate::json_ser::serialize_structure_crate_model_alert_filters(&mut object_101, var_100)?;
        object_101.finish();
    }
    if input.alert_sensitivity_threshold != 0 {
        object.key("AlertSensitivityThreshold").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.alert_sensitivity_threshold).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_anomaly_detector_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateAnomalyDetectorInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_102) = &input.anomaly_detector_arn {
        object.key("AnomalyDetectorArn").string(var_102.as_str());
    }
    if let Some(var_103) = &input.anomaly_detector_config {
        let mut object_104 = object.key("AnomalyDetectorConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_anomaly_detector_config(
            &mut object_104,
            var_103,
        )?;
        object_104.finish();
    }
    if let Some(var_105) = &input.anomaly_detector_description {
        object
            .key("AnomalyDetectorDescription")
            .string(var_105.as_str());
    }
    if let Some(var_106) = &input.kms_key_arn {
        object.key("KmsKeyArn").string(var_106.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_metric_set_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateMetricSetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_107) = &input.dimension_list {
        let mut array_108 = object.key("DimensionList").start_array();
        for item_109 in var_107 {
            {
                array_108.value().string(item_109.as_str());
            }
        }
        array_108.finish();
    }
    if let Some(var_110) = &input.metric_list {
        let mut array_111 = object.key("MetricList").start_array();
        for item_112 in var_110 {
            {
                let mut object_113 = array_111.value().start_object();
                crate::json_ser::serialize_structure_crate_model_metric(&mut object_113, item_112)?;
                object_113.finish();
            }
        }
        array_111.finish();
    }
    if let Some(var_114) = &input.metric_set_arn {
        object.key("MetricSetArn").string(var_114.as_str());
    }
    if let Some(var_115) = &input.metric_set_description {
        object.key("MetricSetDescription").string(var_115.as_str());
    }
    if let Some(var_116) = &input.metric_set_frequency {
        object.key("MetricSetFrequency").string(var_116.as_str());
    }
    if let Some(var_117) = &input.metric_source {
        let mut object_118 = object.key("MetricSource").start_object();
        crate::json_ser::serialize_structure_crate_model_metric_source(&mut object_118, var_117)?;
        object_118.finish();
    }
    if let Some(var_119) = &input.offset {
        object.key("Offset").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_119).into()),
        );
    }
    if let Some(var_120) = &input.timestamp_column {
        let mut object_121 = object.key("TimestampColumn").start_object();
        crate::json_ser::serialize_structure_crate_model_timestamp_column(
            &mut object_121,
            var_120,
        )?;
        object_121.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Action,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_122) = &input.sns_configuration {
        let mut object_123 = object.key("SNSConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_sns_configuration(
            &mut object_123,
            var_122,
        )?;
        object_123.finish();
    }
    if let Some(var_124) = &input.lambda_configuration {
        let mut object_125 = object.key("LambdaConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_lambda_configuration(
            &mut object_125,
            var_124,
        )?;
        object_125.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_alert_filters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AlertFilters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_126) = &input.metric_list {
        let mut array_127 = object.key("MetricList").start_array();
        for item_128 in var_126 {
            {
                array_127.value().string(item_128.as_str());
            }
        }
        array_127.finish();
    }
    if let Some(var_129) = &input.dimension_filter_list {
        let mut array_130 = object.key("DimensionFilterList").start_array();
        for item_131 in var_129 {
            {
                let mut object_132 = array_130.value().start_object();
                crate::json_ser::serialize_structure_crate_model_dimension_filter(
                    &mut object_132,
                    item_131,
                )?;
                object_132.finish();
            }
        }
        array_130.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_anomaly_detector_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AnomalyDetectorConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_133) = &input.anomaly_detector_frequency {
        object
            .key("AnomalyDetectorFrequency")
            .string(var_133.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_metric(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Metric,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_134) = &input.metric_name {
        object.key("MetricName").string(var_134.as_str());
    }
    if let Some(var_135) = &input.aggregation_function {
        object.key("AggregationFunction").string(var_135.as_str());
    }
    if let Some(var_136) = &input.namespace {
        object.key("Namespace").string(var_136.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_metric_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MetricSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_137) = &input.s3_source_config {
        let mut object_138 = object.key("S3SourceConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_source_config(
            &mut object_138,
            var_137,
        )?;
        object_138.finish();
    }
    if let Some(var_139) = &input.app_flow_config {
        let mut object_140 = object.key("AppFlowConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_app_flow_config(&mut object_140, var_139)?;
        object_140.finish();
    }
    if let Some(var_141) = &input.cloud_watch_config {
        let mut object_142 = object.key("CloudWatchConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_cloud_watch_config(
            &mut object_142,
            var_141,
        )?;
        object_142.finish();
    }
    if let Some(var_143) = &input.rds_source_config {
        let mut object_144 = object.key("RDSSourceConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_rds_source_config(
            &mut object_144,
            var_143,
        )?;
        object_144.finish();
    }
    if let Some(var_145) = &input.redshift_source_config {
        let mut object_146 = object.key("RedshiftSourceConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_redshift_source_config(
            &mut object_146,
            var_145,
        )?;
        object_146.finish();
    }
    if let Some(var_147) = &input.athena_source_config {
        let mut object_148 = object.key("AthenaSourceConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_athena_source_config(
            &mut object_148,
            var_147,
        )?;
        object_148.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_timestamp_column(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TimestampColumn,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_149) = &input.column_name {
        object.key("ColumnName").string(var_149.as_str());
    }
    if let Some(var_150) = &input.column_format {
        object.key("ColumnFormat").string(var_150.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_auto_detection_metric_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoDetectionMetricSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_151) = &input.s3_source_config {
        let mut object_152 = object.key("S3SourceConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_auto_detection_s3_source_config(
            &mut object_152,
            var_151,
        )?;
        object_152.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_anomaly_group_time_series(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AnomalyGroupTimeSeries,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_153) = &input.anomaly_group_id {
        object.key("AnomalyGroupId").string(var_153.as_str());
    }
    if let Some(var_154) = &input.time_series_id {
        object.key("TimeSeriesId").string(var_154.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sample_data_s3_source_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SampleDataS3SourceConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_155) = &input.role_arn {
        object.key("RoleArn").string(var_155.as_str());
    }
    if let Some(var_156) = &input.templated_path_list {
        let mut array_157 = object.key("TemplatedPathList").start_array();
        for item_158 in var_156 {
            {
                array_157.value().string(item_158.as_str());
            }
        }
        array_157.finish();
    }
    if let Some(var_159) = &input.historical_data_path_list {
        let mut array_160 = object.key("HistoricalDataPathList").start_array();
        for item_161 in var_159 {
            {
                array_160.value().string(item_161.as_str());
            }
        }
        array_160.finish();
    }
    if let Some(var_162) = &input.file_format_descriptor {
        let mut object_163 = object.key("FileFormatDescriptor").start_object();
        crate::json_ser::serialize_structure_crate_model_file_format_descriptor(
            &mut object_163,
            var_162,
        )?;
        object_163.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_anomaly_group_time_series_feedback(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AnomalyGroupTimeSeriesFeedback,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_164) = &input.anomaly_group_id {
        object.key("AnomalyGroupId").string(var_164.as_str());
    }
    if let Some(var_165) = &input.time_series_id {
        object.key("TimeSeriesId").string(var_165.as_str());
    }
    if let Some(var_166) = &input.is_anomaly {
        object.key("IsAnomaly").boolean(*var_166);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sns_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SnsConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_167) = &input.role_arn {
        object.key("RoleArn").string(var_167.as_str());
    }
    if let Some(var_168) = &input.sns_topic_arn {
        object.key("SnsTopicArn").string(var_168.as_str());
    }
    if let Some(var_169) = &input.sns_format {
        object.key("SnsFormat").string(var_169.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_lambda_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LambdaConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_170) = &input.role_arn {
        object.key("RoleArn").string(var_170.as_str());
    }
    if let Some(var_171) = &input.lambda_arn {
        object.key("LambdaArn").string(var_171.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_dimension_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DimensionFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_172) = &input.dimension_name {
        object.key("DimensionName").string(var_172.as_str());
    }
    if let Some(var_173) = &input.dimension_value_list {
        let mut array_174 = object.key("DimensionValueList").start_array();
        for item_175 in var_173 {
            {
                array_174.value().string(item_175.as_str());
            }
        }
        array_174.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_source_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3SourceConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_176) = &input.role_arn {
        object.key("RoleArn").string(var_176.as_str());
    }
    if let Some(var_177) = &input.templated_path_list {
        let mut array_178 = object.key("TemplatedPathList").start_array();
        for item_179 in var_177 {
            {
                array_178.value().string(item_179.as_str());
            }
        }
        array_178.finish();
    }
    if let Some(var_180) = &input.historical_data_path_list {
        let mut array_181 = object.key("HistoricalDataPathList").start_array();
        for item_182 in var_180 {
            {
                array_181.value().string(item_182.as_str());
            }
        }
        array_181.finish();
    }
    if let Some(var_183) = &input.file_format_descriptor {
        let mut object_184 = object.key("FileFormatDescriptor").start_object();
        crate::json_ser::serialize_structure_crate_model_file_format_descriptor(
            &mut object_184,
            var_183,
        )?;
        object_184.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_app_flow_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AppFlowConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_185) = &input.role_arn {
        object.key("RoleArn").string(var_185.as_str());
    }
    if let Some(var_186) = &input.flow_name {
        object.key("FlowName").string(var_186.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_cloud_watch_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CloudWatchConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_187) = &input.role_arn {
        object.key("RoleArn").string(var_187.as_str());
    }
    if let Some(var_188) = &input.back_test_configuration {
        let mut object_189 = object.key("BackTestConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_back_test_configuration(
            &mut object_189,
            var_188,
        )?;
        object_189.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rds_source_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RdsSourceConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_190) = &input.db_instance_identifier {
        object.key("DBInstanceIdentifier").string(var_190.as_str());
    }
    if let Some(var_191) = &input.database_host {
        object.key("DatabaseHost").string(var_191.as_str());
    }
    if let Some(var_192) = &input.database_port {
        object.key("DatabasePort").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_192).into()),
        );
    }
    if let Some(var_193) = &input.secret_manager_arn {
        object.key("SecretManagerArn").string(var_193.as_str());
    }
    if let Some(var_194) = &input.database_name {
        object.key("DatabaseName").string(var_194.as_str());
    }
    if let Some(var_195) = &input.table_name {
        object.key("TableName").string(var_195.as_str());
    }
    if let Some(var_196) = &input.role_arn {
        object.key("RoleArn").string(var_196.as_str());
    }
    if let Some(var_197) = &input.vpc_configuration {
        let mut object_198 = object.key("VpcConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_vpc_configuration(
            &mut object_198,
            var_197,
        )?;
        object_198.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_redshift_source_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RedshiftSourceConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_199) = &input.cluster_identifier {
        object.key("ClusterIdentifier").string(var_199.as_str());
    }
    if let Some(var_200) = &input.database_host {
        object.key("DatabaseHost").string(var_200.as_str());
    }
    if let Some(var_201) = &input.database_port {
        object.key("DatabasePort").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_201).into()),
        );
    }
    if let Some(var_202) = &input.secret_manager_arn {
        object.key("SecretManagerArn").string(var_202.as_str());
    }
    if let Some(var_203) = &input.database_name {
        object.key("DatabaseName").string(var_203.as_str());
    }
    if let Some(var_204) = &input.table_name {
        object.key("TableName").string(var_204.as_str());
    }
    if let Some(var_205) = &input.role_arn {
        object.key("RoleArn").string(var_205.as_str());
    }
    if let Some(var_206) = &input.vpc_configuration {
        let mut object_207 = object.key("VpcConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_vpc_configuration(
            &mut object_207,
            var_206,
        )?;
        object_207.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_athena_source_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AthenaSourceConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_208) = &input.role_arn {
        object.key("RoleArn").string(var_208.as_str());
    }
    if let Some(var_209) = &input.database_name {
        object.key("DatabaseName").string(var_209.as_str());
    }
    if let Some(var_210) = &input.data_catalog {
        object.key("DataCatalog").string(var_210.as_str());
    }
    if let Some(var_211) = &input.table_name {
        object.key("TableName").string(var_211.as_str());
    }
    if let Some(var_212) = &input.work_group_name {
        object.key("WorkGroupName").string(var_212.as_str());
    }
    if let Some(var_213) = &input.s3_results_path {
        object.key("S3ResultsPath").string(var_213.as_str());
    }
    if let Some(var_214) = &input.back_test_configuration {
        let mut object_215 = object.key("BackTestConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_back_test_configuration(
            &mut object_215,
            var_214,
        )?;
        object_215.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_auto_detection_s3_source_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoDetectionS3SourceConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_216) = &input.templated_path_list {
        let mut array_217 = object.key("TemplatedPathList").start_array();
        for item_218 in var_216 {
            {
                array_217.value().string(item_218.as_str());
            }
        }
        array_217.finish();
    }
    if let Some(var_219) = &input.historical_data_path_list {
        let mut array_220 = object.key("HistoricalDataPathList").start_array();
        for item_221 in var_219 {
            {
                array_220.value().string(item_221.as_str());
            }
        }
        array_220.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_file_format_descriptor(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FileFormatDescriptor,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_222) = &input.csv_format_descriptor {
        let mut object_223 = object.key("CsvFormatDescriptor").start_object();
        crate::json_ser::serialize_structure_crate_model_csv_format_descriptor(
            &mut object_223,
            var_222,
        )?;
        object_223.finish();
    }
    if let Some(var_224) = &input.json_format_descriptor {
        let mut object_225 = object.key("JsonFormatDescriptor").start_object();
        crate::json_ser::serialize_structure_crate_model_json_format_descriptor(
            &mut object_225,
            var_224,
        )?;
        object_225.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_back_test_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BackTestConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_226) = &input.run_back_test_mode {
        object.key("RunBackTestMode").boolean(*var_226);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_vpc_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VpcConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_227) = &input.subnet_id_list {
        let mut array_228 = object.key("SubnetIdList").start_array();
        for item_229 in var_227 {
            {
                array_228.value().string(item_229.as_str());
            }
        }
        array_228.finish();
    }
    if let Some(var_230) = &input.security_group_id_list {
        let mut array_231 = object.key("SecurityGroupIdList").start_array();
        for item_232 in var_230 {
            {
                array_231.value().string(item_232.as_str());
            }
        }
        array_231.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_csv_format_descriptor(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CsvFormatDescriptor,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_233) = &input.file_compression {
        object.key("FileCompression").string(var_233.as_str());
    }
    if let Some(var_234) = &input.charset {
        object.key("Charset").string(var_234.as_str());
    }
    if let Some(var_235) = &input.contains_header {
        object.key("ContainsHeader").boolean(*var_235);
    }
    if let Some(var_236) = &input.delimiter {
        object.key("Delimiter").string(var_236.as_str());
    }
    if let Some(var_237) = &input.header_list {
        let mut array_238 = object.key("HeaderList").start_array();
        for item_239 in var_237 {
            {
                array_238.value().string(item_239.as_str());
            }
        }
        array_238.finish();
    }
    if let Some(var_240) = &input.quote_symbol {
        object.key("QuoteSymbol").string(var_240.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_json_format_descriptor(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JsonFormatDescriptor,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_241) = &input.file_compression {
        object.key("FileCompression").string(var_241.as_str());
    }
    if let Some(var_242) = &input.charset {
        object.key("Charset").string(var_242.as_str());
    }
    Ok(())
}
