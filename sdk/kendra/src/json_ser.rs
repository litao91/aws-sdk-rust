// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_associate_entities_to_experience_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateEntitiesToExperienceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.id {
        object.key("Id").string(var_1.as_str());
    }
    if let Some(var_2) = &input.index_id {
        object.key("IndexId").string(var_2.as_str());
    }
    if let Some(var_3) = &input.entity_list {
        let mut array_4 = object.key("EntityList").start_array();
        for item_5 in var_3 {
            {
                let mut object_6 = array_4.value().start_object();
                crate::json_ser::serialize_structure_crate_model_entity_configuration(
                    &mut object_6,
                    item_5,
                )?;
                object_6.finish();
            }
        }
        array_4.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_associate_personas_to_entities_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociatePersonasToEntitiesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_7) = &input.id {
        object.key("Id").string(var_7.as_str());
    }
    if let Some(var_8) = &input.index_id {
        object.key("IndexId").string(var_8.as_str());
    }
    if let Some(var_9) = &input.personas {
        let mut array_10 = object.key("Personas").start_array();
        for item_11 in var_9 {
            {
                let mut object_12 = array_10.value().start_object();
                crate::json_ser::serialize_structure_crate_model_entity_persona_configuration(
                    &mut object_12,
                    item_11,
                )?;
                object_12.finish();
            }
        }
        array_10.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_delete_document_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchDeleteDocumentInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_13) = &input.index_id {
        object.key("IndexId").string(var_13.as_str());
    }
    if let Some(var_14) = &input.document_id_list {
        let mut array_15 = object.key("DocumentIdList").start_array();
        for item_16 in var_14 {
            {
                array_15.value().string(item_16.as_str());
            }
        }
        array_15.finish();
    }
    if let Some(var_17) = &input.data_source_sync_job_metric_target {
        let mut object_18 = object.key("DataSourceSyncJobMetricTarget").start_object();
        crate::json_ser::serialize_structure_crate_model_data_source_sync_job_metric_target(
            &mut object_18,
            var_17,
        )?;
        object_18.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_get_document_status_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchGetDocumentStatusInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_19) = &input.index_id {
        object.key("IndexId").string(var_19.as_str());
    }
    if let Some(var_20) = &input.document_info_list {
        let mut array_21 = object.key("DocumentInfoList").start_array();
        for item_22 in var_20 {
            {
                let mut object_23 = array_21.value().start_object();
                crate::json_ser::serialize_structure_crate_model_document_info(
                    &mut object_23,
                    item_22,
                )?;
                object_23.finish();
            }
        }
        array_21.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_put_document_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchPutDocumentInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_24) = &input.index_id {
        object.key("IndexId").string(var_24.as_str());
    }
    if let Some(var_25) = &input.role_arn {
        object.key("RoleArn").string(var_25.as_str());
    }
    if let Some(var_26) = &input.documents {
        let mut array_27 = object.key("Documents").start_array();
        for item_28 in var_26 {
            {
                let mut object_29 = array_27.value().start_object();
                crate::json_ser::serialize_structure_crate_model_document(&mut object_29, item_28)?;
                object_29.finish();
            }
        }
        array_27.finish();
    }
    if let Some(var_30) = &input.custom_document_enrichment_configuration {
        let mut object_31 = object
            .key("CustomDocumentEnrichmentConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_custom_document_enrichment_configuration(
            &mut object_31,
            var_30,
        )?;
        object_31.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_clear_query_suggestions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ClearQuerySuggestionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_32) = &input.index_id {
        object.key("IndexId").string(var_32.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_access_control_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAccessControlConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_33) = &input.index_id {
        object.key("IndexId").string(var_33.as_str());
    }
    if let Some(var_34) = &input.name {
        object.key("Name").string(var_34.as_str());
    }
    if let Some(var_35) = &input.description {
        object.key("Description").string(var_35.as_str());
    }
    if let Some(var_36) = &input.access_control_list {
        let mut array_37 = object.key("AccessControlList").start_array();
        for item_38 in var_36 {
            {
                let mut object_39 = array_37.value().start_object();
                crate::json_ser::serialize_structure_crate_model_principal(
                    &mut object_39,
                    item_38,
                )?;
                object_39.finish();
            }
        }
        array_37.finish();
    }
    if let Some(var_40) = &input.hierarchical_access_control_list {
        let mut array_41 = object.key("HierarchicalAccessControlList").start_array();
        for item_42 in var_40 {
            {
                let mut object_43 = array_41.value().start_object();
                crate::json_ser::serialize_structure_crate_model_hierarchical_principal(
                    &mut object_43,
                    item_42,
                )?;
                object_43.finish();
            }
        }
        array_41.finish();
    }
    if let Some(var_44) = &input.client_token {
        object.key("ClientToken").string(var_44.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_data_source_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDataSourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_45) = &input.name {
        object.key("Name").string(var_45.as_str());
    }
    if let Some(var_46) = &input.index_id {
        object.key("IndexId").string(var_46.as_str());
    }
    if let Some(var_47) = &input.r#type {
        object.key("Type").string(var_47.as_str());
    }
    if let Some(var_48) = &input.configuration {
        let mut object_49 = object.key("Configuration").start_object();
        crate::json_ser::serialize_structure_crate_model_data_source_configuration(
            &mut object_49,
            var_48,
        )?;
        object_49.finish();
    }
    if let Some(var_50) = &input.vpc_configuration {
        let mut object_51 = object.key("VpcConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_data_source_vpc_configuration(
            &mut object_51,
            var_50,
        )?;
        object_51.finish();
    }
    if let Some(var_52) = &input.description {
        object.key("Description").string(var_52.as_str());
    }
    if let Some(var_53) = &input.schedule {
        object.key("Schedule").string(var_53.as_str());
    }
    if let Some(var_54) = &input.role_arn {
        object.key("RoleArn").string(var_54.as_str());
    }
    if let Some(var_55) = &input.tags {
        let mut array_56 = object.key("Tags").start_array();
        for item_57 in var_55 {
            {
                let mut object_58 = array_56.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_58, item_57)?;
                object_58.finish();
            }
        }
        array_56.finish();
    }
    if let Some(var_59) = &input.client_token {
        object.key("ClientToken").string(var_59.as_str());
    }
    if let Some(var_60) = &input.language_code {
        object.key("LanguageCode").string(var_60.as_str());
    }
    if let Some(var_61) = &input.custom_document_enrichment_configuration {
        let mut object_62 = object
            .key("CustomDocumentEnrichmentConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_custom_document_enrichment_configuration(
            &mut object_62,
            var_61,
        )?;
        object_62.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_experience_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateExperienceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_63) = &input.name {
        object.key("Name").string(var_63.as_str());
    }
    if let Some(var_64) = &input.index_id {
        object.key("IndexId").string(var_64.as_str());
    }
    if let Some(var_65) = &input.role_arn {
        object.key("RoleArn").string(var_65.as_str());
    }
    if let Some(var_66) = &input.configuration {
        let mut object_67 = object.key("Configuration").start_object();
        crate::json_ser::serialize_structure_crate_model_experience_configuration(
            &mut object_67,
            var_66,
        )?;
        object_67.finish();
    }
    if let Some(var_68) = &input.description {
        object.key("Description").string(var_68.as_str());
    }
    if let Some(var_69) = &input.client_token {
        object.key("ClientToken").string(var_69.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_faq_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateFaqInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_70) = &input.index_id {
        object.key("IndexId").string(var_70.as_str());
    }
    if let Some(var_71) = &input.name {
        object.key("Name").string(var_71.as_str());
    }
    if let Some(var_72) = &input.description {
        object.key("Description").string(var_72.as_str());
    }
    if let Some(var_73) = &input.s3_path {
        let mut object_74 = object.key("S3Path").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_path(&mut object_74, var_73)?;
        object_74.finish();
    }
    if let Some(var_75) = &input.role_arn {
        object.key("RoleArn").string(var_75.as_str());
    }
    if let Some(var_76) = &input.tags {
        let mut array_77 = object.key("Tags").start_array();
        for item_78 in var_76 {
            {
                let mut object_79 = array_77.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_79, item_78)?;
                object_79.finish();
            }
        }
        array_77.finish();
    }
    if let Some(var_80) = &input.file_format {
        object.key("FileFormat").string(var_80.as_str());
    }
    if let Some(var_81) = &input.client_token {
        object.key("ClientToken").string(var_81.as_str());
    }
    if let Some(var_82) = &input.language_code {
        object.key("LanguageCode").string(var_82.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_index_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateIndexInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_83) = &input.name {
        object.key("Name").string(var_83.as_str());
    }
    if let Some(var_84) = &input.edition {
        object.key("Edition").string(var_84.as_str());
    }
    if let Some(var_85) = &input.role_arn {
        object.key("RoleArn").string(var_85.as_str());
    }
    if let Some(var_86) = &input.server_side_encryption_configuration {
        let mut object_87 = object
            .key("ServerSideEncryptionConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_server_side_encryption_configuration(
            &mut object_87,
            var_86,
        )?;
        object_87.finish();
    }
    if let Some(var_88) = &input.description {
        object.key("Description").string(var_88.as_str());
    }
    if let Some(var_89) = &input.client_token {
        object.key("ClientToken").string(var_89.as_str());
    }
    if let Some(var_90) = &input.tags {
        let mut array_91 = object.key("Tags").start_array();
        for item_92 in var_90 {
            {
                let mut object_93 = array_91.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_93, item_92)?;
                object_93.finish();
            }
        }
        array_91.finish();
    }
    if let Some(var_94) = &input.user_token_configurations {
        let mut array_95 = object.key("UserTokenConfigurations").start_array();
        for item_96 in var_94 {
            {
                let mut object_97 = array_95.value().start_object();
                crate::json_ser::serialize_structure_crate_model_user_token_configuration(
                    &mut object_97,
                    item_96,
                )?;
                object_97.finish();
            }
        }
        array_95.finish();
    }
    if let Some(var_98) = &input.user_context_policy {
        object.key("UserContextPolicy").string(var_98.as_str());
    }
    if let Some(var_99) = &input.user_group_resolution_configuration {
        let mut object_100 = object
            .key("UserGroupResolutionConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_user_group_resolution_configuration(
            &mut object_100,
            var_99,
        )?;
        object_100.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_query_suggestions_block_list_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateQuerySuggestionsBlockListInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_101) = &input.index_id {
        object.key("IndexId").string(var_101.as_str());
    }
    if let Some(var_102) = &input.name {
        object.key("Name").string(var_102.as_str());
    }
    if let Some(var_103) = &input.description {
        object.key("Description").string(var_103.as_str());
    }
    if let Some(var_104) = &input.source_s3_path {
        let mut object_105 = object.key("SourceS3Path").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_path(&mut object_105, var_104)?;
        object_105.finish();
    }
    if let Some(var_106) = &input.client_token {
        object.key("ClientToken").string(var_106.as_str());
    }
    if let Some(var_107) = &input.role_arn {
        object.key("RoleArn").string(var_107.as_str());
    }
    if let Some(var_108) = &input.tags {
        let mut array_109 = object.key("Tags").start_array();
        for item_110 in var_108 {
            {
                let mut object_111 = array_109.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_111, item_110)?;
                object_111.finish();
            }
        }
        array_109.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_thesaurus_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateThesaurusInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_112) = &input.index_id {
        object.key("IndexId").string(var_112.as_str());
    }
    if let Some(var_113) = &input.name {
        object.key("Name").string(var_113.as_str());
    }
    if let Some(var_114) = &input.description {
        object.key("Description").string(var_114.as_str());
    }
    if let Some(var_115) = &input.role_arn {
        object.key("RoleArn").string(var_115.as_str());
    }
    if let Some(var_116) = &input.tags {
        let mut array_117 = object.key("Tags").start_array();
        for item_118 in var_116 {
            {
                let mut object_119 = array_117.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_119, item_118)?;
                object_119.finish();
            }
        }
        array_117.finish();
    }
    if let Some(var_120) = &input.source_s3_path {
        let mut object_121 = object.key("SourceS3Path").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_path(&mut object_121, var_120)?;
        object_121.finish();
    }
    if let Some(var_122) = &input.client_token {
        object.key("ClientToken").string(var_122.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_access_control_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteAccessControlConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_123) = &input.index_id {
        object.key("IndexId").string(var_123.as_str());
    }
    if let Some(var_124) = &input.id {
        object.key("Id").string(var_124.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_data_source_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteDataSourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_125) = &input.id {
        object.key("Id").string(var_125.as_str());
    }
    if let Some(var_126) = &input.index_id {
        object.key("IndexId").string(var_126.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_experience_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteExperienceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_127) = &input.id {
        object.key("Id").string(var_127.as_str());
    }
    if let Some(var_128) = &input.index_id {
        object.key("IndexId").string(var_128.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_faq_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteFaqInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_129) = &input.id {
        object.key("Id").string(var_129.as_str());
    }
    if let Some(var_130) = &input.index_id {
        object.key("IndexId").string(var_130.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_index_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteIndexInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_131) = &input.id {
        object.key("Id").string(var_131.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_principal_mapping_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeletePrincipalMappingInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_132) = &input.index_id {
        object.key("IndexId").string(var_132.as_str());
    }
    if let Some(var_133) = &input.data_source_id {
        object.key("DataSourceId").string(var_133.as_str());
    }
    if let Some(var_134) = &input.group_id {
        object.key("GroupId").string(var_134.as_str());
    }
    if let Some(var_135) = &input.ordering_id {
        object.key("OrderingId").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_135).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_query_suggestions_block_list_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteQuerySuggestionsBlockListInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_136) = &input.index_id {
        object.key("IndexId").string(var_136.as_str());
    }
    if let Some(var_137) = &input.id {
        object.key("Id").string(var_137.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_thesaurus_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteThesaurusInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_138) = &input.id {
        object.key("Id").string(var_138.as_str());
    }
    if let Some(var_139) = &input.index_id {
        object.key("IndexId").string(var_139.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_access_control_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeAccessControlConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_140) = &input.index_id {
        object.key("IndexId").string(var_140.as_str());
    }
    if let Some(var_141) = &input.id {
        object.key("Id").string(var_141.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_data_source_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeDataSourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_142) = &input.id {
        object.key("Id").string(var_142.as_str());
    }
    if let Some(var_143) = &input.index_id {
        object.key("IndexId").string(var_143.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_experience_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeExperienceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_144) = &input.id {
        object.key("Id").string(var_144.as_str());
    }
    if let Some(var_145) = &input.index_id {
        object.key("IndexId").string(var_145.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_faq_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeFaqInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_146) = &input.id {
        object.key("Id").string(var_146.as_str());
    }
    if let Some(var_147) = &input.index_id {
        object.key("IndexId").string(var_147.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_index_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeIndexInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_148) = &input.id {
        object.key("Id").string(var_148.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_principal_mapping_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribePrincipalMappingInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_149) = &input.index_id {
        object.key("IndexId").string(var_149.as_str());
    }
    if let Some(var_150) = &input.data_source_id {
        object.key("DataSourceId").string(var_150.as_str());
    }
    if let Some(var_151) = &input.group_id {
        object.key("GroupId").string(var_151.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_query_suggestions_block_list_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeQuerySuggestionsBlockListInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_152) = &input.index_id {
        object.key("IndexId").string(var_152.as_str());
    }
    if let Some(var_153) = &input.id {
        object.key("Id").string(var_153.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_query_suggestions_config_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeQuerySuggestionsConfigInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_154) = &input.index_id {
        object.key("IndexId").string(var_154.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_thesaurus_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeThesaurusInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_155) = &input.id {
        object.key("Id").string(var_155.as_str());
    }
    if let Some(var_156) = &input.index_id {
        object.key("IndexId").string(var_156.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disassociate_entities_from_experience_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisassociateEntitiesFromExperienceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_157) = &input.id {
        object.key("Id").string(var_157.as_str());
    }
    if let Some(var_158) = &input.index_id {
        object.key("IndexId").string(var_158.as_str());
    }
    if let Some(var_159) = &input.entity_list {
        let mut array_160 = object.key("EntityList").start_array();
        for item_161 in var_159 {
            {
                let mut object_162 = array_160.value().start_object();
                crate::json_ser::serialize_structure_crate_model_entity_configuration(
                    &mut object_162,
                    item_161,
                )?;
                object_162.finish();
            }
        }
        array_160.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disassociate_personas_from_entities_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisassociatePersonasFromEntitiesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_163) = &input.id {
        object.key("Id").string(var_163.as_str());
    }
    if let Some(var_164) = &input.index_id {
        object.key("IndexId").string(var_164.as_str());
    }
    if let Some(var_165) = &input.entity_ids {
        let mut array_166 = object.key("EntityIds").start_array();
        for item_167 in var_165 {
            {
                array_166.value().string(item_167.as_str());
            }
        }
        array_166.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_query_suggestions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetQuerySuggestionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_168) = &input.index_id {
        object.key("IndexId").string(var_168.as_str());
    }
    if let Some(var_169) = &input.query_text {
        object.key("QueryText").string(var_169.as_str());
    }
    if let Some(var_170) = &input.max_suggestions_count {
        object.key("MaxSuggestionsCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_170).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_snapshots_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetSnapshotsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_171) = &input.index_id {
        object.key("IndexId").string(var_171.as_str());
    }
    if let Some(var_172) = &input.interval {
        object.key("Interval").string(var_172.as_str());
    }
    if let Some(var_173) = &input.metric_type {
        object.key("MetricType").string(var_173.as_str());
    }
    if let Some(var_174) = &input.next_token {
        object.key("NextToken").string(var_174.as_str());
    }
    if let Some(var_175) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_175).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_access_control_configurations_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAccessControlConfigurationsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_176) = &input.index_id {
        object.key("IndexId").string(var_176.as_str());
    }
    if let Some(var_177) = &input.next_token {
        object.key("NextToken").string(var_177.as_str());
    }
    if let Some(var_178) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_178).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_data_sources_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListDataSourcesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_179) = &input.index_id {
        object.key("IndexId").string(var_179.as_str());
    }
    if let Some(var_180) = &input.next_token {
        object.key("NextToken").string(var_180.as_str());
    }
    if let Some(var_181) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_181).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_data_source_sync_jobs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListDataSourceSyncJobsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_182) = &input.id {
        object.key("Id").string(var_182.as_str());
    }
    if let Some(var_183) = &input.index_id {
        object.key("IndexId").string(var_183.as_str());
    }
    if let Some(var_184) = &input.next_token {
        object.key("NextToken").string(var_184.as_str());
    }
    if let Some(var_185) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_185).into()),
        );
    }
    if let Some(var_186) = &input.start_time_filter {
        let mut object_187 = object.key("StartTimeFilter").start_object();
        crate::json_ser::serialize_structure_crate_model_time_range(&mut object_187, var_186)?;
        object_187.finish();
    }
    if let Some(var_188) = &input.status_filter {
        object.key("StatusFilter").string(var_188.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_entity_personas_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListEntityPersonasInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_189) = &input.id {
        object.key("Id").string(var_189.as_str());
    }
    if let Some(var_190) = &input.index_id {
        object.key("IndexId").string(var_190.as_str());
    }
    if let Some(var_191) = &input.next_token {
        object.key("NextToken").string(var_191.as_str());
    }
    if let Some(var_192) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_192).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_experience_entities_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListExperienceEntitiesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_193) = &input.id {
        object.key("Id").string(var_193.as_str());
    }
    if let Some(var_194) = &input.index_id {
        object.key("IndexId").string(var_194.as_str());
    }
    if let Some(var_195) = &input.next_token {
        object.key("NextToken").string(var_195.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_experiences_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListExperiencesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_196) = &input.index_id {
        object.key("IndexId").string(var_196.as_str());
    }
    if let Some(var_197) = &input.next_token {
        object.key("NextToken").string(var_197.as_str());
    }
    if let Some(var_198) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_198).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_faqs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListFaqsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_199) = &input.index_id {
        object.key("IndexId").string(var_199.as_str());
    }
    if let Some(var_200) = &input.next_token {
        object.key("NextToken").string(var_200.as_str());
    }
    if let Some(var_201) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_201).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_groups_older_than_ordering_id_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListGroupsOlderThanOrderingIdInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_202) = &input.index_id {
        object.key("IndexId").string(var_202.as_str());
    }
    if let Some(var_203) = &input.data_source_id {
        object.key("DataSourceId").string(var_203.as_str());
    }
    if let Some(var_204) = &input.ordering_id {
        object.key("OrderingId").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_204).into()),
        );
    }
    if let Some(var_205) = &input.next_token {
        object.key("NextToken").string(var_205.as_str());
    }
    if let Some(var_206) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_206).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_indices_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListIndicesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_207) = &input.next_token {
        object.key("NextToken").string(var_207.as_str());
    }
    if let Some(var_208) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_208).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_query_suggestions_block_lists_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListQuerySuggestionsBlockListsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_209) = &input.index_id {
        object.key("IndexId").string(var_209.as_str());
    }
    if let Some(var_210) = &input.next_token {
        object.key("NextToken").string(var_210.as_str());
    }
    if let Some(var_211) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_211).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_tags_for_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTagsForResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_212) = &input.resource_arn {
        object.key("ResourceARN").string(var_212.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_thesauri_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListThesauriInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_213) = &input.index_id {
        object.key("IndexId").string(var_213.as_str());
    }
    if let Some(var_214) = &input.next_token {
        object.key("NextToken").string(var_214.as_str());
    }
    if let Some(var_215) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_215).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_principal_mapping_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutPrincipalMappingInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_216) = &input.index_id {
        object.key("IndexId").string(var_216.as_str());
    }
    if let Some(var_217) = &input.data_source_id {
        object.key("DataSourceId").string(var_217.as_str());
    }
    if let Some(var_218) = &input.group_id {
        object.key("GroupId").string(var_218.as_str());
    }
    if let Some(var_219) = &input.group_members {
        let mut object_220 = object.key("GroupMembers").start_object();
        crate::json_ser::serialize_structure_crate_model_group_members(&mut object_220, var_219)?;
        object_220.finish();
    }
    if let Some(var_221) = &input.ordering_id {
        object.key("OrderingId").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_221).into()),
        );
    }
    if let Some(var_222) = &input.role_arn {
        object.key("RoleArn").string(var_222.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_query_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::QueryInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_223) = &input.index_id {
        object.key("IndexId").string(var_223.as_str());
    }
    if let Some(var_224) = &input.query_text {
        object.key("QueryText").string(var_224.as_str());
    }
    if let Some(var_225) = &input.attribute_filter {
        let mut object_226 = object.key("AttributeFilter").start_object();
        crate::json_ser::serialize_structure_crate_model_attribute_filter(
            &mut object_226,
            var_225,
        )?;
        object_226.finish();
    }
    if let Some(var_227) = &input.facets {
        let mut array_228 = object.key("Facets").start_array();
        for item_229 in var_227 {
            {
                let mut object_230 = array_228.value().start_object();
                crate::json_ser::serialize_structure_crate_model_facet(&mut object_230, item_229)?;
                object_230.finish();
            }
        }
        array_228.finish();
    }
    if let Some(var_231) = &input.requested_document_attributes {
        let mut array_232 = object.key("RequestedDocumentAttributes").start_array();
        for item_233 in var_231 {
            {
                array_232.value().string(item_233.as_str());
            }
        }
        array_232.finish();
    }
    if let Some(var_234) = &input.query_result_type_filter {
        object.key("QueryResultTypeFilter").string(var_234.as_str());
    }
    if let Some(var_235) = &input.document_relevance_override_configurations {
        let mut array_236 = object
            .key("DocumentRelevanceOverrideConfigurations")
            .start_array();
        for item_237 in var_235 {
            {
                let mut object_238 = array_236.value().start_object();
                crate::json_ser::serialize_structure_crate_model_document_relevance_configuration(
                    &mut object_238,
                    item_237,
                )?;
                object_238.finish();
            }
        }
        array_236.finish();
    }
    if let Some(var_239) = &input.page_number {
        object.key("PageNumber").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_239).into()),
        );
    }
    if let Some(var_240) = &input.page_size {
        object.key("PageSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_240).into()),
        );
    }
    if let Some(var_241) = &input.sorting_configuration {
        let mut object_242 = object.key("SortingConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_sorting_configuration(
            &mut object_242,
            var_241,
        )?;
        object_242.finish();
    }
    if let Some(var_243) = &input.user_context {
        let mut object_244 = object.key("UserContext").start_object();
        crate::json_ser::serialize_structure_crate_model_user_context(&mut object_244, var_243)?;
        object_244.finish();
    }
    if let Some(var_245) = &input.visitor_id {
        object.key("VisitorId").string(var_245.as_str());
    }
    if let Some(var_246) = &input.spell_correction_configuration {
        let mut object_247 = object.key("SpellCorrectionConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_spell_correction_configuration(
            &mut object_247,
            var_246,
        )?;
        object_247.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_data_source_sync_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartDataSourceSyncJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_248) = &input.id {
        object.key("Id").string(var_248.as_str());
    }
    if let Some(var_249) = &input.index_id {
        object.key("IndexId").string(var_249.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_data_source_sync_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopDataSourceSyncJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_250) = &input.id {
        object.key("Id").string(var_250.as_str());
    }
    if let Some(var_251) = &input.index_id {
        object.key("IndexId").string(var_251.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_submit_feedback_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SubmitFeedbackInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_252) = &input.index_id {
        object.key("IndexId").string(var_252.as_str());
    }
    if let Some(var_253) = &input.query_id {
        object.key("QueryId").string(var_253.as_str());
    }
    if let Some(var_254) = &input.click_feedback_items {
        let mut array_255 = object.key("ClickFeedbackItems").start_array();
        for item_256 in var_254 {
            {
                let mut object_257 = array_255.value().start_object();
                crate::json_ser::serialize_structure_crate_model_click_feedback(
                    &mut object_257,
                    item_256,
                )?;
                object_257.finish();
            }
        }
        array_255.finish();
    }
    if let Some(var_258) = &input.relevance_feedback_items {
        let mut array_259 = object.key("RelevanceFeedbackItems").start_array();
        for item_260 in var_258 {
            {
                let mut object_261 = array_259.value().start_object();
                crate::json_ser::serialize_structure_crate_model_relevance_feedback(
                    &mut object_261,
                    item_260,
                )?;
                object_261.finish();
            }
        }
        array_259.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_262) = &input.resource_arn {
        object.key("ResourceARN").string(var_262.as_str());
    }
    if let Some(var_263) = &input.tags {
        let mut array_264 = object.key("Tags").start_array();
        for item_265 in var_263 {
            {
                let mut object_266 = array_264.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_266, item_265)?;
                object_266.finish();
            }
        }
        array_264.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_untag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UntagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_267) = &input.resource_arn {
        object.key("ResourceARN").string(var_267.as_str());
    }
    if let Some(var_268) = &input.tag_keys {
        let mut array_269 = object.key("TagKeys").start_array();
        for item_270 in var_268 {
            {
                array_269.value().string(item_270.as_str());
            }
        }
        array_269.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_access_control_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateAccessControlConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_271) = &input.index_id {
        object.key("IndexId").string(var_271.as_str());
    }
    if let Some(var_272) = &input.id {
        object.key("Id").string(var_272.as_str());
    }
    if let Some(var_273) = &input.name {
        object.key("Name").string(var_273.as_str());
    }
    if let Some(var_274) = &input.description {
        object.key("Description").string(var_274.as_str());
    }
    if let Some(var_275) = &input.access_control_list {
        let mut array_276 = object.key("AccessControlList").start_array();
        for item_277 in var_275 {
            {
                let mut object_278 = array_276.value().start_object();
                crate::json_ser::serialize_structure_crate_model_principal(
                    &mut object_278,
                    item_277,
                )?;
                object_278.finish();
            }
        }
        array_276.finish();
    }
    if let Some(var_279) = &input.hierarchical_access_control_list {
        let mut array_280 = object.key("HierarchicalAccessControlList").start_array();
        for item_281 in var_279 {
            {
                let mut object_282 = array_280.value().start_object();
                crate::json_ser::serialize_structure_crate_model_hierarchical_principal(
                    &mut object_282,
                    item_281,
                )?;
                object_282.finish();
            }
        }
        array_280.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_data_source_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDataSourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_283) = &input.id {
        object.key("Id").string(var_283.as_str());
    }
    if let Some(var_284) = &input.name {
        object.key("Name").string(var_284.as_str());
    }
    if let Some(var_285) = &input.index_id {
        object.key("IndexId").string(var_285.as_str());
    }
    if let Some(var_286) = &input.configuration {
        let mut object_287 = object.key("Configuration").start_object();
        crate::json_ser::serialize_structure_crate_model_data_source_configuration(
            &mut object_287,
            var_286,
        )?;
        object_287.finish();
    }
    if let Some(var_288) = &input.vpc_configuration {
        let mut object_289 = object.key("VpcConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_data_source_vpc_configuration(
            &mut object_289,
            var_288,
        )?;
        object_289.finish();
    }
    if let Some(var_290) = &input.description {
        object.key("Description").string(var_290.as_str());
    }
    if let Some(var_291) = &input.schedule {
        object.key("Schedule").string(var_291.as_str());
    }
    if let Some(var_292) = &input.role_arn {
        object.key("RoleArn").string(var_292.as_str());
    }
    if let Some(var_293) = &input.language_code {
        object.key("LanguageCode").string(var_293.as_str());
    }
    if let Some(var_294) = &input.custom_document_enrichment_configuration {
        let mut object_295 = object
            .key("CustomDocumentEnrichmentConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_custom_document_enrichment_configuration(
            &mut object_295,
            var_294,
        )?;
        object_295.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_experience_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateExperienceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_296) = &input.id {
        object.key("Id").string(var_296.as_str());
    }
    if let Some(var_297) = &input.name {
        object.key("Name").string(var_297.as_str());
    }
    if let Some(var_298) = &input.index_id {
        object.key("IndexId").string(var_298.as_str());
    }
    if let Some(var_299) = &input.role_arn {
        object.key("RoleArn").string(var_299.as_str());
    }
    if let Some(var_300) = &input.configuration {
        let mut object_301 = object.key("Configuration").start_object();
        crate::json_ser::serialize_structure_crate_model_experience_configuration(
            &mut object_301,
            var_300,
        )?;
        object_301.finish();
    }
    if let Some(var_302) = &input.description {
        object.key("Description").string(var_302.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_index_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateIndexInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_303) = &input.id {
        object.key("Id").string(var_303.as_str());
    }
    if let Some(var_304) = &input.name {
        object.key("Name").string(var_304.as_str());
    }
    if let Some(var_305) = &input.role_arn {
        object.key("RoleArn").string(var_305.as_str());
    }
    if let Some(var_306) = &input.description {
        object.key("Description").string(var_306.as_str());
    }
    if let Some(var_307) = &input.document_metadata_configuration_updates {
        let mut array_308 = object
            .key("DocumentMetadataConfigurationUpdates")
            .start_array();
        for item_309 in var_307 {
            {
                let mut object_310 = array_308.value().start_object();
                crate::json_ser::serialize_structure_crate_model_document_metadata_configuration(
                    &mut object_310,
                    item_309,
                )?;
                object_310.finish();
            }
        }
        array_308.finish();
    }
    if let Some(var_311) = &input.capacity_units {
        let mut object_312 = object.key("CapacityUnits").start_object();
        crate::json_ser::serialize_structure_crate_model_capacity_units_configuration(
            &mut object_312,
            var_311,
        )?;
        object_312.finish();
    }
    if let Some(var_313) = &input.user_token_configurations {
        let mut array_314 = object.key("UserTokenConfigurations").start_array();
        for item_315 in var_313 {
            {
                let mut object_316 = array_314.value().start_object();
                crate::json_ser::serialize_structure_crate_model_user_token_configuration(
                    &mut object_316,
                    item_315,
                )?;
                object_316.finish();
            }
        }
        array_314.finish();
    }
    if let Some(var_317) = &input.user_context_policy {
        object.key("UserContextPolicy").string(var_317.as_str());
    }
    if let Some(var_318) = &input.user_group_resolution_configuration {
        let mut object_319 = object
            .key("UserGroupResolutionConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_user_group_resolution_configuration(
            &mut object_319,
            var_318,
        )?;
        object_319.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_query_suggestions_block_list_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateQuerySuggestionsBlockListInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_320) = &input.index_id {
        object.key("IndexId").string(var_320.as_str());
    }
    if let Some(var_321) = &input.id {
        object.key("Id").string(var_321.as_str());
    }
    if let Some(var_322) = &input.name {
        object.key("Name").string(var_322.as_str());
    }
    if let Some(var_323) = &input.description {
        object.key("Description").string(var_323.as_str());
    }
    if let Some(var_324) = &input.source_s3_path {
        let mut object_325 = object.key("SourceS3Path").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_path(&mut object_325, var_324)?;
        object_325.finish();
    }
    if let Some(var_326) = &input.role_arn {
        object.key("RoleArn").string(var_326.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_query_suggestions_config_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateQuerySuggestionsConfigInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_327) = &input.index_id {
        object.key("IndexId").string(var_327.as_str());
    }
    if let Some(var_328) = &input.mode {
        object.key("Mode").string(var_328.as_str());
    }
    if let Some(var_329) = &input.query_log_look_back_window_in_days {
        object.key("QueryLogLookBackWindowInDays").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_329).into()),
        );
    }
    if let Some(var_330) = &input.include_queries_without_user_information {
        object
            .key("IncludeQueriesWithoutUserInformation")
            .boolean(*var_330);
    }
    if let Some(var_331) = &input.minimum_number_of_querying_users {
        object.key("MinimumNumberOfQueryingUsers").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_331).into()),
        );
    }
    if let Some(var_332) = &input.minimum_query_count {
        object.key("MinimumQueryCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_332).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_thesaurus_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateThesaurusInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_333) = &input.id {
        object.key("Id").string(var_333.as_str());
    }
    if let Some(var_334) = &input.name {
        object.key("Name").string(var_334.as_str());
    }
    if let Some(var_335) = &input.index_id {
        object.key("IndexId").string(var_335.as_str());
    }
    if let Some(var_336) = &input.description {
        object.key("Description").string(var_336.as_str());
    }
    if let Some(var_337) = &input.role_arn {
        object.key("RoleArn").string(var_337.as_str());
    }
    if let Some(var_338) = &input.source_s3_path {
        let mut object_339 = object.key("SourceS3Path").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_path(&mut object_339, var_338)?;
        object_339.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_entity_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EntityConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_340) = &input.entity_id {
        object.key("EntityId").string(var_340.as_str());
    }
    if let Some(var_341) = &input.entity_type {
        object.key("EntityType").string(var_341.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_entity_persona_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EntityPersonaConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_342) = &input.entity_id {
        object.key("EntityId").string(var_342.as_str());
    }
    if let Some(var_343) = &input.persona {
        object.key("Persona").string(var_343.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_source_sync_job_metric_target(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataSourceSyncJobMetricTarget,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_344) = &input.data_source_id {
        object.key("DataSourceId").string(var_344.as_str());
    }
    if let Some(var_345) = &input.data_source_sync_job_id {
        object.key("DataSourceSyncJobId").string(var_345.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_document_info(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DocumentInfo,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_346) = &input.document_id {
        object.key("DocumentId").string(var_346.as_str());
    }
    if let Some(var_347) = &input.attributes {
        let mut array_348 = object.key("Attributes").start_array();
        for item_349 in var_347 {
            {
                let mut object_350 = array_348.value().start_object();
                crate::json_ser::serialize_structure_crate_model_document_attribute(
                    &mut object_350,
                    item_349,
                )?;
                object_350.finish();
            }
        }
        array_348.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_document(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Document,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_351) = &input.id {
        object.key("Id").string(var_351.as_str());
    }
    if let Some(var_352) = &input.title {
        object.key("Title").string(var_352.as_str());
    }
    if let Some(var_353) = &input.blob {
        object
            .key("Blob")
            .string_unchecked(&aws_smithy_types::base64::encode(var_353));
    }
    if let Some(var_354) = &input.s3_path {
        let mut object_355 = object.key("S3Path").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_path(&mut object_355, var_354)?;
        object_355.finish();
    }
    if let Some(var_356) = &input.attributes {
        let mut array_357 = object.key("Attributes").start_array();
        for item_358 in var_356 {
            {
                let mut object_359 = array_357.value().start_object();
                crate::json_ser::serialize_structure_crate_model_document_attribute(
                    &mut object_359,
                    item_358,
                )?;
                object_359.finish();
            }
        }
        array_357.finish();
    }
    if let Some(var_360) = &input.access_control_list {
        let mut array_361 = object.key("AccessControlList").start_array();
        for item_362 in var_360 {
            {
                let mut object_363 = array_361.value().start_object();
                crate::json_ser::serialize_structure_crate_model_principal(
                    &mut object_363,
                    item_362,
                )?;
                object_363.finish();
            }
        }
        array_361.finish();
    }
    if let Some(var_364) = &input.hierarchical_access_control_list {
        let mut array_365 = object.key("HierarchicalAccessControlList").start_array();
        for item_366 in var_364 {
            {
                let mut object_367 = array_365.value().start_object();
                crate::json_ser::serialize_structure_crate_model_hierarchical_principal(
                    &mut object_367,
                    item_366,
                )?;
                object_367.finish();
            }
        }
        array_365.finish();
    }
    if let Some(var_368) = &input.content_type {
        object.key("ContentType").string(var_368.as_str());
    }
    if let Some(var_369) = &input.access_control_configuration_id {
        object
            .key("AccessControlConfigurationId")
            .string(var_369.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_custom_document_enrichment_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CustomDocumentEnrichmentConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_370) = &input.inline_configurations {
        let mut array_371 = object.key("InlineConfigurations").start_array();
        for item_372 in var_370 {
            {
                let mut object_373 = array_371.value().start_object();
                crate::json_ser::serialize_structure_crate_model_inline_custom_document_enrichment_configuration(&mut object_373, item_372)?;
                object_373.finish();
            }
        }
        array_371.finish();
    }
    if let Some(var_374) = &input.pre_extraction_hook_configuration {
        let mut object_375 = object.key("PreExtractionHookConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_hook_configuration(
            &mut object_375,
            var_374,
        )?;
        object_375.finish();
    }
    if let Some(var_376) = &input.post_extraction_hook_configuration {
        let mut object_377 = object.key("PostExtractionHookConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_hook_configuration(
            &mut object_377,
            var_376,
        )?;
        object_377.finish();
    }
    if let Some(var_378) = &input.role_arn {
        object.key("RoleArn").string(var_378.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_principal(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Principal,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_379) = &input.name {
        object.key("Name").string(var_379.as_str());
    }
    if let Some(var_380) = &input.r#type {
        object.key("Type").string(var_380.as_str());
    }
    if let Some(var_381) = &input.access {
        object.key("Access").string(var_381.as_str());
    }
    if let Some(var_382) = &input.data_source_id {
        object.key("DataSourceId").string(var_382.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_hierarchical_principal(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HierarchicalPrincipal,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_383) = &input.principal_list {
        let mut array_384 = object.key("PrincipalList").start_array();
        for item_385 in var_383 {
            {
                let mut object_386 = array_384.value().start_object();
                crate::json_ser::serialize_structure_crate_model_principal(
                    &mut object_386,
                    item_385,
                )?;
                object_386.finish();
            }
        }
        array_384.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_source_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataSourceConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_387) = &input.s3_configuration {
        let mut object_388 = object.key("S3Configuration").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_data_source_configuration(
            &mut object_388,
            var_387,
        )?;
        object_388.finish();
    }
    if let Some(var_389) = &input.share_point_configuration {
        let mut object_390 = object.key("SharePointConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_share_point_configuration(
            &mut object_390,
            var_389,
        )?;
        object_390.finish();
    }
    if let Some(var_391) = &input.database_configuration {
        let mut object_392 = object.key("DatabaseConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_database_configuration(
            &mut object_392,
            var_391,
        )?;
        object_392.finish();
    }
    if let Some(var_393) = &input.salesforce_configuration {
        let mut object_394 = object.key("SalesforceConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_salesforce_configuration(
            &mut object_394,
            var_393,
        )?;
        object_394.finish();
    }
    if let Some(var_395) = &input.one_drive_configuration {
        let mut object_396 = object.key("OneDriveConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_one_drive_configuration(
            &mut object_396,
            var_395,
        )?;
        object_396.finish();
    }
    if let Some(var_397) = &input.service_now_configuration {
        let mut object_398 = object.key("ServiceNowConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_service_now_configuration(
            &mut object_398,
            var_397,
        )?;
        object_398.finish();
    }
    if let Some(var_399) = &input.confluence_configuration {
        let mut object_400 = object.key("ConfluenceConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_confluence_configuration(
            &mut object_400,
            var_399,
        )?;
        object_400.finish();
    }
    if let Some(var_401) = &input.google_drive_configuration {
        let mut object_402 = object.key("GoogleDriveConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_google_drive_configuration(
            &mut object_402,
            var_401,
        )?;
        object_402.finish();
    }
    if let Some(var_403) = &input.web_crawler_configuration {
        let mut object_404 = object.key("WebCrawlerConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_web_crawler_configuration(
            &mut object_404,
            var_403,
        )?;
        object_404.finish();
    }
    if let Some(var_405) = &input.work_docs_configuration {
        let mut object_406 = object.key("WorkDocsConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_work_docs_configuration(
            &mut object_406,
            var_405,
        )?;
        object_406.finish();
    }
    if let Some(var_407) = &input.fsx_configuration {
        let mut object_408 = object.key("FsxConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_fsx_configuration(
            &mut object_408,
            var_407,
        )?;
        object_408.finish();
    }
    if let Some(var_409) = &input.slack_configuration {
        let mut object_410 = object.key("SlackConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_slack_configuration(
            &mut object_410,
            var_409,
        )?;
        object_410.finish();
    }
    if let Some(var_411) = &input.box_configuration {
        let mut object_412 = object.key("BoxConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_box_configuration(
            &mut object_412,
            var_411,
        )?;
        object_412.finish();
    }
    if let Some(var_413) = &input.quip_configuration {
        let mut object_414 = object.key("QuipConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_quip_configuration(
            &mut object_414,
            var_413,
        )?;
        object_414.finish();
    }
    if let Some(var_415) = &input.jira_configuration {
        let mut object_416 = object.key("JiraConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_jira_configuration(
            &mut object_416,
            var_415,
        )?;
        object_416.finish();
    }
    if let Some(var_417) = &input.git_hub_configuration {
        let mut object_418 = object.key("GitHubConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_git_hub_configuration(
            &mut object_418,
            var_417,
        )?;
        object_418.finish();
    }
    if let Some(var_419) = &input.alfresco_configuration {
        let mut object_420 = object.key("AlfrescoConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_alfresco_configuration(
            &mut object_420,
            var_419,
        )?;
        object_420.finish();
    }
    if let Some(var_421) = &input.template_configuration {
        let mut object_422 = object.key("TemplateConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_template_configuration(
            &mut object_422,
            var_421,
        )?;
        object_422.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_source_vpc_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataSourceVpcConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_423) = &input.subnet_ids {
        let mut array_424 = object.key("SubnetIds").start_array();
        for item_425 in var_423 {
            {
                array_424.value().string(item_425.as_str());
            }
        }
        array_424.finish();
    }
    if let Some(var_426) = &input.security_group_ids {
        let mut array_427 = object.key("SecurityGroupIds").start_array();
        for item_428 in var_426 {
            {
                array_427.value().string(item_428.as_str());
            }
        }
        array_427.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tag(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tag,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_429) = &input.key {
        object.key("Key").string(var_429.as_str());
    }
    if let Some(var_430) = &input.value {
        object.key("Value").string(var_430.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_experience_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ExperienceConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_431) = &input.content_source_configuration {
        let mut object_432 = object.key("ContentSourceConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_content_source_configuration(
            &mut object_432,
            var_431,
        )?;
        object_432.finish();
    }
    if let Some(var_433) = &input.user_identity_configuration {
        let mut object_434 = object.key("UserIdentityConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_user_identity_configuration(
            &mut object_434,
            var_433,
        )?;
        object_434.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_path(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3Path,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_435) = &input.bucket {
        object.key("Bucket").string(var_435.as_str());
    }
    if let Some(var_436) = &input.key {
        object.key("Key").string(var_436.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_server_side_encryption_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ServerSideEncryptionConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_437) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_437.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_user_token_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UserTokenConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_438) = &input.jwt_token_type_configuration {
        let mut object_439 = object.key("JwtTokenTypeConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_jwt_token_type_configuration(
            &mut object_439,
            var_438,
        )?;
        object_439.finish();
    }
    if let Some(var_440) = &input.json_token_type_configuration {
        let mut object_441 = object.key("JsonTokenTypeConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_json_token_type_configuration(
            &mut object_441,
            var_440,
        )?;
        object_441.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_user_group_resolution_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UserGroupResolutionConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_442) = &input.user_group_resolution_mode {
        object
            .key("UserGroupResolutionMode")
            .string(var_442.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_time_range(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TimeRange,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_443) = &input.start_time {
        object
            .key("StartTime")
            .date_time(var_443, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_444) = &input.end_time {
        object
            .key("EndTime")
            .date_time(var_444, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_model_group_members(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GroupMembers,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_445) = &input.member_groups {
        let mut array_446 = object.key("MemberGroups").start_array();
        for item_447 in var_445 {
            {
                let mut object_448 = array_446.value().start_object();
                crate::json_ser::serialize_structure_crate_model_member_group(
                    &mut object_448,
                    item_447,
                )?;
                object_448.finish();
            }
        }
        array_446.finish();
    }
    if let Some(var_449) = &input.member_users {
        let mut array_450 = object.key("MemberUsers").start_array();
        for item_451 in var_449 {
            {
                let mut object_452 = array_450.value().start_object();
                crate::json_ser::serialize_structure_crate_model_member_user(
                    &mut object_452,
                    item_451,
                )?;
                object_452.finish();
            }
        }
        array_450.finish();
    }
    if let Some(var_453) = &input.s3_pathfor_group_members {
        let mut object_454 = object.key("S3PathforGroupMembers").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_path(&mut object_454, var_453)?;
        object_454.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_attribute_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AttributeFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_455) = &input.and_all_filters {
        let mut array_456 = object.key("AndAllFilters").start_array();
        for item_457 in var_455 {
            {
                let mut object_458 = array_456.value().start_object();
                crate::json_ser::serialize_structure_crate_model_attribute_filter(
                    &mut object_458,
                    item_457,
                )?;
                object_458.finish();
            }
        }
        array_456.finish();
    }
    if let Some(var_459) = &input.or_all_filters {
        let mut array_460 = object.key("OrAllFilters").start_array();
        for item_461 in var_459 {
            {
                let mut object_462 = array_460.value().start_object();
                crate::json_ser::serialize_structure_crate_model_attribute_filter(
                    &mut object_462,
                    item_461,
                )?;
                object_462.finish();
            }
        }
        array_460.finish();
    }
    if let Some(var_463) = &input.not_filter {
        let mut object_464 = object.key("NotFilter").start_object();
        crate::json_ser::serialize_structure_crate_model_attribute_filter(
            &mut object_464,
            var_463,
        )?;
        object_464.finish();
    }
    if let Some(var_465) = &input.equals_to {
        let mut object_466 = object.key("EqualsTo").start_object();
        crate::json_ser::serialize_structure_crate_model_document_attribute(
            &mut object_466,
            var_465,
        )?;
        object_466.finish();
    }
    if let Some(var_467) = &input.contains_all {
        let mut object_468 = object.key("ContainsAll").start_object();
        crate::json_ser::serialize_structure_crate_model_document_attribute(
            &mut object_468,
            var_467,
        )?;
        object_468.finish();
    }
    if let Some(var_469) = &input.contains_any {
        let mut object_470 = object.key("ContainsAny").start_object();
        crate::json_ser::serialize_structure_crate_model_document_attribute(
            &mut object_470,
            var_469,
        )?;
        object_470.finish();
    }
    if let Some(var_471) = &input.greater_than {
        let mut object_472 = object.key("GreaterThan").start_object();
        crate::json_ser::serialize_structure_crate_model_document_attribute(
            &mut object_472,
            var_471,
        )?;
        object_472.finish();
    }
    if let Some(var_473) = &input.greater_than_or_equals {
        let mut object_474 = object.key("GreaterThanOrEquals").start_object();
        crate::json_ser::serialize_structure_crate_model_document_attribute(
            &mut object_474,
            var_473,
        )?;
        object_474.finish();
    }
    if let Some(var_475) = &input.less_than {
        let mut object_476 = object.key("LessThan").start_object();
        crate::json_ser::serialize_structure_crate_model_document_attribute(
            &mut object_476,
            var_475,
        )?;
        object_476.finish();
    }
    if let Some(var_477) = &input.less_than_or_equals {
        let mut object_478 = object.key("LessThanOrEquals").start_object();
        crate::json_ser::serialize_structure_crate_model_document_attribute(
            &mut object_478,
            var_477,
        )?;
        object_478.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_facet(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Facet,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_479) = &input.document_attribute_key {
        object.key("DocumentAttributeKey").string(var_479.as_str());
    }
    if let Some(var_480) = &input.facets {
        let mut array_481 = object.key("Facets").start_array();
        for item_482 in var_480 {
            {
                let mut object_483 = array_481.value().start_object();
                crate::json_ser::serialize_structure_crate_model_facet(&mut object_483, item_482)?;
                object_483.finish();
            }
        }
        array_481.finish();
    }
    if input.max_results != 0 {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_results).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_document_relevance_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DocumentRelevanceConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_484) = &input.name {
        object.key("Name").string(var_484.as_str());
    }
    if let Some(var_485) = &input.relevance {
        let mut object_486 = object.key("Relevance").start_object();
        crate::json_ser::serialize_structure_crate_model_relevance(&mut object_486, var_485)?;
        object_486.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sorting_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SortingConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_487) = &input.document_attribute_key {
        object.key("DocumentAttributeKey").string(var_487.as_str());
    }
    if let Some(var_488) = &input.sort_order {
        object.key("SortOrder").string(var_488.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_user_context(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UserContext,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_489) = &input.token {
        object.key("Token").string(var_489.as_str());
    }
    if let Some(var_490) = &input.user_id {
        object.key("UserId").string(var_490.as_str());
    }
    if let Some(var_491) = &input.groups {
        let mut array_492 = object.key("Groups").start_array();
        for item_493 in var_491 {
            {
                array_492.value().string(item_493.as_str());
            }
        }
        array_492.finish();
    }
    if let Some(var_494) = &input.data_source_groups {
        let mut array_495 = object.key("DataSourceGroups").start_array();
        for item_496 in var_494 {
            {
                let mut object_497 = array_495.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_group(
                    &mut object_497,
                    item_496,
                )?;
                object_497.finish();
            }
        }
        array_495.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_spell_correction_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SpellCorrectionConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object
            .key("IncludeQuerySpellCheckSuggestions")
            .boolean(input.include_query_spell_check_suggestions);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_click_feedback(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ClickFeedback,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_498) = &input.result_id {
        object.key("ResultId").string(var_498.as_str());
    }
    if let Some(var_499) = &input.click_time {
        object
            .key("ClickTime")
            .date_time(var_499, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_model_relevance_feedback(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RelevanceFeedback,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_500) = &input.result_id {
        object.key("ResultId").string(var_500.as_str());
    }
    if let Some(var_501) = &input.relevance_value {
        object.key("RelevanceValue").string(var_501.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_document_metadata_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DocumentMetadataConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_502) = &input.name {
        object.key("Name").string(var_502.as_str());
    }
    if let Some(var_503) = &input.r#type {
        object.key("Type").string(var_503.as_str());
    }
    if let Some(var_504) = &input.relevance {
        let mut object_505 = object.key("Relevance").start_object();
        crate::json_ser::serialize_structure_crate_model_relevance(&mut object_505, var_504)?;
        object_505.finish();
    }
    if let Some(var_506) = &input.search {
        let mut object_507 = object.key("Search").start_object();
        crate::json_ser::serialize_structure_crate_model_search(&mut object_507, var_506)?;
        object_507.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_capacity_units_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CapacityUnitsConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_508) = &input.storage_capacity_units {
        object.key("StorageCapacityUnits").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_508).into()),
        );
    }
    if let Some(var_509) = &input.query_capacity_units {
        object.key("QueryCapacityUnits").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_509).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_document_attribute(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DocumentAttribute,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_510) = &input.key {
        object.key("Key").string(var_510.as_str());
    }
    if let Some(var_511) = &input.value {
        let mut object_512 = object.key("Value").start_object();
        crate::json_ser::serialize_structure_crate_model_document_attribute_value(
            &mut object_512,
            var_511,
        )?;
        object_512.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_inline_custom_document_enrichment_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InlineCustomDocumentEnrichmentConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_513) = &input.condition {
        let mut object_514 = object.key("Condition").start_object();
        crate::json_ser::serialize_structure_crate_model_document_attribute_condition(
            &mut object_514,
            var_513,
        )?;
        object_514.finish();
    }
    if let Some(var_515) = &input.target {
        let mut object_516 = object.key("Target").start_object();
        crate::json_ser::serialize_structure_crate_model_document_attribute_target(
            &mut object_516,
            var_515,
        )?;
        object_516.finish();
    }
    if input.document_content_deletion {
        object
            .key("DocumentContentDeletion")
            .boolean(input.document_content_deletion);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_hook_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HookConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_517) = &input.invocation_condition {
        let mut object_518 = object.key("InvocationCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_document_attribute_condition(
            &mut object_518,
            var_517,
        )?;
        object_518.finish();
    }
    if let Some(var_519) = &input.lambda_arn {
        object.key("LambdaArn").string(var_519.as_str());
    }
    if let Some(var_520) = &input.s3_bucket {
        object.key("S3Bucket").string(var_520.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_data_source_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3DataSourceConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_521) = &input.bucket_name {
        object.key("BucketName").string(var_521.as_str());
    }
    if let Some(var_522) = &input.inclusion_prefixes {
        let mut array_523 = object.key("InclusionPrefixes").start_array();
        for item_524 in var_522 {
            {
                array_523.value().string(item_524.as_str());
            }
        }
        array_523.finish();
    }
    if let Some(var_525) = &input.inclusion_patterns {
        let mut array_526 = object.key("InclusionPatterns").start_array();
        for item_527 in var_525 {
            {
                array_526.value().string(item_527.as_str());
            }
        }
        array_526.finish();
    }
    if let Some(var_528) = &input.exclusion_patterns {
        let mut array_529 = object.key("ExclusionPatterns").start_array();
        for item_530 in var_528 {
            {
                array_529.value().string(item_530.as_str());
            }
        }
        array_529.finish();
    }
    if let Some(var_531) = &input.documents_metadata_configuration {
        let mut object_532 = object.key("DocumentsMetadataConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_documents_metadata_configuration(
            &mut object_532,
            var_531,
        )?;
        object_532.finish();
    }
    if let Some(var_533) = &input.access_control_list_configuration {
        let mut object_534 = object.key("AccessControlListConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_access_control_list_configuration(
            &mut object_534,
            var_533,
        )?;
        object_534.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_share_point_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SharePointConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_535) = &input.share_point_version {
        object.key("SharePointVersion").string(var_535.as_str());
    }
    if let Some(var_536) = &input.urls {
        let mut array_537 = object.key("Urls").start_array();
        for item_538 in var_536 {
            {
                array_537.value().string(item_538.as_str());
            }
        }
        array_537.finish();
    }
    if let Some(var_539) = &input.secret_arn {
        object.key("SecretArn").string(var_539.as_str());
    }
    if input.crawl_attachments {
        object
            .key("CrawlAttachments")
            .boolean(input.crawl_attachments);
    }
    if input.use_change_log {
        object.key("UseChangeLog").boolean(input.use_change_log);
    }
    if let Some(var_540) = &input.inclusion_patterns {
        let mut array_541 = object.key("InclusionPatterns").start_array();
        for item_542 in var_540 {
            {
                array_541.value().string(item_542.as_str());
            }
        }
        array_541.finish();
    }
    if let Some(var_543) = &input.exclusion_patterns {
        let mut array_544 = object.key("ExclusionPatterns").start_array();
        for item_545 in var_543 {
            {
                array_544.value().string(item_545.as_str());
            }
        }
        array_544.finish();
    }
    if let Some(var_546) = &input.vpc_configuration {
        let mut object_547 = object.key("VpcConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_data_source_vpc_configuration(
            &mut object_547,
            var_546,
        )?;
        object_547.finish();
    }
    if let Some(var_548) = &input.field_mappings {
        let mut array_549 = object.key("FieldMappings").start_array();
        for item_550 in var_548 {
            {
                let mut object_551 = array_549.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_551, item_550)?;
                object_551.finish();
            }
        }
        array_549.finish();
    }
    if let Some(var_552) = &input.document_title_field_name {
        object
            .key("DocumentTitleFieldName")
            .string(var_552.as_str());
    }
    if input.disable_local_groups {
        object
            .key("DisableLocalGroups")
            .boolean(input.disable_local_groups);
    }
    if let Some(var_553) = &input.ssl_certificate_s3_path {
        let mut object_554 = object.key("SslCertificateS3Path").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_path(&mut object_554, var_553)?;
        object_554.finish();
    }
    if let Some(var_555) = &input.authentication_type {
        object.key("AuthenticationType").string(var_555.as_str());
    }
    if let Some(var_556) = &input.proxy_configuration {
        let mut object_557 = object.key("ProxyConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_proxy_configuration(
            &mut object_557,
            var_556,
        )?;
        object_557.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_database_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DatabaseConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_558) = &input.database_engine_type {
        object.key("DatabaseEngineType").string(var_558.as_str());
    }
    if let Some(var_559) = &input.connection_configuration {
        let mut object_560 = object.key("ConnectionConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_connection_configuration(
            &mut object_560,
            var_559,
        )?;
        object_560.finish();
    }
    if let Some(var_561) = &input.vpc_configuration {
        let mut object_562 = object.key("VpcConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_data_source_vpc_configuration(
            &mut object_562,
            var_561,
        )?;
        object_562.finish();
    }
    if let Some(var_563) = &input.column_configuration {
        let mut object_564 = object.key("ColumnConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_column_configuration(
            &mut object_564,
            var_563,
        )?;
        object_564.finish();
    }
    if let Some(var_565) = &input.acl_configuration {
        let mut object_566 = object.key("AclConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_acl_configuration(
            &mut object_566,
            var_565,
        )?;
        object_566.finish();
    }
    if let Some(var_567) = &input.sql_configuration {
        let mut object_568 = object.key("SqlConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_sql_configuration(
            &mut object_568,
            var_567,
        )?;
        object_568.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_salesforce_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SalesforceConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_569) = &input.server_url {
        object.key("ServerUrl").string(var_569.as_str());
    }
    if let Some(var_570) = &input.secret_arn {
        object.key("SecretArn").string(var_570.as_str());
    }
    if let Some(var_571) = &input.standard_object_configurations {
        let mut array_572 = object.key("StandardObjectConfigurations").start_array();
        for item_573 in var_571 {
            {
                let mut object_574 = array_572.value().start_object();
                crate::json_ser::serialize_structure_crate_model_salesforce_standard_object_configuration(&mut object_574, item_573)?;
                object_574.finish();
            }
        }
        array_572.finish();
    }
    if let Some(var_575) = &input.knowledge_article_configuration {
        let mut object_576 = object.key("KnowledgeArticleConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_salesforce_knowledge_article_configuration(&mut object_576, var_575)?;
        object_576.finish();
    }
    if let Some(var_577) = &input.chatter_feed_configuration {
        let mut object_578 = object.key("ChatterFeedConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_salesforce_chatter_feed_configuration(
            &mut object_578,
            var_577,
        )?;
        object_578.finish();
    }
    if input.crawl_attachments {
        object
            .key("CrawlAttachments")
            .boolean(input.crawl_attachments);
    }
    if let Some(var_579) = &input.standard_object_attachment_configuration {
        let mut object_580 = object
            .key("StandardObjectAttachmentConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_salesforce_standard_object_attachment_configuration(&mut object_580, var_579)?;
        object_580.finish();
    }
    if let Some(var_581) = &input.include_attachment_file_patterns {
        let mut array_582 = object.key("IncludeAttachmentFilePatterns").start_array();
        for item_583 in var_581 {
            {
                array_582.value().string(item_583.as_str());
            }
        }
        array_582.finish();
    }
    if let Some(var_584) = &input.exclude_attachment_file_patterns {
        let mut array_585 = object.key("ExcludeAttachmentFilePatterns").start_array();
        for item_586 in var_584 {
            {
                array_585.value().string(item_586.as_str());
            }
        }
        array_585.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_one_drive_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OneDriveConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_587) = &input.tenant_domain {
        object.key("TenantDomain").string(var_587.as_str());
    }
    if let Some(var_588) = &input.secret_arn {
        object.key("SecretArn").string(var_588.as_str());
    }
    if let Some(var_589) = &input.one_drive_users {
        let mut object_590 = object.key("OneDriveUsers").start_object();
        crate::json_ser::serialize_structure_crate_model_one_drive_users(&mut object_590, var_589)?;
        object_590.finish();
    }
    if let Some(var_591) = &input.inclusion_patterns {
        let mut array_592 = object.key("InclusionPatterns").start_array();
        for item_593 in var_591 {
            {
                array_592.value().string(item_593.as_str());
            }
        }
        array_592.finish();
    }
    if let Some(var_594) = &input.exclusion_patterns {
        let mut array_595 = object.key("ExclusionPatterns").start_array();
        for item_596 in var_594 {
            {
                array_595.value().string(item_596.as_str());
            }
        }
        array_595.finish();
    }
    if let Some(var_597) = &input.field_mappings {
        let mut array_598 = object.key("FieldMappings").start_array();
        for item_599 in var_597 {
            {
                let mut object_600 = array_598.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_600, item_599)?;
                object_600.finish();
            }
        }
        array_598.finish();
    }
    if input.disable_local_groups {
        object
            .key("DisableLocalGroups")
            .boolean(input.disable_local_groups);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_service_now_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ServiceNowConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_601) = &input.host_url {
        object.key("HostUrl").string(var_601.as_str());
    }
    if let Some(var_602) = &input.secret_arn {
        object.key("SecretArn").string(var_602.as_str());
    }
    if let Some(var_603) = &input.service_now_build_version {
        object
            .key("ServiceNowBuildVersion")
            .string(var_603.as_str());
    }
    if let Some(var_604) = &input.knowledge_article_configuration {
        let mut object_605 = object.key("KnowledgeArticleConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_service_now_knowledge_article_configuration(&mut object_605, var_604)?;
        object_605.finish();
    }
    if let Some(var_606) = &input.service_catalog_configuration {
        let mut object_607 = object.key("ServiceCatalogConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_service_now_service_catalog_configuration(
            &mut object_607,
            var_606,
        )?;
        object_607.finish();
    }
    if let Some(var_608) = &input.authentication_type {
        object.key("AuthenticationType").string(var_608.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_confluence_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConfluenceConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_609) = &input.server_url {
        object.key("ServerUrl").string(var_609.as_str());
    }
    if let Some(var_610) = &input.secret_arn {
        object.key("SecretArn").string(var_610.as_str());
    }
    if let Some(var_611) = &input.version {
        object.key("Version").string(var_611.as_str());
    }
    if let Some(var_612) = &input.space_configuration {
        let mut object_613 = object.key("SpaceConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_confluence_space_configuration(
            &mut object_613,
            var_612,
        )?;
        object_613.finish();
    }
    if let Some(var_614) = &input.page_configuration {
        let mut object_615 = object.key("PageConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_confluence_page_configuration(
            &mut object_615,
            var_614,
        )?;
        object_615.finish();
    }
    if let Some(var_616) = &input.blog_configuration {
        let mut object_617 = object.key("BlogConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_confluence_blog_configuration(
            &mut object_617,
            var_616,
        )?;
        object_617.finish();
    }
    if let Some(var_618) = &input.attachment_configuration {
        let mut object_619 = object.key("AttachmentConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_confluence_attachment_configuration(
            &mut object_619,
            var_618,
        )?;
        object_619.finish();
    }
    if let Some(var_620) = &input.vpc_configuration {
        let mut object_621 = object.key("VpcConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_data_source_vpc_configuration(
            &mut object_621,
            var_620,
        )?;
        object_621.finish();
    }
    if let Some(var_622) = &input.inclusion_patterns {
        let mut array_623 = object.key("InclusionPatterns").start_array();
        for item_624 in var_622 {
            {
                array_623.value().string(item_624.as_str());
            }
        }
        array_623.finish();
    }
    if let Some(var_625) = &input.exclusion_patterns {
        let mut array_626 = object.key("ExclusionPatterns").start_array();
        for item_627 in var_625 {
            {
                array_626.value().string(item_627.as_str());
            }
        }
        array_626.finish();
    }
    if let Some(var_628) = &input.proxy_configuration {
        let mut object_629 = object.key("ProxyConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_proxy_configuration(
            &mut object_629,
            var_628,
        )?;
        object_629.finish();
    }
    if let Some(var_630) = &input.authentication_type {
        object.key("AuthenticationType").string(var_630.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_google_drive_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GoogleDriveConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_631) = &input.secret_arn {
        object.key("SecretArn").string(var_631.as_str());
    }
    if let Some(var_632) = &input.inclusion_patterns {
        let mut array_633 = object.key("InclusionPatterns").start_array();
        for item_634 in var_632 {
            {
                array_633.value().string(item_634.as_str());
            }
        }
        array_633.finish();
    }
    if let Some(var_635) = &input.exclusion_patterns {
        let mut array_636 = object.key("ExclusionPatterns").start_array();
        for item_637 in var_635 {
            {
                array_636.value().string(item_637.as_str());
            }
        }
        array_636.finish();
    }
    if let Some(var_638) = &input.field_mappings {
        let mut array_639 = object.key("FieldMappings").start_array();
        for item_640 in var_638 {
            {
                let mut object_641 = array_639.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_641, item_640)?;
                object_641.finish();
            }
        }
        array_639.finish();
    }
    if let Some(var_642) = &input.exclude_mime_types {
        let mut array_643 = object.key("ExcludeMimeTypes").start_array();
        for item_644 in var_642 {
            {
                array_643.value().string(item_644.as_str());
            }
        }
        array_643.finish();
    }
    if let Some(var_645) = &input.exclude_user_accounts {
        let mut array_646 = object.key("ExcludeUserAccounts").start_array();
        for item_647 in var_645 {
            {
                array_646.value().string(item_647.as_str());
            }
        }
        array_646.finish();
    }
    if let Some(var_648) = &input.exclude_shared_drives {
        let mut array_649 = object.key("ExcludeSharedDrives").start_array();
        for item_650 in var_648 {
            {
                array_649.value().string(item_650.as_str());
            }
        }
        array_649.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_web_crawler_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::WebCrawlerConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_651) = &input.urls {
        let mut object_652 = object.key("Urls").start_object();
        crate::json_ser::serialize_structure_crate_model_urls(&mut object_652, var_651)?;
        object_652.finish();
    }
    if let Some(var_653) = &input.crawl_depth {
        object.key("CrawlDepth").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_653).into()),
        );
    }
    if let Some(var_654) = &input.max_links_per_page {
        object.key("MaxLinksPerPage").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_654).into()),
        );
    }
    if let Some(var_655) = &input.max_content_size_per_page_in_mega_bytes {
        object.key("MaxContentSizePerPageInMegaBytes").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_655).into()),
        );
    }
    if let Some(var_656) = &input.max_urls_per_minute_crawl_rate {
        object.key("MaxUrlsPerMinuteCrawlRate").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_656).into()),
        );
    }
    if let Some(var_657) = &input.url_inclusion_patterns {
        let mut array_658 = object.key("UrlInclusionPatterns").start_array();
        for item_659 in var_657 {
            {
                array_658.value().string(item_659.as_str());
            }
        }
        array_658.finish();
    }
    if let Some(var_660) = &input.url_exclusion_patterns {
        let mut array_661 = object.key("UrlExclusionPatterns").start_array();
        for item_662 in var_660 {
            {
                array_661.value().string(item_662.as_str());
            }
        }
        array_661.finish();
    }
    if let Some(var_663) = &input.proxy_configuration {
        let mut object_664 = object.key("ProxyConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_proxy_configuration(
            &mut object_664,
            var_663,
        )?;
        object_664.finish();
    }
    if let Some(var_665) = &input.authentication_configuration {
        let mut object_666 = object.key("AuthenticationConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_authentication_configuration(
            &mut object_666,
            var_665,
        )?;
        object_666.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_work_docs_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::WorkDocsConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_667) = &input.organization_id {
        object.key("OrganizationId").string(var_667.as_str());
    }
    if input.crawl_comments {
        object.key("CrawlComments").boolean(input.crawl_comments);
    }
    if input.use_change_log {
        object.key("UseChangeLog").boolean(input.use_change_log);
    }
    if let Some(var_668) = &input.inclusion_patterns {
        let mut array_669 = object.key("InclusionPatterns").start_array();
        for item_670 in var_668 {
            {
                array_669.value().string(item_670.as_str());
            }
        }
        array_669.finish();
    }
    if let Some(var_671) = &input.exclusion_patterns {
        let mut array_672 = object.key("ExclusionPatterns").start_array();
        for item_673 in var_671 {
            {
                array_672.value().string(item_673.as_str());
            }
        }
        array_672.finish();
    }
    if let Some(var_674) = &input.field_mappings {
        let mut array_675 = object.key("FieldMappings").start_array();
        for item_676 in var_674 {
            {
                let mut object_677 = array_675.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_677, item_676)?;
                object_677.finish();
            }
        }
        array_675.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_fsx_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FsxConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_678) = &input.file_system_id {
        object.key("FileSystemId").string(var_678.as_str());
    }
    if let Some(var_679) = &input.file_system_type {
        object.key("FileSystemType").string(var_679.as_str());
    }
    if let Some(var_680) = &input.vpc_configuration {
        let mut object_681 = object.key("VpcConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_data_source_vpc_configuration(
            &mut object_681,
            var_680,
        )?;
        object_681.finish();
    }
    if let Some(var_682) = &input.secret_arn {
        object.key("SecretArn").string(var_682.as_str());
    }
    if let Some(var_683) = &input.inclusion_patterns {
        let mut array_684 = object.key("InclusionPatterns").start_array();
        for item_685 in var_683 {
            {
                array_684.value().string(item_685.as_str());
            }
        }
        array_684.finish();
    }
    if let Some(var_686) = &input.exclusion_patterns {
        let mut array_687 = object.key("ExclusionPatterns").start_array();
        for item_688 in var_686 {
            {
                array_687.value().string(item_688.as_str());
            }
        }
        array_687.finish();
    }
    if let Some(var_689) = &input.field_mappings {
        let mut array_690 = object.key("FieldMappings").start_array();
        for item_691 in var_689 {
            {
                let mut object_692 = array_690.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_692, item_691)?;
                object_692.finish();
            }
        }
        array_690.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_slack_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SlackConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_693) = &input.team_id {
        object.key("TeamId").string(var_693.as_str());
    }
    if let Some(var_694) = &input.secret_arn {
        object.key("SecretArn").string(var_694.as_str());
    }
    if let Some(var_695) = &input.vpc_configuration {
        let mut object_696 = object.key("VpcConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_data_source_vpc_configuration(
            &mut object_696,
            var_695,
        )?;
        object_696.finish();
    }
    if let Some(var_697) = &input.slack_entity_list {
        let mut array_698 = object.key("SlackEntityList").start_array();
        for item_699 in var_697 {
            {
                array_698.value().string(item_699.as_str());
            }
        }
        array_698.finish();
    }
    if input.use_change_log {
        object.key("UseChangeLog").boolean(input.use_change_log);
    }
    if input.crawl_bot_message {
        object
            .key("CrawlBotMessage")
            .boolean(input.crawl_bot_message);
    }
    if input.exclude_archived {
        object
            .key("ExcludeArchived")
            .boolean(input.exclude_archived);
    }
    if let Some(var_700) = &input.since_crawl_date {
        object.key("SinceCrawlDate").string(var_700.as_str());
    }
    if let Some(var_701) = &input.look_back_period {
        object.key("LookBackPeriod").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_701).into()),
        );
    }
    if let Some(var_702) = &input.private_channel_filter {
        let mut array_703 = object.key("PrivateChannelFilter").start_array();
        for item_704 in var_702 {
            {
                array_703.value().string(item_704.as_str());
            }
        }
        array_703.finish();
    }
    if let Some(var_705) = &input.public_channel_filter {
        let mut array_706 = object.key("PublicChannelFilter").start_array();
        for item_707 in var_705 {
            {
                array_706.value().string(item_707.as_str());
            }
        }
        array_706.finish();
    }
    if let Some(var_708) = &input.inclusion_patterns {
        let mut array_709 = object.key("InclusionPatterns").start_array();
        for item_710 in var_708 {
            {
                array_709.value().string(item_710.as_str());
            }
        }
        array_709.finish();
    }
    if let Some(var_711) = &input.exclusion_patterns {
        let mut array_712 = object.key("ExclusionPatterns").start_array();
        for item_713 in var_711 {
            {
                array_712.value().string(item_713.as_str());
            }
        }
        array_712.finish();
    }
    if let Some(var_714) = &input.field_mappings {
        let mut array_715 = object.key("FieldMappings").start_array();
        for item_716 in var_714 {
            {
                let mut object_717 = array_715.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_717, item_716)?;
                object_717.finish();
            }
        }
        array_715.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_box_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BoxConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_718) = &input.enterprise_id {
        object.key("EnterpriseId").string(var_718.as_str());
    }
    if let Some(var_719) = &input.secret_arn {
        object.key("SecretArn").string(var_719.as_str());
    }
    if input.use_change_log {
        object.key("UseChangeLog").boolean(input.use_change_log);
    }
    if input.crawl_comments {
        object.key("CrawlComments").boolean(input.crawl_comments);
    }
    if input.crawl_tasks {
        object.key("CrawlTasks").boolean(input.crawl_tasks);
    }
    if input.crawl_web_links {
        object.key("CrawlWebLinks").boolean(input.crawl_web_links);
    }
    if let Some(var_720) = &input.file_field_mappings {
        let mut array_721 = object.key("FileFieldMappings").start_array();
        for item_722 in var_720 {
            {
                let mut object_723 = array_721.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_723, item_722)?;
                object_723.finish();
            }
        }
        array_721.finish();
    }
    if let Some(var_724) = &input.task_field_mappings {
        let mut array_725 = object.key("TaskFieldMappings").start_array();
        for item_726 in var_724 {
            {
                let mut object_727 = array_725.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_727, item_726)?;
                object_727.finish();
            }
        }
        array_725.finish();
    }
    if let Some(var_728) = &input.comment_field_mappings {
        let mut array_729 = object.key("CommentFieldMappings").start_array();
        for item_730 in var_728 {
            {
                let mut object_731 = array_729.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_731, item_730)?;
                object_731.finish();
            }
        }
        array_729.finish();
    }
    if let Some(var_732) = &input.web_link_field_mappings {
        let mut array_733 = object.key("WebLinkFieldMappings").start_array();
        for item_734 in var_732 {
            {
                let mut object_735 = array_733.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_735, item_734)?;
                object_735.finish();
            }
        }
        array_733.finish();
    }
    if let Some(var_736) = &input.inclusion_patterns {
        let mut array_737 = object.key("InclusionPatterns").start_array();
        for item_738 in var_736 {
            {
                array_737.value().string(item_738.as_str());
            }
        }
        array_737.finish();
    }
    if let Some(var_739) = &input.exclusion_patterns {
        let mut array_740 = object.key("ExclusionPatterns").start_array();
        for item_741 in var_739 {
            {
                array_740.value().string(item_741.as_str());
            }
        }
        array_740.finish();
    }
    if let Some(var_742) = &input.vpc_configuration {
        let mut object_743 = object.key("VpcConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_data_source_vpc_configuration(
            &mut object_743,
            var_742,
        )?;
        object_743.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_quip_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::QuipConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_744) = &input.domain {
        object.key("Domain").string(var_744.as_str());
    }
    if let Some(var_745) = &input.secret_arn {
        object.key("SecretArn").string(var_745.as_str());
    }
    if input.crawl_file_comments {
        object
            .key("CrawlFileComments")
            .boolean(input.crawl_file_comments);
    }
    if input.crawl_chat_rooms {
        object.key("CrawlChatRooms").boolean(input.crawl_chat_rooms);
    }
    if input.crawl_attachments {
        object
            .key("CrawlAttachments")
            .boolean(input.crawl_attachments);
    }
    if let Some(var_746) = &input.folder_ids {
        let mut array_747 = object.key("FolderIds").start_array();
        for item_748 in var_746 {
            {
                array_747.value().string(item_748.as_str());
            }
        }
        array_747.finish();
    }
    if let Some(var_749) = &input.thread_field_mappings {
        let mut array_750 = object.key("ThreadFieldMappings").start_array();
        for item_751 in var_749 {
            {
                let mut object_752 = array_750.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_752, item_751)?;
                object_752.finish();
            }
        }
        array_750.finish();
    }
    if let Some(var_753) = &input.message_field_mappings {
        let mut array_754 = object.key("MessageFieldMappings").start_array();
        for item_755 in var_753 {
            {
                let mut object_756 = array_754.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_756, item_755)?;
                object_756.finish();
            }
        }
        array_754.finish();
    }
    if let Some(var_757) = &input.attachment_field_mappings {
        let mut array_758 = object.key("AttachmentFieldMappings").start_array();
        for item_759 in var_757 {
            {
                let mut object_760 = array_758.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_760, item_759)?;
                object_760.finish();
            }
        }
        array_758.finish();
    }
    if let Some(var_761) = &input.inclusion_patterns {
        let mut array_762 = object.key("InclusionPatterns").start_array();
        for item_763 in var_761 {
            {
                array_762.value().string(item_763.as_str());
            }
        }
        array_762.finish();
    }
    if let Some(var_764) = &input.exclusion_patterns {
        let mut array_765 = object.key("ExclusionPatterns").start_array();
        for item_766 in var_764 {
            {
                array_765.value().string(item_766.as_str());
            }
        }
        array_765.finish();
    }
    if let Some(var_767) = &input.vpc_configuration {
        let mut object_768 = object.key("VpcConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_data_source_vpc_configuration(
            &mut object_768,
            var_767,
        )?;
        object_768.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_jira_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JiraConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_769) = &input.jira_account_url {
        object.key("JiraAccountUrl").string(var_769.as_str());
    }
    if let Some(var_770) = &input.secret_arn {
        object.key("SecretArn").string(var_770.as_str());
    }
    if input.use_change_log {
        object.key("UseChangeLog").boolean(input.use_change_log);
    }
    if let Some(var_771) = &input.project {
        let mut array_772 = object.key("Project").start_array();
        for item_773 in var_771 {
            {
                array_772.value().string(item_773.as_str());
            }
        }
        array_772.finish();
    }
    if let Some(var_774) = &input.issue_type {
        let mut array_775 = object.key("IssueType").start_array();
        for item_776 in var_774 {
            {
                array_775.value().string(item_776.as_str());
            }
        }
        array_775.finish();
    }
    if let Some(var_777) = &input.status {
        let mut array_778 = object.key("Status").start_array();
        for item_779 in var_777 {
            {
                array_778.value().string(item_779.as_str());
            }
        }
        array_778.finish();
    }
    if let Some(var_780) = &input.issue_sub_entity_filter {
        let mut array_781 = object.key("IssueSubEntityFilter").start_array();
        for item_782 in var_780 {
            {
                array_781.value().string(item_782.as_str());
            }
        }
        array_781.finish();
    }
    if let Some(var_783) = &input.attachment_field_mappings {
        let mut array_784 = object.key("AttachmentFieldMappings").start_array();
        for item_785 in var_783 {
            {
                let mut object_786 = array_784.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_786, item_785)?;
                object_786.finish();
            }
        }
        array_784.finish();
    }
    if let Some(var_787) = &input.comment_field_mappings {
        let mut array_788 = object.key("CommentFieldMappings").start_array();
        for item_789 in var_787 {
            {
                let mut object_790 = array_788.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_790, item_789)?;
                object_790.finish();
            }
        }
        array_788.finish();
    }
    if let Some(var_791) = &input.issue_field_mappings {
        let mut array_792 = object.key("IssueFieldMappings").start_array();
        for item_793 in var_791 {
            {
                let mut object_794 = array_792.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_794, item_793)?;
                object_794.finish();
            }
        }
        array_792.finish();
    }
    if let Some(var_795) = &input.project_field_mappings {
        let mut array_796 = object.key("ProjectFieldMappings").start_array();
        for item_797 in var_795 {
            {
                let mut object_798 = array_796.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_798, item_797)?;
                object_798.finish();
            }
        }
        array_796.finish();
    }
    if let Some(var_799) = &input.work_log_field_mappings {
        let mut array_800 = object.key("WorkLogFieldMappings").start_array();
        for item_801 in var_799 {
            {
                let mut object_802 = array_800.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_802, item_801)?;
                object_802.finish();
            }
        }
        array_800.finish();
    }
    if let Some(var_803) = &input.inclusion_patterns {
        let mut array_804 = object.key("InclusionPatterns").start_array();
        for item_805 in var_803 {
            {
                array_804.value().string(item_805.as_str());
            }
        }
        array_804.finish();
    }
    if let Some(var_806) = &input.exclusion_patterns {
        let mut array_807 = object.key("ExclusionPatterns").start_array();
        for item_808 in var_806 {
            {
                array_807.value().string(item_808.as_str());
            }
        }
        array_807.finish();
    }
    if let Some(var_809) = &input.vpc_configuration {
        let mut object_810 = object.key("VpcConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_data_source_vpc_configuration(
            &mut object_810,
            var_809,
        )?;
        object_810.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_git_hub_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GitHubConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_811) = &input.saa_s_configuration {
        let mut object_812 = object.key("SaaSConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_saa_s_configuration(
            &mut object_812,
            var_811,
        )?;
        object_812.finish();
    }
    if let Some(var_813) = &input.on_premise_configuration {
        let mut object_814 = object.key("OnPremiseConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_on_premise_configuration(
            &mut object_814,
            var_813,
        )?;
        object_814.finish();
    }
    if let Some(var_815) = &input.r#type {
        object.key("Type").string(var_815.as_str());
    }
    if let Some(var_816) = &input.secret_arn {
        object.key("SecretArn").string(var_816.as_str());
    }
    if input.use_change_log {
        object.key("UseChangeLog").boolean(input.use_change_log);
    }
    if let Some(var_817) = &input.git_hub_document_crawl_properties {
        let mut object_818 = object.key("GitHubDocumentCrawlProperties").start_object();
        crate::json_ser::serialize_structure_crate_model_git_hub_document_crawl_properties(
            &mut object_818,
            var_817,
        )?;
        object_818.finish();
    }
    if let Some(var_819) = &input.repository_filter {
        let mut array_820 = object.key("RepositoryFilter").start_array();
        for item_821 in var_819 {
            {
                array_820.value().string(item_821.as_str());
            }
        }
        array_820.finish();
    }
    if let Some(var_822) = &input.inclusion_folder_name_patterns {
        let mut array_823 = object.key("InclusionFolderNamePatterns").start_array();
        for item_824 in var_822 {
            {
                array_823.value().string(item_824.as_str());
            }
        }
        array_823.finish();
    }
    if let Some(var_825) = &input.inclusion_file_type_patterns {
        let mut array_826 = object.key("InclusionFileTypePatterns").start_array();
        for item_827 in var_825 {
            {
                array_826.value().string(item_827.as_str());
            }
        }
        array_826.finish();
    }
    if let Some(var_828) = &input.inclusion_file_name_patterns {
        let mut array_829 = object.key("InclusionFileNamePatterns").start_array();
        for item_830 in var_828 {
            {
                array_829.value().string(item_830.as_str());
            }
        }
        array_829.finish();
    }
    if let Some(var_831) = &input.exclusion_folder_name_patterns {
        let mut array_832 = object.key("ExclusionFolderNamePatterns").start_array();
        for item_833 in var_831 {
            {
                array_832.value().string(item_833.as_str());
            }
        }
        array_832.finish();
    }
    if let Some(var_834) = &input.exclusion_file_type_patterns {
        let mut array_835 = object.key("ExclusionFileTypePatterns").start_array();
        for item_836 in var_834 {
            {
                array_835.value().string(item_836.as_str());
            }
        }
        array_835.finish();
    }
    if let Some(var_837) = &input.exclusion_file_name_patterns {
        let mut array_838 = object.key("ExclusionFileNamePatterns").start_array();
        for item_839 in var_837 {
            {
                array_838.value().string(item_839.as_str());
            }
        }
        array_838.finish();
    }
    if let Some(var_840) = &input.vpc_configuration {
        let mut object_841 = object.key("VpcConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_data_source_vpc_configuration(
            &mut object_841,
            var_840,
        )?;
        object_841.finish();
    }
    if let Some(var_842) = &input.git_hub_repository_configuration_field_mappings {
        let mut array_843 = object
            .key("GitHubRepositoryConfigurationFieldMappings")
            .start_array();
        for item_844 in var_842 {
            {
                let mut object_845 = array_843.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_845, item_844)?;
                object_845.finish();
            }
        }
        array_843.finish();
    }
    if let Some(var_846) = &input.git_hub_commit_configuration_field_mappings {
        let mut array_847 = object
            .key("GitHubCommitConfigurationFieldMappings")
            .start_array();
        for item_848 in var_846 {
            {
                let mut object_849 = array_847.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_849, item_848)?;
                object_849.finish();
            }
        }
        array_847.finish();
    }
    if let Some(var_850) = &input.git_hub_issue_document_configuration_field_mappings {
        let mut array_851 = object
            .key("GitHubIssueDocumentConfigurationFieldMappings")
            .start_array();
        for item_852 in var_850 {
            {
                let mut object_853 = array_851.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_853, item_852)?;
                object_853.finish();
            }
        }
        array_851.finish();
    }
    if let Some(var_854) = &input.git_hub_issue_comment_configuration_field_mappings {
        let mut array_855 = object
            .key("GitHubIssueCommentConfigurationFieldMappings")
            .start_array();
        for item_856 in var_854 {
            {
                let mut object_857 = array_855.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_857, item_856)?;
                object_857.finish();
            }
        }
        array_855.finish();
    }
    if let Some(var_858) = &input.git_hub_issue_attachment_configuration_field_mappings {
        let mut array_859 = object
            .key("GitHubIssueAttachmentConfigurationFieldMappings")
            .start_array();
        for item_860 in var_858 {
            {
                let mut object_861 = array_859.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_861, item_860)?;
                object_861.finish();
            }
        }
        array_859.finish();
    }
    if let Some(var_862) = &input.git_hub_pull_request_comment_configuration_field_mappings {
        let mut array_863 = object
            .key("GitHubPullRequestCommentConfigurationFieldMappings")
            .start_array();
        for item_864 in var_862 {
            {
                let mut object_865 = array_863.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_865, item_864)?;
                object_865.finish();
            }
        }
        array_863.finish();
    }
    if let Some(var_866) = &input.git_hub_pull_request_document_configuration_field_mappings {
        let mut array_867 = object
            .key("GitHubPullRequestDocumentConfigurationFieldMappings")
            .start_array();
        for item_868 in var_866 {
            {
                let mut object_869 = array_867.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_869, item_868)?;
                object_869.finish();
            }
        }
        array_867.finish();
    }
    if let Some(var_870) =
        &input.git_hub_pull_request_document_attachment_configuration_field_mappings
    {
        let mut array_871 = object
            .key("GitHubPullRequestDocumentAttachmentConfigurationFieldMappings")
            .start_array();
        for item_872 in var_870 {
            {
                let mut object_873 = array_871.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_873, item_872)?;
                object_873.finish();
            }
        }
        array_871.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_alfresco_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AlfrescoConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_874) = &input.site_url {
        object.key("SiteUrl").string(var_874.as_str());
    }
    if let Some(var_875) = &input.site_id {
        object.key("SiteId").string(var_875.as_str());
    }
    if let Some(var_876) = &input.secret_arn {
        object.key("SecretArn").string(var_876.as_str());
    }
    if let Some(var_877) = &input.ssl_certificate_s3_path {
        let mut object_878 = object.key("SslCertificateS3Path").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_path(&mut object_878, var_877)?;
        object_878.finish();
    }
    if input.crawl_system_folders {
        object
            .key("CrawlSystemFolders")
            .boolean(input.crawl_system_folders);
    }
    if input.crawl_comments {
        object.key("CrawlComments").boolean(input.crawl_comments);
    }
    if let Some(var_879) = &input.entity_filter {
        let mut array_880 = object.key("EntityFilter").start_array();
        for item_881 in var_879 {
            {
                array_880.value().string(item_881.as_str());
            }
        }
        array_880.finish();
    }
    if let Some(var_882) = &input.document_library_field_mappings {
        let mut array_883 = object.key("DocumentLibraryFieldMappings").start_array();
        for item_884 in var_882 {
            {
                let mut object_885 = array_883.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_885, item_884)?;
                object_885.finish();
            }
        }
        array_883.finish();
    }
    if let Some(var_886) = &input.blog_field_mappings {
        let mut array_887 = object.key("BlogFieldMappings").start_array();
        for item_888 in var_886 {
            {
                let mut object_889 = array_887.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_889, item_888)?;
                object_889.finish();
            }
        }
        array_887.finish();
    }
    if let Some(var_890) = &input.wiki_field_mappings {
        let mut array_891 = object.key("WikiFieldMappings").start_array();
        for item_892 in var_890 {
            {
                let mut object_893 = array_891.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_893, item_892)?;
                object_893.finish();
            }
        }
        array_891.finish();
    }
    if let Some(var_894) = &input.inclusion_patterns {
        let mut array_895 = object.key("InclusionPatterns").start_array();
        for item_896 in var_894 {
            {
                array_895.value().string(item_896.as_str());
            }
        }
        array_895.finish();
    }
    if let Some(var_897) = &input.exclusion_patterns {
        let mut array_898 = object.key("ExclusionPatterns").start_array();
        for item_899 in var_897 {
            {
                array_898.value().string(item_899.as_str());
            }
        }
        array_898.finish();
    }
    if let Some(var_900) = &input.vpc_configuration {
        let mut object_901 = object.key("VpcConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_data_source_vpc_configuration(
            &mut object_901,
            var_900,
        )?;
        object_901.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_template_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TemplateConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_902) = &input.template {
        object.key("Template").document(var_902);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_content_source_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ContentSourceConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_903) = &input.data_source_ids {
        let mut array_904 = object.key("DataSourceIds").start_array();
        for item_905 in var_903 {
            {
                array_904.value().string(item_905.as_str());
            }
        }
        array_904.finish();
    }
    if let Some(var_906) = &input.faq_ids {
        let mut array_907 = object.key("FaqIds").start_array();
        for item_908 in var_906 {
            {
                array_907.value().string(item_908.as_str());
            }
        }
        array_907.finish();
    }
    if input.direct_put_content {
        object
            .key("DirectPutContent")
            .boolean(input.direct_put_content);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_user_identity_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UserIdentityConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_909) = &input.identity_attribute_name {
        object.key("IdentityAttributeName").string(var_909.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_jwt_token_type_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JwtTokenTypeConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_910) = &input.key_location {
        object.key("KeyLocation").string(var_910.as_str());
    }
    if let Some(var_911) = &input.url {
        object.key("URL").string(var_911.as_str());
    }
    if let Some(var_912) = &input.secret_manager_arn {
        object.key("SecretManagerArn").string(var_912.as_str());
    }
    if let Some(var_913) = &input.user_name_attribute_field {
        object
            .key("UserNameAttributeField")
            .string(var_913.as_str());
    }
    if let Some(var_914) = &input.group_attribute_field {
        object.key("GroupAttributeField").string(var_914.as_str());
    }
    if let Some(var_915) = &input.issuer {
        object.key("Issuer").string(var_915.as_str());
    }
    if let Some(var_916) = &input.claim_regex {
        object.key("ClaimRegex").string(var_916.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_json_token_type_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JsonTokenTypeConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_917) = &input.user_name_attribute_field {
        object
            .key("UserNameAttributeField")
            .string(var_917.as_str());
    }
    if let Some(var_918) = &input.group_attribute_field {
        object.key("GroupAttributeField").string(var_918.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_member_group(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MemberGroup,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_919) = &input.group_id {
        object.key("GroupId").string(var_919.as_str());
    }
    if let Some(var_920) = &input.data_source_id {
        object.key("DataSourceId").string(var_920.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_member_user(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MemberUser,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_921) = &input.user_id {
        object.key("UserId").string(var_921.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_relevance(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Relevance,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_922) = &input.freshness {
        object.key("Freshness").boolean(*var_922);
    }
    if let Some(var_923) = &input.importance {
        object.key("Importance").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_923).into()),
        );
    }
    if let Some(var_924) = &input.duration {
        object.key("Duration").string(var_924.as_str());
    }
    if let Some(var_925) = &input.rank_order {
        object.key("RankOrder").string(var_925.as_str());
    }
    if let Some(var_926) = &input.value_importance_map {
        let mut object_927 = object.key("ValueImportanceMap").start_object();
        for (key_928, value_929) in var_926 {
            {
                object_927.key(key_928).number(
                    #[allow(clippy::useless_conversion)]
                    aws_smithy_types::Number::NegInt((*value_929).into()),
                );
            }
        }
        object_927.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_source_group(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataSourceGroup,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_930) = &input.group_id {
        object.key("GroupId").string(var_930.as_str());
    }
    if let Some(var_931) = &input.data_source_id {
        object.key("DataSourceId").string(var_931.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_search(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Search,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.facetable {
        object.key("Facetable").boolean(input.facetable);
    }
    if input.searchable {
        object.key("Searchable").boolean(input.searchable);
    }
    if input.displayable {
        object.key("Displayable").boolean(input.displayable);
    }
    if input.sortable {
        object.key("Sortable").boolean(input.sortable);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_document_attribute_value(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DocumentAttributeValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_932) = &input.string_value {
        object.key("StringValue").string(var_932.as_str());
    }
    if let Some(var_933) = &input.string_list_value {
        let mut array_934 = object.key("StringListValue").start_array();
        for item_935 in var_933 {
            {
                array_934.value().string(item_935.as_str());
            }
        }
        array_934.finish();
    }
    if let Some(var_936) = &input.long_value {
        object.key("LongValue").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_936).into()),
        );
    }
    if let Some(var_937) = &input.date_value {
        object
            .key("DateValue")
            .date_time(var_937, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_model_document_attribute_condition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DocumentAttributeCondition,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_938) = &input.condition_document_attribute_key {
        object
            .key("ConditionDocumentAttributeKey")
            .string(var_938.as_str());
    }
    if let Some(var_939) = &input.operator {
        object.key("Operator").string(var_939.as_str());
    }
    if let Some(var_940) = &input.condition_on_value {
        let mut object_941 = object.key("ConditionOnValue").start_object();
        crate::json_ser::serialize_structure_crate_model_document_attribute_value(
            &mut object_941,
            var_940,
        )?;
        object_941.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_document_attribute_target(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DocumentAttributeTarget,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_942) = &input.target_document_attribute_key {
        object
            .key("TargetDocumentAttributeKey")
            .string(var_942.as_str());
    }
    if input.target_document_attribute_value_deletion {
        object
            .key("TargetDocumentAttributeValueDeletion")
            .boolean(input.target_document_attribute_value_deletion);
    }
    if let Some(var_943) = &input.target_document_attribute_value {
        let mut object_944 = object.key("TargetDocumentAttributeValue").start_object();
        crate::json_ser::serialize_structure_crate_model_document_attribute_value(
            &mut object_944,
            var_943,
        )?;
        object_944.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_documents_metadata_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DocumentsMetadataConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_945) = &input.s3_prefix {
        object.key("S3Prefix").string(var_945.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_access_control_list_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AccessControlListConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_946) = &input.key_path {
        object.key("KeyPath").string(var_946.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_source_to_index_field_mapping(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataSourceToIndexFieldMapping,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_947) = &input.data_source_field_name {
        object.key("DataSourceFieldName").string(var_947.as_str());
    }
    if let Some(var_948) = &input.date_field_format {
        object.key("DateFieldFormat").string(var_948.as_str());
    }
    if let Some(var_949) = &input.index_field_name {
        object.key("IndexFieldName").string(var_949.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_proxy_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProxyConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_950) = &input.host {
        object.key("Host").string(var_950.as_str());
    }
    if let Some(var_951) = &input.port {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_951).into()),
        );
    }
    if let Some(var_952) = &input.credentials {
        object.key("Credentials").string(var_952.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_connection_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConnectionConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_953) = &input.database_host {
        object.key("DatabaseHost").string(var_953.as_str());
    }
    if let Some(var_954) = &input.database_port {
        object.key("DatabasePort").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_954).into()),
        );
    }
    if let Some(var_955) = &input.database_name {
        object.key("DatabaseName").string(var_955.as_str());
    }
    if let Some(var_956) = &input.table_name {
        object.key("TableName").string(var_956.as_str());
    }
    if let Some(var_957) = &input.secret_arn {
        object.key("SecretArn").string(var_957.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_column_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ColumnConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_958) = &input.document_id_column_name {
        object.key("DocumentIdColumnName").string(var_958.as_str());
    }
    if let Some(var_959) = &input.document_data_column_name {
        object
            .key("DocumentDataColumnName")
            .string(var_959.as_str());
    }
    if let Some(var_960) = &input.document_title_column_name {
        object
            .key("DocumentTitleColumnName")
            .string(var_960.as_str());
    }
    if let Some(var_961) = &input.field_mappings {
        let mut array_962 = object.key("FieldMappings").start_array();
        for item_963 in var_961 {
            {
                let mut object_964 = array_962.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_964, item_963)?;
                object_964.finish();
            }
        }
        array_962.finish();
    }
    if let Some(var_965) = &input.change_detecting_columns {
        let mut array_966 = object.key("ChangeDetectingColumns").start_array();
        for item_967 in var_965 {
            {
                array_966.value().string(item_967.as_str());
            }
        }
        array_966.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_acl_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AclConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_968) = &input.allowed_groups_column_name {
        object
            .key("AllowedGroupsColumnName")
            .string(var_968.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sql_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SqlConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_969) = &input.query_identifiers_enclosing_option {
        object
            .key("QueryIdentifiersEnclosingOption")
            .string(var_969.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_salesforce_standard_object_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SalesforceStandardObjectConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_970) = &input.name {
        object.key("Name").string(var_970.as_str());
    }
    if let Some(var_971) = &input.document_data_field_name {
        object.key("DocumentDataFieldName").string(var_971.as_str());
    }
    if let Some(var_972) = &input.document_title_field_name {
        object
            .key("DocumentTitleFieldName")
            .string(var_972.as_str());
    }
    if let Some(var_973) = &input.field_mappings {
        let mut array_974 = object.key("FieldMappings").start_array();
        for item_975 in var_973 {
            {
                let mut object_976 = array_974.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_976, item_975)?;
                object_976.finish();
            }
        }
        array_974.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_salesforce_knowledge_article_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SalesforceKnowledgeArticleConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_977) = &input.included_states {
        let mut array_978 = object.key("IncludedStates").start_array();
        for item_979 in var_977 {
            {
                array_978.value().string(item_979.as_str());
            }
        }
        array_978.finish();
    }
    if let Some(var_980) = &input.standard_knowledge_article_type_configuration {
        let mut object_981 = object
            .key("StandardKnowledgeArticleTypeConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_salesforce_standard_knowledge_article_type_configuration(&mut object_981, var_980)?;
        object_981.finish();
    }
    if let Some(var_982) = &input.custom_knowledge_article_type_configurations {
        let mut array_983 = object
            .key("CustomKnowledgeArticleTypeConfigurations")
            .start_array();
        for item_984 in var_982 {
            {
                let mut object_985 = array_983.value().start_object();
                crate::json_ser::serialize_structure_crate_model_salesforce_custom_knowledge_article_type_configuration(&mut object_985, item_984)?;
                object_985.finish();
            }
        }
        array_983.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_salesforce_chatter_feed_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SalesforceChatterFeedConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_986) = &input.document_data_field_name {
        object.key("DocumentDataFieldName").string(var_986.as_str());
    }
    if let Some(var_987) = &input.document_title_field_name {
        object
            .key("DocumentTitleFieldName")
            .string(var_987.as_str());
    }
    if let Some(var_988) = &input.field_mappings {
        let mut array_989 = object.key("FieldMappings").start_array();
        for item_990 in var_988 {
            {
                let mut object_991 = array_989.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_991, item_990)?;
                object_991.finish();
            }
        }
        array_989.finish();
    }
    if let Some(var_992) = &input.include_filter_types {
        let mut array_993 = object.key("IncludeFilterTypes").start_array();
        for item_994 in var_992 {
            {
                array_993.value().string(item_994.as_str());
            }
        }
        array_993.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_salesforce_standard_object_attachment_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SalesforceStandardObjectAttachmentConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_995) = &input.document_title_field_name {
        object
            .key("DocumentTitleFieldName")
            .string(var_995.as_str());
    }
    if let Some(var_996) = &input.field_mappings {
        let mut array_997 = object.key("FieldMappings").start_array();
        for item_998 in var_996 {
            {
                let mut object_999 = array_997.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_999, item_998)?;
                object_999.finish();
            }
        }
        array_997.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_one_drive_users(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OneDriveUsers,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1000) = &input.one_drive_user_list {
        let mut array_1001 = object.key("OneDriveUserList").start_array();
        for item_1002 in var_1000 {
            {
                array_1001.value().string(item_1002.as_str());
            }
        }
        array_1001.finish();
    }
    if let Some(var_1003) = &input.one_drive_user_s3_path {
        let mut object_1004 = object.key("OneDriveUserS3Path").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_path(&mut object_1004, var_1003)?;
        object_1004.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_service_now_knowledge_article_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ServiceNowKnowledgeArticleConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.crawl_attachments {
        object
            .key("CrawlAttachments")
            .boolean(input.crawl_attachments);
    }
    if let Some(var_1005) = &input.include_attachment_file_patterns {
        let mut array_1006 = object.key("IncludeAttachmentFilePatterns").start_array();
        for item_1007 in var_1005 {
            {
                array_1006.value().string(item_1007.as_str());
            }
        }
        array_1006.finish();
    }
    if let Some(var_1008) = &input.exclude_attachment_file_patterns {
        let mut array_1009 = object.key("ExcludeAttachmentFilePatterns").start_array();
        for item_1010 in var_1008 {
            {
                array_1009.value().string(item_1010.as_str());
            }
        }
        array_1009.finish();
    }
    if let Some(var_1011) = &input.document_data_field_name {
        object
            .key("DocumentDataFieldName")
            .string(var_1011.as_str());
    }
    if let Some(var_1012) = &input.document_title_field_name {
        object
            .key("DocumentTitleFieldName")
            .string(var_1012.as_str());
    }
    if let Some(var_1013) = &input.field_mappings {
        let mut array_1014 = object.key("FieldMappings").start_array();
        for item_1015 in var_1013 {
            {
                let mut object_1016 = array_1014.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_1016, item_1015)?;
                object_1016.finish();
            }
        }
        array_1014.finish();
    }
    if let Some(var_1017) = &input.filter_query {
        object.key("FilterQuery").string(var_1017.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_service_now_service_catalog_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ServiceNowServiceCatalogConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.crawl_attachments {
        object
            .key("CrawlAttachments")
            .boolean(input.crawl_attachments);
    }
    if let Some(var_1018) = &input.include_attachment_file_patterns {
        let mut array_1019 = object.key("IncludeAttachmentFilePatterns").start_array();
        for item_1020 in var_1018 {
            {
                array_1019.value().string(item_1020.as_str());
            }
        }
        array_1019.finish();
    }
    if let Some(var_1021) = &input.exclude_attachment_file_patterns {
        let mut array_1022 = object.key("ExcludeAttachmentFilePatterns").start_array();
        for item_1023 in var_1021 {
            {
                array_1022.value().string(item_1023.as_str());
            }
        }
        array_1022.finish();
    }
    if let Some(var_1024) = &input.document_data_field_name {
        object
            .key("DocumentDataFieldName")
            .string(var_1024.as_str());
    }
    if let Some(var_1025) = &input.document_title_field_name {
        object
            .key("DocumentTitleFieldName")
            .string(var_1025.as_str());
    }
    if let Some(var_1026) = &input.field_mappings {
        let mut array_1027 = object.key("FieldMappings").start_array();
        for item_1028 in var_1026 {
            {
                let mut object_1029 = array_1027.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_1029, item_1028)?;
                object_1029.finish();
            }
        }
        array_1027.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_confluence_space_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConfluenceSpaceConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.crawl_personal_spaces {
        object
            .key("CrawlPersonalSpaces")
            .boolean(input.crawl_personal_spaces);
    }
    if input.crawl_archived_spaces {
        object
            .key("CrawlArchivedSpaces")
            .boolean(input.crawl_archived_spaces);
    }
    if let Some(var_1030) = &input.include_spaces {
        let mut array_1031 = object.key("IncludeSpaces").start_array();
        for item_1032 in var_1030 {
            {
                array_1031.value().string(item_1032.as_str());
            }
        }
        array_1031.finish();
    }
    if let Some(var_1033) = &input.exclude_spaces {
        let mut array_1034 = object.key("ExcludeSpaces").start_array();
        for item_1035 in var_1033 {
            {
                array_1034.value().string(item_1035.as_str());
            }
        }
        array_1034.finish();
    }
    if let Some(var_1036) = &input.space_field_mappings {
        let mut array_1037 = object.key("SpaceFieldMappings").start_array();
        for item_1038 in var_1036 {
            {
                let mut object_1039 = array_1037.value().start_object();
                crate::json_ser::serialize_structure_crate_model_confluence_space_to_index_field_mapping(&mut object_1039, item_1038)?;
                object_1039.finish();
            }
        }
        array_1037.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_confluence_page_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConfluencePageConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1040) = &input.page_field_mappings {
        let mut array_1041 = object.key("PageFieldMappings").start_array();
        for item_1042 in var_1040 {
            {
                let mut object_1043 = array_1041.value().start_object();
                crate::json_ser::serialize_structure_crate_model_confluence_page_to_index_field_mapping(&mut object_1043, item_1042)?;
                object_1043.finish();
            }
        }
        array_1041.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_confluence_blog_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConfluenceBlogConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1044) = &input.blog_field_mappings {
        let mut array_1045 = object.key("BlogFieldMappings").start_array();
        for item_1046 in var_1044 {
            {
                let mut object_1047 = array_1045.value().start_object();
                crate::json_ser::serialize_structure_crate_model_confluence_blog_to_index_field_mapping(&mut object_1047, item_1046)?;
                object_1047.finish();
            }
        }
        array_1045.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_confluence_attachment_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConfluenceAttachmentConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.crawl_attachments {
        object
            .key("CrawlAttachments")
            .boolean(input.crawl_attachments);
    }
    if let Some(var_1048) = &input.attachment_field_mappings {
        let mut array_1049 = object.key("AttachmentFieldMappings").start_array();
        for item_1050 in var_1048 {
            {
                let mut object_1051 = array_1049.value().start_object();
                crate::json_ser::serialize_structure_crate_model_confluence_attachment_to_index_field_mapping(&mut object_1051, item_1050)?;
                object_1051.finish();
            }
        }
        array_1049.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_urls(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Urls,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1052) = &input.seed_url_configuration {
        let mut object_1053 = object.key("SeedUrlConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_seed_url_configuration(
            &mut object_1053,
            var_1052,
        )?;
        object_1053.finish();
    }
    if let Some(var_1054) = &input.site_maps_configuration {
        let mut object_1055 = object.key("SiteMapsConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_site_maps_configuration(
            &mut object_1055,
            var_1054,
        )?;
        object_1055.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_authentication_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AuthenticationConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1056) = &input.basic_authentication {
        let mut array_1057 = object.key("BasicAuthentication").start_array();
        for item_1058 in var_1056 {
            {
                let mut object_1059 = array_1057.value().start_object();
                crate::json_ser::serialize_structure_crate_model_basic_authentication_configuration(&mut object_1059, item_1058)?;
                object_1059.finish();
            }
        }
        array_1057.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_saa_s_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SaaSConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1060) = &input.organization_name {
        object.key("OrganizationName").string(var_1060.as_str());
    }
    if let Some(var_1061) = &input.host_url {
        object.key("HostUrl").string(var_1061.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_on_premise_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OnPremiseConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1062) = &input.host_url {
        object.key("HostUrl").string(var_1062.as_str());
    }
    if let Some(var_1063) = &input.organization_name {
        object.key("OrganizationName").string(var_1063.as_str());
    }
    if let Some(var_1064) = &input.ssl_certificate_s3_path {
        let mut object_1065 = object.key("SslCertificateS3Path").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_path(&mut object_1065, var_1064)?;
        object_1065.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_git_hub_document_crawl_properties(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GitHubDocumentCrawlProperties,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.crawl_repository_documents {
        object
            .key("CrawlRepositoryDocuments")
            .boolean(input.crawl_repository_documents);
    }
    if input.crawl_issue {
        object.key("CrawlIssue").boolean(input.crawl_issue);
    }
    if input.crawl_issue_comment {
        object
            .key("CrawlIssueComment")
            .boolean(input.crawl_issue_comment);
    }
    if input.crawl_issue_comment_attachment {
        object
            .key("CrawlIssueCommentAttachment")
            .boolean(input.crawl_issue_comment_attachment);
    }
    if input.crawl_pull_request {
        object
            .key("CrawlPullRequest")
            .boolean(input.crawl_pull_request);
    }
    if input.crawl_pull_request_comment {
        object
            .key("CrawlPullRequestComment")
            .boolean(input.crawl_pull_request_comment);
    }
    if input.crawl_pull_request_comment_attachment {
        object
            .key("CrawlPullRequestCommentAttachment")
            .boolean(input.crawl_pull_request_comment_attachment);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_salesforce_standard_knowledge_article_type_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SalesforceStandardKnowledgeArticleTypeConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1066) = &input.document_data_field_name {
        object
            .key("DocumentDataFieldName")
            .string(var_1066.as_str());
    }
    if let Some(var_1067) = &input.document_title_field_name {
        object
            .key("DocumentTitleFieldName")
            .string(var_1067.as_str());
    }
    if let Some(var_1068) = &input.field_mappings {
        let mut array_1069 = object.key("FieldMappings").start_array();
        for item_1070 in var_1068 {
            {
                let mut object_1071 = array_1069.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_1071, item_1070)?;
                object_1071.finish();
            }
        }
        array_1069.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_salesforce_custom_knowledge_article_type_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SalesforceCustomKnowledgeArticleTypeConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1072) = &input.name {
        object.key("Name").string(var_1072.as_str());
    }
    if let Some(var_1073) = &input.document_data_field_name {
        object
            .key("DocumentDataFieldName")
            .string(var_1073.as_str());
    }
    if let Some(var_1074) = &input.document_title_field_name {
        object
            .key("DocumentTitleFieldName")
            .string(var_1074.as_str());
    }
    if let Some(var_1075) = &input.field_mappings {
        let mut array_1076 = object.key("FieldMappings").start_array();
        for item_1077 in var_1075 {
            {
                let mut object_1078 = array_1076.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_to_index_field_mapping(&mut object_1078, item_1077)?;
                object_1078.finish();
            }
        }
        array_1076.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_confluence_space_to_index_field_mapping(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConfluenceSpaceToIndexFieldMapping,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1079) = &input.data_source_field_name {
        object.key("DataSourceFieldName").string(var_1079.as_str());
    }
    if let Some(var_1080) = &input.date_field_format {
        object.key("DateFieldFormat").string(var_1080.as_str());
    }
    if let Some(var_1081) = &input.index_field_name {
        object.key("IndexFieldName").string(var_1081.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_confluence_page_to_index_field_mapping(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConfluencePageToIndexFieldMapping,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1082) = &input.data_source_field_name {
        object.key("DataSourceFieldName").string(var_1082.as_str());
    }
    if let Some(var_1083) = &input.date_field_format {
        object.key("DateFieldFormat").string(var_1083.as_str());
    }
    if let Some(var_1084) = &input.index_field_name {
        object.key("IndexFieldName").string(var_1084.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_confluence_blog_to_index_field_mapping(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConfluenceBlogToIndexFieldMapping,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1085) = &input.data_source_field_name {
        object.key("DataSourceFieldName").string(var_1085.as_str());
    }
    if let Some(var_1086) = &input.date_field_format {
        object.key("DateFieldFormat").string(var_1086.as_str());
    }
    if let Some(var_1087) = &input.index_field_name {
        object.key("IndexFieldName").string(var_1087.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_confluence_attachment_to_index_field_mapping(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConfluenceAttachmentToIndexFieldMapping,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1088) = &input.data_source_field_name {
        object.key("DataSourceFieldName").string(var_1088.as_str());
    }
    if let Some(var_1089) = &input.date_field_format {
        object.key("DateFieldFormat").string(var_1089.as_str());
    }
    if let Some(var_1090) = &input.index_field_name {
        object.key("IndexFieldName").string(var_1090.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_seed_url_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SeedUrlConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1091) = &input.seed_urls {
        let mut array_1092 = object.key("SeedUrls").start_array();
        for item_1093 in var_1091 {
            {
                array_1092.value().string(item_1093.as_str());
            }
        }
        array_1092.finish();
    }
    if let Some(var_1094) = &input.web_crawler_mode {
        object.key("WebCrawlerMode").string(var_1094.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_site_maps_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SiteMapsConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1095) = &input.site_maps {
        let mut array_1096 = object.key("SiteMaps").start_array();
        for item_1097 in var_1095 {
            {
                array_1096.value().string(item_1097.as_str());
            }
        }
        array_1096.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_basic_authentication_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BasicAuthenticationConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1098) = &input.host {
        object.key("Host").string(var_1098.as_str());
    }
    if let Some(var_1099) = &input.port {
        object.key("Port").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1099).into()),
        );
    }
    if let Some(var_1100) = &input.credentials {
        object.key("Credentials").string(var_1100.as_str());
    }
    Ok(())
}
