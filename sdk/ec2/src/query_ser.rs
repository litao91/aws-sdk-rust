// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(unused_mut)]
pub fn serialize_structure_crate_model_target_configuration_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::TargetConfigurationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("InstanceCount");
    if let Some(var_2) = &input.instance_count {
        scope_1.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("OfferingId");
    if let Some(var_4) = &input.offering_id {
        scope_3.string(var_4);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_tag_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::TagSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_5 = writer.prefix("ResourceType");
    if let Some(var_6) = &input.resource_type {
        scope_5.string(var_6.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_7 = writer.prefix("Tag");
    if let Some(var_8) = &input.tags {
        let mut list_10 = scope_7.start_list(true, Some("item"));
        for item_9 in var_8 {
            #[allow(unused_mut)]
            let mut entry_11 = list_10.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_11, item_9)?;
        }
        list_10.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_iam_instance_profile_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::IamInstanceProfileSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_12 = writer.prefix("Arn");
    if let Some(var_13) = &input.arn {
        scope_12.string(var_13);
    }
    #[allow(unused_mut)]
    let mut scope_14 = writer.prefix("Name");
    if let Some(var_15) = &input.name {
        scope_14.string(var_15);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_event_window_association_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::InstanceEventWindowAssociationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_16 = writer.prefix("InstanceId");
    if let Some(var_17) = &input.instance_ids {
        let mut list_19 = scope_16.start_list(true, Some("item"));
        for item_18 in var_17 {
            #[allow(unused_mut)]
            let mut entry_20 = list_19.entry();
            entry_20.string(item_18);
        }
        list_19.finish();
    }
    #[allow(unused_mut)]
    let mut scope_21 = writer.prefix("InstanceTag");
    if let Some(var_22) = &input.instance_tags {
        let mut list_24 = scope_21.start_list(true, Some("item"));
        for item_23 in var_22 {
            #[allow(unused_mut)]
            let mut entry_25 = list_24.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_25, item_23)?;
        }
        list_24.finish();
    }
    #[allow(unused_mut)]
    let mut scope_26 = writer.prefix("DedicatedHostId");
    if let Some(var_27) = &input.dedicated_host_ids {
        let mut list_29 = scope_26.start_list(true, Some("item"));
        for item_28 in var_27 {
            #[allow(unused_mut)]
            let mut entry_30 = list_29.entry();
            entry_30.string(item_28);
        }
        list_29.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_ip_permission(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::IpPermission,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_31 = writer.prefix("FromPort");
    if let Some(var_32) = &input.from_port {
        scope_31.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_32).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_33 = writer.prefix("IpProtocol");
    if let Some(var_34) = &input.ip_protocol {
        scope_33.string(var_34);
    }
    #[allow(unused_mut)]
    let mut scope_35 = writer.prefix("IpRanges");
    if let Some(var_36) = &input.ip_ranges {
        let mut list_38 = scope_35.start_list(true, Some("item"));
        for item_37 in var_36 {
            #[allow(unused_mut)]
            let mut entry_39 = list_38.entry();
            crate::query_ser::serialize_structure_crate_model_ip_range(entry_39, item_37)?;
        }
        list_38.finish();
    }
    #[allow(unused_mut)]
    let mut scope_40 = writer.prefix("Ipv6Ranges");
    if let Some(var_41) = &input.ipv6_ranges {
        let mut list_43 = scope_40.start_list(true, Some("item"));
        for item_42 in var_41 {
            #[allow(unused_mut)]
            let mut entry_44 = list_43.entry();
            crate::query_ser::serialize_structure_crate_model_ipv6_range(entry_44, item_42)?;
        }
        list_43.finish();
    }
    #[allow(unused_mut)]
    let mut scope_45 = writer.prefix("PrefixListIds");
    if let Some(var_46) = &input.prefix_list_ids {
        let mut list_48 = scope_45.start_list(true, Some("item"));
        for item_47 in var_46 {
            #[allow(unused_mut)]
            let mut entry_49 = list_48.entry();
            crate::query_ser::serialize_structure_crate_model_prefix_list_id(entry_49, item_47)?;
        }
        list_48.finish();
    }
    #[allow(unused_mut)]
    let mut scope_50 = writer.prefix("ToPort");
    if let Some(var_51) = &input.to_port {
        scope_50.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_51).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_52 = writer.prefix("Groups");
    if let Some(var_53) = &input.user_id_group_pairs {
        let mut list_55 = scope_52.start_list(true, Some("item"));
        for item_54 in var_53 {
            #[allow(unused_mut)]
            let mut entry_56 = list_55.entry();
            crate::query_ser::serialize_structure_crate_model_user_id_group_pair(
                entry_56, item_54,
            )?;
        }
        list_55.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_storage(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::Storage,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_57 = writer.prefix("S3");
    if let Some(var_58) = &input.s3 {
        crate::query_ser::serialize_structure_crate_model_s3_storage(scope_57, var_58)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_reservation_fleet_instance_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ReservationFleetInstanceSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_59 = writer.prefix("InstanceType");
    if let Some(var_60) = &input.instance_type {
        scope_59.string(var_60.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_61 = writer.prefix("InstancePlatform");
    if let Some(var_62) = &input.instance_platform {
        scope_61.string(var_62.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_63 = writer.prefix("Weight");
    if let Some(var_64) = &input.weight {
        scope_63.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_64).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_65 = writer.prefix("AvailabilityZone");
    if let Some(var_66) = &input.availability_zone {
        scope_65.string(var_66);
    }
    #[allow(unused_mut)]
    let mut scope_67 = writer.prefix("AvailabilityZoneId");
    if let Some(var_68) = &input.availability_zone_id {
        scope_67.string(var_68);
    }
    #[allow(unused_mut)]
    let mut scope_69 = writer.prefix("EbsOptimized");
    if let Some(var_70) = &input.ebs_optimized {
        scope_69.boolean(*var_70);
    }
    #[allow(unused_mut)]
    let mut scope_71 = writer.prefix("Priority");
    if let Some(var_72) = &input.priority {
        scope_71.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_72).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_client_vpn_authentication_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ClientVpnAuthenticationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_73 = writer.prefix("Type");
    if let Some(var_74) = &input.r#type {
        scope_73.string(var_74.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_75 = writer.prefix("ActiveDirectory");
    if let Some(var_76) = &input.active_directory {
        crate::query_ser::serialize_structure_crate_model_directory_service_authentication_request(
            scope_75, var_76,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_77 = writer.prefix("MutualAuthentication");
    if let Some(var_78) = &input.mutual_authentication {
        crate::query_ser::serialize_structure_crate_model_certificate_authentication_request(
            scope_77, var_78,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_79 = writer.prefix("FederatedAuthentication");
    if let Some(var_80) = &input.federated_authentication {
        crate::query_ser::serialize_structure_crate_model_federated_authentication_request(
            scope_79, var_80,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_connection_log_options(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ConnectionLogOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_81 = writer.prefix("Enabled");
    if let Some(var_82) = &input.enabled {
        scope_81.boolean(*var_82);
    }
    #[allow(unused_mut)]
    let mut scope_83 = writer.prefix("CloudwatchLogGroup");
    if let Some(var_84) = &input.cloudwatch_log_group {
        scope_83.string(var_84);
    }
    #[allow(unused_mut)]
    let mut scope_85 = writer.prefix("CloudwatchLogStream");
    if let Some(var_86) = &input.cloudwatch_log_stream {
        scope_85.string(var_86);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_client_connect_options(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ClientConnectOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_87 = writer.prefix("Enabled");
    if let Some(var_88) = &input.enabled {
        scope_87.boolean(*var_88);
    }
    #[allow(unused_mut)]
    let mut scope_89 = writer.prefix("LambdaFunctionArn");
    if let Some(var_90) = &input.lambda_function_arn {
        scope_89.string(var_90);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_client_login_banner_options(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ClientLoginBannerOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_91 = writer.prefix("Enabled");
    if let Some(var_92) = &input.enabled {
        scope_91.boolean(*var_92);
    }
    #[allow(unused_mut)]
    let mut scope_93 = writer.prefix("BannerText");
    if let Some(var_94) = &input.banner_text {
        scope_93.string(var_94);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_new_dhcp_configuration(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::NewDhcpConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_95 = writer.prefix("Key");
    if let Some(var_96) = &input.key {
        scope_95.string(var_96);
    }
    #[allow(unused_mut)]
    let mut scope_97 = writer.prefix("Value");
    if let Some(var_98) = &input.values {
        let mut list_100 = scope_97.start_list(true, Some("item"));
        for item_99 in var_98 {
            #[allow(unused_mut)]
            let mut entry_101 = list_100.entry();
            entry_101.string(item_99);
        }
        list_100.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_spot_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::SpotOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_102 = writer.prefix("AllocationStrategy");
    if let Some(var_103) = &input.allocation_strategy {
        scope_102.string(var_103.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_104 = writer.prefix("MaintenanceStrategies");
    if let Some(var_105) = &input.maintenance_strategies {
        crate::query_ser::serialize_structure_crate_model_fleet_spot_maintenance_strategies_request(scope_104, var_105)?;
    }
    #[allow(unused_mut)]
    let mut scope_106 = writer.prefix("InstanceInterruptionBehavior");
    if let Some(var_107) = &input.instance_interruption_behavior {
        scope_106.string(var_107.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_108 = writer.prefix("InstancePoolsToUseCount");
    if let Some(var_109) = &input.instance_pools_to_use_count {
        scope_108.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_109).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_110 = writer.prefix("SingleInstanceType");
    if let Some(var_111) = &input.single_instance_type {
        scope_110.boolean(*var_111);
    }
    #[allow(unused_mut)]
    let mut scope_112 = writer.prefix("SingleAvailabilityZone");
    if let Some(var_113) = &input.single_availability_zone {
        scope_112.boolean(*var_113);
    }
    #[allow(unused_mut)]
    let mut scope_114 = writer.prefix("MinTargetCapacity");
    if let Some(var_115) = &input.min_target_capacity {
        scope_114.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_115).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_116 = writer.prefix("MaxTotalPrice");
    if let Some(var_117) = &input.max_total_price {
        scope_116.string(var_117);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_on_demand_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::OnDemandOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_118 = writer.prefix("AllocationStrategy");
    if let Some(var_119) = &input.allocation_strategy {
        scope_118.string(var_119.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_120 = writer.prefix("CapacityReservationOptions");
    if let Some(var_121) = &input.capacity_reservation_options {
        crate::query_ser::serialize_structure_crate_model_capacity_reservation_options_request(
            scope_120, var_121,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_122 = writer.prefix("SingleInstanceType");
    if let Some(var_123) = &input.single_instance_type {
        scope_122.boolean(*var_123);
    }
    #[allow(unused_mut)]
    let mut scope_124 = writer.prefix("SingleAvailabilityZone");
    if let Some(var_125) = &input.single_availability_zone {
        scope_124.boolean(*var_125);
    }
    #[allow(unused_mut)]
    let mut scope_126 = writer.prefix("MinTargetCapacity");
    if let Some(var_127) = &input.min_target_capacity {
        scope_126.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_127).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_128 = writer.prefix("MaxTotalPrice");
    if let Some(var_129) = &input.max_total_price {
        scope_128.string(var_129);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_fleet_launch_template_config_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::FleetLaunchTemplateConfigRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_130 = writer.prefix("LaunchTemplateSpecification");
    if let Some(var_131) = &input.launch_template_specification {
        crate::query_ser::serialize_structure_crate_model_fleet_launch_template_specification_request(scope_130, var_131)?;
    }
    #[allow(unused_mut)]
    let mut scope_132 = writer.prefix("Overrides");
    if let Some(var_133) = &input.overrides {
        let mut list_135 = scope_132.start_list(true, Some("item"));
        for item_134 in var_133 {
            #[allow(unused_mut)]
            let mut entry_136 = list_135.entry();
            crate::query_ser::serialize_structure_crate_model_fleet_launch_template_overrides_request(entry_136, item_134)?;
        }
        list_135.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_target_capacity_specification_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::TargetCapacitySpecificationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_137 = writer.prefix("TotalTargetCapacity");
    if let Some(var_138) = &input.total_target_capacity {
        scope_137.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_138).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_139 = writer.prefix("OnDemandTargetCapacity");
    if let Some(var_140) = &input.on_demand_target_capacity {
        scope_139.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_140).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_141 = writer.prefix("SpotTargetCapacity");
    if let Some(var_142) = &input.spot_target_capacity {
        scope_141.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_142).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_143 = writer.prefix("DefaultTargetCapacityType");
    if let Some(var_144) = &input.default_target_capacity_type {
        scope_143.string(var_144.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_145 = writer.prefix("TargetCapacityUnitType");
    if let Some(var_146) = &input.target_capacity_unit_type {
        scope_145.string(var_146.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_destination_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::DestinationOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_147 = writer.prefix("FileFormat");
    if let Some(var_148) = &input.file_format {
        scope_147.string(var_148.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_149 = writer.prefix("HiveCompatiblePartitions");
    if let Some(var_150) = &input.hive_compatible_partitions {
        scope_149.boolean(*var_150);
    }
    #[allow(unused_mut)]
    let mut scope_151 = writer.prefix("PerHourPartition");
    if let Some(var_152) = &input.per_hour_partition {
        scope_151.boolean(*var_152);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_storage_location(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::StorageLocation,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_153 = writer.prefix("Bucket");
    if let Some(var_154) = &input.bucket {
        scope_153.string(var_154);
    }
    #[allow(unused_mut)]
    let mut scope_155 = writer.prefix("Key");
    if let Some(var_156) = &input.key {
        scope_155.string(var_156);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_block_device_mapping(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::BlockDeviceMapping,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_157 = writer.prefix("DeviceName");
    if let Some(var_158) = &input.device_name {
        scope_157.string(var_158);
    }
    #[allow(unused_mut)]
    let mut scope_159 = writer.prefix("VirtualName");
    if let Some(var_160) = &input.virtual_name {
        scope_159.string(var_160);
    }
    #[allow(unused_mut)]
    let mut scope_161 = writer.prefix("Ebs");
    if let Some(var_162) = &input.ebs {
        crate::query_ser::serialize_structure_crate_model_ebs_block_device(scope_161, var_162)?;
    }
    #[allow(unused_mut)]
    let mut scope_163 = writer.prefix("NoDevice");
    if let Some(var_164) = &input.no_device {
        scope_163.string(var_164);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_event_window_time_range_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::InstanceEventWindowTimeRangeRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_165 = writer.prefix("StartWeekDay");
    if let Some(var_166) = &input.start_week_day {
        scope_165.string(var_166.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_167 = writer.prefix("StartHour");
    if let Some(var_168) = &input.start_hour {
        scope_167.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_168).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_169 = writer.prefix("EndWeekDay");
    if let Some(var_170) = &input.end_week_day {
        scope_169.string(var_170.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_171 = writer.prefix("EndHour");
    if let Some(var_172) = &input.end_hour {
        scope_171.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_172).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_export_to_s3_task_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ExportToS3TaskSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_173 = writer.prefix("ContainerFormat");
    if let Some(var_174) = &input.container_format {
        scope_173.string(var_174.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_175 = writer.prefix("DiskImageFormat");
    if let Some(var_176) = &input.disk_image_format {
        scope_175.string(var_176.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_177 = writer.prefix("S3Bucket");
    if let Some(var_178) = &input.s3_bucket {
        scope_177.string(var_178);
    }
    #[allow(unused_mut)]
    let mut scope_179 = writer.prefix("S3Prefix");
    if let Some(var_180) = &input.s3_prefix {
        scope_179.string(var_180);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_add_ipam_operating_region(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::AddIpamOperatingRegion,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_181 = writer.prefix("RegionName");
    if let Some(var_182) = &input.region_name {
        scope_181.string(var_182);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_request_ipam_resource_tag(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::RequestIpamResourceTag,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_183 = writer.prefix("Key");
    if let Some(var_184) = &input.key {
        scope_183.string(var_184);
    }
    #[allow(unused_mut)]
    let mut scope_185 = writer.prefix("Value");
    if let Some(var_186) = &input.value {
        scope_185.string(var_186);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_request_launch_template_data(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::RequestLaunchTemplateData,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_187 = writer.prefix("KernelId");
    if let Some(var_188) = &input.kernel_id {
        scope_187.string(var_188);
    }
    #[allow(unused_mut)]
    let mut scope_189 = writer.prefix("EbsOptimized");
    if let Some(var_190) = &input.ebs_optimized {
        scope_189.boolean(*var_190);
    }
    #[allow(unused_mut)]
    let mut scope_191 = writer.prefix("IamInstanceProfile");
    if let Some(var_192) = &input.iam_instance_profile {
        crate::query_ser::serialize_structure_crate_model_launch_template_iam_instance_profile_specification_request(scope_191, var_192)?;
    }
    #[allow(unused_mut)]
    let mut scope_193 = writer.prefix("BlockDeviceMapping");
    if let Some(var_194) = &input.block_device_mappings {
        let mut list_196 = scope_193.start_list(true, Some("BlockDeviceMapping"));
        for item_195 in var_194 {
            #[allow(unused_mut)]
            let mut entry_197 = list_196.entry();
            crate::query_ser::serialize_structure_crate_model_launch_template_block_device_mapping_request(entry_197, item_195)?;
        }
        list_196.finish();
    }
    #[allow(unused_mut)]
    let mut scope_198 = writer.prefix("NetworkInterface");
    if let Some(var_199) = &input.network_interfaces {
        let mut list_201 =
            scope_198.start_list(true, Some("InstanceNetworkInterfaceSpecification"));
        for item_200 in var_199 {
            #[allow(unused_mut)]
            let mut entry_202 = list_201.entry();
            crate::query_ser::serialize_structure_crate_model_launch_template_instance_network_interface_specification_request(entry_202, item_200)?;
        }
        list_201.finish();
    }
    #[allow(unused_mut)]
    let mut scope_203 = writer.prefix("ImageId");
    if let Some(var_204) = &input.image_id {
        scope_203.string(var_204);
    }
    #[allow(unused_mut)]
    let mut scope_205 = writer.prefix("InstanceType");
    if let Some(var_206) = &input.instance_type {
        scope_205.string(var_206.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_207 = writer.prefix("KeyName");
    if let Some(var_208) = &input.key_name {
        scope_207.string(var_208);
    }
    #[allow(unused_mut)]
    let mut scope_209 = writer.prefix("Monitoring");
    if let Some(var_210) = &input.monitoring {
        crate::query_ser::serialize_structure_crate_model_launch_templates_monitoring_request(
            scope_209, var_210,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_211 = writer.prefix("Placement");
    if let Some(var_212) = &input.placement {
        crate::query_ser::serialize_structure_crate_model_launch_template_placement_request(
            scope_211, var_212,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_213 = writer.prefix("RamDiskId");
    if let Some(var_214) = &input.ram_disk_id {
        scope_213.string(var_214);
    }
    #[allow(unused_mut)]
    let mut scope_215 = writer.prefix("DisableApiTermination");
    if let Some(var_216) = &input.disable_api_termination {
        scope_215.boolean(*var_216);
    }
    #[allow(unused_mut)]
    let mut scope_217 = writer.prefix("InstanceInitiatedShutdownBehavior");
    if let Some(var_218) = &input.instance_initiated_shutdown_behavior {
        scope_217.string(var_218.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_219 = writer.prefix("UserData");
    if let Some(var_220) = &input.user_data {
        scope_219.string(var_220);
    }
    #[allow(unused_mut)]
    let mut scope_221 = writer.prefix("TagSpecification");
    if let Some(var_222) = &input.tag_specifications {
        let mut list_224 =
            scope_221.start_list(true, Some("LaunchTemplateTagSpecificationRequest"));
        for item_223 in var_222 {
            #[allow(unused_mut)]
            let mut entry_225 = list_224.entry();
            crate::query_ser::serialize_structure_crate_model_launch_template_tag_specification_request(entry_225, item_223)?;
        }
        list_224.finish();
    }
    #[allow(unused_mut)]
    let mut scope_226 = writer.prefix("ElasticGpuSpecification");
    if let Some(var_227) = &input.elastic_gpu_specifications {
        let mut list_229 = scope_226.start_list(true, Some("ElasticGpuSpecification"));
        for item_228 in var_227 {
            #[allow(unused_mut)]
            let mut entry_230 = list_229.entry();
            crate::query_ser::serialize_structure_crate_model_elastic_gpu_specification(
                entry_230, item_228,
            )?;
        }
        list_229.finish();
    }
    #[allow(unused_mut)]
    let mut scope_231 = writer.prefix("ElasticInferenceAccelerator");
    if let Some(var_232) = &input.elastic_inference_accelerators {
        let mut list_234 = scope_231.start_list(true, Some("item"));
        for item_233 in var_232 {
            #[allow(unused_mut)]
            let mut entry_235 = list_234.entry();
            crate::query_ser::serialize_structure_crate_model_launch_template_elastic_inference_accelerator(entry_235, item_233)?;
        }
        list_234.finish();
    }
    #[allow(unused_mut)]
    let mut scope_236 = writer.prefix("SecurityGroupId");
    if let Some(var_237) = &input.security_group_ids {
        let mut list_239 = scope_236.start_list(true, Some("SecurityGroupId"));
        for item_238 in var_237 {
            #[allow(unused_mut)]
            let mut entry_240 = list_239.entry();
            entry_240.string(item_238);
        }
        list_239.finish();
    }
    #[allow(unused_mut)]
    let mut scope_241 = writer.prefix("SecurityGroup");
    if let Some(var_242) = &input.security_groups {
        let mut list_244 = scope_241.start_list(true, Some("SecurityGroup"));
        for item_243 in var_242 {
            #[allow(unused_mut)]
            let mut entry_245 = list_244.entry();
            entry_245.string(item_243);
        }
        list_244.finish();
    }
    #[allow(unused_mut)]
    let mut scope_246 = writer.prefix("InstanceMarketOptions");
    if let Some(var_247) = &input.instance_market_options {
        crate::query_ser::serialize_structure_crate_model_launch_template_instance_market_options_request(scope_246, var_247)?;
    }
    #[allow(unused_mut)]
    let mut scope_248 = writer.prefix("CreditSpecification");
    if let Some(var_249) = &input.credit_specification {
        crate::query_ser::serialize_structure_crate_model_credit_specification_request(
            scope_248, var_249,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_250 = writer.prefix("CpuOptions");
    if let Some(var_251) = &input.cpu_options {
        crate::query_ser::serialize_structure_crate_model_launch_template_cpu_options_request(
            scope_250, var_251,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_252 = writer.prefix("CapacityReservationSpecification");
    if let Some(var_253) = &input.capacity_reservation_specification {
        crate::query_ser::serialize_structure_crate_model_launch_template_capacity_reservation_specification_request(scope_252, var_253)?;
    }
    #[allow(unused_mut)]
    let mut scope_254 = writer.prefix("LicenseSpecification");
    if let Some(var_255) = &input.license_specifications {
        let mut list_257 = scope_254.start_list(true, Some("item"));
        for item_256 in var_255 {
            #[allow(unused_mut)]
            let mut entry_258 = list_257.entry();
            crate::query_ser::serialize_structure_crate_model_launch_template_license_configuration_request(entry_258, item_256)?;
        }
        list_257.finish();
    }
    #[allow(unused_mut)]
    let mut scope_259 = writer.prefix("HibernationOptions");
    if let Some(var_260) = &input.hibernation_options {
        crate::query_ser::serialize_structure_crate_model_launch_template_hibernation_options_request(scope_259, var_260)?;
    }
    #[allow(unused_mut)]
    let mut scope_261 = writer.prefix("MetadataOptions");
    if let Some(var_262) = &input.metadata_options {
        crate::query_ser::serialize_structure_crate_model_launch_template_instance_metadata_options_request(scope_261, var_262)?;
    }
    #[allow(unused_mut)]
    let mut scope_263 = writer.prefix("EnclaveOptions");
    if let Some(var_264) = &input.enclave_options {
        crate::query_ser::serialize_structure_crate_model_launch_template_enclave_options_request(
            scope_263, var_264,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_265 = writer.prefix("InstanceRequirements");
    if let Some(var_266) = &input.instance_requirements {
        crate::query_ser::serialize_structure_crate_model_instance_requirements_request(
            scope_265, var_266,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_267 = writer.prefix("PrivateDnsNameOptions");
    if let Some(var_268) = &input.private_dns_name_options {
        crate::query_ser::serialize_structure_crate_model_launch_template_private_dns_name_options_request(scope_267, var_268)?;
    }
    #[allow(unused_mut)]
    let mut scope_269 = writer.prefix("MaintenanceOptions");
    if let Some(var_270) = &input.maintenance_options {
        crate::query_ser::serialize_structure_crate_model_launch_template_instance_maintenance_options_request(scope_269, var_270)?;
    }
    #[allow(unused_mut)]
    let mut scope_271 = writer.prefix("DisableApiStop");
    if let Some(var_272) = &input.disable_api_stop {
        scope_271.boolean(*var_272);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_add_prefix_list_entry(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::AddPrefixListEntry,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_273 = writer.prefix("Cidr");
    if let Some(var_274) = &input.cidr {
        scope_273.string(var_274);
    }
    #[allow(unused_mut)]
    let mut scope_275 = writer.prefix("Description");
    if let Some(var_276) = &input.description {
        scope_275.string(var_276);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_icmp_type_code(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::IcmpTypeCode,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_277 = writer.prefix("Code");
    if let Some(var_278) = &input.code {
        scope_277.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_278).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_279 = writer.prefix("Type");
    if let Some(var_280) = &input.r#type {
        scope_279.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_280).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_port_range(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::PortRange,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_281 = writer.prefix("From");
    if let Some(var_282) = &input.from {
        scope_281.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_282).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_283 = writer.prefix("To");
    if let Some(var_284) = &input.to {
        scope_283.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_284).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_access_scope_path_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::AccessScopePathRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_285 = writer.prefix("Source");
    if let Some(var_286) = &input.source {
        crate::query_ser::serialize_structure_crate_model_path_statement_request(
            scope_285, var_286,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_287 = writer.prefix("Destination");
    if let Some(var_288) = &input.destination {
        crate::query_ser::serialize_structure_crate_model_path_statement_request(
            scope_287, var_288,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_289 = writer.prefix("ThroughResource");
    if let Some(var_290) = &input.through_resources {
        let mut list_292 = scope_289.start_list(true, Some("item"));
        for item_291 in var_290 {
            #[allow(unused_mut)]
            let mut entry_293 = list_292.entry();
            crate::query_ser::serialize_structure_crate_model_through_resources_statement_request(
                entry_293, item_291,
            )?;
        }
        list_292.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_ipv6_address(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::InstanceIpv6Address,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_294 = writer.prefix("Ipv6Address");
    if let Some(var_295) = &input.ipv6_address {
        scope_294.string(var_295);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_private_ip_address_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::PrivateIpAddressSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_296 = writer.prefix("Primary");
    if let Some(var_297) = &input.primary {
        scope_296.boolean(*var_297);
    }
    #[allow(unused_mut)]
    let mut scope_298 = writer.prefix("PrivateIpAddress");
    if let Some(var_299) = &input.private_ip_address {
        scope_298.string(var_299);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_ipv4_prefix_specification_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::Ipv4PrefixSpecificationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_300 = writer.prefix("Ipv4Prefix");
    if let Some(var_301) = &input.ipv4_prefix {
        scope_300.string(var_301);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_ipv6_prefix_specification_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::Ipv6PrefixSpecificationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_302 = writer.prefix("Ipv6Prefix");
    if let Some(var_303) = &input.ipv6_prefix {
        scope_302.string(var_303);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_price_schedule_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::PriceScheduleSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_304 = writer.prefix("CurrencyCode");
    if let Some(var_305) = &input.currency_code {
        scope_304.string(var_305.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_306 = writer.prefix("Price");
    if let Some(var_307) = &input.price {
        scope_306.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_307).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_308 = writer.prefix("Term");
    if let Some(var_309) = &input.term {
        scope_308.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_309).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::InstanceSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_310 = writer.prefix("InstanceId");
    if let Some(var_311) = &input.instance_id {
        scope_310.string(var_311);
    }
    #[allow(unused_mut)]
    let mut scope_312 = writer.prefix("ExcludeBootVolume");
    if let Some(var_313) = &input.exclude_boot_volume {
        scope_312.boolean(*var_313);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_s3_object_tag(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::S3ObjectTag,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_314 = writer.prefix("Key");
    if let Some(var_315) = &input.key {
        scope_314.string(var_315);
    }
    #[allow(unused_mut)]
    let mut scope_316 = writer.prefix("Value");
    if let Some(var_317) = &input.value {
        scope_316.string(var_317);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_tag(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::Tag,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_318 = writer.prefix("Key");
    if let Some(var_319) = &input.key {
        scope_318.string(var_319);
    }
    #[allow(unused_mut)]
    let mut scope_320 = writer.prefix("Value");
    if let Some(var_321) = &input.value {
        scope_320.string(var_321);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_traffic_mirror_port_range_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::TrafficMirrorPortRangeRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_322 = writer.prefix("FromPort");
    if let Some(var_323) = &input.from_port {
        scope_322.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_323).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_324 = writer.prefix("ToPort");
    if let Some(var_325) = &input.to_port {
        scope_324.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_325).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_transit_gateway_request_options(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::TransitGatewayRequestOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_326 = writer.prefix("AmazonSideAsn");
    if let Some(var_327) = &input.amazon_side_asn {
        scope_326.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_327).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_328 = writer.prefix("AutoAcceptSharedAttachments");
    if let Some(var_329) = &input.auto_accept_shared_attachments {
        scope_328.string(var_329.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_330 = writer.prefix("DefaultRouteTableAssociation");
    if let Some(var_331) = &input.default_route_table_association {
        scope_330.string(var_331.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_332 = writer.prefix("DefaultRouteTablePropagation");
    if let Some(var_333) = &input.default_route_table_propagation {
        scope_332.string(var_333.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_334 = writer.prefix("VpnEcmpSupport");
    if let Some(var_335) = &input.vpn_ecmp_support {
        scope_334.string(var_335.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_336 = writer.prefix("DnsSupport");
    if let Some(var_337) = &input.dns_support {
        scope_336.string(var_337.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_338 = writer.prefix("MulticastSupport");
    if let Some(var_339) = &input.multicast_support {
        scope_338.string(var_339.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_340 = writer.prefix("TransitGatewayCidrBlocks");
    if let Some(var_341) = &input.transit_gateway_cidr_blocks {
        let mut list_343 = scope_340.start_list(true, Some("item"));
        for item_342 in var_341 {
            #[allow(unused_mut)]
            let mut entry_344 = list_343.entry();
            entry_344.string(item_342);
        }
        list_343.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_create_transit_gateway_connect_request_options(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::CreateTransitGatewayConnectRequestOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_345 = writer.prefix("Protocol");
    if let Some(var_346) = &input.protocol {
        scope_345.string(var_346.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_transit_gateway_connect_request_bgp_options(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::TransitGatewayConnectRequestBgpOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_347 = writer.prefix("PeerAsn");
    if let Some(var_348) = &input.peer_asn {
        scope_347.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_348).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_create_transit_gateway_multicast_domain_request_options(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::CreateTransitGatewayMulticastDomainRequestOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_349 = writer.prefix("Igmpv2Support");
    if let Some(var_350) = &input.igmpv2_support {
        scope_349.string(var_350.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_351 = writer.prefix("StaticSourcesSupport");
    if let Some(var_352) = &input.static_sources_support {
        scope_351.string(var_352.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_353 = writer.prefix("AutoAcceptSharedAssociations");
    if let Some(var_354) = &input.auto_accept_shared_associations {
        scope_353.string(var_354.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_create_transit_gateway_vpc_attachment_request_options(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::CreateTransitGatewayVpcAttachmentRequestOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_355 = writer.prefix("DnsSupport");
    if let Some(var_356) = &input.dns_support {
        scope_355.string(var_356.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_357 = writer.prefix("Ipv6Support");
    if let Some(var_358) = &input.ipv6_support {
        scope_357.string(var_358.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_359 = writer.prefix("ApplianceModeSupport");
    if let Some(var_360) = &input.appliance_mode_support {
        scope_359.string(var_360.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_dns_options_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::DnsOptionsSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_361 = writer.prefix("DnsRecordIpType");
    if let Some(var_362) = &input.dns_record_ip_type {
        scope_361.string(var_362.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_vpn_connection_options_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::VpnConnectionOptionsSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_363 = writer.prefix("EnableAcceleration");
    if let Some(var_364) = &input.enable_acceleration {
        scope_363.boolean(*var_364);
    }
    #[allow(unused_mut)]
    let mut scope_365 = writer.prefix("StaticRoutesOnly");
    if let Some(var_366) = &input.static_routes_only {
        scope_365.boolean(*var_366);
    }
    #[allow(unused_mut)]
    let mut scope_367 = writer.prefix("TunnelInsideIpVersion");
    if let Some(var_368) = &input.tunnel_inside_ip_version {
        scope_367.string(var_368.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_369 = writer.prefix("TunnelOptions");
    if let Some(var_370) = &input.tunnel_options {
        let mut list_372 = scope_369.start_list(true, None);
        for item_371 in var_370 {
            #[allow(unused_mut)]
            let mut entry_373 = list_372.entry();
            crate::query_ser::serialize_structure_crate_model_vpn_tunnel_options_specification(
                entry_373, item_371,
            )?;
        }
        list_372.finish();
    }
    #[allow(unused_mut)]
    let mut scope_374 = writer.prefix("LocalIpv4NetworkCidr");
    if let Some(var_375) = &input.local_ipv4_network_cidr {
        scope_374.string(var_375);
    }
    #[allow(unused_mut)]
    let mut scope_376 = writer.prefix("RemoteIpv4NetworkCidr");
    if let Some(var_377) = &input.remote_ipv4_network_cidr {
        scope_376.string(var_377);
    }
    #[allow(unused_mut)]
    let mut scope_378 = writer.prefix("LocalIpv6NetworkCidr");
    if let Some(var_379) = &input.local_ipv6_network_cidr {
        scope_378.string(var_379);
    }
    #[allow(unused_mut)]
    let mut scope_380 = writer.prefix("RemoteIpv6NetworkCidr");
    if let Some(var_381) = &input.remote_ipv6_network_cidr {
        scope_380.string(var_381);
    }
    #[allow(unused_mut)]
    let mut scope_382 = writer.prefix("OutsideIpAddressType");
    if let Some(var_383) = &input.outside_ip_address_type {
        scope_382.string(var_383);
    }
    #[allow(unused_mut)]
    let mut scope_384 = writer.prefix("TransportTransitGatewayAttachmentId");
    if let Some(var_385) = &input.transport_transit_gateway_attachment_id {
        scope_384.string(var_385);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_deregister_instance_tag_attribute_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::DeregisterInstanceTagAttributeRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_386 = writer.prefix("IncludeAllTagsOfInstance");
    if let Some(var_387) = &input.include_all_tags_of_instance {
        scope_386.boolean(*var_387);
    }
    #[allow(unused_mut)]
    let mut scope_388 = writer.prefix("InstanceTagKey");
    if let Some(var_389) = &input.instance_tag_keys {
        let mut list_391 = scope_388.start_list(true, Some("item"));
        for item_390 in var_389 {
            #[allow(unused_mut)]
            let mut entry_392 = list_391.entry();
            entry_392.string(item_390);
        }
        list_391.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_filter(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::Filter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_393 = writer.prefix("Name");
    if let Some(var_394) = &input.name {
        scope_393.string(var_394);
    }
    #[allow(unused_mut)]
    let mut scope_395 = writer.prefix("Value");
    if let Some(var_396) = &input.values {
        let mut list_398 = scope_395.start_list(true, Some("item"));
        for item_397 in var_396 {
            #[allow(unused_mut)]
            let mut entry_399 = list_398.entry();
            entry_399.string(item_397);
        }
        list_398.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_slot_date_time_range_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::SlotDateTimeRangeRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_400 = writer.prefix("EarliestTime");
    if let Some(var_401) = &input.earliest_time {
        scope_400.date_time(var_401, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_402 = writer.prefix("LatestTime");
    if let Some(var_403) = &input.latest_time {
        scope_402.date_time(var_403, aws_smithy_types::date_time::Format::DateTime)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_scheduled_instance_recurrence_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ScheduledInstanceRecurrenceRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_404 = writer.prefix("Frequency");
    if let Some(var_405) = &input.frequency {
        scope_404.string(var_405);
    }
    #[allow(unused_mut)]
    let mut scope_406 = writer.prefix("Interval");
    if let Some(var_407) = &input.interval {
        scope_406.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_407).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_408 = writer.prefix("OccurrenceDay");
    if let Some(var_409) = &input.occurrence_days {
        let mut list_411 = scope_408.start_list(true, Some("OccurenceDay"));
        for item_410 in var_409 {
            #[allow(unused_mut)]
            let mut entry_412 = list_411.entry();
            entry_412.number(
                #[allow(clippy::useless_conversion)]
                aws_smithy_types::Number::NegInt((*item_410).into()),
            );
        }
        list_411.finish();
    }
    #[allow(unused_mut)]
    let mut scope_413 = writer.prefix("OccurrenceRelativeToEnd");
    if let Some(var_414) = &input.occurrence_relative_to_end {
        scope_413.boolean(*var_414);
    }
    #[allow(unused_mut)]
    let mut scope_415 = writer.prefix("OccurrenceUnit");
    if let Some(var_416) = &input.occurrence_unit {
        scope_415.string(var_416);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_slot_start_time_range_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::SlotStartTimeRangeRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_417 = writer.prefix("EarliestTime");
    if let Some(var_418) = &input.earliest_time {
        scope_417.date_time(var_418, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_419 = writer.prefix("LatestTime");
    if let Some(var_420) = &input.latest_time {
        scope_419.date_time(var_420, aws_smithy_types::date_time::Format::DateTime)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_event_window_disassociation_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::InstanceEventWindowDisassociationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_421 = writer.prefix("InstanceId");
    if let Some(var_422) = &input.instance_ids {
        let mut list_424 = scope_421.start_list(true, Some("item"));
        for item_423 in var_422 {
            #[allow(unused_mut)]
            let mut entry_425 = list_424.entry();
            entry_425.string(item_423);
        }
        list_424.finish();
    }
    #[allow(unused_mut)]
    let mut scope_426 = writer.prefix("InstanceTag");
    if let Some(var_427) = &input.instance_tags {
        let mut list_429 = scope_426.start_list(true, Some("item"));
        for item_428 in var_427 {
            #[allow(unused_mut)]
            let mut entry_430 = list_429.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_430, item_428)?;
        }
        list_429.finish();
    }
    #[allow(unused_mut)]
    let mut scope_431 = writer.prefix("DedicatedHostId");
    if let Some(var_432) = &input.dedicated_host_ids {
        let mut list_434 = scope_431.start_list(true, Some("item"));
        for item_433 in var_432 {
            #[allow(unused_mut)]
            let mut entry_435 = list_434.entry();
            entry_435.string(item_433);
        }
        list_434.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_fast_launch_snapshot_configuration_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::FastLaunchSnapshotConfigurationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_436 = writer.prefix("TargetResourceCount");
    if let Some(var_437) = &input.target_resource_count {
        scope_436.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_437).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_fast_launch_launch_template_specification_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::FastLaunchLaunchTemplateSpecificationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_438 = writer.prefix("LaunchTemplateId");
    if let Some(var_439) = &input.launch_template_id {
        scope_438.string(var_439);
    }
    #[allow(unused_mut)]
    let mut scope_440 = writer.prefix("LaunchTemplateName");
    if let Some(var_441) = &input.launch_template_name {
        scope_440.string(var_441);
    }
    #[allow(unused_mut)]
    let mut scope_442 = writer.prefix("Version");
    if let Some(var_443) = &input.version {
        scope_442.string(var_443);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_export_task_s3_location_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ExportTaskS3LocationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_444 = writer.prefix("S3Bucket");
    if let Some(var_445) = &input.s3_bucket {
        scope_444.string(var_445);
    }
    #[allow(unused_mut)]
    let mut scope_446 = writer.prefix("S3Prefix");
    if let Some(var_447) = &input.s3_prefix {
        scope_446.string(var_447);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_integrate_services(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::IntegrateServices,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_448 = writer.prefix("AthenaIntegration");
    if let Some(var_449) = &input.athena_integrations {
        let mut list_451 = scope_448.start_list(true, Some("item"));
        for item_450 in var_449 {
            #[allow(unused_mut)]
            let mut entry_452 = list_451.entry();
            crate::query_ser::serialize_structure_crate_model_athena_integration(
                entry_452, item_450,
            )?;
        }
        list_451.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_requirements_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::InstanceRequirementsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_453 = writer.prefix("VCpuCount");
    if let Some(var_454) = &input.v_cpu_count {
        crate::query_ser::serialize_structure_crate_model_v_cpu_count_range_request(
            scope_453, var_454,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_455 = writer.prefix("MemoryMiB");
    if let Some(var_456) = &input.memory_mi_b {
        crate::query_ser::serialize_structure_crate_model_memory_mi_b_request(scope_455, var_456)?;
    }
    #[allow(unused_mut)]
    let mut scope_457 = writer.prefix("CpuManufacturer");
    if let Some(var_458) = &input.cpu_manufacturers {
        let mut list_460 = scope_457.start_list(true, Some("item"));
        for item_459 in var_458 {
            #[allow(unused_mut)]
            let mut entry_461 = list_460.entry();
            entry_461.string(item_459.as_str());
        }
        list_460.finish();
    }
    #[allow(unused_mut)]
    let mut scope_462 = writer.prefix("MemoryGiBPerVCpu");
    if let Some(var_463) = &input.memory_gi_b_per_v_cpu {
        crate::query_ser::serialize_structure_crate_model_memory_gi_b_per_v_cpu_request(
            scope_462, var_463,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_464 = writer.prefix("ExcludedInstanceType");
    if let Some(var_465) = &input.excluded_instance_types {
        let mut list_467 = scope_464.start_list(true, Some("item"));
        for item_466 in var_465 {
            #[allow(unused_mut)]
            let mut entry_468 = list_467.entry();
            entry_468.string(item_466);
        }
        list_467.finish();
    }
    #[allow(unused_mut)]
    let mut scope_469 = writer.prefix("InstanceGeneration");
    if let Some(var_470) = &input.instance_generations {
        let mut list_472 = scope_469.start_list(true, Some("item"));
        for item_471 in var_470 {
            #[allow(unused_mut)]
            let mut entry_473 = list_472.entry();
            entry_473.string(item_471.as_str());
        }
        list_472.finish();
    }
    #[allow(unused_mut)]
    let mut scope_474 = writer.prefix("SpotMaxPricePercentageOverLowestPrice");
    if let Some(var_475) = &input.spot_max_price_percentage_over_lowest_price {
        scope_474.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_475).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_476 = writer.prefix("OnDemandMaxPricePercentageOverLowestPrice");
    if let Some(var_477) = &input.on_demand_max_price_percentage_over_lowest_price {
        scope_476.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_477).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_478 = writer.prefix("BareMetal");
    if let Some(var_479) = &input.bare_metal {
        scope_478.string(var_479.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_480 = writer.prefix("BurstablePerformance");
    if let Some(var_481) = &input.burstable_performance {
        scope_480.string(var_481.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_482 = writer.prefix("RequireHibernateSupport");
    if let Some(var_483) = &input.require_hibernate_support {
        scope_482.boolean(*var_483);
    }
    #[allow(unused_mut)]
    let mut scope_484 = writer.prefix("NetworkInterfaceCount");
    if let Some(var_485) = &input.network_interface_count {
        crate::query_ser::serialize_structure_crate_model_network_interface_count_request(
            scope_484, var_485,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_486 = writer.prefix("LocalStorage");
    if let Some(var_487) = &input.local_storage {
        scope_486.string(var_487.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_488 = writer.prefix("LocalStorageType");
    if let Some(var_489) = &input.local_storage_types {
        let mut list_491 = scope_488.start_list(true, Some("item"));
        for item_490 in var_489 {
            #[allow(unused_mut)]
            let mut entry_492 = list_491.entry();
            entry_492.string(item_490.as_str());
        }
        list_491.finish();
    }
    #[allow(unused_mut)]
    let mut scope_493 = writer.prefix("TotalLocalStorageGB");
    if let Some(var_494) = &input.total_local_storage_gb {
        crate::query_ser::serialize_structure_crate_model_total_local_storage_gb_request(
            scope_493, var_494,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_495 = writer.prefix("BaselineEbsBandwidthMbps");
    if let Some(var_496) = &input.baseline_ebs_bandwidth_mbps {
        crate::query_ser::serialize_structure_crate_model_baseline_ebs_bandwidth_mbps_request(
            scope_495, var_496,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_497 = writer.prefix("AcceleratorType");
    if let Some(var_498) = &input.accelerator_types {
        let mut list_500 = scope_497.start_list(true, Some("item"));
        for item_499 in var_498 {
            #[allow(unused_mut)]
            let mut entry_501 = list_500.entry();
            entry_501.string(item_499.as_str());
        }
        list_500.finish();
    }
    #[allow(unused_mut)]
    let mut scope_502 = writer.prefix("AcceleratorCount");
    if let Some(var_503) = &input.accelerator_count {
        crate::query_ser::serialize_structure_crate_model_accelerator_count_request(
            scope_502, var_503,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_504 = writer.prefix("AcceleratorManufacturer");
    if let Some(var_505) = &input.accelerator_manufacturers {
        let mut list_507 = scope_504.start_list(true, Some("item"));
        for item_506 in var_505 {
            #[allow(unused_mut)]
            let mut entry_508 = list_507.entry();
            entry_508.string(item_506.as_str());
        }
        list_507.finish();
    }
    #[allow(unused_mut)]
    let mut scope_509 = writer.prefix("AcceleratorName");
    if let Some(var_510) = &input.accelerator_names {
        let mut list_512 = scope_509.start_list(true, Some("item"));
        for item_511 in var_510 {
            #[allow(unused_mut)]
            let mut entry_513 = list_512.entry();
            entry_513.string(item_511.as_str());
        }
        list_512.finish();
    }
    #[allow(unused_mut)]
    let mut scope_514 = writer.prefix("AcceleratorTotalMemoryMiB");
    if let Some(var_515) = &input.accelerator_total_memory_mi_b {
        crate::query_ser::serialize_structure_crate_model_accelerator_total_memory_mi_b_request(
            scope_514, var_515,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_requirements_with_metadata_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::InstanceRequirementsWithMetadataRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_516 = writer.prefix("ArchitectureType");
    if let Some(var_517) = &input.architecture_types {
        let mut list_519 = scope_516.start_list(true, Some("item"));
        for item_518 in var_517 {
            #[allow(unused_mut)]
            let mut entry_520 = list_519.entry();
            entry_520.string(item_518.as_str());
        }
        list_519.finish();
    }
    #[allow(unused_mut)]
    let mut scope_521 = writer.prefix("VirtualizationType");
    if let Some(var_522) = &input.virtualization_types {
        let mut list_524 = scope_521.start_list(true, Some("item"));
        for item_523 in var_522 {
            #[allow(unused_mut)]
            let mut entry_525 = list_524.entry();
            entry_525.string(item_523.as_str());
        }
        list_524.finish();
    }
    #[allow(unused_mut)]
    let mut scope_526 = writer.prefix("InstanceRequirements");
    if let Some(var_527) = &input.instance_requirements {
        crate::query_ser::serialize_structure_crate_model_instance_requirements_request(
            scope_526, var_527,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_client_data(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ClientData,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_528 = writer.prefix("Comment");
    if let Some(var_529) = &input.comment {
        scope_528.string(var_529);
    }
    #[allow(unused_mut)]
    let mut scope_530 = writer.prefix("UploadEnd");
    if let Some(var_531) = &input.upload_end {
        scope_530.date_time(var_531, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_532 = writer.prefix("UploadSize");
    if let Some(var_533) = &input.upload_size {
        scope_532.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_533).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_534 = writer.prefix("UploadStart");
    if let Some(var_535) = &input.upload_start {
        scope_534.date_time(var_535, aws_smithy_types::date_time::Format::DateTime)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_image_disk_container(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ImageDiskContainer,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_536 = writer.prefix("Description");
    if let Some(var_537) = &input.description {
        scope_536.string(var_537);
    }
    #[allow(unused_mut)]
    let mut scope_538 = writer.prefix("DeviceName");
    if let Some(var_539) = &input.device_name {
        scope_538.string(var_539);
    }
    #[allow(unused_mut)]
    let mut scope_540 = writer.prefix("Format");
    if let Some(var_541) = &input.format {
        scope_540.string(var_541);
    }
    #[allow(unused_mut)]
    let mut scope_542 = writer.prefix("SnapshotId");
    if let Some(var_543) = &input.snapshot_id {
        scope_542.string(var_543);
    }
    #[allow(unused_mut)]
    let mut scope_544 = writer.prefix("Url");
    if let Some(var_545) = &input.url {
        scope_544.string(var_545);
    }
    #[allow(unused_mut)]
    let mut scope_546 = writer.prefix("UserBucket");
    if let Some(var_547) = &input.user_bucket {
        crate::query_ser::serialize_structure_crate_model_user_bucket(scope_546, var_547)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_import_image_license_configuration_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ImportImageLicenseConfigurationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_548 = writer.prefix("LicenseConfigurationArn");
    if let Some(var_549) = &input.license_configuration_arn {
        scope_548.string(var_549);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_disk_image(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::DiskImage,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_550 = writer.prefix("Description");
    if let Some(var_551) = &input.description {
        scope_550.string(var_551);
    }
    #[allow(unused_mut)]
    let mut scope_552 = writer.prefix("Image");
    if let Some(var_553) = &input.image {
        crate::query_ser::serialize_structure_crate_model_disk_image_detail(scope_552, var_553)?;
    }
    #[allow(unused_mut)]
    let mut scope_554 = writer.prefix("Volume");
    if let Some(var_555) = &input.volume {
        crate::query_ser::serialize_structure_crate_model_volume_detail(scope_554, var_555)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_import_instance_launch_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ImportInstanceLaunchSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_556 = writer.prefix("AdditionalInfo");
    if let Some(var_557) = &input.additional_info {
        scope_556.string(var_557);
    }
    #[allow(unused_mut)]
    let mut scope_558 = writer.prefix("Architecture");
    if let Some(var_559) = &input.architecture {
        scope_558.string(var_559.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_560 = writer.prefix("GroupId");
    if let Some(var_561) = &input.group_ids {
        let mut list_563 = scope_560.start_list(true, Some("SecurityGroupId"));
        for item_562 in var_561 {
            #[allow(unused_mut)]
            let mut entry_564 = list_563.entry();
            entry_564.string(item_562);
        }
        list_563.finish();
    }
    #[allow(unused_mut)]
    let mut scope_565 = writer.prefix("GroupName");
    if let Some(var_566) = &input.group_names {
        let mut list_568 = scope_565.start_list(true, Some("SecurityGroup"));
        for item_567 in var_566 {
            #[allow(unused_mut)]
            let mut entry_569 = list_568.entry();
            entry_569.string(item_567);
        }
        list_568.finish();
    }
    #[allow(unused_mut)]
    let mut scope_570 = writer.prefix("InstanceInitiatedShutdownBehavior");
    if let Some(var_571) = &input.instance_initiated_shutdown_behavior {
        scope_570.string(var_571.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_572 = writer.prefix("InstanceType");
    if let Some(var_573) = &input.instance_type {
        scope_572.string(var_573.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_574 = writer.prefix("Monitoring");
    if let Some(var_575) = &input.monitoring {
        scope_574.boolean(*var_575);
    }
    #[allow(unused_mut)]
    let mut scope_576 = writer.prefix("Placement");
    if let Some(var_577) = &input.placement {
        crate::query_ser::serialize_structure_crate_model_placement(scope_576, var_577)?;
    }
    #[allow(unused_mut)]
    let mut scope_578 = writer.prefix("PrivateIpAddress");
    if let Some(var_579) = &input.private_ip_address {
        scope_578.string(var_579);
    }
    #[allow(unused_mut)]
    let mut scope_580 = writer.prefix("SubnetId");
    if let Some(var_581) = &input.subnet_id {
        scope_580.string(var_581);
    }
    #[allow(unused_mut)]
    let mut scope_582 = writer.prefix("UserData");
    if let Some(var_583) = &input.user_data {
        crate::query_ser::serialize_structure_crate_model_user_data(scope_582, var_583)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_snapshot_disk_container(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::SnapshotDiskContainer,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_584 = writer.prefix("Description");
    if let Some(var_585) = &input.description {
        scope_584.string(var_585);
    }
    #[allow(unused_mut)]
    let mut scope_586 = writer.prefix("Format");
    if let Some(var_587) = &input.format {
        scope_586.string(var_587);
    }
    #[allow(unused_mut)]
    let mut scope_588 = writer.prefix("Url");
    if let Some(var_589) = &input.url {
        scope_588.string(var_589);
    }
    #[allow(unused_mut)]
    let mut scope_590 = writer.prefix("UserBucket");
    if let Some(var_591) = &input.user_bucket {
        crate::query_ser::serialize_structure_crate_model_user_bucket(scope_590, var_591)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_disk_image_detail(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::DiskImageDetail,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_592 = writer.prefix("Bytes");
    if let Some(var_593) = &input.bytes {
        scope_592.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_593).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_594 = writer.prefix("Format");
    if let Some(var_595) = &input.format {
        scope_594.string(var_595.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_596 = writer.prefix("ImportManifestUrl");
    if let Some(var_597) = &input.import_manifest_url {
        scope_596.string(var_597);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_volume_detail(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::VolumeDetail,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_598 = writer.prefix("Size");
    if let Some(var_599) = &input.size {
        scope_598.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_599).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_dns_servers_options_modify_structure(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::DnsServersOptionsModifyStructure,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_600 = writer.prefix("CustomDnsServers");
    if let Some(var_601) = &input.custom_dns_servers {
        let mut list_603 = scope_600.start_list(true, Some("item"));
        for item_602 in var_601 {
            #[allow(unused_mut)]
            let mut entry_604 = list_603.entry();
            entry_604.string(item_602);
        }
        list_603.finish();
    }
    #[allow(unused_mut)]
    let mut scope_605 = writer.prefix("Enabled");
    if let Some(var_606) = &input.enabled {
        scope_605.boolean(*var_606);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_load_permission_modifications(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LoadPermissionModifications,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_607 = writer.prefix("Add");
    if let Some(var_608) = &input.add {
        let mut list_610 = scope_607.start_list(true, Some("item"));
        for item_609 in var_608 {
            #[allow(unused_mut)]
            let mut entry_611 = list_610.entry();
            crate::query_ser::serialize_structure_crate_model_load_permission_request(
                entry_611, item_609,
            )?;
        }
        list_610.finish();
    }
    #[allow(unused_mut)]
    let mut scope_612 = writer.prefix("Remove");
    if let Some(var_613) = &input.remove {
        let mut list_615 = scope_612.start_list(true, Some("item"));
        for item_614 in var_613 {
            #[allow(unused_mut)]
            let mut entry_616 = list_615.entry();
            crate::query_ser::serialize_structure_crate_model_load_permission_request(
                entry_616, item_614,
            )?;
        }
        list_615.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_attribute_value(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::AttributeValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_617 = writer.prefix("Value");
    if let Some(var_618) = &input.value {
        scope_617.string(var_618);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_permission_modifications(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchPermissionModifications,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_619 = writer.prefix("Add");
    if let Some(var_620) = &input.add {
        let mut list_622 = scope_619.start_list(true, Some("item"));
        for item_621 in var_620 {
            #[allow(unused_mut)]
            let mut entry_623 = list_622.entry();
            crate::query_ser::serialize_structure_crate_model_launch_permission(
                entry_623, item_621,
            )?;
        }
        list_622.finish();
    }
    #[allow(unused_mut)]
    let mut scope_624 = writer.prefix("Remove");
    if let Some(var_625) = &input.remove {
        let mut list_627 = scope_624.start_list(true, Some("item"));
        for item_626 in var_625 {
            #[allow(unused_mut)]
            let mut entry_628 = list_627.entry();
            crate::query_ser::serialize_structure_crate_model_launch_permission(
                entry_628, item_626,
            )?;
        }
        list_627.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_attribute_boolean_value(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::AttributeBooleanValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_629 = writer.prefix("Value");
    if let Some(var_630) = &input.value {
        scope_629.boolean(*var_630);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_block_device_mapping_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::InstanceBlockDeviceMappingSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_631 = writer.prefix("DeviceName");
    if let Some(var_632) = &input.device_name {
        scope_631.string(var_632);
    }
    #[allow(unused_mut)]
    let mut scope_633 = writer.prefix("Ebs");
    if let Some(var_634) = &input.ebs {
        crate::query_ser::serialize_structure_crate_model_ebs_instance_block_device_specification(
            scope_633, var_634,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_635 = writer.prefix("NoDevice");
    if let Some(var_636) = &input.no_device {
        scope_635.string(var_636);
    }
    #[allow(unused_mut)]
    let mut scope_637 = writer.prefix("VirtualName");
    if let Some(var_638) = &input.virtual_name {
        scope_637.string(var_638);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_blob_attribute_value(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::BlobAttributeValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_639 = writer.prefix("Value");
    if let Some(var_640) = &input.value {
        scope_639.string(&aws_smithy_types::base64::encode(var_640));
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_capacity_reservation_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::CapacityReservationSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_641 = writer.prefix("CapacityReservationPreference");
    if let Some(var_642) = &input.capacity_reservation_preference {
        scope_641.string(var_642.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_643 = writer.prefix("CapacityReservationTarget");
    if let Some(var_644) = &input.capacity_reservation_target {
        crate::query_ser::serialize_structure_crate_model_capacity_reservation_target(
            scope_643, var_644,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_credit_specification_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::InstanceCreditSpecificationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_645 = writer.prefix("InstanceId");
    if let Some(var_646) = &input.instance_id {
        scope_645.string(var_646);
    }
    #[allow(unused_mut)]
    let mut scope_647 = writer.prefix("CpuCredits");
    if let Some(var_648) = &input.cpu_credits {
        scope_647.string(var_648);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_remove_ipam_operating_region(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::RemoveIpamOperatingRegion,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_649 = writer.prefix("RegionName");
    if let Some(var_650) = &input.region_name {
        scope_649.string(var_650);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_remove_prefix_list_entry(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::RemovePrefixListEntry,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_651 = writer.prefix("Cidr");
    if let Some(var_652) = &input.cidr {
        scope_651.string(var_652);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_network_interface_attachment_changes(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::NetworkInterfaceAttachmentChanges,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_653 = writer.prefix("AttachmentId");
    if let Some(var_654) = &input.attachment_id {
        scope_653.string(var_654);
    }
    #[allow(unused_mut)]
    let mut scope_655 = writer.prefix("DeleteOnTermination");
    if let Some(var_656) = &input.delete_on_termination {
        scope_655.boolean(*var_656);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_reserved_instances_configuration(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ReservedInstancesConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_657 = writer.prefix("AvailabilityZone");
    if let Some(var_658) = &input.availability_zone {
        scope_657.string(var_658);
    }
    #[allow(unused_mut)]
    let mut scope_659 = writer.prefix("InstanceCount");
    if let Some(var_660) = &input.instance_count {
        scope_659.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_660).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_661 = writer.prefix("InstanceType");
    if let Some(var_662) = &input.instance_type {
        scope_661.string(var_662.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_663 = writer.prefix("Platform");
    if let Some(var_664) = &input.platform {
        scope_663.string(var_664);
    }
    #[allow(unused_mut)]
    let mut scope_665 = writer.prefix("Scope");
    if let Some(var_666) = &input.scope {
        scope_665.string(var_666.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_security_group_rule_update(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::SecurityGroupRuleUpdate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_667 = writer.prefix("SecurityGroupRuleId");
    if let Some(var_668) = &input.security_group_rule_id {
        scope_667.string(var_668);
    }
    #[allow(unused_mut)]
    let mut scope_669 = writer.prefix("SecurityGroupRule");
    if let Some(var_670) = &input.security_group_rule {
        crate::query_ser::serialize_structure_crate_model_security_group_rule_request(
            scope_669, var_670,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_create_volume_permission_modifications(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::CreateVolumePermissionModifications,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_671 = writer.prefix("Add");
    if let Some(var_672) = &input.add {
        let mut list_674 = scope_671.start_list(true, Some("item"));
        for item_673 in var_672 {
            #[allow(unused_mut)]
            let mut entry_675 = list_674.entry();
            crate::query_ser::serialize_structure_crate_model_create_volume_permission(
                entry_675, item_673,
            )?;
        }
        list_674.finish();
    }
    #[allow(unused_mut)]
    let mut scope_676 = writer.prefix("Remove");
    if let Some(var_677) = &input.remove {
        let mut list_679 = scope_676.start_list(true, Some("item"));
        for item_678 in var_677 {
            #[allow(unused_mut)]
            let mut entry_680 = list_679.entry();
            crate::query_ser::serialize_structure_crate_model_create_volume_permission(
                entry_680, item_678,
            )?;
        }
        list_679.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_config(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_681 = writer.prefix("LaunchTemplateSpecification");
    if let Some(var_682) = &input.launch_template_specification {
        crate::query_ser::serialize_structure_crate_model_fleet_launch_template_specification(
            scope_681, var_682,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_683 = writer.prefix("Overrides");
    if let Some(var_684) = &input.overrides {
        let mut list_686 = scope_683.start_list(true, Some("item"));
        for item_685 in var_684 {
            #[allow(unused_mut)]
            let mut entry_687 = list_686.entry();
            crate::query_ser::serialize_structure_crate_model_launch_template_overrides(
                entry_687, item_685,
            )?;
        }
        list_686.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_modify_transit_gateway_options(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ModifyTransitGatewayOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_688 = writer.prefix("AddTransitGatewayCidrBlocks");
    if let Some(var_689) = &input.add_transit_gateway_cidr_blocks {
        let mut list_691 = scope_688.start_list(true, Some("item"));
        for item_690 in var_689 {
            #[allow(unused_mut)]
            let mut entry_692 = list_691.entry();
            entry_692.string(item_690);
        }
        list_691.finish();
    }
    #[allow(unused_mut)]
    let mut scope_693 = writer.prefix("RemoveTransitGatewayCidrBlocks");
    if let Some(var_694) = &input.remove_transit_gateway_cidr_blocks {
        let mut list_696 = scope_693.start_list(true, Some("item"));
        for item_695 in var_694 {
            #[allow(unused_mut)]
            let mut entry_697 = list_696.entry();
            entry_697.string(item_695);
        }
        list_696.finish();
    }
    #[allow(unused_mut)]
    let mut scope_698 = writer.prefix("VpnEcmpSupport");
    if let Some(var_699) = &input.vpn_ecmp_support {
        scope_698.string(var_699.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_700 = writer.prefix("DnsSupport");
    if let Some(var_701) = &input.dns_support {
        scope_700.string(var_701.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_702 = writer.prefix("AutoAcceptSharedAttachments");
    if let Some(var_703) = &input.auto_accept_shared_attachments {
        scope_702.string(var_703.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_704 = writer.prefix("DefaultRouteTableAssociation");
    if let Some(var_705) = &input.default_route_table_association {
        scope_704.string(var_705.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_706 = writer.prefix("AssociationDefaultRouteTableId");
    if let Some(var_707) = &input.association_default_route_table_id {
        scope_706.string(var_707);
    }
    #[allow(unused_mut)]
    let mut scope_708 = writer.prefix("DefaultRouteTablePropagation");
    if let Some(var_709) = &input.default_route_table_propagation {
        scope_708.string(var_709.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_710 = writer.prefix("PropagationDefaultRouteTableId");
    if let Some(var_711) = &input.propagation_default_route_table_id {
        scope_710.string(var_711);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_modify_transit_gateway_vpc_attachment_request_options(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ModifyTransitGatewayVpcAttachmentRequestOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_712 = writer.prefix("DnsSupport");
    if let Some(var_713) = &input.dns_support {
        scope_712.string(var_713.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_714 = writer.prefix("Ipv6Support");
    if let Some(var_715) = &input.ipv6_support {
        scope_714.string(var_715.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_716 = writer.prefix("ApplianceModeSupport");
    if let Some(var_717) = &input.appliance_mode_support {
        scope_716.string(var_717.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_peering_connection_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::PeeringConnectionOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_718 = writer.prefix("AllowDnsResolutionFromRemoteVpc");
    if let Some(var_719) = &input.allow_dns_resolution_from_remote_vpc {
        scope_718.boolean(*var_719);
    }
    #[allow(unused_mut)]
    let mut scope_720 = writer.prefix("AllowEgressFromLocalClassicLinkToRemoteVpc");
    if let Some(var_721) = &input.allow_egress_from_local_classic_link_to_remote_vpc {
        scope_720.boolean(*var_721);
    }
    #[allow(unused_mut)]
    let mut scope_722 = writer.prefix("AllowEgressFromLocalVpcToRemoteClassicLink");
    if let Some(var_723) = &input.allow_egress_from_local_vpc_to_remote_classic_link {
        scope_722.boolean(*var_723);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_modify_vpn_tunnel_options_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ModifyVpnTunnelOptionsSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_724 = writer.prefix("TunnelInsideCidr");
    if let Some(var_725) = &input.tunnel_inside_cidr {
        scope_724.string(var_725);
    }
    #[allow(unused_mut)]
    let mut scope_726 = writer.prefix("TunnelInsideIpv6Cidr");
    if let Some(var_727) = &input.tunnel_inside_ipv6_cidr {
        scope_726.string(var_727);
    }
    #[allow(unused_mut)]
    let mut scope_728 = writer.prefix("PreSharedKey");
    if let Some(var_729) = &input.pre_shared_key {
        scope_728.string(var_729);
    }
    #[allow(unused_mut)]
    let mut scope_730 = writer.prefix("Phase1LifetimeSeconds");
    if let Some(var_731) = &input.phase1_lifetime_seconds {
        scope_730.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_731).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_732 = writer.prefix("Phase2LifetimeSeconds");
    if let Some(var_733) = &input.phase2_lifetime_seconds {
        scope_732.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_733).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_734 = writer.prefix("RekeyMarginTimeSeconds");
    if let Some(var_735) = &input.rekey_margin_time_seconds {
        scope_734.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_735).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_736 = writer.prefix("RekeyFuzzPercentage");
    if let Some(var_737) = &input.rekey_fuzz_percentage {
        scope_736.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_737).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_738 = writer.prefix("ReplayWindowSize");
    if let Some(var_739) = &input.replay_window_size {
        scope_738.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_739).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_740 = writer.prefix("DPDTimeoutSeconds");
    if let Some(var_741) = &input.dpd_timeout_seconds {
        scope_740.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_741).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_742 = writer.prefix("DPDTimeoutAction");
    if let Some(var_743) = &input.dpd_timeout_action {
        scope_742.string(var_743);
    }
    #[allow(unused_mut)]
    let mut scope_744 = writer.prefix("Phase1EncryptionAlgorithm");
    if let Some(var_745) = &input.phase1_encryption_algorithms {
        let mut list_747 = scope_744.start_list(true, Some("item"));
        for item_746 in var_745 {
            #[allow(unused_mut)]
            let mut entry_748 = list_747.entry();
            crate::query_ser::serialize_structure_crate_model_phase1_encryption_algorithms_request_list_value(entry_748, item_746)?;
        }
        list_747.finish();
    }
    #[allow(unused_mut)]
    let mut scope_749 = writer.prefix("Phase2EncryptionAlgorithm");
    if let Some(var_750) = &input.phase2_encryption_algorithms {
        let mut list_752 = scope_749.start_list(true, Some("item"));
        for item_751 in var_750 {
            #[allow(unused_mut)]
            let mut entry_753 = list_752.entry();
            crate::query_ser::serialize_structure_crate_model_phase2_encryption_algorithms_request_list_value(entry_753, item_751)?;
        }
        list_752.finish();
    }
    #[allow(unused_mut)]
    let mut scope_754 = writer.prefix("Phase1IntegrityAlgorithm");
    if let Some(var_755) = &input.phase1_integrity_algorithms {
        let mut list_757 = scope_754.start_list(true, Some("item"));
        for item_756 in var_755 {
            #[allow(unused_mut)]
            let mut entry_758 = list_757.entry();
            crate::query_ser::serialize_structure_crate_model_phase1_integrity_algorithms_request_list_value(entry_758, item_756)?;
        }
        list_757.finish();
    }
    #[allow(unused_mut)]
    let mut scope_759 = writer.prefix("Phase2IntegrityAlgorithm");
    if let Some(var_760) = &input.phase2_integrity_algorithms {
        let mut list_762 = scope_759.start_list(true, Some("item"));
        for item_761 in var_760 {
            #[allow(unused_mut)]
            let mut entry_763 = list_762.entry();
            crate::query_ser::serialize_structure_crate_model_phase2_integrity_algorithms_request_list_value(entry_763, item_761)?;
        }
        list_762.finish();
    }
    #[allow(unused_mut)]
    let mut scope_764 = writer.prefix("Phase1DHGroupNumber");
    if let Some(var_765) = &input.phase1_dh_group_numbers {
        let mut list_767 = scope_764.start_list(true, Some("item"));
        for item_766 in var_765 {
            #[allow(unused_mut)]
            let mut entry_768 = list_767.entry();
            crate::query_ser::serialize_structure_crate_model_phase1_dh_group_numbers_request_list_value(entry_768, item_766)?;
        }
        list_767.finish();
    }
    #[allow(unused_mut)]
    let mut scope_769 = writer.prefix("Phase2DHGroupNumber");
    if let Some(var_770) = &input.phase2_dh_group_numbers {
        let mut list_772 = scope_769.start_list(true, Some("item"));
        for item_771 in var_770 {
            #[allow(unused_mut)]
            let mut entry_773 = list_772.entry();
            crate::query_ser::serialize_structure_crate_model_phase2_dh_group_numbers_request_list_value(entry_773, item_771)?;
        }
        list_772.finish();
    }
    #[allow(unused_mut)]
    let mut scope_774 = writer.prefix("IKEVersion");
    if let Some(var_775) = &input.ike_versions {
        let mut list_777 = scope_774.start_list(true, Some("item"));
        for item_776 in var_775 {
            #[allow(unused_mut)]
            let mut entry_778 = list_777.entry();
            crate::query_ser::serialize_structure_crate_model_ike_versions_request_list_value(
                entry_778, item_776,
            )?;
        }
        list_777.finish();
    }
    #[allow(unused_mut)]
    let mut scope_779 = writer.prefix("StartupAction");
    if let Some(var_780) = &input.startup_action {
        scope_779.string(var_780);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_cidr_authorization_context(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::CidrAuthorizationContext,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_781 = writer.prefix("Message");
    if let Some(var_782) = &input.message {
        scope_781.string(var_782);
    }
    #[allow(unused_mut)]
    let mut scope_783 = writer.prefix("Signature");
    if let Some(var_784) = &input.signature {
        scope_783.string(var_784);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_ipam_cidr_authorization_context(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::IpamCidrAuthorizationContext,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_785 = writer.prefix("Message");
    if let Some(var_786) = &input.message {
        scope_785.string(var_786);
    }
    #[allow(unused_mut)]
    let mut scope_787 = writer.prefix("Signature");
    if let Some(var_788) = &input.signature {
        scope_787.string(var_788);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_reserved_instance_limit_price(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ReservedInstanceLimitPrice,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_789 = writer.prefix("Amount");
    if let Some(var_790) = &input.amount {
        scope_789.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_790).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_791 = writer.prefix("CurrencyCode");
    if let Some(var_792) = &input.currency_code {
        scope_791.string(var_792.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_purchase_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::PurchaseRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_793 = writer.prefix("InstanceCount");
    if let Some(var_794) = &input.instance_count {
        scope_793.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_794).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_795 = writer.prefix("PurchaseToken");
    if let Some(var_796) = &input.purchase_token {
        scope_795.string(var_796);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_register_instance_tag_attribute_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::RegisterInstanceTagAttributeRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_797 = writer.prefix("IncludeAllTagsOfInstance");
    if let Some(var_798) = &input.include_all_tags_of_instance {
        scope_797.boolean(*var_798);
    }
    #[allow(unused_mut)]
    let mut scope_799 = writer.prefix("InstanceTagKey");
    if let Some(var_800) = &input.instance_tag_keys {
        let mut list_802 = scope_799.start_list(true, Some("item"));
        for item_801 in var_800 {
            #[allow(unused_mut)]
            let mut entry_803 = list_802.entry();
            entry_803.string(item_801);
        }
        list_802.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_spot_fleet_request_config_data(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::SpotFleetRequestConfigData,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_804 = writer.prefix("AllocationStrategy");
    if let Some(var_805) = &input.allocation_strategy {
        scope_804.string(var_805.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_806 = writer.prefix("OnDemandAllocationStrategy");
    if let Some(var_807) = &input.on_demand_allocation_strategy {
        scope_806.string(var_807.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_808 = writer.prefix("SpotMaintenanceStrategies");
    if let Some(var_809) = &input.spot_maintenance_strategies {
        crate::query_ser::serialize_structure_crate_model_spot_maintenance_strategies(
            scope_808, var_809,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_810 = writer.prefix("ClientToken");
    if let Some(var_811) = &input.client_token {
        scope_810.string(var_811);
    }
    #[allow(unused_mut)]
    let mut scope_812 = writer.prefix("ExcessCapacityTerminationPolicy");
    if let Some(var_813) = &input.excess_capacity_termination_policy {
        scope_812.string(var_813.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_814 = writer.prefix("FulfilledCapacity");
    if let Some(var_815) = &input.fulfilled_capacity {
        scope_814.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_815).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_816 = writer.prefix("OnDemandFulfilledCapacity");
    if let Some(var_817) = &input.on_demand_fulfilled_capacity {
        scope_816.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_817).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_818 = writer.prefix("IamFleetRole");
    if let Some(var_819) = &input.iam_fleet_role {
        scope_818.string(var_819);
    }
    #[allow(unused_mut)]
    let mut scope_820 = writer.prefix("LaunchSpecifications");
    if let Some(var_821) = &input.launch_specifications {
        let mut list_823 = scope_820.start_list(true, Some("item"));
        for item_822 in var_821 {
            #[allow(unused_mut)]
            let mut entry_824 = list_823.entry();
            crate::query_ser::serialize_structure_crate_model_spot_fleet_launch_specification(
                entry_824, item_822,
            )?;
        }
        list_823.finish();
    }
    #[allow(unused_mut)]
    let mut scope_825 = writer.prefix("LaunchTemplateConfigs");
    if let Some(var_826) = &input.launch_template_configs {
        let mut list_828 = scope_825.start_list(true, Some("item"));
        for item_827 in var_826 {
            #[allow(unused_mut)]
            let mut entry_829 = list_828.entry();
            crate::query_ser::serialize_structure_crate_model_launch_template_config(
                entry_829, item_827,
            )?;
        }
        list_828.finish();
    }
    #[allow(unused_mut)]
    let mut scope_830 = writer.prefix("SpotPrice");
    if let Some(var_831) = &input.spot_price {
        scope_830.string(var_831);
    }
    #[allow(unused_mut)]
    let mut scope_832 = writer.prefix("TargetCapacity");
    if let Some(var_833) = &input.target_capacity {
        scope_832.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_833).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_834 = writer.prefix("OnDemandTargetCapacity");
    if let Some(var_835) = &input.on_demand_target_capacity {
        scope_834.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_835).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_836 = writer.prefix("OnDemandMaxTotalPrice");
    if let Some(var_837) = &input.on_demand_max_total_price {
        scope_836.string(var_837);
    }
    #[allow(unused_mut)]
    let mut scope_838 = writer.prefix("SpotMaxTotalPrice");
    if let Some(var_839) = &input.spot_max_total_price {
        scope_838.string(var_839);
    }
    #[allow(unused_mut)]
    let mut scope_840 = writer.prefix("TerminateInstancesWithExpiration");
    if let Some(var_841) = &input.terminate_instances_with_expiration {
        scope_840.boolean(*var_841);
    }
    #[allow(unused_mut)]
    let mut scope_842 = writer.prefix("Type");
    if let Some(var_843) = &input.r#type {
        scope_842.string(var_843.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_844 = writer.prefix("ValidFrom");
    if let Some(var_845) = &input.valid_from {
        scope_844.date_time(var_845, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_846 = writer.prefix("ValidUntil");
    if let Some(var_847) = &input.valid_until {
        scope_846.date_time(var_847, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_848 = writer.prefix("ReplaceUnhealthyInstances");
    if let Some(var_849) = &input.replace_unhealthy_instances {
        scope_848.boolean(*var_849);
    }
    #[allow(unused_mut)]
    let mut scope_850 = writer.prefix("InstanceInterruptionBehavior");
    if let Some(var_851) = &input.instance_interruption_behavior {
        scope_850.string(var_851.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_852 = writer.prefix("LoadBalancersConfig");
    if let Some(var_853) = &input.load_balancers_config {
        crate::query_ser::serialize_structure_crate_model_load_balancers_config(
            scope_852, var_853,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_854 = writer.prefix("InstancePoolsToUseCount");
    if let Some(var_855) = &input.instance_pools_to_use_count {
        scope_854.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_855).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_856 = writer.prefix("Context");
    if let Some(var_857) = &input.context {
        scope_856.string(var_857);
    }
    #[allow(unused_mut)]
    let mut scope_858 = writer.prefix("TargetCapacityUnitType");
    if let Some(var_859) = &input.target_capacity_unit_type {
        scope_858.string(var_859.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_860 = writer.prefix("TagSpecification");
    if let Some(var_861) = &input.tag_specifications {
        let mut list_863 = scope_860.start_list(true, Some("item"));
        for item_862 in var_861 {
            #[allow(unused_mut)]
            let mut entry_864 = list_863.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_864, item_862,
            )?;
        }
        list_863.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_request_spot_launch_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::RequestSpotLaunchSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_865 = writer.prefix("SecurityGroupId");
    if let Some(var_866) = &input.security_group_ids {
        let mut list_868 = scope_865.start_list(true, Some("item"));
        for item_867 in var_866 {
            #[allow(unused_mut)]
            let mut entry_869 = list_868.entry();
            entry_869.string(item_867);
        }
        list_868.finish();
    }
    #[allow(unused_mut)]
    let mut scope_870 = writer.prefix("SecurityGroup");
    if let Some(var_871) = &input.security_groups {
        let mut list_873 = scope_870.start_list(true, Some("item"));
        for item_872 in var_871 {
            #[allow(unused_mut)]
            let mut entry_874 = list_873.entry();
            entry_874.string(item_872);
        }
        list_873.finish();
    }
    #[allow(unused_mut)]
    let mut scope_875 = writer.prefix("AddressingType");
    if let Some(var_876) = &input.addressing_type {
        scope_875.string(var_876);
    }
    #[allow(unused_mut)]
    let mut scope_877 = writer.prefix("BlockDeviceMapping");
    if let Some(var_878) = &input.block_device_mappings {
        let mut list_880 = scope_877.start_list(true, Some("item"));
        for item_879 in var_878 {
            #[allow(unused_mut)]
            let mut entry_881 = list_880.entry();
            crate::query_ser::serialize_structure_crate_model_block_device_mapping(
                entry_881, item_879,
            )?;
        }
        list_880.finish();
    }
    #[allow(unused_mut)]
    let mut scope_882 = writer.prefix("EbsOptimized");
    if let Some(var_883) = &input.ebs_optimized {
        scope_882.boolean(*var_883);
    }
    #[allow(unused_mut)]
    let mut scope_884 = writer.prefix("IamInstanceProfile");
    if let Some(var_885) = &input.iam_instance_profile {
        crate::query_ser::serialize_structure_crate_model_iam_instance_profile_specification(
            scope_884, var_885,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_886 = writer.prefix("ImageId");
    if let Some(var_887) = &input.image_id {
        scope_886.string(var_887);
    }
    #[allow(unused_mut)]
    let mut scope_888 = writer.prefix("InstanceType");
    if let Some(var_889) = &input.instance_type {
        scope_888.string(var_889.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_890 = writer.prefix("KernelId");
    if let Some(var_891) = &input.kernel_id {
        scope_890.string(var_891);
    }
    #[allow(unused_mut)]
    let mut scope_892 = writer.prefix("KeyName");
    if let Some(var_893) = &input.key_name {
        scope_892.string(var_893);
    }
    #[allow(unused_mut)]
    let mut scope_894 = writer.prefix("Monitoring");
    if let Some(var_895) = &input.monitoring {
        crate::query_ser::serialize_structure_crate_model_run_instances_monitoring_enabled(
            scope_894, var_895,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_896 = writer.prefix("NetworkInterface");
    if let Some(var_897) = &input.network_interfaces {
        let mut list_899 = scope_896.start_list(true, Some("item"));
        for item_898 in var_897 {
            #[allow(unused_mut)]
            let mut entry_900 = list_899.entry();
            crate::query_ser::serialize_structure_crate_model_instance_network_interface_specification(entry_900, item_898)?;
        }
        list_899.finish();
    }
    #[allow(unused_mut)]
    let mut scope_901 = writer.prefix("Placement");
    if let Some(var_902) = &input.placement {
        crate::query_ser::serialize_structure_crate_model_spot_placement(scope_901, var_902)?;
    }
    #[allow(unused_mut)]
    let mut scope_903 = writer.prefix("RamdiskId");
    if let Some(var_904) = &input.ramdisk_id {
        scope_903.string(var_904);
    }
    #[allow(unused_mut)]
    let mut scope_905 = writer.prefix("SubnetId");
    if let Some(var_906) = &input.subnet_id {
        scope_905.string(var_906);
    }
    #[allow(unused_mut)]
    let mut scope_907 = writer.prefix("UserData");
    if let Some(var_908) = &input.user_data {
        scope_907.string(var_908);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_run_instances_monitoring_enabled(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::RunInstancesMonitoringEnabled,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_909 = writer.prefix("Enabled");
    if let Some(var_910) = &input.enabled {
        scope_909.boolean(*var_910);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_placement(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::Placement,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_911 = writer.prefix("AvailabilityZone");
    if let Some(var_912) = &input.availability_zone {
        scope_911.string(var_912);
    }
    #[allow(unused_mut)]
    let mut scope_913 = writer.prefix("Affinity");
    if let Some(var_914) = &input.affinity {
        scope_913.string(var_914);
    }
    #[allow(unused_mut)]
    let mut scope_915 = writer.prefix("GroupName");
    if let Some(var_916) = &input.group_name {
        scope_915.string(var_916);
    }
    #[allow(unused_mut)]
    let mut scope_917 = writer.prefix("PartitionNumber");
    if let Some(var_918) = &input.partition_number {
        scope_917.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_918).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_919 = writer.prefix("HostId");
    if let Some(var_920) = &input.host_id {
        scope_919.string(var_920);
    }
    #[allow(unused_mut)]
    let mut scope_921 = writer.prefix("Tenancy");
    if let Some(var_922) = &input.tenancy {
        scope_921.string(var_922.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_923 = writer.prefix("SpreadDomain");
    if let Some(var_924) = &input.spread_domain {
        scope_923.string(var_924);
    }
    #[allow(unused_mut)]
    let mut scope_925 = writer.prefix("HostResourceGroupArn");
    if let Some(var_926) = &input.host_resource_group_arn {
        scope_925.string(var_926);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_network_interface_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::InstanceNetworkInterfaceSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_927 = writer.prefix("AssociatePublicIpAddress");
    if let Some(var_928) = &input.associate_public_ip_address {
        scope_927.boolean(*var_928);
    }
    #[allow(unused_mut)]
    let mut scope_929 = writer.prefix("DeleteOnTermination");
    if let Some(var_930) = &input.delete_on_termination {
        scope_929.boolean(*var_930);
    }
    #[allow(unused_mut)]
    let mut scope_931 = writer.prefix("Description");
    if let Some(var_932) = &input.description {
        scope_931.string(var_932);
    }
    #[allow(unused_mut)]
    let mut scope_933 = writer.prefix("DeviceIndex");
    if let Some(var_934) = &input.device_index {
        scope_933.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_934).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_935 = writer.prefix("SecurityGroupId");
    if let Some(var_936) = &input.groups {
        let mut list_938 = scope_935.start_list(true, Some("SecurityGroupId"));
        for item_937 in var_936 {
            #[allow(unused_mut)]
            let mut entry_939 = list_938.entry();
            entry_939.string(item_937);
        }
        list_938.finish();
    }
    #[allow(unused_mut)]
    let mut scope_940 = writer.prefix("Ipv6AddressCount");
    if let Some(var_941) = &input.ipv6_address_count {
        scope_940.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_941).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_942 = writer.prefix("Ipv6Addresses");
    if let Some(var_943) = &input.ipv6_addresses {
        let mut list_945 = scope_942.start_list(true, Some("item"));
        for item_944 in var_943 {
            #[allow(unused_mut)]
            let mut entry_946 = list_945.entry();
            crate::query_ser::serialize_structure_crate_model_instance_ipv6_address(
                entry_946, item_944,
            )?;
        }
        list_945.finish();
    }
    #[allow(unused_mut)]
    let mut scope_947 = writer.prefix("NetworkInterfaceId");
    if let Some(var_948) = &input.network_interface_id {
        scope_947.string(var_948);
    }
    #[allow(unused_mut)]
    let mut scope_949 = writer.prefix("PrivateIpAddress");
    if let Some(var_950) = &input.private_ip_address {
        scope_949.string(var_950);
    }
    #[allow(unused_mut)]
    let mut scope_951 = writer.prefix("PrivateIpAddresses");
    if let Some(var_952) = &input.private_ip_addresses {
        let mut list_954 = scope_951.start_list(true, Some("item"));
        for item_953 in var_952 {
            #[allow(unused_mut)]
            let mut entry_955 = list_954.entry();
            crate::query_ser::serialize_structure_crate_model_private_ip_address_specification(
                entry_955, item_953,
            )?;
        }
        list_954.finish();
    }
    #[allow(unused_mut)]
    let mut scope_956 = writer.prefix("SecondaryPrivateIpAddressCount");
    if let Some(var_957) = &input.secondary_private_ip_address_count {
        scope_956.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_957).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_958 = writer.prefix("SubnetId");
    if let Some(var_959) = &input.subnet_id {
        scope_958.string(var_959);
    }
    #[allow(unused_mut)]
    let mut scope_960 = writer.prefix("AssociateCarrierIpAddress");
    if let Some(var_961) = &input.associate_carrier_ip_address {
        scope_960.boolean(*var_961);
    }
    #[allow(unused_mut)]
    let mut scope_962 = writer.prefix("InterfaceType");
    if let Some(var_963) = &input.interface_type {
        scope_962.string(var_963);
    }
    #[allow(unused_mut)]
    let mut scope_964 = writer.prefix("NetworkCardIndex");
    if let Some(var_965) = &input.network_card_index {
        scope_964.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_965).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_966 = writer.prefix("Ipv4Prefix");
    if let Some(var_967) = &input.ipv4_prefixes {
        let mut list_969 = scope_966.start_list(true, Some("item"));
        for item_968 in var_967 {
            #[allow(unused_mut)]
            let mut entry_970 = list_969.entry();
            crate::query_ser::serialize_structure_crate_model_ipv4_prefix_specification_request(
                entry_970, item_968,
            )?;
        }
        list_969.finish();
    }
    #[allow(unused_mut)]
    let mut scope_971 = writer.prefix("Ipv4PrefixCount");
    if let Some(var_972) = &input.ipv4_prefix_count {
        scope_971.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_972).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_973 = writer.prefix("Ipv6Prefix");
    if let Some(var_974) = &input.ipv6_prefixes {
        let mut list_976 = scope_973.start_list(true, Some("item"));
        for item_975 in var_974 {
            #[allow(unused_mut)]
            let mut entry_977 = list_976.entry();
            crate::query_ser::serialize_structure_crate_model_ipv6_prefix_specification_request(
                entry_977, item_975,
            )?;
        }
        list_976.finish();
    }
    #[allow(unused_mut)]
    let mut scope_978 = writer.prefix("Ipv6PrefixCount");
    if let Some(var_979) = &input.ipv6_prefix_count {
        scope_978.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_979).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_elastic_gpu_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ElasticGpuSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_980 = writer.prefix("Type");
    if let Some(var_981) = &input.r#type {
        scope_980.string(var_981);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_elastic_inference_accelerator(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ElasticInferenceAccelerator,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_982 = writer.prefix("Type");
    if let Some(var_983) = &input.r#type {
        scope_982.string(var_983);
    }
    #[allow(unused_mut)]
    let mut scope_984 = writer.prefix("Count");
    if let Some(var_985) = &input.count {
        scope_984.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_985).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_986 = writer.prefix("LaunchTemplateId");
    if let Some(var_987) = &input.launch_template_id {
        scope_986.string(var_987);
    }
    #[allow(unused_mut)]
    let mut scope_988 = writer.prefix("LaunchTemplateName");
    if let Some(var_989) = &input.launch_template_name {
        scope_988.string(var_989);
    }
    #[allow(unused_mut)]
    let mut scope_990 = writer.prefix("Version");
    if let Some(var_991) = &input.version {
        scope_990.string(var_991);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_market_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::InstanceMarketOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_992 = writer.prefix("MarketType");
    if let Some(var_993) = &input.market_type {
        scope_992.string(var_993.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_994 = writer.prefix("SpotOptions");
    if let Some(var_995) = &input.spot_options {
        crate::query_ser::serialize_structure_crate_model_spot_market_options(scope_994, var_995)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_credit_specification_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::CreditSpecificationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_996 = writer.prefix("CpuCredits");
    if let Some(var_997) = &input.cpu_credits {
        scope_996.string(var_997);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_cpu_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::CpuOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_998 = writer.prefix("CoreCount");
    if let Some(var_999) = &input.core_count {
        scope_998.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_999).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1000 = writer.prefix("ThreadsPerCore");
    if let Some(var_1001) = &input.threads_per_core {
        scope_1000.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1001).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_hibernation_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::HibernationOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1002 = writer.prefix("Configured");
    if let Some(var_1003) = &input.configured {
        scope_1002.boolean(*var_1003);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_license_configuration_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LicenseConfigurationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1004 = writer.prefix("LicenseConfigurationArn");
    if let Some(var_1005) = &input.license_configuration_arn {
        scope_1004.string(var_1005);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_metadata_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::InstanceMetadataOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1006 = writer.prefix("HttpTokens");
    if let Some(var_1007) = &input.http_tokens {
        scope_1006.string(var_1007.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1008 = writer.prefix("HttpPutResponseHopLimit");
    if let Some(var_1009) = &input.http_put_response_hop_limit {
        scope_1008.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1009).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1010 = writer.prefix("HttpEndpoint");
    if let Some(var_1011) = &input.http_endpoint {
        scope_1010.string(var_1011.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1012 = writer.prefix("HttpProtocolIpv6");
    if let Some(var_1013) = &input.http_protocol_ipv6 {
        scope_1012.string(var_1013.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1014 = writer.prefix("InstanceMetadataTags");
    if let Some(var_1015) = &input.instance_metadata_tags {
        scope_1014.string(var_1015.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_enclave_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::EnclaveOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1016 = writer.prefix("Enabled");
    if let Some(var_1017) = &input.enabled {
        scope_1016.boolean(*var_1017);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_private_dns_name_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::PrivateDnsNameOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1018 = writer.prefix("HostnameType");
    if let Some(var_1019) = &input.hostname_type {
        scope_1018.string(var_1019.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1020 = writer.prefix("EnableResourceNameDnsARecord");
    if let Some(var_1021) = &input.enable_resource_name_dns_a_record {
        scope_1020.boolean(*var_1021);
    }
    #[allow(unused_mut)]
    let mut scope_1022 = writer.prefix("EnableResourceNameDnsAAAARecord");
    if let Some(var_1023) = &input.enable_resource_name_dns_aaaa_record {
        scope_1022.boolean(*var_1023);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_maintenance_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::InstanceMaintenanceOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1024 = writer.prefix("AutoRecovery");
    if let Some(var_1025) = &input.auto_recovery {
        scope_1024.string(var_1025.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_scheduled_instances_launch_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ScheduledInstancesLaunchSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1026 = writer.prefix("BlockDeviceMapping");
    if let Some(var_1027) = &input.block_device_mappings {
        let mut list_1029 = scope_1026.start_list(true, Some("BlockDeviceMapping"));
        for item_1028 in var_1027 {
            #[allow(unused_mut)]
            let mut entry_1030 = list_1029.entry();
            crate::query_ser::serialize_structure_crate_model_scheduled_instances_block_device_mapping(entry_1030, item_1028)?;
        }
        list_1029.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1031 = writer.prefix("EbsOptimized");
    if let Some(var_1032) = &input.ebs_optimized {
        scope_1031.boolean(*var_1032);
    }
    #[allow(unused_mut)]
    let mut scope_1033 = writer.prefix("IamInstanceProfile");
    if let Some(var_1034) = &input.iam_instance_profile {
        crate::query_ser::serialize_structure_crate_model_scheduled_instances_iam_instance_profile(
            scope_1033, var_1034,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1035 = writer.prefix("ImageId");
    if let Some(var_1036) = &input.image_id {
        scope_1035.string(var_1036);
    }
    #[allow(unused_mut)]
    let mut scope_1037 = writer.prefix("InstanceType");
    if let Some(var_1038) = &input.instance_type {
        scope_1037.string(var_1038);
    }
    #[allow(unused_mut)]
    let mut scope_1039 = writer.prefix("KernelId");
    if let Some(var_1040) = &input.kernel_id {
        scope_1039.string(var_1040);
    }
    #[allow(unused_mut)]
    let mut scope_1041 = writer.prefix("KeyName");
    if let Some(var_1042) = &input.key_name {
        scope_1041.string(var_1042);
    }
    #[allow(unused_mut)]
    let mut scope_1043 = writer.prefix("Monitoring");
    if let Some(var_1044) = &input.monitoring {
        crate::query_ser::serialize_structure_crate_model_scheduled_instances_monitoring(
            scope_1043, var_1044,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1045 = writer.prefix("NetworkInterface");
    if let Some(var_1046) = &input.network_interfaces {
        let mut list_1048 = scope_1045.start_list(true, Some("NetworkInterface"));
        for item_1047 in var_1046 {
            #[allow(unused_mut)]
            let mut entry_1049 = list_1048.entry();
            crate::query_ser::serialize_structure_crate_model_scheduled_instances_network_interface(entry_1049, item_1047)?;
        }
        list_1048.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1050 = writer.prefix("Placement");
    if let Some(var_1051) = &input.placement {
        crate::query_ser::serialize_structure_crate_model_scheduled_instances_placement(
            scope_1050, var_1051,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1052 = writer.prefix("RamdiskId");
    if let Some(var_1053) = &input.ramdisk_id {
        scope_1052.string(var_1053);
    }
    #[allow(unused_mut)]
    let mut scope_1054 = writer.prefix("SecurityGroupId");
    if let Some(var_1055) = &input.security_group_ids {
        let mut list_1057 = scope_1054.start_list(true, Some("SecurityGroupId"));
        for item_1056 in var_1055 {
            #[allow(unused_mut)]
            let mut entry_1058 = list_1057.entry();
            entry_1058.string(item_1056);
        }
        list_1057.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1059 = writer.prefix("SubnetId");
    if let Some(var_1060) = &input.subnet_id {
        scope_1059.string(var_1060);
    }
    #[allow(unused_mut)]
    let mut scope_1061 = writer.prefix("UserData");
    if let Some(var_1062) = &input.user_data {
        scope_1061.string(var_1062);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_security_group_rule_description(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::SecurityGroupRuleDescription,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1063 = writer.prefix("SecurityGroupRuleId");
    if let Some(var_1064) = &input.security_group_rule_id {
        scope_1063.string(var_1064);
    }
    #[allow(unused_mut)]
    let mut scope_1065 = writer.prefix("Description");
    if let Some(var_1066) = &input.description {
        scope_1065.string(var_1066);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_ip_range(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::IpRange,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1067 = writer.prefix("CidrIp");
    if let Some(var_1068) = &input.cidr_ip {
        scope_1067.string(var_1068);
    }
    #[allow(unused_mut)]
    let mut scope_1069 = writer.prefix("Description");
    if let Some(var_1070) = &input.description {
        scope_1069.string(var_1070);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_ipv6_range(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::Ipv6Range,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1071 = writer.prefix("CidrIpv6");
    if let Some(var_1072) = &input.cidr_ipv6 {
        scope_1071.string(var_1072);
    }
    #[allow(unused_mut)]
    let mut scope_1073 = writer.prefix("Description");
    if let Some(var_1074) = &input.description {
        scope_1073.string(var_1074);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_prefix_list_id(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::PrefixListId,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1075 = writer.prefix("Description");
    if let Some(var_1076) = &input.description {
        scope_1075.string(var_1076);
    }
    #[allow(unused_mut)]
    let mut scope_1077 = writer.prefix("PrefixListId");
    if let Some(var_1078) = &input.prefix_list_id {
        scope_1077.string(var_1078);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_user_id_group_pair(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::UserIdGroupPair,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1079 = writer.prefix("Description");
    if let Some(var_1080) = &input.description {
        scope_1079.string(var_1080);
    }
    #[allow(unused_mut)]
    let mut scope_1081 = writer.prefix("GroupId");
    if let Some(var_1082) = &input.group_id {
        scope_1081.string(var_1082);
    }
    #[allow(unused_mut)]
    let mut scope_1083 = writer.prefix("GroupName");
    if let Some(var_1084) = &input.group_name {
        scope_1083.string(var_1084);
    }
    #[allow(unused_mut)]
    let mut scope_1085 = writer.prefix("PeeringStatus");
    if let Some(var_1086) = &input.peering_status {
        scope_1085.string(var_1086);
    }
    #[allow(unused_mut)]
    let mut scope_1087 = writer.prefix("UserId");
    if let Some(var_1088) = &input.user_id {
        scope_1087.string(var_1088);
    }
    #[allow(unused_mut)]
    let mut scope_1089 = writer.prefix("VpcId");
    if let Some(var_1090) = &input.vpc_id {
        scope_1089.string(var_1090);
    }
    #[allow(unused_mut)]
    let mut scope_1091 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_1092) = &input.vpc_peering_connection_id {
        scope_1091.string(var_1092);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_s3_storage(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::S3Storage,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1093 = writer.prefix("AWSAccessKeyId");
    if let Some(var_1094) = &input.aws_access_key_id {
        scope_1093.string(var_1094);
    }
    #[allow(unused_mut)]
    let mut scope_1095 = writer.prefix("Bucket");
    if let Some(var_1096) = &input.bucket {
        scope_1095.string(var_1096);
    }
    #[allow(unused_mut)]
    let mut scope_1097 = writer.prefix("Prefix");
    if let Some(var_1098) = &input.prefix {
        scope_1097.string(var_1098);
    }
    #[allow(unused_mut)]
    let mut scope_1099 = writer.prefix("UploadPolicy");
    if let Some(var_1100) = &input.upload_policy {
        scope_1099.string(&aws_smithy_types::base64::encode(var_1100));
    }
    #[allow(unused_mut)]
    let mut scope_1101 = writer.prefix("UploadPolicySignature");
    if let Some(var_1102) = &input.upload_policy_signature {
        scope_1101.string(var_1102);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_directory_service_authentication_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::DirectoryServiceAuthenticationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1103 = writer.prefix("DirectoryId");
    if let Some(var_1104) = &input.directory_id {
        scope_1103.string(var_1104);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_certificate_authentication_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::CertificateAuthenticationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1105 = writer.prefix("ClientRootCertificateChainArn");
    if let Some(var_1106) = &input.client_root_certificate_chain_arn {
        scope_1105.string(var_1106);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_federated_authentication_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::FederatedAuthenticationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1107 = writer.prefix("SAMLProviderArn");
    if let Some(var_1108) = &input.saml_provider_arn {
        scope_1107.string(var_1108);
    }
    #[allow(unused_mut)]
    let mut scope_1109 = writer.prefix("SelfServiceSAMLProviderArn");
    if let Some(var_1110) = &input.self_service_saml_provider_arn {
        scope_1109.string(var_1110);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_fleet_spot_maintenance_strategies_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::FleetSpotMaintenanceStrategiesRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1111 = writer.prefix("CapacityRebalance");
    if let Some(var_1112) = &input.capacity_rebalance {
        crate::query_ser::serialize_structure_crate_model_fleet_spot_capacity_rebalance_request(
            scope_1111, var_1112,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_capacity_reservation_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::CapacityReservationOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1113 = writer.prefix("UsageStrategy");
    if let Some(var_1114) = &input.usage_strategy {
        scope_1113.string(var_1114.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_fleet_launch_template_specification_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::FleetLaunchTemplateSpecificationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1115 = writer.prefix("LaunchTemplateId");
    if let Some(var_1116) = &input.launch_template_id {
        scope_1115.string(var_1116);
    }
    #[allow(unused_mut)]
    let mut scope_1117 = writer.prefix("LaunchTemplateName");
    if let Some(var_1118) = &input.launch_template_name {
        scope_1117.string(var_1118);
    }
    #[allow(unused_mut)]
    let mut scope_1119 = writer.prefix("Version");
    if let Some(var_1120) = &input.version {
        scope_1119.string(var_1120);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_fleet_launch_template_overrides_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::FleetLaunchTemplateOverridesRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1121 = writer.prefix("InstanceType");
    if let Some(var_1122) = &input.instance_type {
        scope_1121.string(var_1122.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1123 = writer.prefix("MaxPrice");
    if let Some(var_1124) = &input.max_price {
        scope_1123.string(var_1124);
    }
    #[allow(unused_mut)]
    let mut scope_1125 = writer.prefix("SubnetId");
    if let Some(var_1126) = &input.subnet_id {
        scope_1125.string(var_1126);
    }
    #[allow(unused_mut)]
    let mut scope_1127 = writer.prefix("AvailabilityZone");
    if let Some(var_1128) = &input.availability_zone {
        scope_1127.string(var_1128);
    }
    #[allow(unused_mut)]
    let mut scope_1129 = writer.prefix("WeightedCapacity");
    if let Some(var_1130) = &input.weighted_capacity {
        scope_1129.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1130).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1131 = writer.prefix("Priority");
    if let Some(var_1132) = &input.priority {
        scope_1131.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1132).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1133 = writer.prefix("Placement");
    if let Some(var_1134) = &input.placement {
        crate::query_ser::serialize_structure_crate_model_placement(scope_1133, var_1134)?;
    }
    #[allow(unused_mut)]
    let mut scope_1135 = writer.prefix("InstanceRequirements");
    if let Some(var_1136) = &input.instance_requirements {
        crate::query_ser::serialize_structure_crate_model_instance_requirements_request(
            scope_1135, var_1136,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_ebs_block_device(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::EbsBlockDevice,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1137 = writer.prefix("DeleteOnTermination");
    if let Some(var_1138) = &input.delete_on_termination {
        scope_1137.boolean(*var_1138);
    }
    #[allow(unused_mut)]
    let mut scope_1139 = writer.prefix("Iops");
    if let Some(var_1140) = &input.iops {
        scope_1139.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1140).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1141 = writer.prefix("SnapshotId");
    if let Some(var_1142) = &input.snapshot_id {
        scope_1141.string(var_1142);
    }
    #[allow(unused_mut)]
    let mut scope_1143 = writer.prefix("VolumeSize");
    if let Some(var_1144) = &input.volume_size {
        scope_1143.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1144).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1145 = writer.prefix("VolumeType");
    if let Some(var_1146) = &input.volume_type {
        scope_1145.string(var_1146.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1147 = writer.prefix("KmsKeyId");
    if let Some(var_1148) = &input.kms_key_id {
        scope_1147.string(var_1148);
    }
    #[allow(unused_mut)]
    let mut scope_1149 = writer.prefix("Throughput");
    if let Some(var_1150) = &input.throughput {
        scope_1149.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1150).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1151 = writer.prefix("OutpostArn");
    if let Some(var_1152) = &input.outpost_arn {
        scope_1151.string(var_1152);
    }
    #[allow(unused_mut)]
    let mut scope_1153 = writer.prefix("Encrypted");
    if let Some(var_1154) = &input.encrypted {
        scope_1153.boolean(*var_1154);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_iam_instance_profile_specification_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateIamInstanceProfileSpecificationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1155 = writer.prefix("Arn");
    if let Some(var_1156) = &input.arn {
        scope_1155.string(var_1156);
    }
    #[allow(unused_mut)]
    let mut scope_1157 = writer.prefix("Name");
    if let Some(var_1158) = &input.name {
        scope_1157.string(var_1158);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_block_device_mapping_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateBlockDeviceMappingRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1159 = writer.prefix("DeviceName");
    if let Some(var_1160) = &input.device_name {
        scope_1159.string(var_1160);
    }
    #[allow(unused_mut)]
    let mut scope_1161 = writer.prefix("VirtualName");
    if let Some(var_1162) = &input.virtual_name {
        scope_1161.string(var_1162);
    }
    #[allow(unused_mut)]
    let mut scope_1163 = writer.prefix("Ebs");
    if let Some(var_1164) = &input.ebs {
        crate::query_ser::serialize_structure_crate_model_launch_template_ebs_block_device_request(
            scope_1163, var_1164,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1165 = writer.prefix("NoDevice");
    if let Some(var_1166) = &input.no_device {
        scope_1165.string(var_1166);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_instance_network_interface_specification_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateInstanceNetworkInterfaceSpecificationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1167 = writer.prefix("AssociateCarrierIpAddress");
    if let Some(var_1168) = &input.associate_carrier_ip_address {
        scope_1167.boolean(*var_1168);
    }
    #[allow(unused_mut)]
    let mut scope_1169 = writer.prefix("AssociatePublicIpAddress");
    if let Some(var_1170) = &input.associate_public_ip_address {
        scope_1169.boolean(*var_1170);
    }
    #[allow(unused_mut)]
    let mut scope_1171 = writer.prefix("DeleteOnTermination");
    if let Some(var_1172) = &input.delete_on_termination {
        scope_1171.boolean(*var_1172);
    }
    #[allow(unused_mut)]
    let mut scope_1173 = writer.prefix("Description");
    if let Some(var_1174) = &input.description {
        scope_1173.string(var_1174);
    }
    #[allow(unused_mut)]
    let mut scope_1175 = writer.prefix("DeviceIndex");
    if let Some(var_1176) = &input.device_index {
        scope_1175.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1176).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1177 = writer.prefix("SecurityGroupId");
    if let Some(var_1178) = &input.groups {
        let mut list_1180 = scope_1177.start_list(true, Some("SecurityGroupId"));
        for item_1179 in var_1178 {
            #[allow(unused_mut)]
            let mut entry_1181 = list_1180.entry();
            entry_1181.string(item_1179);
        }
        list_1180.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1182 = writer.prefix("InterfaceType");
    if let Some(var_1183) = &input.interface_type {
        scope_1182.string(var_1183);
    }
    #[allow(unused_mut)]
    let mut scope_1184 = writer.prefix("Ipv6AddressCount");
    if let Some(var_1185) = &input.ipv6_address_count {
        scope_1184.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1185).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1186 = writer.prefix("Ipv6Addresses");
    if let Some(var_1187) = &input.ipv6_addresses {
        let mut list_1189 = scope_1186.start_list(true, Some("InstanceIpv6Address"));
        for item_1188 in var_1187 {
            #[allow(unused_mut)]
            let mut entry_1190 = list_1189.entry();
            crate::query_ser::serialize_structure_crate_model_instance_ipv6_address_request(
                entry_1190, item_1188,
            )?;
        }
        list_1189.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1191 = writer.prefix("NetworkInterfaceId");
    if let Some(var_1192) = &input.network_interface_id {
        scope_1191.string(var_1192);
    }
    #[allow(unused_mut)]
    let mut scope_1193 = writer.prefix("PrivateIpAddress");
    if let Some(var_1194) = &input.private_ip_address {
        scope_1193.string(var_1194);
    }
    #[allow(unused_mut)]
    let mut scope_1195 = writer.prefix("PrivateIpAddresses");
    if let Some(var_1196) = &input.private_ip_addresses {
        let mut list_1198 = scope_1195.start_list(true, Some("item"));
        for item_1197 in var_1196 {
            #[allow(unused_mut)]
            let mut entry_1199 = list_1198.entry();
            crate::query_ser::serialize_structure_crate_model_private_ip_address_specification(
                entry_1199, item_1197,
            )?;
        }
        list_1198.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1200 = writer.prefix("SecondaryPrivateIpAddressCount");
    if let Some(var_1201) = &input.secondary_private_ip_address_count {
        scope_1200.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1201).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1202 = writer.prefix("SubnetId");
    if let Some(var_1203) = &input.subnet_id {
        scope_1202.string(var_1203);
    }
    #[allow(unused_mut)]
    let mut scope_1204 = writer.prefix("NetworkCardIndex");
    if let Some(var_1205) = &input.network_card_index {
        scope_1204.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1205).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1206 = writer.prefix("Ipv4Prefix");
    if let Some(var_1207) = &input.ipv4_prefixes {
        let mut list_1209 = scope_1206.start_list(true, Some("item"));
        for item_1208 in var_1207 {
            #[allow(unused_mut)]
            let mut entry_1210 = list_1209.entry();
            crate::query_ser::serialize_structure_crate_model_ipv4_prefix_specification_request(
                entry_1210, item_1208,
            )?;
        }
        list_1209.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1211 = writer.prefix("Ipv4PrefixCount");
    if let Some(var_1212) = &input.ipv4_prefix_count {
        scope_1211.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1212).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1213 = writer.prefix("Ipv6Prefix");
    if let Some(var_1214) = &input.ipv6_prefixes {
        let mut list_1216 = scope_1213.start_list(true, Some("item"));
        for item_1215 in var_1214 {
            #[allow(unused_mut)]
            let mut entry_1217 = list_1216.entry();
            crate::query_ser::serialize_structure_crate_model_ipv6_prefix_specification_request(
                entry_1217, item_1215,
            )?;
        }
        list_1216.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1218 = writer.prefix("Ipv6PrefixCount");
    if let Some(var_1219) = &input.ipv6_prefix_count {
        scope_1218.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1219).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_templates_monitoring_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplatesMonitoringRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1220 = writer.prefix("Enabled");
    if let Some(var_1221) = &input.enabled {
        scope_1220.boolean(*var_1221);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_placement_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplatePlacementRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1222 = writer.prefix("AvailabilityZone");
    if let Some(var_1223) = &input.availability_zone {
        scope_1222.string(var_1223);
    }
    #[allow(unused_mut)]
    let mut scope_1224 = writer.prefix("Affinity");
    if let Some(var_1225) = &input.affinity {
        scope_1224.string(var_1225);
    }
    #[allow(unused_mut)]
    let mut scope_1226 = writer.prefix("GroupName");
    if let Some(var_1227) = &input.group_name {
        scope_1226.string(var_1227);
    }
    #[allow(unused_mut)]
    let mut scope_1228 = writer.prefix("HostId");
    if let Some(var_1229) = &input.host_id {
        scope_1228.string(var_1229);
    }
    #[allow(unused_mut)]
    let mut scope_1230 = writer.prefix("Tenancy");
    if let Some(var_1231) = &input.tenancy {
        scope_1230.string(var_1231.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1232 = writer.prefix("SpreadDomain");
    if let Some(var_1233) = &input.spread_domain {
        scope_1232.string(var_1233);
    }
    #[allow(unused_mut)]
    let mut scope_1234 = writer.prefix("HostResourceGroupArn");
    if let Some(var_1235) = &input.host_resource_group_arn {
        scope_1234.string(var_1235);
    }
    #[allow(unused_mut)]
    let mut scope_1236 = writer.prefix("PartitionNumber");
    if let Some(var_1237) = &input.partition_number {
        scope_1236.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1237).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_tag_specification_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateTagSpecificationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1238 = writer.prefix("ResourceType");
    if let Some(var_1239) = &input.resource_type {
        scope_1238.string(var_1239.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1240 = writer.prefix("Tag");
    if let Some(var_1241) = &input.tags {
        let mut list_1243 = scope_1240.start_list(true, Some("item"));
        for item_1242 in var_1241 {
            #[allow(unused_mut)]
            let mut entry_1244 = list_1243.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_1244, item_1242)?;
        }
        list_1243.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_elastic_inference_accelerator(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateElasticInferenceAccelerator,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1245 = writer.prefix("Type");
    if let Some(var_1246) = &input.r#type {
        scope_1245.string(var_1246);
    }
    #[allow(unused_mut)]
    let mut scope_1247 = writer.prefix("Count");
    if let Some(var_1248) = &input.count {
        scope_1247.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1248).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_instance_market_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateInstanceMarketOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1249 = writer.prefix("MarketType");
    if let Some(var_1250) = &input.market_type {
        scope_1249.string(var_1250.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1251 = writer.prefix("SpotOptions");
    if let Some(var_1252) = &input.spot_options {
        crate::query_ser::serialize_structure_crate_model_launch_template_spot_market_options_request(scope_1251, var_1252)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_cpu_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateCpuOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1253 = writer.prefix("CoreCount");
    if let Some(var_1254) = &input.core_count {
        scope_1253.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1254).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1255 = writer.prefix("ThreadsPerCore");
    if let Some(var_1256) = &input.threads_per_core {
        scope_1255.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1256).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_capacity_reservation_specification_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateCapacityReservationSpecificationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1257 = writer.prefix("CapacityReservationPreference");
    if let Some(var_1258) = &input.capacity_reservation_preference {
        scope_1257.string(var_1258.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1259 = writer.prefix("CapacityReservationTarget");
    if let Some(var_1260) = &input.capacity_reservation_target {
        crate::query_ser::serialize_structure_crate_model_capacity_reservation_target(
            scope_1259, var_1260,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_license_configuration_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateLicenseConfigurationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1261 = writer.prefix("LicenseConfigurationArn");
    if let Some(var_1262) = &input.license_configuration_arn {
        scope_1261.string(var_1262);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_hibernation_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateHibernationOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1263 = writer.prefix("Configured");
    if let Some(var_1264) = &input.configured {
        scope_1263.boolean(*var_1264);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_instance_metadata_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateInstanceMetadataOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1265 = writer.prefix("HttpTokens");
    if let Some(var_1266) = &input.http_tokens {
        scope_1265.string(var_1266.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1267 = writer.prefix("HttpPutResponseHopLimit");
    if let Some(var_1268) = &input.http_put_response_hop_limit {
        scope_1267.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1268).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1269 = writer.prefix("HttpEndpoint");
    if let Some(var_1270) = &input.http_endpoint {
        scope_1269.string(var_1270.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1271 = writer.prefix("HttpProtocolIpv6");
    if let Some(var_1272) = &input.http_protocol_ipv6 {
        scope_1271.string(var_1272.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1273 = writer.prefix("InstanceMetadataTags");
    if let Some(var_1274) = &input.instance_metadata_tags {
        scope_1273.string(var_1274.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_enclave_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateEnclaveOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1275 = writer.prefix("Enabled");
    if let Some(var_1276) = &input.enabled {
        scope_1275.boolean(*var_1276);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_private_dns_name_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplatePrivateDnsNameOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1277 = writer.prefix("HostnameType");
    if let Some(var_1278) = &input.hostname_type {
        scope_1277.string(var_1278.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1279 = writer.prefix("EnableResourceNameDnsARecord");
    if let Some(var_1280) = &input.enable_resource_name_dns_a_record {
        scope_1279.boolean(*var_1280);
    }
    #[allow(unused_mut)]
    let mut scope_1281 = writer.prefix("EnableResourceNameDnsAAAARecord");
    if let Some(var_1282) = &input.enable_resource_name_dns_aaaa_record {
        scope_1281.boolean(*var_1282);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_instance_maintenance_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateInstanceMaintenanceOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1283 = writer.prefix("AutoRecovery");
    if let Some(var_1284) = &input.auto_recovery {
        scope_1283.string(var_1284.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_path_statement_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::PathStatementRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1285 = writer.prefix("PacketHeaderStatement");
    if let Some(var_1286) = &input.packet_header_statement {
        crate::query_ser::serialize_structure_crate_model_packet_header_statement_request(
            scope_1285, var_1286,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1287 = writer.prefix("ResourceStatement");
    if let Some(var_1288) = &input.resource_statement {
        crate::query_ser::serialize_structure_crate_model_resource_statement_request(
            scope_1287, var_1288,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_through_resources_statement_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ThroughResourcesStatementRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1289 = writer.prefix("ResourceStatement");
    if let Some(var_1290) = &input.resource_statement {
        crate::query_ser::serialize_structure_crate_model_resource_statement_request(
            scope_1289, var_1290,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_vpn_tunnel_options_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::VpnTunnelOptionsSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1291 = writer.prefix("TunnelInsideCidr");
    if let Some(var_1292) = &input.tunnel_inside_cidr {
        scope_1291.string(var_1292);
    }
    #[allow(unused_mut)]
    let mut scope_1293 = writer.prefix("TunnelInsideIpv6Cidr");
    if let Some(var_1294) = &input.tunnel_inside_ipv6_cidr {
        scope_1293.string(var_1294);
    }
    #[allow(unused_mut)]
    let mut scope_1295 = writer.prefix("PreSharedKey");
    if let Some(var_1296) = &input.pre_shared_key {
        scope_1295.string(var_1296);
    }
    #[allow(unused_mut)]
    let mut scope_1297 = writer.prefix("Phase1LifetimeSeconds");
    if let Some(var_1298) = &input.phase1_lifetime_seconds {
        scope_1297.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1298).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1299 = writer.prefix("Phase2LifetimeSeconds");
    if let Some(var_1300) = &input.phase2_lifetime_seconds {
        scope_1299.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1300).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1301 = writer.prefix("RekeyMarginTimeSeconds");
    if let Some(var_1302) = &input.rekey_margin_time_seconds {
        scope_1301.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1302).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1303 = writer.prefix("RekeyFuzzPercentage");
    if let Some(var_1304) = &input.rekey_fuzz_percentage {
        scope_1303.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1304).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1305 = writer.prefix("ReplayWindowSize");
    if let Some(var_1306) = &input.replay_window_size {
        scope_1305.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1306).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1307 = writer.prefix("DPDTimeoutSeconds");
    if let Some(var_1308) = &input.dpd_timeout_seconds {
        scope_1307.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1308).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1309 = writer.prefix("DPDTimeoutAction");
    if let Some(var_1310) = &input.dpd_timeout_action {
        scope_1309.string(var_1310);
    }
    #[allow(unused_mut)]
    let mut scope_1311 = writer.prefix("Phase1EncryptionAlgorithm");
    if let Some(var_1312) = &input.phase1_encryption_algorithms {
        let mut list_1314 = scope_1311.start_list(true, Some("item"));
        for item_1313 in var_1312 {
            #[allow(unused_mut)]
            let mut entry_1315 = list_1314.entry();
            crate::query_ser::serialize_structure_crate_model_phase1_encryption_algorithms_request_list_value(entry_1315, item_1313)?;
        }
        list_1314.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1316 = writer.prefix("Phase2EncryptionAlgorithm");
    if let Some(var_1317) = &input.phase2_encryption_algorithms {
        let mut list_1319 = scope_1316.start_list(true, Some("item"));
        for item_1318 in var_1317 {
            #[allow(unused_mut)]
            let mut entry_1320 = list_1319.entry();
            crate::query_ser::serialize_structure_crate_model_phase2_encryption_algorithms_request_list_value(entry_1320, item_1318)?;
        }
        list_1319.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1321 = writer.prefix("Phase1IntegrityAlgorithm");
    if let Some(var_1322) = &input.phase1_integrity_algorithms {
        let mut list_1324 = scope_1321.start_list(true, Some("item"));
        for item_1323 in var_1322 {
            #[allow(unused_mut)]
            let mut entry_1325 = list_1324.entry();
            crate::query_ser::serialize_structure_crate_model_phase1_integrity_algorithms_request_list_value(entry_1325, item_1323)?;
        }
        list_1324.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1326 = writer.prefix("Phase2IntegrityAlgorithm");
    if let Some(var_1327) = &input.phase2_integrity_algorithms {
        let mut list_1329 = scope_1326.start_list(true, Some("item"));
        for item_1328 in var_1327 {
            #[allow(unused_mut)]
            let mut entry_1330 = list_1329.entry();
            crate::query_ser::serialize_structure_crate_model_phase2_integrity_algorithms_request_list_value(entry_1330, item_1328)?;
        }
        list_1329.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1331 = writer.prefix("Phase1DHGroupNumber");
    if let Some(var_1332) = &input.phase1_dh_group_numbers {
        let mut list_1334 = scope_1331.start_list(true, Some("item"));
        for item_1333 in var_1332 {
            #[allow(unused_mut)]
            let mut entry_1335 = list_1334.entry();
            crate::query_ser::serialize_structure_crate_model_phase1_dh_group_numbers_request_list_value(entry_1335, item_1333)?;
        }
        list_1334.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1336 = writer.prefix("Phase2DHGroupNumber");
    if let Some(var_1337) = &input.phase2_dh_group_numbers {
        let mut list_1339 = scope_1336.start_list(true, Some("item"));
        for item_1338 in var_1337 {
            #[allow(unused_mut)]
            let mut entry_1340 = list_1339.entry();
            crate::query_ser::serialize_structure_crate_model_phase2_dh_group_numbers_request_list_value(entry_1340, item_1338)?;
        }
        list_1339.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1341 = writer.prefix("IKEVersion");
    if let Some(var_1342) = &input.ike_versions {
        let mut list_1344 = scope_1341.start_list(true, Some("item"));
        for item_1343 in var_1342 {
            #[allow(unused_mut)]
            let mut entry_1345 = list_1344.entry();
            crate::query_ser::serialize_structure_crate_model_ike_versions_request_list_value(
                entry_1345, item_1343,
            )?;
        }
        list_1344.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1346 = writer.prefix("StartupAction");
    if let Some(var_1347) = &input.startup_action {
        scope_1346.string(var_1347);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_athena_integration(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::AthenaIntegration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1348 = writer.prefix("IntegrationResultS3DestinationArn");
    if let Some(var_1349) = &input.integration_result_s3_destination_arn {
        scope_1348.string(var_1349);
    }
    #[allow(unused_mut)]
    let mut scope_1350 = writer.prefix("PartitionLoadFrequency");
    if let Some(var_1351) = &input.partition_load_frequency {
        scope_1350.string(var_1351.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1352 = writer.prefix("PartitionStartDate");
    if let Some(var_1353) = &input.partition_start_date {
        scope_1352.date_time(var_1353, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_1354 = writer.prefix("PartitionEndDate");
    if let Some(var_1355) = &input.partition_end_date {
        scope_1354.date_time(var_1355, aws_smithy_types::date_time::Format::DateTime)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_v_cpu_count_range_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::VCpuCountRangeRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1356 = writer.prefix("Min");
    if let Some(var_1357) = &input.min {
        scope_1356.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1357).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1358 = writer.prefix("Max");
    if let Some(var_1359) = &input.max {
        scope_1358.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1359).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_memory_mi_b_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::MemoryMiBRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1360 = writer.prefix("Min");
    if let Some(var_1361) = &input.min {
        scope_1360.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1361).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1362 = writer.prefix("Max");
    if let Some(var_1363) = &input.max {
        scope_1362.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1363).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_memory_gi_b_per_v_cpu_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::MemoryGiBPerVCpuRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1364 = writer.prefix("Min");
    if let Some(var_1365) = &input.min {
        scope_1364.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1365).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1366 = writer.prefix("Max");
    if let Some(var_1367) = &input.max {
        scope_1366.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1367).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_network_interface_count_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::NetworkInterfaceCountRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1368 = writer.prefix("Min");
    if let Some(var_1369) = &input.min {
        scope_1368.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1369).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1370 = writer.prefix("Max");
    if let Some(var_1371) = &input.max {
        scope_1370.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1371).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_total_local_storage_gb_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::TotalLocalStorageGbRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1372 = writer.prefix("Min");
    if let Some(var_1373) = &input.min {
        scope_1372.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1373).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1374 = writer.prefix("Max");
    if let Some(var_1375) = &input.max {
        scope_1374.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1375).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_baseline_ebs_bandwidth_mbps_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::BaselineEbsBandwidthMbpsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1376 = writer.prefix("Min");
    if let Some(var_1377) = &input.min {
        scope_1376.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1377).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1378 = writer.prefix("Max");
    if let Some(var_1379) = &input.max {
        scope_1378.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1379).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_accelerator_count_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::AcceleratorCountRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1380 = writer.prefix("Min");
    if let Some(var_1381) = &input.min {
        scope_1380.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1381).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1382 = writer.prefix("Max");
    if let Some(var_1383) = &input.max {
        scope_1382.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1383).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_accelerator_total_memory_mi_b_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::AcceleratorTotalMemoryMiBRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1384 = writer.prefix("Min");
    if let Some(var_1385) = &input.min {
        scope_1384.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1385).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1386 = writer.prefix("Max");
    if let Some(var_1387) = &input.max {
        scope_1386.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1387).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_user_bucket(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::UserBucket,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1388 = writer.prefix("S3Bucket");
    if let Some(var_1389) = &input.s3_bucket {
        scope_1388.string(var_1389);
    }
    #[allow(unused_mut)]
    let mut scope_1390 = writer.prefix("S3Key");
    if let Some(var_1391) = &input.s3_key {
        scope_1390.string(var_1391);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_user_data(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::UserData,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1392 = writer.prefix("Data");
    if let Some(var_1393) = &input.data {
        scope_1392.string(var_1393);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_load_permission_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LoadPermissionRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1394 = writer.prefix("Group");
    if let Some(var_1395) = &input.group {
        scope_1394.string(var_1395.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1396 = writer.prefix("UserId");
    if let Some(var_1397) = &input.user_id {
        scope_1396.string(var_1397);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_permission(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchPermission,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1398 = writer.prefix("Group");
    if let Some(var_1399) = &input.group {
        scope_1398.string(var_1399.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1400 = writer.prefix("UserId");
    if let Some(var_1401) = &input.user_id {
        scope_1400.string(var_1401);
    }
    #[allow(unused_mut)]
    let mut scope_1402 = writer.prefix("OrganizationArn");
    if let Some(var_1403) = &input.organization_arn {
        scope_1402.string(var_1403);
    }
    #[allow(unused_mut)]
    let mut scope_1404 = writer.prefix("OrganizationalUnitArn");
    if let Some(var_1405) = &input.organizational_unit_arn {
        scope_1404.string(var_1405);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_ebs_instance_block_device_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::EbsInstanceBlockDeviceSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1406 = writer.prefix("DeleteOnTermination");
    if let Some(var_1407) = &input.delete_on_termination {
        scope_1406.boolean(*var_1407);
    }
    #[allow(unused_mut)]
    let mut scope_1408 = writer.prefix("VolumeId");
    if let Some(var_1409) = &input.volume_id {
        scope_1408.string(var_1409);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_capacity_reservation_target(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::CapacityReservationTarget,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1410 = writer.prefix("CapacityReservationId");
    if let Some(var_1411) = &input.capacity_reservation_id {
        scope_1410.string(var_1411);
    }
    #[allow(unused_mut)]
    let mut scope_1412 = writer.prefix("CapacityReservationResourceGroupArn");
    if let Some(var_1413) = &input.capacity_reservation_resource_group_arn {
        scope_1412.string(var_1413);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_security_group_rule_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::SecurityGroupRuleRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1414 = writer.prefix("IpProtocol");
    if let Some(var_1415) = &input.ip_protocol {
        scope_1414.string(var_1415);
    }
    #[allow(unused_mut)]
    let mut scope_1416 = writer.prefix("FromPort");
    if let Some(var_1417) = &input.from_port {
        scope_1416.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1417).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1418 = writer.prefix("ToPort");
    if let Some(var_1419) = &input.to_port {
        scope_1418.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1419).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1420 = writer.prefix("CidrIpv4");
    if let Some(var_1421) = &input.cidr_ipv4 {
        scope_1420.string(var_1421);
    }
    #[allow(unused_mut)]
    let mut scope_1422 = writer.prefix("CidrIpv6");
    if let Some(var_1423) = &input.cidr_ipv6 {
        scope_1422.string(var_1423);
    }
    #[allow(unused_mut)]
    let mut scope_1424 = writer.prefix("PrefixListId");
    if let Some(var_1425) = &input.prefix_list_id {
        scope_1424.string(var_1425);
    }
    #[allow(unused_mut)]
    let mut scope_1426 = writer.prefix("ReferencedGroupId");
    if let Some(var_1427) = &input.referenced_group_id {
        scope_1426.string(var_1427);
    }
    #[allow(unused_mut)]
    let mut scope_1428 = writer.prefix("Description");
    if let Some(var_1429) = &input.description {
        scope_1428.string(var_1429);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_create_volume_permission(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::CreateVolumePermission,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1430 = writer.prefix("Group");
    if let Some(var_1431) = &input.group {
        scope_1430.string(var_1431.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1432 = writer.prefix("UserId");
    if let Some(var_1433) = &input.user_id {
        scope_1432.string(var_1433);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_fleet_launch_template_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::FleetLaunchTemplateSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1434 = writer.prefix("LaunchTemplateId");
    if let Some(var_1435) = &input.launch_template_id {
        scope_1434.string(var_1435);
    }
    #[allow(unused_mut)]
    let mut scope_1436 = writer.prefix("LaunchTemplateName");
    if let Some(var_1437) = &input.launch_template_name {
        scope_1436.string(var_1437);
    }
    #[allow(unused_mut)]
    let mut scope_1438 = writer.prefix("Version");
    if let Some(var_1439) = &input.version {
        scope_1438.string(var_1439);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_overrides(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateOverrides,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1440 = writer.prefix("InstanceType");
    if let Some(var_1441) = &input.instance_type {
        scope_1440.string(var_1441.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1442 = writer.prefix("SpotPrice");
    if let Some(var_1443) = &input.spot_price {
        scope_1442.string(var_1443);
    }
    #[allow(unused_mut)]
    let mut scope_1444 = writer.prefix("SubnetId");
    if let Some(var_1445) = &input.subnet_id {
        scope_1444.string(var_1445);
    }
    #[allow(unused_mut)]
    let mut scope_1446 = writer.prefix("AvailabilityZone");
    if let Some(var_1447) = &input.availability_zone {
        scope_1446.string(var_1447);
    }
    #[allow(unused_mut)]
    let mut scope_1448 = writer.prefix("WeightedCapacity");
    if let Some(var_1449) = &input.weighted_capacity {
        scope_1448.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1449).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1450 = writer.prefix("Priority");
    if let Some(var_1451) = &input.priority {
        scope_1450.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1451).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1452 = writer.prefix("InstanceRequirements");
    if let Some(var_1453) = &input.instance_requirements {
        crate::query_ser::serialize_structure_crate_model_instance_requirements(
            scope_1452, var_1453,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_phase1_encryption_algorithms_request_list_value(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::Phase1EncryptionAlgorithmsRequestListValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1454 = writer.prefix("Value");
    if let Some(var_1455) = &input.value {
        scope_1454.string(var_1455);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_phase2_encryption_algorithms_request_list_value(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::Phase2EncryptionAlgorithmsRequestListValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1456 = writer.prefix("Value");
    if let Some(var_1457) = &input.value {
        scope_1456.string(var_1457);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_phase1_integrity_algorithms_request_list_value(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::Phase1IntegrityAlgorithmsRequestListValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1458 = writer.prefix("Value");
    if let Some(var_1459) = &input.value {
        scope_1458.string(var_1459);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_phase2_integrity_algorithms_request_list_value(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::Phase2IntegrityAlgorithmsRequestListValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1460 = writer.prefix("Value");
    if let Some(var_1461) = &input.value {
        scope_1460.string(var_1461);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_phase1_dh_group_numbers_request_list_value(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::Phase1DhGroupNumbersRequestListValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1462 = writer.prefix("Value");
    if let Some(var_1463) = &input.value {
        scope_1462.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1463).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_phase2_dh_group_numbers_request_list_value(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::Phase2DhGroupNumbersRequestListValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1464 = writer.prefix("Value");
    if let Some(var_1465) = &input.value {
        scope_1464.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1465).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_ike_versions_request_list_value(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::IkeVersionsRequestListValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1466 = writer.prefix("Value");
    if let Some(var_1467) = &input.value {
        scope_1466.string(var_1467);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_spot_maintenance_strategies(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::SpotMaintenanceStrategies,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1468 = writer.prefix("CapacityRebalance");
    if let Some(var_1469) = &input.capacity_rebalance {
        crate::query_ser::serialize_structure_crate_model_spot_capacity_rebalance(
            scope_1468, var_1469,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_spot_fleet_launch_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::SpotFleetLaunchSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1470 = writer.prefix("GroupSet");
    if let Some(var_1471) = &input.security_groups {
        let mut list_1473 = scope_1470.start_list(true, Some("item"));
        for item_1472 in var_1471 {
            #[allow(unused_mut)]
            let mut entry_1474 = list_1473.entry();
            crate::query_ser::serialize_structure_crate_model_group_identifier(
                entry_1474, item_1472,
            )?;
        }
        list_1473.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1475 = writer.prefix("AddressingType");
    if let Some(var_1476) = &input.addressing_type {
        scope_1475.string(var_1476);
    }
    #[allow(unused_mut)]
    let mut scope_1477 = writer.prefix("BlockDeviceMapping");
    if let Some(var_1478) = &input.block_device_mappings {
        let mut list_1480 = scope_1477.start_list(true, Some("item"));
        for item_1479 in var_1478 {
            #[allow(unused_mut)]
            let mut entry_1481 = list_1480.entry();
            crate::query_ser::serialize_structure_crate_model_block_device_mapping(
                entry_1481, item_1479,
            )?;
        }
        list_1480.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1482 = writer.prefix("EbsOptimized");
    if let Some(var_1483) = &input.ebs_optimized {
        scope_1482.boolean(*var_1483);
    }
    #[allow(unused_mut)]
    let mut scope_1484 = writer.prefix("IamInstanceProfile");
    if let Some(var_1485) = &input.iam_instance_profile {
        crate::query_ser::serialize_structure_crate_model_iam_instance_profile_specification(
            scope_1484, var_1485,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1486 = writer.prefix("ImageId");
    if let Some(var_1487) = &input.image_id {
        scope_1486.string(var_1487);
    }
    #[allow(unused_mut)]
    let mut scope_1488 = writer.prefix("InstanceType");
    if let Some(var_1489) = &input.instance_type {
        scope_1488.string(var_1489.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1490 = writer.prefix("KernelId");
    if let Some(var_1491) = &input.kernel_id {
        scope_1490.string(var_1491);
    }
    #[allow(unused_mut)]
    let mut scope_1492 = writer.prefix("KeyName");
    if let Some(var_1493) = &input.key_name {
        scope_1492.string(var_1493);
    }
    #[allow(unused_mut)]
    let mut scope_1494 = writer.prefix("Monitoring");
    if let Some(var_1495) = &input.monitoring {
        crate::query_ser::serialize_structure_crate_model_spot_fleet_monitoring(
            scope_1494, var_1495,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1496 = writer.prefix("NetworkInterfaceSet");
    if let Some(var_1497) = &input.network_interfaces {
        let mut list_1499 = scope_1496.start_list(true, Some("item"));
        for item_1498 in var_1497 {
            #[allow(unused_mut)]
            let mut entry_1500 = list_1499.entry();
            crate::query_ser::serialize_structure_crate_model_instance_network_interface_specification(entry_1500, item_1498)?;
        }
        list_1499.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1501 = writer.prefix("Placement");
    if let Some(var_1502) = &input.placement {
        crate::query_ser::serialize_structure_crate_model_spot_placement(scope_1501, var_1502)?;
    }
    #[allow(unused_mut)]
    let mut scope_1503 = writer.prefix("RamdiskId");
    if let Some(var_1504) = &input.ramdisk_id {
        scope_1503.string(var_1504);
    }
    #[allow(unused_mut)]
    let mut scope_1505 = writer.prefix("SpotPrice");
    if let Some(var_1506) = &input.spot_price {
        scope_1505.string(var_1506);
    }
    #[allow(unused_mut)]
    let mut scope_1507 = writer.prefix("SubnetId");
    if let Some(var_1508) = &input.subnet_id {
        scope_1507.string(var_1508);
    }
    #[allow(unused_mut)]
    let mut scope_1509 = writer.prefix("UserData");
    if let Some(var_1510) = &input.user_data {
        scope_1509.string(var_1510);
    }
    #[allow(unused_mut)]
    let mut scope_1511 = writer.prefix("WeightedCapacity");
    if let Some(var_1512) = &input.weighted_capacity {
        scope_1511.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1512).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1513 = writer.prefix("TagSpecificationSet");
    if let Some(var_1514) = &input.tag_specifications {
        let mut list_1516 = scope_1513.start_list(true, Some("item"));
        for item_1515 in var_1514 {
            #[allow(unused_mut)]
            let mut entry_1517 = list_1516.entry();
            crate::query_ser::serialize_structure_crate_model_spot_fleet_tag_specification(
                entry_1517, item_1515,
            )?;
        }
        list_1516.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1518 = writer.prefix("InstanceRequirements");
    if let Some(var_1519) = &input.instance_requirements {
        crate::query_ser::serialize_structure_crate_model_instance_requirements(
            scope_1518, var_1519,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_load_balancers_config(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LoadBalancersConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1520 = writer.prefix("ClassicLoadBalancersConfig");
    if let Some(var_1521) = &input.classic_load_balancers_config {
        crate::query_ser::serialize_structure_crate_model_classic_load_balancers_config(
            scope_1520, var_1521,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1522 = writer.prefix("TargetGroupsConfig");
    if let Some(var_1523) = &input.target_groups_config {
        crate::query_ser::serialize_structure_crate_model_target_groups_config(
            scope_1522, var_1523,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_spot_placement(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::SpotPlacement,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1524 = writer.prefix("AvailabilityZone");
    if let Some(var_1525) = &input.availability_zone {
        scope_1524.string(var_1525);
    }
    #[allow(unused_mut)]
    let mut scope_1526 = writer.prefix("GroupName");
    if let Some(var_1527) = &input.group_name {
        scope_1526.string(var_1527);
    }
    #[allow(unused_mut)]
    let mut scope_1528 = writer.prefix("Tenancy");
    if let Some(var_1529) = &input.tenancy {
        scope_1528.string(var_1529.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_spot_market_options(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::SpotMarketOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1530 = writer.prefix("MaxPrice");
    if let Some(var_1531) = &input.max_price {
        scope_1530.string(var_1531);
    }
    #[allow(unused_mut)]
    let mut scope_1532 = writer.prefix("SpotInstanceType");
    if let Some(var_1533) = &input.spot_instance_type {
        scope_1532.string(var_1533.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1534 = writer.prefix("BlockDurationMinutes");
    if let Some(var_1535) = &input.block_duration_minutes {
        scope_1534.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1535).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1536 = writer.prefix("ValidUntil");
    if let Some(var_1537) = &input.valid_until {
        scope_1536.date_time(var_1537, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_1538 = writer.prefix("InstanceInterruptionBehavior");
    if let Some(var_1539) = &input.instance_interruption_behavior {
        scope_1538.string(var_1539.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_scheduled_instances_block_device_mapping(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ScheduledInstancesBlockDeviceMapping,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1540 = writer.prefix("DeviceName");
    if let Some(var_1541) = &input.device_name {
        scope_1540.string(var_1541);
    }
    #[allow(unused_mut)]
    let mut scope_1542 = writer.prefix("Ebs");
    if let Some(var_1543) = &input.ebs {
        crate::query_ser::serialize_structure_crate_model_scheduled_instances_ebs(
            scope_1542, var_1543,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1544 = writer.prefix("NoDevice");
    if let Some(var_1545) = &input.no_device {
        scope_1544.string(var_1545);
    }
    #[allow(unused_mut)]
    let mut scope_1546 = writer.prefix("VirtualName");
    if let Some(var_1547) = &input.virtual_name {
        scope_1546.string(var_1547);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_scheduled_instances_iam_instance_profile(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ScheduledInstancesIamInstanceProfile,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1548 = writer.prefix("Arn");
    if let Some(var_1549) = &input.arn {
        scope_1548.string(var_1549);
    }
    #[allow(unused_mut)]
    let mut scope_1550 = writer.prefix("Name");
    if let Some(var_1551) = &input.name {
        scope_1550.string(var_1551);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_scheduled_instances_monitoring(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ScheduledInstancesMonitoring,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1552 = writer.prefix("Enabled");
    if let Some(var_1553) = &input.enabled {
        scope_1552.boolean(*var_1553);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_scheduled_instances_network_interface(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ScheduledInstancesNetworkInterface,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1554 = writer.prefix("AssociatePublicIpAddress");
    if let Some(var_1555) = &input.associate_public_ip_address {
        scope_1554.boolean(*var_1555);
    }
    #[allow(unused_mut)]
    let mut scope_1556 = writer.prefix("DeleteOnTermination");
    if let Some(var_1557) = &input.delete_on_termination {
        scope_1556.boolean(*var_1557);
    }
    #[allow(unused_mut)]
    let mut scope_1558 = writer.prefix("Description");
    if let Some(var_1559) = &input.description {
        scope_1558.string(var_1559);
    }
    #[allow(unused_mut)]
    let mut scope_1560 = writer.prefix("DeviceIndex");
    if let Some(var_1561) = &input.device_index {
        scope_1560.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1561).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1562 = writer.prefix("Group");
    if let Some(var_1563) = &input.groups {
        let mut list_1565 = scope_1562.start_list(true, Some("SecurityGroupId"));
        for item_1564 in var_1563 {
            #[allow(unused_mut)]
            let mut entry_1566 = list_1565.entry();
            entry_1566.string(item_1564);
        }
        list_1565.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1567 = writer.prefix("Ipv6AddressCount");
    if let Some(var_1568) = &input.ipv6_address_count {
        scope_1567.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1568).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1569 = writer.prefix("Ipv6Address");
    if let Some(var_1570) = &input.ipv6_addresses {
        let mut list_1572 = scope_1569.start_list(true, Some("Ipv6Address"));
        for item_1571 in var_1570 {
            #[allow(unused_mut)]
            let mut entry_1573 = list_1572.entry();
            crate::query_ser::serialize_structure_crate_model_scheduled_instances_ipv6_address(
                entry_1573, item_1571,
            )?;
        }
        list_1572.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1574 = writer.prefix("NetworkInterfaceId");
    if let Some(var_1575) = &input.network_interface_id {
        scope_1574.string(var_1575);
    }
    #[allow(unused_mut)]
    let mut scope_1576 = writer.prefix("PrivateIpAddress");
    if let Some(var_1577) = &input.private_ip_address {
        scope_1576.string(var_1577);
    }
    #[allow(unused_mut)]
    let mut scope_1578 = writer.prefix("PrivateIpAddressConfig");
    if let Some(var_1579) = &input.private_ip_address_configs {
        let mut list_1581 = scope_1578.start_list(true, Some("PrivateIpAddressConfigSet"));
        for item_1580 in var_1579 {
            #[allow(unused_mut)]
            let mut entry_1582 = list_1581.entry();
            crate::query_ser::serialize_structure_crate_model_scheduled_instances_private_ip_address_config(entry_1582, item_1580)?;
        }
        list_1581.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1583 = writer.prefix("SecondaryPrivateIpAddressCount");
    if let Some(var_1584) = &input.secondary_private_ip_address_count {
        scope_1583.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1584).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1585 = writer.prefix("SubnetId");
    if let Some(var_1586) = &input.subnet_id {
        scope_1585.string(var_1586);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_scheduled_instances_placement(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ScheduledInstancesPlacement,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1587 = writer.prefix("AvailabilityZone");
    if let Some(var_1588) = &input.availability_zone {
        scope_1587.string(var_1588);
    }
    #[allow(unused_mut)]
    let mut scope_1589 = writer.prefix("GroupName");
    if let Some(var_1590) = &input.group_name {
        scope_1589.string(var_1590);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_fleet_spot_capacity_rebalance_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::FleetSpotCapacityRebalanceRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1591 = writer.prefix("ReplacementStrategy");
    if let Some(var_1592) = &input.replacement_strategy {
        scope_1591.string(var_1592.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1593 = writer.prefix("TerminationDelay");
    if let Some(var_1594) = &input.termination_delay {
        scope_1593.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1594).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_ebs_block_device_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateEbsBlockDeviceRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1595 = writer.prefix("Encrypted");
    if let Some(var_1596) = &input.encrypted {
        scope_1595.boolean(*var_1596);
    }
    #[allow(unused_mut)]
    let mut scope_1597 = writer.prefix("DeleteOnTermination");
    if let Some(var_1598) = &input.delete_on_termination {
        scope_1597.boolean(*var_1598);
    }
    #[allow(unused_mut)]
    let mut scope_1599 = writer.prefix("Iops");
    if let Some(var_1600) = &input.iops {
        scope_1599.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1600).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1601 = writer.prefix("KmsKeyId");
    if let Some(var_1602) = &input.kms_key_id {
        scope_1601.string(var_1602);
    }
    #[allow(unused_mut)]
    let mut scope_1603 = writer.prefix("SnapshotId");
    if let Some(var_1604) = &input.snapshot_id {
        scope_1603.string(var_1604);
    }
    #[allow(unused_mut)]
    let mut scope_1605 = writer.prefix("VolumeSize");
    if let Some(var_1606) = &input.volume_size {
        scope_1605.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1606).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1607 = writer.prefix("VolumeType");
    if let Some(var_1608) = &input.volume_type {
        scope_1607.string(var_1608.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1609 = writer.prefix("Throughput");
    if let Some(var_1610) = &input.throughput {
        scope_1609.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1610).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_ipv6_address_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::InstanceIpv6AddressRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1611 = writer.prefix("Ipv6Address");
    if let Some(var_1612) = &input.ipv6_address {
        scope_1611.string(var_1612);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_spot_market_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateSpotMarketOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1613 = writer.prefix("MaxPrice");
    if let Some(var_1614) = &input.max_price {
        scope_1613.string(var_1614);
    }
    #[allow(unused_mut)]
    let mut scope_1615 = writer.prefix("SpotInstanceType");
    if let Some(var_1616) = &input.spot_instance_type {
        scope_1615.string(var_1616.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1617 = writer.prefix("BlockDurationMinutes");
    if let Some(var_1618) = &input.block_duration_minutes {
        scope_1617.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1618).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1619 = writer.prefix("ValidUntil");
    if let Some(var_1620) = &input.valid_until {
        scope_1619.date_time(var_1620, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_1621 = writer.prefix("InstanceInterruptionBehavior");
    if let Some(var_1622) = &input.instance_interruption_behavior {
        scope_1621.string(var_1622.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_packet_header_statement_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::PacketHeaderStatementRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1623 = writer.prefix("SourceAddress");
    if let Some(var_1624) = &input.source_addresses {
        let mut list_1626 = scope_1623.start_list(true, Some("item"));
        for item_1625 in var_1624 {
            #[allow(unused_mut)]
            let mut entry_1627 = list_1626.entry();
            entry_1627.string(item_1625);
        }
        list_1626.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1628 = writer.prefix("DestinationAddress");
    if let Some(var_1629) = &input.destination_addresses {
        let mut list_1631 = scope_1628.start_list(true, Some("item"));
        for item_1630 in var_1629 {
            #[allow(unused_mut)]
            let mut entry_1632 = list_1631.entry();
            entry_1632.string(item_1630);
        }
        list_1631.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1633 = writer.prefix("SourcePort");
    if let Some(var_1634) = &input.source_ports {
        let mut list_1636 = scope_1633.start_list(true, Some("item"));
        for item_1635 in var_1634 {
            #[allow(unused_mut)]
            let mut entry_1637 = list_1636.entry();
            entry_1637.string(item_1635);
        }
        list_1636.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1638 = writer.prefix("DestinationPort");
    if let Some(var_1639) = &input.destination_ports {
        let mut list_1641 = scope_1638.start_list(true, Some("item"));
        for item_1640 in var_1639 {
            #[allow(unused_mut)]
            let mut entry_1642 = list_1641.entry();
            entry_1642.string(item_1640);
        }
        list_1641.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1643 = writer.prefix("SourcePrefixList");
    if let Some(var_1644) = &input.source_prefix_lists {
        let mut list_1646 = scope_1643.start_list(true, Some("item"));
        for item_1645 in var_1644 {
            #[allow(unused_mut)]
            let mut entry_1647 = list_1646.entry();
            entry_1647.string(item_1645);
        }
        list_1646.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1648 = writer.prefix("DestinationPrefixList");
    if let Some(var_1649) = &input.destination_prefix_lists {
        let mut list_1651 = scope_1648.start_list(true, Some("item"));
        for item_1650 in var_1649 {
            #[allow(unused_mut)]
            let mut entry_1652 = list_1651.entry();
            entry_1652.string(item_1650);
        }
        list_1651.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1653 = writer.prefix("Protocol");
    if let Some(var_1654) = &input.protocols {
        let mut list_1656 = scope_1653.start_list(true, Some("item"));
        for item_1655 in var_1654 {
            #[allow(unused_mut)]
            let mut entry_1657 = list_1656.entry();
            entry_1657.string(item_1655.as_str());
        }
        list_1656.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_resource_statement_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ResourceStatementRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1658 = writer.prefix("Resource");
    if let Some(var_1659) = &input.resources {
        let mut list_1661 = scope_1658.start_list(true, Some("item"));
        for item_1660 in var_1659 {
            #[allow(unused_mut)]
            let mut entry_1662 = list_1661.entry();
            entry_1662.string(item_1660);
        }
        list_1661.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1663 = writer.prefix("ResourceType");
    if let Some(var_1664) = &input.resource_types {
        let mut list_1666 = scope_1663.start_list(true, Some("item"));
        for item_1665 in var_1664 {
            #[allow(unused_mut)]
            let mut entry_1667 = list_1666.entry();
            entry_1667.string(item_1665);
        }
        list_1666.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_requirements(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::InstanceRequirements,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1668 = writer.prefix("VCpuCount");
    if let Some(var_1669) = &input.v_cpu_count {
        crate::query_ser::serialize_structure_crate_model_v_cpu_count_range(scope_1668, var_1669)?;
    }
    #[allow(unused_mut)]
    let mut scope_1670 = writer.prefix("MemoryMiB");
    if let Some(var_1671) = &input.memory_mi_b {
        crate::query_ser::serialize_structure_crate_model_memory_mi_b(scope_1670, var_1671)?;
    }
    #[allow(unused_mut)]
    let mut scope_1672 = writer.prefix("CpuManufacturerSet");
    if let Some(var_1673) = &input.cpu_manufacturers {
        let mut list_1675 = scope_1672.start_list(true, Some("item"));
        for item_1674 in var_1673 {
            #[allow(unused_mut)]
            let mut entry_1676 = list_1675.entry();
            entry_1676.string(item_1674.as_str());
        }
        list_1675.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1677 = writer.prefix("MemoryGiBPerVCpu");
    if let Some(var_1678) = &input.memory_gi_b_per_v_cpu {
        crate::query_ser::serialize_structure_crate_model_memory_gi_b_per_v_cpu(
            scope_1677, var_1678,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1679 = writer.prefix("ExcludedInstanceTypeSet");
    if let Some(var_1680) = &input.excluded_instance_types {
        let mut list_1682 = scope_1679.start_list(true, Some("item"));
        for item_1681 in var_1680 {
            #[allow(unused_mut)]
            let mut entry_1683 = list_1682.entry();
            entry_1683.string(item_1681);
        }
        list_1682.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1684 = writer.prefix("InstanceGenerationSet");
    if let Some(var_1685) = &input.instance_generations {
        let mut list_1687 = scope_1684.start_list(true, Some("item"));
        for item_1686 in var_1685 {
            #[allow(unused_mut)]
            let mut entry_1688 = list_1687.entry();
            entry_1688.string(item_1686.as_str());
        }
        list_1687.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1689 = writer.prefix("SpotMaxPricePercentageOverLowestPrice");
    if let Some(var_1690) = &input.spot_max_price_percentage_over_lowest_price {
        scope_1689.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1690).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1691 = writer.prefix("OnDemandMaxPricePercentageOverLowestPrice");
    if let Some(var_1692) = &input.on_demand_max_price_percentage_over_lowest_price {
        scope_1691.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1692).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1693 = writer.prefix("BareMetal");
    if let Some(var_1694) = &input.bare_metal {
        scope_1693.string(var_1694.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1695 = writer.prefix("BurstablePerformance");
    if let Some(var_1696) = &input.burstable_performance {
        scope_1695.string(var_1696.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1697 = writer.prefix("RequireHibernateSupport");
    if let Some(var_1698) = &input.require_hibernate_support {
        scope_1697.boolean(*var_1698);
    }
    #[allow(unused_mut)]
    let mut scope_1699 = writer.prefix("NetworkInterfaceCount");
    if let Some(var_1700) = &input.network_interface_count {
        crate::query_ser::serialize_structure_crate_model_network_interface_count(
            scope_1699, var_1700,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1701 = writer.prefix("LocalStorage");
    if let Some(var_1702) = &input.local_storage {
        scope_1701.string(var_1702.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1703 = writer.prefix("LocalStorageTypeSet");
    if let Some(var_1704) = &input.local_storage_types {
        let mut list_1706 = scope_1703.start_list(true, Some("item"));
        for item_1705 in var_1704 {
            #[allow(unused_mut)]
            let mut entry_1707 = list_1706.entry();
            entry_1707.string(item_1705.as_str());
        }
        list_1706.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1708 = writer.prefix("TotalLocalStorageGB");
    if let Some(var_1709) = &input.total_local_storage_gb {
        crate::query_ser::serialize_structure_crate_model_total_local_storage_gb(
            scope_1708, var_1709,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1710 = writer.prefix("BaselineEbsBandwidthMbps");
    if let Some(var_1711) = &input.baseline_ebs_bandwidth_mbps {
        crate::query_ser::serialize_structure_crate_model_baseline_ebs_bandwidth_mbps(
            scope_1710, var_1711,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1712 = writer.prefix("AcceleratorTypeSet");
    if let Some(var_1713) = &input.accelerator_types {
        let mut list_1715 = scope_1712.start_list(true, Some("item"));
        for item_1714 in var_1713 {
            #[allow(unused_mut)]
            let mut entry_1716 = list_1715.entry();
            entry_1716.string(item_1714.as_str());
        }
        list_1715.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1717 = writer.prefix("AcceleratorCount");
    if let Some(var_1718) = &input.accelerator_count {
        crate::query_ser::serialize_structure_crate_model_accelerator_count(scope_1717, var_1718)?;
    }
    #[allow(unused_mut)]
    let mut scope_1719 = writer.prefix("AcceleratorManufacturerSet");
    if let Some(var_1720) = &input.accelerator_manufacturers {
        let mut list_1722 = scope_1719.start_list(true, Some("item"));
        for item_1721 in var_1720 {
            #[allow(unused_mut)]
            let mut entry_1723 = list_1722.entry();
            entry_1723.string(item_1721.as_str());
        }
        list_1722.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1724 = writer.prefix("AcceleratorNameSet");
    if let Some(var_1725) = &input.accelerator_names {
        let mut list_1727 = scope_1724.start_list(true, Some("item"));
        for item_1726 in var_1725 {
            #[allow(unused_mut)]
            let mut entry_1728 = list_1727.entry();
            entry_1728.string(item_1726.as_str());
        }
        list_1727.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1729 = writer.prefix("AcceleratorTotalMemoryMiB");
    if let Some(var_1730) = &input.accelerator_total_memory_mi_b {
        crate::query_ser::serialize_structure_crate_model_accelerator_total_memory_mi_b(
            scope_1729, var_1730,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_spot_capacity_rebalance(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::SpotCapacityRebalance,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1731 = writer.prefix("ReplacementStrategy");
    if let Some(var_1732) = &input.replacement_strategy {
        scope_1731.string(var_1732.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1733 = writer.prefix("TerminationDelay");
    if let Some(var_1734) = &input.termination_delay {
        scope_1733.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1734).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_group_identifier(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::GroupIdentifier,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1735 = writer.prefix("GroupName");
    if let Some(var_1736) = &input.group_name {
        scope_1735.string(var_1736);
    }
    #[allow(unused_mut)]
    let mut scope_1737 = writer.prefix("GroupId");
    if let Some(var_1738) = &input.group_id {
        scope_1737.string(var_1738);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_spot_fleet_monitoring(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::SpotFleetMonitoring,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1739 = writer.prefix("Enabled");
    if let Some(var_1740) = &input.enabled {
        scope_1739.boolean(*var_1740);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_spot_fleet_tag_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::SpotFleetTagSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1741 = writer.prefix("ResourceType");
    if let Some(var_1742) = &input.resource_type {
        scope_1741.string(var_1742.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1743 = writer.prefix("Tag");
    if let Some(var_1744) = &input.tags {
        let mut list_1746 = scope_1743.start_list(true, Some("item"));
        for item_1745 in var_1744 {
            #[allow(unused_mut)]
            let mut entry_1747 = list_1746.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_1747, item_1745)?;
        }
        list_1746.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_classic_load_balancers_config(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ClassicLoadBalancersConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1748 = writer.prefix("ClassicLoadBalancers");
    if let Some(var_1749) = &input.classic_load_balancers {
        let mut list_1751 = scope_1748.start_list(true, Some("item"));
        for item_1750 in var_1749 {
            #[allow(unused_mut)]
            let mut entry_1752 = list_1751.entry();
            crate::query_ser::serialize_structure_crate_model_classic_load_balancer(
                entry_1752, item_1750,
            )?;
        }
        list_1751.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_target_groups_config(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::TargetGroupsConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1753 = writer.prefix("TargetGroups");
    if let Some(var_1754) = &input.target_groups {
        let mut list_1756 = scope_1753.start_list(true, Some("item"));
        for item_1755 in var_1754 {
            #[allow(unused_mut)]
            let mut entry_1757 = list_1756.entry();
            crate::query_ser::serialize_structure_crate_model_target_group(entry_1757, item_1755)?;
        }
        list_1756.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_scheduled_instances_ebs(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ScheduledInstancesEbs,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1758 = writer.prefix("DeleteOnTermination");
    if let Some(var_1759) = &input.delete_on_termination {
        scope_1758.boolean(*var_1759);
    }
    #[allow(unused_mut)]
    let mut scope_1760 = writer.prefix("Encrypted");
    if let Some(var_1761) = &input.encrypted {
        scope_1760.boolean(*var_1761);
    }
    #[allow(unused_mut)]
    let mut scope_1762 = writer.prefix("Iops");
    if let Some(var_1763) = &input.iops {
        scope_1762.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1763).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1764 = writer.prefix("SnapshotId");
    if let Some(var_1765) = &input.snapshot_id {
        scope_1764.string(var_1765);
    }
    #[allow(unused_mut)]
    let mut scope_1766 = writer.prefix("VolumeSize");
    if let Some(var_1767) = &input.volume_size {
        scope_1766.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1767).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1768 = writer.prefix("VolumeType");
    if let Some(var_1769) = &input.volume_type {
        scope_1768.string(var_1769);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_scheduled_instances_ipv6_address(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ScheduledInstancesIpv6Address,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1770 = writer.prefix("Ipv6Address");
    if let Some(var_1771) = &input.ipv6_address {
        scope_1770.string(var_1771);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_scheduled_instances_private_ip_address_config(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ScheduledInstancesPrivateIpAddressConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1772 = writer.prefix("Primary");
    if let Some(var_1773) = &input.primary {
        scope_1772.boolean(*var_1773);
    }
    #[allow(unused_mut)]
    let mut scope_1774 = writer.prefix("PrivateIpAddress");
    if let Some(var_1775) = &input.private_ip_address {
        scope_1774.string(var_1775);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_v_cpu_count_range(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::VCpuCountRange,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1776 = writer.prefix("Min");
    if let Some(var_1777) = &input.min {
        scope_1776.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1777).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1778 = writer.prefix("Max");
    if let Some(var_1779) = &input.max {
        scope_1778.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1779).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_memory_mi_b(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::MemoryMiB,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1780 = writer.prefix("Min");
    if let Some(var_1781) = &input.min {
        scope_1780.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1781).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1782 = writer.prefix("Max");
    if let Some(var_1783) = &input.max {
        scope_1782.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1783).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_memory_gi_b_per_v_cpu(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::MemoryGiBPerVCpu,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1784 = writer.prefix("Min");
    if let Some(var_1785) = &input.min {
        scope_1784.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1785).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1786 = writer.prefix("Max");
    if let Some(var_1787) = &input.max {
        scope_1786.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1787).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_network_interface_count(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::NetworkInterfaceCount,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1788 = writer.prefix("Min");
    if let Some(var_1789) = &input.min {
        scope_1788.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1789).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1790 = writer.prefix("Max");
    if let Some(var_1791) = &input.max {
        scope_1790.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1791).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_total_local_storage_gb(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::TotalLocalStorageGb,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1792 = writer.prefix("Min");
    if let Some(var_1793) = &input.min {
        scope_1792.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1793).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1794 = writer.prefix("Max");
    if let Some(var_1795) = &input.max {
        scope_1794.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1795).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_baseline_ebs_bandwidth_mbps(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::BaselineEbsBandwidthMbps,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1796 = writer.prefix("Min");
    if let Some(var_1797) = &input.min {
        scope_1796.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1797).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1798 = writer.prefix("Max");
    if let Some(var_1799) = &input.max {
        scope_1798.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1799).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_accelerator_count(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::AcceleratorCount,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1800 = writer.prefix("Min");
    if let Some(var_1801) = &input.min {
        scope_1800.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1801).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1802 = writer.prefix("Max");
    if let Some(var_1803) = &input.max {
        scope_1802.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1803).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_accelerator_total_memory_mi_b(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::AcceleratorTotalMemoryMiB,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1804 = writer.prefix("Min");
    if let Some(var_1805) = &input.min {
        scope_1804.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1805).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1806 = writer.prefix("Max");
    if let Some(var_1807) = &input.max {
        scope_1806.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1807).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_classic_load_balancer(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ClassicLoadBalancer,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1808 = writer.prefix("Name");
    if let Some(var_1809) = &input.name {
        scope_1808.string(var_1809);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_target_group(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::TargetGroup,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1810 = writer.prefix("Arn");
    if let Some(var_1811) = &input.arn {
        scope_1810.string(var_1811);
    }
    Ok(())
}
