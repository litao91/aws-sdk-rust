// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_operation_crate_operation_accept_reserved_instances_exchange_quote(
    input: &crate::input::AcceptReservedInstancesExchangeQuoteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AcceptReservedInstancesExchangeQuote",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("DryRun");
    if let Some(var_2) = &input.dry_run {
        scope_1.boolean(*var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("ReservedInstanceId");
    if let Some(var_4) = &input.reserved_instance_ids {
        let mut list_6 = scope_3.start_list(true, Some("ReservedInstanceId"));
        for item_5 in var_4 {
            #[allow(unused_mut)]
            let mut entry_7 = list_6.entry();
            entry_7.string(item_5);
        }
        list_6.finish();
    }
    #[allow(unused_mut)]
    let mut scope_8 = writer.prefix("TargetConfiguration");
    if let Some(var_9) = &input.target_configurations {
        let mut list_11 = scope_8.start_list(true, Some("TargetConfigurationRequest"));
        for item_10 in var_9 {
            #[allow(unused_mut)]
            let mut entry_12 = list_11.entry();
            crate::query_ser::serialize_structure_crate_model_target_configuration_request(
                entry_12, item_10,
            )?;
        }
        list_11.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_accept_transit_gateway_multicast_domain_associations(
    input: &crate::input::AcceptTransitGatewayMulticastDomainAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AcceptTransitGatewayMulticastDomainAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_13 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_14) = &input.transit_gateway_multicast_domain_id {
        scope_13.string(var_14);
    }
    #[allow(unused_mut)]
    let mut scope_15 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_16) = &input.transit_gateway_attachment_id {
        scope_15.string(var_16);
    }
    #[allow(unused_mut)]
    let mut scope_17 = writer.prefix("SubnetIds");
    if let Some(var_18) = &input.subnet_ids {
        let mut list_20 = scope_17.start_list(true, Some("item"));
        for item_19 in var_18 {
            #[allow(unused_mut)]
            let mut entry_21 = list_20.entry();
            entry_21.string(item_19);
        }
        list_20.finish();
    }
    #[allow(unused_mut)]
    let mut scope_22 = writer.prefix("DryRun");
    if let Some(var_23) = &input.dry_run {
        scope_22.boolean(*var_23);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_accept_transit_gateway_peering_attachment(
    input: &crate::input::AcceptTransitGatewayPeeringAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AcceptTransitGatewayPeeringAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_24 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_25) = &input.transit_gateway_attachment_id {
        scope_24.string(var_25);
    }
    #[allow(unused_mut)]
    let mut scope_26 = writer.prefix("DryRun");
    if let Some(var_27) = &input.dry_run {
        scope_26.boolean(*var_27);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_accept_transit_gateway_vpc_attachment(
    input: &crate::input::AcceptTransitGatewayVpcAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AcceptTransitGatewayVpcAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_28 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_29) = &input.transit_gateway_attachment_id {
        scope_28.string(var_29);
    }
    #[allow(unused_mut)]
    let mut scope_30 = writer.prefix("DryRun");
    if let Some(var_31) = &input.dry_run {
        scope_30.boolean(*var_31);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_accept_vpc_endpoint_connections(
    input: &crate::input::AcceptVpcEndpointConnectionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AcceptVpcEndpointConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_32 = writer.prefix("DryRun");
    if let Some(var_33) = &input.dry_run {
        scope_32.boolean(*var_33);
    }
    #[allow(unused_mut)]
    let mut scope_34 = writer.prefix("ServiceId");
    if let Some(var_35) = &input.service_id {
        scope_34.string(var_35);
    }
    #[allow(unused_mut)]
    let mut scope_36 = writer.prefix("VpcEndpointId");
    if let Some(var_37) = &input.vpc_endpoint_ids {
        let mut list_39 = scope_36.start_list(true, Some("item"));
        for item_38 in var_37 {
            #[allow(unused_mut)]
            let mut entry_40 = list_39.entry();
            entry_40.string(item_38);
        }
        list_39.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_accept_vpc_peering_connection(
    input: &crate::input::AcceptVpcPeeringConnectionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AcceptVpcPeeringConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_41 = writer.prefix("DryRun");
    if let Some(var_42) = &input.dry_run {
        scope_41.boolean(*var_42);
    }
    #[allow(unused_mut)]
    let mut scope_43 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_44) = &input.vpc_peering_connection_id {
        scope_43.string(var_44);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_advertise_byoip_cidr(
    input: &crate::input::AdvertiseByoipCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AdvertiseByoipCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_45 = writer.prefix("Cidr");
    if let Some(var_46) = &input.cidr {
        scope_45.string(var_46);
    }
    #[allow(unused_mut)]
    let mut scope_47 = writer.prefix("DryRun");
    if let Some(var_48) = &input.dry_run {
        scope_47.boolean(*var_48);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_allocate_address(
    input: &crate::input::AllocateAddressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AllocateAddress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_49 = writer.prefix("Domain");
    if let Some(var_50) = &input.domain {
        scope_49.string(var_50.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_51 = writer.prefix("Address");
    if let Some(var_52) = &input.address {
        scope_51.string(var_52);
    }
    #[allow(unused_mut)]
    let mut scope_53 = writer.prefix("PublicIpv4Pool");
    if let Some(var_54) = &input.public_ipv4_pool {
        scope_53.string(var_54);
    }
    #[allow(unused_mut)]
    let mut scope_55 = writer.prefix("NetworkBorderGroup");
    if let Some(var_56) = &input.network_border_group {
        scope_55.string(var_56);
    }
    #[allow(unused_mut)]
    let mut scope_57 = writer.prefix("CustomerOwnedIpv4Pool");
    if let Some(var_58) = &input.customer_owned_ipv4_pool {
        scope_57.string(var_58);
    }
    #[allow(unused_mut)]
    let mut scope_59 = writer.prefix("DryRun");
    if let Some(var_60) = &input.dry_run {
        scope_59.boolean(*var_60);
    }
    #[allow(unused_mut)]
    let mut scope_61 = writer.prefix("TagSpecification");
    if let Some(var_62) = &input.tag_specifications {
        let mut list_64 = scope_61.start_list(true, Some("item"));
        for item_63 in var_62 {
            #[allow(unused_mut)]
            let mut entry_65 = list_64.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_65, item_63)?;
        }
        list_64.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_allocate_hosts(
    input: &crate::input::AllocateHostsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AllocateHosts", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_66 = writer.prefix("AutoPlacement");
    if let Some(var_67) = &input.auto_placement {
        scope_66.string(var_67.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_68 = writer.prefix("AvailabilityZone");
    if let Some(var_69) = &input.availability_zone {
        scope_68.string(var_69);
    }
    #[allow(unused_mut)]
    let mut scope_70 = writer.prefix("ClientToken");
    if let Some(var_71) = &input.client_token {
        scope_70.string(var_71);
    }
    #[allow(unused_mut)]
    let mut scope_72 = writer.prefix("InstanceType");
    if let Some(var_73) = &input.instance_type {
        scope_72.string(var_73);
    }
    #[allow(unused_mut)]
    let mut scope_74 = writer.prefix("InstanceFamily");
    if let Some(var_75) = &input.instance_family {
        scope_74.string(var_75);
    }
    #[allow(unused_mut)]
    let mut scope_76 = writer.prefix("Quantity");
    if let Some(var_77) = &input.quantity {
        scope_76.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_77).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_78 = writer.prefix("TagSpecification");
    if let Some(var_79) = &input.tag_specifications {
        let mut list_81 = scope_78.start_list(true, Some("item"));
        for item_80 in var_79 {
            #[allow(unused_mut)]
            let mut entry_82 = list_81.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(entry_82, item_80)?;
        }
        list_81.finish();
    }
    #[allow(unused_mut)]
    let mut scope_83 = writer.prefix("HostRecovery");
    if let Some(var_84) = &input.host_recovery {
        scope_83.string(var_84.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_85 = writer.prefix("OutpostArn");
    if let Some(var_86) = &input.outpost_arn {
        scope_85.string(var_86);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_allocate_ipam_pool_cidr(
    input: &crate::input::AllocateIpamPoolCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AllocateIpamPoolCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_87 = writer.prefix("DryRun");
    if let Some(var_88) = &input.dry_run {
        scope_87.boolean(*var_88);
    }
    #[allow(unused_mut)]
    let mut scope_89 = writer.prefix("IpamPoolId");
    if let Some(var_90) = &input.ipam_pool_id {
        scope_89.string(var_90);
    }
    #[allow(unused_mut)]
    let mut scope_91 = writer.prefix("Cidr");
    if let Some(var_92) = &input.cidr {
        scope_91.string(var_92);
    }
    #[allow(unused_mut)]
    let mut scope_93 = writer.prefix("NetmaskLength");
    if let Some(var_94) = &input.netmask_length {
        scope_93.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_94).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_95 = writer.prefix("ClientToken");
    if let Some(var_96) = &input.client_token {
        scope_95.string(var_96);
    }
    #[allow(unused_mut)]
    let mut scope_97 = writer.prefix("Description");
    if let Some(var_98) = &input.description {
        scope_97.string(var_98);
    }
    #[allow(unused_mut)]
    let mut scope_99 = writer.prefix("PreviewNextCidr");
    if let Some(var_100) = &input.preview_next_cidr {
        scope_99.boolean(*var_100);
    }
    #[allow(unused_mut)]
    let mut scope_101 = writer.prefix("DisallowedCidr");
    if let Some(var_102) = &input.disallowed_cidrs {
        let mut list_104 = scope_101.start_list(true, Some("item"));
        for item_103 in var_102 {
            #[allow(unused_mut)]
            let mut entry_105 = list_104.entry();
            entry_105.string(item_103);
        }
        list_104.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_apply_security_groups_to_client_vpn_target_network(
    input: &crate::input::ApplySecurityGroupsToClientVpnTargetNetworkInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ApplySecurityGroupsToClientVpnTargetNetwork",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_106 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_107) = &input.client_vpn_endpoint_id {
        scope_106.string(var_107);
    }
    #[allow(unused_mut)]
    let mut scope_108 = writer.prefix("VpcId");
    if let Some(var_109) = &input.vpc_id {
        scope_108.string(var_109);
    }
    #[allow(unused_mut)]
    let mut scope_110 = writer.prefix("SecurityGroupId");
    if let Some(var_111) = &input.security_group_ids {
        let mut list_113 = scope_110.start_list(true, Some("item"));
        for item_112 in var_111 {
            #[allow(unused_mut)]
            let mut entry_114 = list_113.entry();
            entry_114.string(item_112);
        }
        list_113.finish();
    }
    #[allow(unused_mut)]
    let mut scope_115 = writer.prefix("DryRun");
    if let Some(var_116) = &input.dry_run {
        scope_115.boolean(*var_116);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_assign_ipv6_addresses(
    input: &crate::input::AssignIpv6AddressesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssignIpv6Addresses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_117 = writer.prefix("Ipv6AddressCount");
    if let Some(var_118) = &input.ipv6_address_count {
        scope_117.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_118).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_119 = writer.prefix("Ipv6Addresses");
    if let Some(var_120) = &input.ipv6_addresses {
        let mut list_122 = scope_119.start_list(true, Some("item"));
        for item_121 in var_120 {
            #[allow(unused_mut)]
            let mut entry_123 = list_122.entry();
            entry_123.string(item_121);
        }
        list_122.finish();
    }
    #[allow(unused_mut)]
    let mut scope_124 = writer.prefix("Ipv6PrefixCount");
    if let Some(var_125) = &input.ipv6_prefix_count {
        scope_124.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_125).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_126 = writer.prefix("Ipv6Prefix");
    if let Some(var_127) = &input.ipv6_prefixes {
        let mut list_129 = scope_126.start_list(true, Some("item"));
        for item_128 in var_127 {
            #[allow(unused_mut)]
            let mut entry_130 = list_129.entry();
            entry_130.string(item_128);
        }
        list_129.finish();
    }
    #[allow(unused_mut)]
    let mut scope_131 = writer.prefix("NetworkInterfaceId");
    if let Some(var_132) = &input.network_interface_id {
        scope_131.string(var_132);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_assign_private_ip_addresses(
    input: &crate::input::AssignPrivateIpAddressesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssignPrivateIpAddresses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_133 = writer.prefix("AllowReassignment");
    if let Some(var_134) = &input.allow_reassignment {
        scope_133.boolean(*var_134);
    }
    #[allow(unused_mut)]
    let mut scope_135 = writer.prefix("NetworkInterfaceId");
    if let Some(var_136) = &input.network_interface_id {
        scope_135.string(var_136);
    }
    #[allow(unused_mut)]
    let mut scope_137 = writer.prefix("PrivateIpAddress");
    if let Some(var_138) = &input.private_ip_addresses {
        let mut list_140 = scope_137.start_list(true, Some("PrivateIpAddress"));
        for item_139 in var_138 {
            #[allow(unused_mut)]
            let mut entry_141 = list_140.entry();
            entry_141.string(item_139);
        }
        list_140.finish();
    }
    #[allow(unused_mut)]
    let mut scope_142 = writer.prefix("SecondaryPrivateIpAddressCount");
    if let Some(var_143) = &input.secondary_private_ip_address_count {
        scope_142.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_143).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_144 = writer.prefix("Ipv4Prefix");
    if let Some(var_145) = &input.ipv4_prefixes {
        let mut list_147 = scope_144.start_list(true, Some("item"));
        for item_146 in var_145 {
            #[allow(unused_mut)]
            let mut entry_148 = list_147.entry();
            entry_148.string(item_146);
        }
        list_147.finish();
    }
    #[allow(unused_mut)]
    let mut scope_149 = writer.prefix("Ipv4PrefixCount");
    if let Some(var_150) = &input.ipv4_prefix_count {
        scope_149.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_150).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_address(
    input: &crate::input::AssociateAddressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AssociateAddress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_151 = writer.prefix("AllocationId");
    if let Some(var_152) = &input.allocation_id {
        scope_151.string(var_152);
    }
    #[allow(unused_mut)]
    let mut scope_153 = writer.prefix("InstanceId");
    if let Some(var_154) = &input.instance_id {
        scope_153.string(var_154);
    }
    #[allow(unused_mut)]
    let mut scope_155 = writer.prefix("PublicIp");
    if let Some(var_156) = &input.public_ip {
        scope_155.string(var_156);
    }
    #[allow(unused_mut)]
    let mut scope_157 = writer.prefix("AllowReassociation");
    if let Some(var_158) = &input.allow_reassociation {
        scope_157.boolean(*var_158);
    }
    #[allow(unused_mut)]
    let mut scope_159 = writer.prefix("DryRun");
    if let Some(var_160) = &input.dry_run {
        scope_159.boolean(*var_160);
    }
    #[allow(unused_mut)]
    let mut scope_161 = writer.prefix("NetworkInterfaceId");
    if let Some(var_162) = &input.network_interface_id {
        scope_161.string(var_162);
    }
    #[allow(unused_mut)]
    let mut scope_163 = writer.prefix("PrivateIpAddress");
    if let Some(var_164) = &input.private_ip_address {
        scope_163.string(var_164);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_client_vpn_target_network(
    input: &crate::input::AssociateClientVpnTargetNetworkInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AssociateClientVpnTargetNetwork",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_165 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_166) = &input.client_vpn_endpoint_id {
        scope_165.string(var_166);
    }
    #[allow(unused_mut)]
    let mut scope_167 = writer.prefix("SubnetId");
    if let Some(var_168) = &input.subnet_id {
        scope_167.string(var_168);
    }
    #[allow(unused_mut)]
    let mut scope_169 = writer.prefix("ClientToken");
    if let Some(var_170) = &input.client_token {
        scope_169.string(var_170);
    }
    #[allow(unused_mut)]
    let mut scope_171 = writer.prefix("DryRun");
    if let Some(var_172) = &input.dry_run {
        scope_171.boolean(*var_172);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_dhcp_options(
    input: &crate::input::AssociateDhcpOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssociateDhcpOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_173 = writer.prefix("DhcpOptionsId");
    if let Some(var_174) = &input.dhcp_options_id {
        scope_173.string(var_174);
    }
    #[allow(unused_mut)]
    let mut scope_175 = writer.prefix("VpcId");
    if let Some(var_176) = &input.vpc_id {
        scope_175.string(var_176);
    }
    #[allow(unused_mut)]
    let mut scope_177 = writer.prefix("DryRun");
    if let Some(var_178) = &input.dry_run {
        scope_177.boolean(*var_178);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_enclave_certificate_iam_role(
    input: &crate::input::AssociateEnclaveCertificateIamRoleInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AssociateEnclaveCertificateIamRole",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_179 = writer.prefix("CertificateArn");
    if let Some(var_180) = &input.certificate_arn {
        scope_179.string(var_180);
    }
    #[allow(unused_mut)]
    let mut scope_181 = writer.prefix("RoleArn");
    if let Some(var_182) = &input.role_arn {
        scope_181.string(var_182);
    }
    #[allow(unused_mut)]
    let mut scope_183 = writer.prefix("DryRun");
    if let Some(var_184) = &input.dry_run {
        scope_183.boolean(*var_184);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_iam_instance_profile(
    input: &crate::input::AssociateIamInstanceProfileInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssociateIamInstanceProfile", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_185 = writer.prefix("IamInstanceProfile");
    if let Some(var_186) = &input.iam_instance_profile {
        crate::query_ser::serialize_structure_crate_model_iam_instance_profile_specification(
            scope_185, var_186,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_187 = writer.prefix("InstanceId");
    if let Some(var_188) = &input.instance_id {
        scope_187.string(var_188);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_instance_event_window(
    input: &crate::input::AssociateInstanceEventWindowInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssociateInstanceEventWindow", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_189 = writer.prefix("DryRun");
    if let Some(var_190) = &input.dry_run {
        scope_189.boolean(*var_190);
    }
    #[allow(unused_mut)]
    let mut scope_191 = writer.prefix("InstanceEventWindowId");
    if let Some(var_192) = &input.instance_event_window_id {
        scope_191.string(var_192);
    }
    #[allow(unused_mut)]
    let mut scope_193 = writer.prefix("AssociationTarget");
    if let Some(var_194) = &input.association_target {
        crate::query_ser::serialize_structure_crate_model_instance_event_window_association_request(scope_193, var_194)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_route_table(
    input: &crate::input::AssociateRouteTableInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssociateRouteTable", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_195 = writer.prefix("DryRun");
    if let Some(var_196) = &input.dry_run {
        scope_195.boolean(*var_196);
    }
    #[allow(unused_mut)]
    let mut scope_197 = writer.prefix("RouteTableId");
    if let Some(var_198) = &input.route_table_id {
        scope_197.string(var_198);
    }
    #[allow(unused_mut)]
    let mut scope_199 = writer.prefix("SubnetId");
    if let Some(var_200) = &input.subnet_id {
        scope_199.string(var_200);
    }
    #[allow(unused_mut)]
    let mut scope_201 = writer.prefix("GatewayId");
    if let Some(var_202) = &input.gateway_id {
        scope_201.string(var_202);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_subnet_cidr_block(
    input: &crate::input::AssociateSubnetCidrBlockInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssociateSubnetCidrBlock", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_203 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_204) = &input.ipv6_cidr_block {
        scope_203.string(var_204);
    }
    #[allow(unused_mut)]
    let mut scope_205 = writer.prefix("SubnetId");
    if let Some(var_206) = &input.subnet_id {
        scope_205.string(var_206);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_transit_gateway_multicast_domain(
    input: &crate::input::AssociateTransitGatewayMulticastDomainInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AssociateTransitGatewayMulticastDomain",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_207 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_208) = &input.transit_gateway_multicast_domain_id {
        scope_207.string(var_208);
    }
    #[allow(unused_mut)]
    let mut scope_209 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_210) = &input.transit_gateway_attachment_id {
        scope_209.string(var_210);
    }
    #[allow(unused_mut)]
    let mut scope_211 = writer.prefix("SubnetIds");
    if let Some(var_212) = &input.subnet_ids {
        let mut list_214 = scope_211.start_list(true, Some("item"));
        for item_213 in var_212 {
            #[allow(unused_mut)]
            let mut entry_215 = list_214.entry();
            entry_215.string(item_213);
        }
        list_214.finish();
    }
    #[allow(unused_mut)]
    let mut scope_216 = writer.prefix("DryRun");
    if let Some(var_217) = &input.dry_run {
        scope_216.boolean(*var_217);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_transit_gateway_route_table(
    input: &crate::input::AssociateTransitGatewayRouteTableInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AssociateTransitGatewayRouteTable",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_218 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_219) = &input.transit_gateway_route_table_id {
        scope_218.string(var_219);
    }
    #[allow(unused_mut)]
    let mut scope_220 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_221) = &input.transit_gateway_attachment_id {
        scope_220.string(var_221);
    }
    #[allow(unused_mut)]
    let mut scope_222 = writer.prefix("DryRun");
    if let Some(var_223) = &input.dry_run {
        scope_222.boolean(*var_223);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_trunk_interface(
    input: &crate::input::AssociateTrunkInterfaceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssociateTrunkInterface", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_224 = writer.prefix("BranchInterfaceId");
    if let Some(var_225) = &input.branch_interface_id {
        scope_224.string(var_225);
    }
    #[allow(unused_mut)]
    let mut scope_226 = writer.prefix("TrunkInterfaceId");
    if let Some(var_227) = &input.trunk_interface_id {
        scope_226.string(var_227);
    }
    #[allow(unused_mut)]
    let mut scope_228 = writer.prefix("VlanId");
    if let Some(var_229) = &input.vlan_id {
        scope_228.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_229).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_230 = writer.prefix("GreKey");
    if let Some(var_231) = &input.gre_key {
        scope_230.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_231).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_232 = writer.prefix("ClientToken");
    if let Some(var_233) = &input.client_token {
        scope_232.string(var_233);
    }
    #[allow(unused_mut)]
    let mut scope_234 = writer.prefix("DryRun");
    if let Some(var_235) = &input.dry_run {
        scope_234.boolean(*var_235);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_vpc_cidr_block(
    input: &crate::input::AssociateVpcCidrBlockInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssociateVpcCidrBlock", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_236 = writer.prefix("AmazonProvidedIpv6CidrBlock");
    if let Some(var_237) = &input.amazon_provided_ipv6_cidr_block {
        scope_236.boolean(*var_237);
    }
    #[allow(unused_mut)]
    let mut scope_238 = writer.prefix("CidrBlock");
    if let Some(var_239) = &input.cidr_block {
        scope_238.string(var_239);
    }
    #[allow(unused_mut)]
    let mut scope_240 = writer.prefix("VpcId");
    if let Some(var_241) = &input.vpc_id {
        scope_240.string(var_241);
    }
    #[allow(unused_mut)]
    let mut scope_242 = writer.prefix("Ipv6CidrBlockNetworkBorderGroup");
    if let Some(var_243) = &input.ipv6_cidr_block_network_border_group {
        scope_242.string(var_243);
    }
    #[allow(unused_mut)]
    let mut scope_244 = writer.prefix("Ipv6Pool");
    if let Some(var_245) = &input.ipv6_pool {
        scope_244.string(var_245);
    }
    #[allow(unused_mut)]
    let mut scope_246 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_247) = &input.ipv6_cidr_block {
        scope_246.string(var_247);
    }
    #[allow(unused_mut)]
    let mut scope_248 = writer.prefix("Ipv4IpamPoolId");
    if let Some(var_249) = &input.ipv4_ipam_pool_id {
        scope_248.string(var_249);
    }
    #[allow(unused_mut)]
    let mut scope_250 = writer.prefix("Ipv4NetmaskLength");
    if let Some(var_251) = &input.ipv4_netmask_length {
        scope_250.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_251).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_252 = writer.prefix("Ipv6IpamPoolId");
    if let Some(var_253) = &input.ipv6_ipam_pool_id {
        scope_252.string(var_253);
    }
    #[allow(unused_mut)]
    let mut scope_254 = writer.prefix("Ipv6NetmaskLength");
    if let Some(var_255) = &input.ipv6_netmask_length {
        scope_254.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_255).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_attach_classic_link_vpc(
    input: &crate::input::AttachClassicLinkVpcInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AttachClassicLinkVpc", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_256 = writer.prefix("DryRun");
    if let Some(var_257) = &input.dry_run {
        scope_256.boolean(*var_257);
    }
    #[allow(unused_mut)]
    let mut scope_258 = writer.prefix("SecurityGroupId");
    if let Some(var_259) = &input.groups {
        let mut list_261 = scope_258.start_list(true, Some("groupId"));
        for item_260 in var_259 {
            #[allow(unused_mut)]
            let mut entry_262 = list_261.entry();
            entry_262.string(item_260);
        }
        list_261.finish();
    }
    #[allow(unused_mut)]
    let mut scope_263 = writer.prefix("InstanceId");
    if let Some(var_264) = &input.instance_id {
        scope_263.string(var_264);
    }
    #[allow(unused_mut)]
    let mut scope_265 = writer.prefix("VpcId");
    if let Some(var_266) = &input.vpc_id {
        scope_265.string(var_266);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_attach_internet_gateway(
    input: &crate::input::AttachInternetGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AttachInternetGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_267 = writer.prefix("DryRun");
    if let Some(var_268) = &input.dry_run {
        scope_267.boolean(*var_268);
    }
    #[allow(unused_mut)]
    let mut scope_269 = writer.prefix("InternetGatewayId");
    if let Some(var_270) = &input.internet_gateway_id {
        scope_269.string(var_270);
    }
    #[allow(unused_mut)]
    let mut scope_271 = writer.prefix("VpcId");
    if let Some(var_272) = &input.vpc_id {
        scope_271.string(var_272);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_attach_network_interface(
    input: &crate::input::AttachNetworkInterfaceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AttachNetworkInterface", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_273 = writer.prefix("DeviceIndex");
    if let Some(var_274) = &input.device_index {
        scope_273.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_274).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_275 = writer.prefix("DryRun");
    if let Some(var_276) = &input.dry_run {
        scope_275.boolean(*var_276);
    }
    #[allow(unused_mut)]
    let mut scope_277 = writer.prefix("InstanceId");
    if let Some(var_278) = &input.instance_id {
        scope_277.string(var_278);
    }
    #[allow(unused_mut)]
    let mut scope_279 = writer.prefix("NetworkInterfaceId");
    if let Some(var_280) = &input.network_interface_id {
        scope_279.string(var_280);
    }
    #[allow(unused_mut)]
    let mut scope_281 = writer.prefix("NetworkCardIndex");
    if let Some(var_282) = &input.network_card_index {
        scope_281.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_282).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_attach_volume(
    input: &crate::input::AttachVolumeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AttachVolume", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_283 = writer.prefix("Device");
    if let Some(var_284) = &input.device {
        scope_283.string(var_284);
    }
    #[allow(unused_mut)]
    let mut scope_285 = writer.prefix("InstanceId");
    if let Some(var_286) = &input.instance_id {
        scope_285.string(var_286);
    }
    #[allow(unused_mut)]
    let mut scope_287 = writer.prefix("VolumeId");
    if let Some(var_288) = &input.volume_id {
        scope_287.string(var_288);
    }
    #[allow(unused_mut)]
    let mut scope_289 = writer.prefix("DryRun");
    if let Some(var_290) = &input.dry_run {
        scope_289.boolean(*var_290);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_attach_vpn_gateway(
    input: &crate::input::AttachVpnGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AttachVpnGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_291 = writer.prefix("VpcId");
    if let Some(var_292) = &input.vpc_id {
        scope_291.string(var_292);
    }
    #[allow(unused_mut)]
    let mut scope_293 = writer.prefix("VpnGatewayId");
    if let Some(var_294) = &input.vpn_gateway_id {
        scope_293.string(var_294);
    }
    #[allow(unused_mut)]
    let mut scope_295 = writer.prefix("DryRun");
    if let Some(var_296) = &input.dry_run {
        scope_295.boolean(*var_296);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_authorize_client_vpn_ingress(
    input: &crate::input::AuthorizeClientVpnIngressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AuthorizeClientVpnIngress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_297 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_298) = &input.client_vpn_endpoint_id {
        scope_297.string(var_298);
    }
    #[allow(unused_mut)]
    let mut scope_299 = writer.prefix("TargetNetworkCidr");
    if let Some(var_300) = &input.target_network_cidr {
        scope_299.string(var_300);
    }
    #[allow(unused_mut)]
    let mut scope_301 = writer.prefix("AccessGroupId");
    if let Some(var_302) = &input.access_group_id {
        scope_301.string(var_302);
    }
    #[allow(unused_mut)]
    let mut scope_303 = writer.prefix("AuthorizeAllGroups");
    if let Some(var_304) = &input.authorize_all_groups {
        scope_303.boolean(*var_304);
    }
    #[allow(unused_mut)]
    let mut scope_305 = writer.prefix("Description");
    if let Some(var_306) = &input.description {
        scope_305.string(var_306);
    }
    #[allow(unused_mut)]
    let mut scope_307 = writer.prefix("ClientToken");
    if let Some(var_308) = &input.client_token {
        scope_307.string(var_308);
    }
    #[allow(unused_mut)]
    let mut scope_309 = writer.prefix("DryRun");
    if let Some(var_310) = &input.dry_run {
        scope_309.boolean(*var_310);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_authorize_security_group_egress(
    input: &crate::input::AuthorizeSecurityGroupEgressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AuthorizeSecurityGroupEgress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_311 = writer.prefix("DryRun");
    if let Some(var_312) = &input.dry_run {
        scope_311.boolean(*var_312);
    }
    #[allow(unused_mut)]
    let mut scope_313 = writer.prefix("GroupId");
    if let Some(var_314) = &input.group_id {
        scope_313.string(var_314);
    }
    #[allow(unused_mut)]
    let mut scope_315 = writer.prefix("IpPermissions");
    if let Some(var_316) = &input.ip_permissions {
        let mut list_318 = scope_315.start_list(true, Some("item"));
        for item_317 in var_316 {
            #[allow(unused_mut)]
            let mut entry_319 = list_318.entry();
            crate::query_ser::serialize_structure_crate_model_ip_permission(entry_319, item_317)?;
        }
        list_318.finish();
    }
    #[allow(unused_mut)]
    let mut scope_320 = writer.prefix("TagSpecification");
    if let Some(var_321) = &input.tag_specifications {
        let mut list_323 = scope_320.start_list(true, Some("item"));
        for item_322 in var_321 {
            #[allow(unused_mut)]
            let mut entry_324 = list_323.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_324, item_322,
            )?;
        }
        list_323.finish();
    }
    #[allow(unused_mut)]
    let mut scope_325 = writer.prefix("CidrIp");
    if let Some(var_326) = &input.cidr_ip {
        scope_325.string(var_326);
    }
    #[allow(unused_mut)]
    let mut scope_327 = writer.prefix("FromPort");
    if let Some(var_328) = &input.from_port {
        scope_327.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_328).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_329 = writer.prefix("IpProtocol");
    if let Some(var_330) = &input.ip_protocol {
        scope_329.string(var_330);
    }
    #[allow(unused_mut)]
    let mut scope_331 = writer.prefix("ToPort");
    if let Some(var_332) = &input.to_port {
        scope_331.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_332).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_333 = writer.prefix("SourceSecurityGroupName");
    if let Some(var_334) = &input.source_security_group_name {
        scope_333.string(var_334);
    }
    #[allow(unused_mut)]
    let mut scope_335 = writer.prefix("SourceSecurityGroupOwnerId");
    if let Some(var_336) = &input.source_security_group_owner_id {
        scope_335.string(var_336);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_authorize_security_group_ingress(
    input: &crate::input::AuthorizeSecurityGroupIngressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AuthorizeSecurityGroupIngress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_337 = writer.prefix("CidrIp");
    if let Some(var_338) = &input.cidr_ip {
        scope_337.string(var_338);
    }
    #[allow(unused_mut)]
    let mut scope_339 = writer.prefix("FromPort");
    if let Some(var_340) = &input.from_port {
        scope_339.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_340).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_341 = writer.prefix("GroupId");
    if let Some(var_342) = &input.group_id {
        scope_341.string(var_342);
    }
    #[allow(unused_mut)]
    let mut scope_343 = writer.prefix("GroupName");
    if let Some(var_344) = &input.group_name {
        scope_343.string(var_344);
    }
    #[allow(unused_mut)]
    let mut scope_345 = writer.prefix("IpPermissions");
    if let Some(var_346) = &input.ip_permissions {
        let mut list_348 = scope_345.start_list(true, Some("item"));
        for item_347 in var_346 {
            #[allow(unused_mut)]
            let mut entry_349 = list_348.entry();
            crate::query_ser::serialize_structure_crate_model_ip_permission(entry_349, item_347)?;
        }
        list_348.finish();
    }
    #[allow(unused_mut)]
    let mut scope_350 = writer.prefix("IpProtocol");
    if let Some(var_351) = &input.ip_protocol {
        scope_350.string(var_351);
    }
    #[allow(unused_mut)]
    let mut scope_352 = writer.prefix("SourceSecurityGroupName");
    if let Some(var_353) = &input.source_security_group_name {
        scope_352.string(var_353);
    }
    #[allow(unused_mut)]
    let mut scope_354 = writer.prefix("SourceSecurityGroupOwnerId");
    if let Some(var_355) = &input.source_security_group_owner_id {
        scope_354.string(var_355);
    }
    #[allow(unused_mut)]
    let mut scope_356 = writer.prefix("ToPort");
    if let Some(var_357) = &input.to_port {
        scope_356.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_357).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_358 = writer.prefix("DryRun");
    if let Some(var_359) = &input.dry_run {
        scope_358.boolean(*var_359);
    }
    #[allow(unused_mut)]
    let mut scope_360 = writer.prefix("TagSpecification");
    if let Some(var_361) = &input.tag_specifications {
        let mut list_363 = scope_360.start_list(true, Some("item"));
        for item_362 in var_361 {
            #[allow(unused_mut)]
            let mut entry_364 = list_363.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_364, item_362,
            )?;
        }
        list_363.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_bundle_instance(
    input: &crate::input::BundleInstanceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "BundleInstance", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_365 = writer.prefix("InstanceId");
    if let Some(var_366) = &input.instance_id {
        scope_365.string(var_366);
    }
    #[allow(unused_mut)]
    let mut scope_367 = writer.prefix("Storage");
    if let Some(var_368) = &input.storage {
        crate::query_ser::serialize_structure_crate_model_storage(scope_367, var_368)?;
    }
    #[allow(unused_mut)]
    let mut scope_369 = writer.prefix("DryRun");
    if let Some(var_370) = &input.dry_run {
        scope_369.boolean(*var_370);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_bundle_task(
    input: &crate::input::CancelBundleTaskInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CancelBundleTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_371 = writer.prefix("BundleId");
    if let Some(var_372) = &input.bundle_id {
        scope_371.string(var_372);
    }
    #[allow(unused_mut)]
    let mut scope_373 = writer.prefix("DryRun");
    if let Some(var_374) = &input.dry_run {
        scope_373.boolean(*var_374);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_capacity_reservation(
    input: &crate::input::CancelCapacityReservationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CancelCapacityReservation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_375 = writer.prefix("CapacityReservationId");
    if let Some(var_376) = &input.capacity_reservation_id {
        scope_375.string(var_376);
    }
    #[allow(unused_mut)]
    let mut scope_377 = writer.prefix("DryRun");
    if let Some(var_378) = &input.dry_run {
        scope_377.boolean(*var_378);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_capacity_reservation_fleets(
    input: &crate::input::CancelCapacityReservationFleetsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CancelCapacityReservationFleets",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_379 = writer.prefix("DryRun");
    if let Some(var_380) = &input.dry_run {
        scope_379.boolean(*var_380);
    }
    #[allow(unused_mut)]
    let mut scope_381 = writer.prefix("CapacityReservationFleetId");
    if let Some(var_382) = &input.capacity_reservation_fleet_ids {
        let mut list_384 = scope_381.start_list(true, Some("item"));
        for item_383 in var_382 {
            #[allow(unused_mut)]
            let mut entry_385 = list_384.entry();
            entry_385.string(item_383);
        }
        list_384.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_conversion_task(
    input: &crate::input::CancelConversionTaskInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CancelConversionTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_386 = writer.prefix("ConversionTaskId");
    if let Some(var_387) = &input.conversion_task_id {
        scope_386.string(var_387);
    }
    #[allow(unused_mut)]
    let mut scope_388 = writer.prefix("DryRun");
    if let Some(var_389) = &input.dry_run {
        scope_388.boolean(*var_389);
    }
    #[allow(unused_mut)]
    let mut scope_390 = writer.prefix("ReasonMessage");
    if let Some(var_391) = &input.reason_message {
        scope_390.string(var_391);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_export_task(
    input: &crate::input::CancelExportTaskInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CancelExportTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_392 = writer.prefix("ExportTaskId");
    if let Some(var_393) = &input.export_task_id {
        scope_392.string(var_393);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_import_task(
    input: &crate::input::CancelImportTaskInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CancelImportTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_394 = writer.prefix("CancelReason");
    if let Some(var_395) = &input.cancel_reason {
        scope_394.string(var_395);
    }
    #[allow(unused_mut)]
    let mut scope_396 = writer.prefix("DryRun");
    if let Some(var_397) = &input.dry_run {
        scope_396.boolean(*var_397);
    }
    #[allow(unused_mut)]
    let mut scope_398 = writer.prefix("ImportTaskId");
    if let Some(var_399) = &input.import_task_id {
        scope_398.string(var_399);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_reserved_instances_listing(
    input: &crate::input::CancelReservedInstancesListingInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CancelReservedInstancesListing",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_400 = writer.prefix("ReservedInstancesListingId");
    if let Some(var_401) = &input.reserved_instances_listing_id {
        scope_400.string(var_401);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_spot_fleet_requests(
    input: &crate::input::CancelSpotFleetRequestsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CancelSpotFleetRequests", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_402 = writer.prefix("DryRun");
    if let Some(var_403) = &input.dry_run {
        scope_402.boolean(*var_403);
    }
    #[allow(unused_mut)]
    let mut scope_404 = writer.prefix("SpotFleetRequestId");
    if let Some(var_405) = &input.spot_fleet_request_ids {
        let mut list_407 = scope_404.start_list(true, Some("item"));
        for item_406 in var_405 {
            #[allow(unused_mut)]
            let mut entry_408 = list_407.entry();
            entry_408.string(item_406);
        }
        list_407.finish();
    }
    #[allow(unused_mut)]
    let mut scope_409 = writer.prefix("TerminateInstances");
    if let Some(var_410) = &input.terminate_instances {
        scope_409.boolean(*var_410);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_spot_instance_requests(
    input: &crate::input::CancelSpotInstanceRequestsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CancelSpotInstanceRequests", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_411 = writer.prefix("DryRun");
    if let Some(var_412) = &input.dry_run {
        scope_411.boolean(*var_412);
    }
    #[allow(unused_mut)]
    let mut scope_413 = writer.prefix("SpotInstanceRequestId");
    if let Some(var_414) = &input.spot_instance_request_ids {
        let mut list_416 = scope_413.start_list(true, Some("SpotInstanceRequestId"));
        for item_415 in var_414 {
            #[allow(unused_mut)]
            let mut entry_417 = list_416.entry();
            entry_417.string(item_415);
        }
        list_416.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_confirm_product_instance(
    input: &crate::input::ConfirmProductInstanceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ConfirmProductInstance", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_418 = writer.prefix("InstanceId");
    if let Some(var_419) = &input.instance_id {
        scope_418.string(var_419);
    }
    #[allow(unused_mut)]
    let mut scope_420 = writer.prefix("ProductCode");
    if let Some(var_421) = &input.product_code {
        scope_420.string(var_421);
    }
    #[allow(unused_mut)]
    let mut scope_422 = writer.prefix("DryRun");
    if let Some(var_423) = &input.dry_run {
        scope_422.boolean(*var_423);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_copy_fpga_image(
    input: &crate::input::CopyFpgaImageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CopyFpgaImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_424 = writer.prefix("DryRun");
    if let Some(var_425) = &input.dry_run {
        scope_424.boolean(*var_425);
    }
    #[allow(unused_mut)]
    let mut scope_426 = writer.prefix("SourceFpgaImageId");
    if let Some(var_427) = &input.source_fpga_image_id {
        scope_426.string(var_427);
    }
    #[allow(unused_mut)]
    let mut scope_428 = writer.prefix("Description");
    if let Some(var_429) = &input.description {
        scope_428.string(var_429);
    }
    #[allow(unused_mut)]
    let mut scope_430 = writer.prefix("Name");
    if let Some(var_431) = &input.name {
        scope_430.string(var_431);
    }
    #[allow(unused_mut)]
    let mut scope_432 = writer.prefix("SourceRegion");
    if let Some(var_433) = &input.source_region {
        scope_432.string(var_433);
    }
    #[allow(unused_mut)]
    let mut scope_434 = writer.prefix("ClientToken");
    if let Some(var_435) = &input.client_token {
        scope_434.string(var_435);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_copy_image(
    input: &crate::input::CopyImageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CopyImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_436 = writer.prefix("ClientToken");
    if let Some(var_437) = &input.client_token {
        scope_436.string(var_437);
    }
    #[allow(unused_mut)]
    let mut scope_438 = writer.prefix("Description");
    if let Some(var_439) = &input.description {
        scope_438.string(var_439);
    }
    #[allow(unused_mut)]
    let mut scope_440 = writer.prefix("Encrypted");
    if let Some(var_441) = &input.encrypted {
        scope_440.boolean(*var_441);
    }
    #[allow(unused_mut)]
    let mut scope_442 = writer.prefix("KmsKeyId");
    if let Some(var_443) = &input.kms_key_id {
        scope_442.string(var_443);
    }
    #[allow(unused_mut)]
    let mut scope_444 = writer.prefix("Name");
    if let Some(var_445) = &input.name {
        scope_444.string(var_445);
    }
    #[allow(unused_mut)]
    let mut scope_446 = writer.prefix("SourceImageId");
    if let Some(var_447) = &input.source_image_id {
        scope_446.string(var_447);
    }
    #[allow(unused_mut)]
    let mut scope_448 = writer.prefix("SourceRegion");
    if let Some(var_449) = &input.source_region {
        scope_448.string(var_449);
    }
    #[allow(unused_mut)]
    let mut scope_450 = writer.prefix("DestinationOutpostArn");
    if let Some(var_451) = &input.destination_outpost_arn {
        scope_450.string(var_451);
    }
    #[allow(unused_mut)]
    let mut scope_452 = writer.prefix("DryRun");
    if let Some(var_453) = &input.dry_run {
        scope_452.boolean(*var_453);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_copy_snapshot(
    input: &crate::input::CopySnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CopySnapshot", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_454 = writer.prefix("Description");
    if let Some(var_455) = &input.description {
        scope_454.string(var_455);
    }
    #[allow(unused_mut)]
    let mut scope_456 = writer.prefix("DestinationOutpostArn");
    if let Some(var_457) = &input.destination_outpost_arn {
        scope_456.string(var_457);
    }
    #[allow(unused_mut)]
    let mut scope_458 = writer.prefix("DestinationRegion");
    if let Some(var_459) = &input.destination_region {
        scope_458.string(var_459);
    }
    #[allow(unused_mut)]
    let mut scope_460 = writer.prefix("Encrypted");
    if let Some(var_461) = &input.encrypted {
        scope_460.boolean(*var_461);
    }
    #[allow(unused_mut)]
    let mut scope_462 = writer.prefix("KmsKeyId");
    if let Some(var_463) = &input.kms_key_id {
        scope_462.string(var_463);
    }
    #[allow(unused_mut)]
    let mut scope_464 = writer.prefix("PresignedUrl");
    if let Some(var_465) = &input.presigned_url {
        scope_464.string(var_465);
    }
    #[allow(unused_mut)]
    let mut scope_466 = writer.prefix("SourceRegion");
    if let Some(var_467) = &input.source_region {
        scope_466.string(var_467);
    }
    #[allow(unused_mut)]
    let mut scope_468 = writer.prefix("SourceSnapshotId");
    if let Some(var_469) = &input.source_snapshot_id {
        scope_468.string(var_469);
    }
    #[allow(unused_mut)]
    let mut scope_470 = writer.prefix("TagSpecification");
    if let Some(var_471) = &input.tag_specifications {
        let mut list_473 = scope_470.start_list(true, Some("item"));
        for item_472 in var_471 {
            #[allow(unused_mut)]
            let mut entry_474 = list_473.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_474, item_472,
            )?;
        }
        list_473.finish();
    }
    #[allow(unused_mut)]
    let mut scope_475 = writer.prefix("DryRun");
    if let Some(var_476) = &input.dry_run {
        scope_475.boolean(*var_476);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_capacity_reservation(
    input: &crate::input::CreateCapacityReservationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateCapacityReservation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_477 = writer.prefix("ClientToken");
    if let Some(var_478) = &input.client_token {
        scope_477.string(var_478);
    }
    #[allow(unused_mut)]
    let mut scope_479 = writer.prefix("InstanceType");
    if let Some(var_480) = &input.instance_type {
        scope_479.string(var_480);
    }
    #[allow(unused_mut)]
    let mut scope_481 = writer.prefix("InstancePlatform");
    if let Some(var_482) = &input.instance_platform {
        scope_481.string(var_482.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_483 = writer.prefix("AvailabilityZone");
    if let Some(var_484) = &input.availability_zone {
        scope_483.string(var_484);
    }
    #[allow(unused_mut)]
    let mut scope_485 = writer.prefix("AvailabilityZoneId");
    if let Some(var_486) = &input.availability_zone_id {
        scope_485.string(var_486);
    }
    #[allow(unused_mut)]
    let mut scope_487 = writer.prefix("Tenancy");
    if let Some(var_488) = &input.tenancy {
        scope_487.string(var_488.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_489 = writer.prefix("InstanceCount");
    if let Some(var_490) = &input.instance_count {
        scope_489.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_490).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_491 = writer.prefix("EbsOptimized");
    if let Some(var_492) = &input.ebs_optimized {
        scope_491.boolean(*var_492);
    }
    #[allow(unused_mut)]
    let mut scope_493 = writer.prefix("EphemeralStorage");
    if let Some(var_494) = &input.ephemeral_storage {
        scope_493.boolean(*var_494);
    }
    #[allow(unused_mut)]
    let mut scope_495 = writer.prefix("EndDate");
    if let Some(var_496) = &input.end_date {
        scope_495.date_time(var_496, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_497 = writer.prefix("EndDateType");
    if let Some(var_498) = &input.end_date_type {
        scope_497.string(var_498.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_499 = writer.prefix("InstanceMatchCriteria");
    if let Some(var_500) = &input.instance_match_criteria {
        scope_499.string(var_500.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_501 = writer.prefix("TagSpecifications");
    if let Some(var_502) = &input.tag_specifications {
        let mut list_504 = scope_501.start_list(true, Some("item"));
        for item_503 in var_502 {
            #[allow(unused_mut)]
            let mut entry_505 = list_504.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_505, item_503,
            )?;
        }
        list_504.finish();
    }
    #[allow(unused_mut)]
    let mut scope_506 = writer.prefix("DryRun");
    if let Some(var_507) = &input.dry_run {
        scope_506.boolean(*var_507);
    }
    #[allow(unused_mut)]
    let mut scope_508 = writer.prefix("OutpostArn");
    if let Some(var_509) = &input.outpost_arn {
        scope_508.string(var_509);
    }
    #[allow(unused_mut)]
    let mut scope_510 = writer.prefix("PlacementGroupArn");
    if let Some(var_511) = &input.placement_group_arn {
        scope_510.string(var_511);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_capacity_reservation_fleet(
    input: &crate::input::CreateCapacityReservationFleetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateCapacityReservationFleet",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_512 = writer.prefix("AllocationStrategy");
    if let Some(var_513) = &input.allocation_strategy {
        scope_512.string(var_513);
    }
    #[allow(unused_mut)]
    let mut scope_514 = writer.prefix("ClientToken");
    if let Some(var_515) = &input.client_token {
        scope_514.string(var_515);
    }
    #[allow(unused_mut)]
    let mut scope_516 = writer.prefix("InstanceTypeSpecification");
    if let Some(var_517) = &input.instance_type_specifications {
        let mut list_519 = scope_516.start_list(true, None);
        for item_518 in var_517 {
            #[allow(unused_mut)]
            let mut entry_520 = list_519.entry();
            crate::query_ser::serialize_structure_crate_model_reservation_fleet_instance_specification(entry_520, item_518)?;
        }
        list_519.finish();
    }
    #[allow(unused_mut)]
    let mut scope_521 = writer.prefix("Tenancy");
    if let Some(var_522) = &input.tenancy {
        scope_521.string(var_522.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_523 = writer.prefix("TotalTargetCapacity");
    if let Some(var_524) = &input.total_target_capacity {
        scope_523.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_524).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_525 = writer.prefix("EndDate");
    if let Some(var_526) = &input.end_date {
        scope_525.date_time(var_526, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_527 = writer.prefix("InstanceMatchCriteria");
    if let Some(var_528) = &input.instance_match_criteria {
        scope_527.string(var_528.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_529 = writer.prefix("TagSpecification");
    if let Some(var_530) = &input.tag_specifications {
        let mut list_532 = scope_529.start_list(true, Some("item"));
        for item_531 in var_530 {
            #[allow(unused_mut)]
            let mut entry_533 = list_532.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_533, item_531,
            )?;
        }
        list_532.finish();
    }
    #[allow(unused_mut)]
    let mut scope_534 = writer.prefix("DryRun");
    if let Some(var_535) = &input.dry_run {
        scope_534.boolean(*var_535);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_carrier_gateway(
    input: &crate::input::CreateCarrierGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateCarrierGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_536 = writer.prefix("VpcId");
    if let Some(var_537) = &input.vpc_id {
        scope_536.string(var_537);
    }
    #[allow(unused_mut)]
    let mut scope_538 = writer.prefix("TagSpecification");
    if let Some(var_539) = &input.tag_specifications {
        let mut list_541 = scope_538.start_list(true, Some("item"));
        for item_540 in var_539 {
            #[allow(unused_mut)]
            let mut entry_542 = list_541.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_542, item_540,
            )?;
        }
        list_541.finish();
    }
    #[allow(unused_mut)]
    let mut scope_543 = writer.prefix("DryRun");
    if let Some(var_544) = &input.dry_run {
        scope_543.boolean(*var_544);
    }
    #[allow(unused_mut)]
    let mut scope_545 = writer.prefix("ClientToken");
    if let Some(var_546) = &input.client_token {
        scope_545.string(var_546);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_client_vpn_endpoint(
    input: &crate::input::CreateClientVpnEndpointInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateClientVpnEndpoint", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_547 = writer.prefix("ClientCidrBlock");
    if let Some(var_548) = &input.client_cidr_block {
        scope_547.string(var_548);
    }
    #[allow(unused_mut)]
    let mut scope_549 = writer.prefix("ServerCertificateArn");
    if let Some(var_550) = &input.server_certificate_arn {
        scope_549.string(var_550);
    }
    #[allow(unused_mut)]
    let mut scope_551 = writer.prefix("Authentication");
    if let Some(var_552) = &input.authentication_options {
        let mut list_554 = scope_551.start_list(true, None);
        for item_553 in var_552 {
            #[allow(unused_mut)]
            let mut entry_555 = list_554.entry();
            crate::query_ser::serialize_structure_crate_model_client_vpn_authentication_request(
                entry_555, item_553,
            )?;
        }
        list_554.finish();
    }
    #[allow(unused_mut)]
    let mut scope_556 = writer.prefix("ConnectionLogOptions");
    if let Some(var_557) = &input.connection_log_options {
        crate::query_ser::serialize_structure_crate_model_connection_log_options(
            scope_556, var_557,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_558 = writer.prefix("DnsServers");
    if let Some(var_559) = &input.dns_servers {
        let mut list_561 = scope_558.start_list(true, Some("item"));
        for item_560 in var_559 {
            #[allow(unused_mut)]
            let mut entry_562 = list_561.entry();
            entry_562.string(item_560);
        }
        list_561.finish();
    }
    #[allow(unused_mut)]
    let mut scope_563 = writer.prefix("TransportProtocol");
    if let Some(var_564) = &input.transport_protocol {
        scope_563.string(var_564.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_565 = writer.prefix("VpnPort");
    if let Some(var_566) = &input.vpn_port {
        scope_565.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_566).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_567 = writer.prefix("Description");
    if let Some(var_568) = &input.description {
        scope_567.string(var_568);
    }
    #[allow(unused_mut)]
    let mut scope_569 = writer.prefix("SplitTunnel");
    if let Some(var_570) = &input.split_tunnel {
        scope_569.boolean(*var_570);
    }
    #[allow(unused_mut)]
    let mut scope_571 = writer.prefix("DryRun");
    if let Some(var_572) = &input.dry_run {
        scope_571.boolean(*var_572);
    }
    #[allow(unused_mut)]
    let mut scope_573 = writer.prefix("ClientToken");
    if let Some(var_574) = &input.client_token {
        scope_573.string(var_574);
    }
    #[allow(unused_mut)]
    let mut scope_575 = writer.prefix("TagSpecification");
    if let Some(var_576) = &input.tag_specifications {
        let mut list_578 = scope_575.start_list(true, Some("item"));
        for item_577 in var_576 {
            #[allow(unused_mut)]
            let mut entry_579 = list_578.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_579, item_577,
            )?;
        }
        list_578.finish();
    }
    #[allow(unused_mut)]
    let mut scope_580 = writer.prefix("SecurityGroupId");
    if let Some(var_581) = &input.security_group_ids {
        let mut list_583 = scope_580.start_list(true, Some("item"));
        for item_582 in var_581 {
            #[allow(unused_mut)]
            let mut entry_584 = list_583.entry();
            entry_584.string(item_582);
        }
        list_583.finish();
    }
    #[allow(unused_mut)]
    let mut scope_585 = writer.prefix("VpcId");
    if let Some(var_586) = &input.vpc_id {
        scope_585.string(var_586);
    }
    #[allow(unused_mut)]
    let mut scope_587 = writer.prefix("SelfServicePortal");
    if let Some(var_588) = &input.self_service_portal {
        scope_587.string(var_588.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_589 = writer.prefix("ClientConnectOptions");
    if let Some(var_590) = &input.client_connect_options {
        crate::query_ser::serialize_structure_crate_model_client_connect_options(
            scope_589, var_590,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_591 = writer.prefix("SessionTimeoutHours");
    if let Some(var_592) = &input.session_timeout_hours {
        scope_591.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_592).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_593 = writer.prefix("ClientLoginBannerOptions");
    if let Some(var_594) = &input.client_login_banner_options {
        crate::query_ser::serialize_structure_crate_model_client_login_banner_options(
            scope_593, var_594,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_client_vpn_route(
    input: &crate::input::CreateClientVpnRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateClientVpnRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_595 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_596) = &input.client_vpn_endpoint_id {
        scope_595.string(var_596);
    }
    #[allow(unused_mut)]
    let mut scope_597 = writer.prefix("DestinationCidrBlock");
    if let Some(var_598) = &input.destination_cidr_block {
        scope_597.string(var_598);
    }
    #[allow(unused_mut)]
    let mut scope_599 = writer.prefix("TargetVpcSubnetId");
    if let Some(var_600) = &input.target_vpc_subnet_id {
        scope_599.string(var_600);
    }
    #[allow(unused_mut)]
    let mut scope_601 = writer.prefix("Description");
    if let Some(var_602) = &input.description {
        scope_601.string(var_602);
    }
    #[allow(unused_mut)]
    let mut scope_603 = writer.prefix("ClientToken");
    if let Some(var_604) = &input.client_token {
        scope_603.string(var_604);
    }
    #[allow(unused_mut)]
    let mut scope_605 = writer.prefix("DryRun");
    if let Some(var_606) = &input.dry_run {
        scope_605.boolean(*var_606);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_customer_gateway(
    input: &crate::input::CreateCustomerGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateCustomerGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_607 = writer.prefix("BgpAsn");
    if let Some(var_608) = &input.bgp_asn {
        scope_607.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_608).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_609 = writer.prefix("PublicIp");
    if let Some(var_610) = &input.public_ip {
        scope_609.string(var_610);
    }
    #[allow(unused_mut)]
    let mut scope_611 = writer.prefix("CertificateArn");
    if let Some(var_612) = &input.certificate_arn {
        scope_611.string(var_612);
    }
    #[allow(unused_mut)]
    let mut scope_613 = writer.prefix("Type");
    if let Some(var_614) = &input.r#type {
        scope_613.string(var_614.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_615 = writer.prefix("TagSpecification");
    if let Some(var_616) = &input.tag_specifications {
        let mut list_618 = scope_615.start_list(true, Some("item"));
        for item_617 in var_616 {
            #[allow(unused_mut)]
            let mut entry_619 = list_618.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_619, item_617,
            )?;
        }
        list_618.finish();
    }
    #[allow(unused_mut)]
    let mut scope_620 = writer.prefix("DeviceName");
    if let Some(var_621) = &input.device_name {
        scope_620.string(var_621);
    }
    #[allow(unused_mut)]
    let mut scope_622 = writer.prefix("IpAddress");
    if let Some(var_623) = &input.ip_address {
        scope_622.string(var_623);
    }
    #[allow(unused_mut)]
    let mut scope_624 = writer.prefix("DryRun");
    if let Some(var_625) = &input.dry_run {
        scope_624.boolean(*var_625);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_default_subnet(
    input: &crate::input::CreateDefaultSubnetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateDefaultSubnet", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_626 = writer.prefix("AvailabilityZone");
    if let Some(var_627) = &input.availability_zone {
        scope_626.string(var_627);
    }
    #[allow(unused_mut)]
    let mut scope_628 = writer.prefix("DryRun");
    if let Some(var_629) = &input.dry_run {
        scope_628.boolean(*var_629);
    }
    #[allow(unused_mut)]
    let mut scope_630 = writer.prefix("Ipv6Native");
    if let Some(var_631) = &input.ipv6_native {
        scope_630.boolean(*var_631);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_default_vpc(
    input: &crate::input::CreateDefaultVpcInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateDefaultVpc", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_632 = writer.prefix("DryRun");
    if let Some(var_633) = &input.dry_run {
        scope_632.boolean(*var_633);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_dhcp_options(
    input: &crate::input::CreateDhcpOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateDhcpOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_634 = writer.prefix("DhcpConfiguration");
    if let Some(var_635) = &input.dhcp_configurations {
        let mut list_637 = scope_634.start_list(true, Some("item"));
        for item_636 in var_635 {
            #[allow(unused_mut)]
            let mut entry_638 = list_637.entry();
            crate::query_ser::serialize_structure_crate_model_new_dhcp_configuration(
                entry_638, item_636,
            )?;
        }
        list_637.finish();
    }
    #[allow(unused_mut)]
    let mut scope_639 = writer.prefix("TagSpecification");
    if let Some(var_640) = &input.tag_specifications {
        let mut list_642 = scope_639.start_list(true, Some("item"));
        for item_641 in var_640 {
            #[allow(unused_mut)]
            let mut entry_643 = list_642.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_643, item_641,
            )?;
        }
        list_642.finish();
    }
    #[allow(unused_mut)]
    let mut scope_644 = writer.prefix("DryRun");
    if let Some(var_645) = &input.dry_run {
        scope_644.boolean(*var_645);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_egress_only_internet_gateway(
    input: &crate::input::CreateEgressOnlyInternetGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateEgressOnlyInternetGateway",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_646 = writer.prefix("ClientToken");
    if let Some(var_647) = &input.client_token {
        scope_646.string(var_647);
    }
    #[allow(unused_mut)]
    let mut scope_648 = writer.prefix("DryRun");
    if let Some(var_649) = &input.dry_run {
        scope_648.boolean(*var_649);
    }
    #[allow(unused_mut)]
    let mut scope_650 = writer.prefix("VpcId");
    if let Some(var_651) = &input.vpc_id {
        scope_650.string(var_651);
    }
    #[allow(unused_mut)]
    let mut scope_652 = writer.prefix("TagSpecification");
    if let Some(var_653) = &input.tag_specifications {
        let mut list_655 = scope_652.start_list(true, Some("item"));
        for item_654 in var_653 {
            #[allow(unused_mut)]
            let mut entry_656 = list_655.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_656, item_654,
            )?;
        }
        list_655.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_fleet(
    input: &crate::input::CreateFleetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateFleet", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_657 = writer.prefix("DryRun");
    if let Some(var_658) = &input.dry_run {
        scope_657.boolean(*var_658);
    }
    #[allow(unused_mut)]
    let mut scope_659 = writer.prefix("ClientToken");
    if let Some(var_660) = &input.client_token {
        scope_659.string(var_660);
    }
    #[allow(unused_mut)]
    let mut scope_661 = writer.prefix("SpotOptions");
    if let Some(var_662) = &input.spot_options {
        crate::query_ser::serialize_structure_crate_model_spot_options_request(scope_661, var_662)?;
    }
    #[allow(unused_mut)]
    let mut scope_663 = writer.prefix("OnDemandOptions");
    if let Some(var_664) = &input.on_demand_options {
        crate::query_ser::serialize_structure_crate_model_on_demand_options_request(
            scope_663, var_664,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_665 = writer.prefix("ExcessCapacityTerminationPolicy");
    if let Some(var_666) = &input.excess_capacity_termination_policy {
        scope_665.string(var_666.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_667 = writer.prefix("LaunchTemplateConfigs");
    if let Some(var_668) = &input.launch_template_configs {
        let mut list_670 = scope_667.start_list(true, Some("item"));
        for item_669 in var_668 {
            #[allow(unused_mut)]
            let mut entry_671 = list_670.entry();
            crate::query_ser::serialize_structure_crate_model_fleet_launch_template_config_request(
                entry_671, item_669,
            )?;
        }
        list_670.finish();
    }
    #[allow(unused_mut)]
    let mut scope_672 = writer.prefix("TargetCapacitySpecification");
    if let Some(var_673) = &input.target_capacity_specification {
        crate::query_ser::serialize_structure_crate_model_target_capacity_specification_request(
            scope_672, var_673,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_674 = writer.prefix("TerminateInstancesWithExpiration");
    if let Some(var_675) = &input.terminate_instances_with_expiration {
        scope_674.boolean(*var_675);
    }
    #[allow(unused_mut)]
    let mut scope_676 = writer.prefix("Type");
    if let Some(var_677) = &input.r#type {
        scope_676.string(var_677.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_678 = writer.prefix("ValidFrom");
    if let Some(var_679) = &input.valid_from {
        scope_678.date_time(var_679, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_680 = writer.prefix("ValidUntil");
    if let Some(var_681) = &input.valid_until {
        scope_680.date_time(var_681, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_682 = writer.prefix("ReplaceUnhealthyInstances");
    if let Some(var_683) = &input.replace_unhealthy_instances {
        scope_682.boolean(*var_683);
    }
    #[allow(unused_mut)]
    let mut scope_684 = writer.prefix("TagSpecification");
    if let Some(var_685) = &input.tag_specifications {
        let mut list_687 = scope_684.start_list(true, Some("item"));
        for item_686 in var_685 {
            #[allow(unused_mut)]
            let mut entry_688 = list_687.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_688, item_686,
            )?;
        }
        list_687.finish();
    }
    #[allow(unused_mut)]
    let mut scope_689 = writer.prefix("Context");
    if let Some(var_690) = &input.context {
        scope_689.string(var_690);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_flow_logs(
    input: &crate::input::CreateFlowLogsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateFlowLogs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_691 = writer.prefix("DryRun");
    if let Some(var_692) = &input.dry_run {
        scope_691.boolean(*var_692);
    }
    #[allow(unused_mut)]
    let mut scope_693 = writer.prefix("ClientToken");
    if let Some(var_694) = &input.client_token {
        scope_693.string(var_694);
    }
    #[allow(unused_mut)]
    let mut scope_695 = writer.prefix("DeliverLogsPermissionArn");
    if let Some(var_696) = &input.deliver_logs_permission_arn {
        scope_695.string(var_696);
    }
    #[allow(unused_mut)]
    let mut scope_697 = writer.prefix("LogGroupName");
    if let Some(var_698) = &input.log_group_name {
        scope_697.string(var_698);
    }
    #[allow(unused_mut)]
    let mut scope_699 = writer.prefix("ResourceId");
    if let Some(var_700) = &input.resource_ids {
        let mut list_702 = scope_699.start_list(true, Some("item"));
        for item_701 in var_700 {
            #[allow(unused_mut)]
            let mut entry_703 = list_702.entry();
            entry_703.string(item_701);
        }
        list_702.finish();
    }
    #[allow(unused_mut)]
    let mut scope_704 = writer.prefix("ResourceType");
    if let Some(var_705) = &input.resource_type {
        scope_704.string(var_705.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_706 = writer.prefix("TrafficType");
    if let Some(var_707) = &input.traffic_type {
        scope_706.string(var_707.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_708 = writer.prefix("LogDestinationType");
    if let Some(var_709) = &input.log_destination_type {
        scope_708.string(var_709.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_710 = writer.prefix("LogDestination");
    if let Some(var_711) = &input.log_destination {
        scope_710.string(var_711);
    }
    #[allow(unused_mut)]
    let mut scope_712 = writer.prefix("LogFormat");
    if let Some(var_713) = &input.log_format {
        scope_712.string(var_713);
    }
    #[allow(unused_mut)]
    let mut scope_714 = writer.prefix("TagSpecification");
    if let Some(var_715) = &input.tag_specifications {
        let mut list_717 = scope_714.start_list(true, Some("item"));
        for item_716 in var_715 {
            #[allow(unused_mut)]
            let mut entry_718 = list_717.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_718, item_716,
            )?;
        }
        list_717.finish();
    }
    #[allow(unused_mut)]
    let mut scope_719 = writer.prefix("MaxAggregationInterval");
    if let Some(var_720) = &input.max_aggregation_interval {
        scope_719.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_720).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_721 = writer.prefix("DestinationOptions");
    if let Some(var_722) = &input.destination_options {
        crate::query_ser::serialize_structure_crate_model_destination_options_request(
            scope_721, var_722,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_fpga_image(
    input: &crate::input::CreateFpgaImageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateFpgaImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_723 = writer.prefix("DryRun");
    if let Some(var_724) = &input.dry_run {
        scope_723.boolean(*var_724);
    }
    #[allow(unused_mut)]
    let mut scope_725 = writer.prefix("InputStorageLocation");
    if let Some(var_726) = &input.input_storage_location {
        crate::query_ser::serialize_structure_crate_model_storage_location(scope_725, var_726)?;
    }
    #[allow(unused_mut)]
    let mut scope_727 = writer.prefix("LogsStorageLocation");
    if let Some(var_728) = &input.logs_storage_location {
        crate::query_ser::serialize_structure_crate_model_storage_location(scope_727, var_728)?;
    }
    #[allow(unused_mut)]
    let mut scope_729 = writer.prefix("Description");
    if let Some(var_730) = &input.description {
        scope_729.string(var_730);
    }
    #[allow(unused_mut)]
    let mut scope_731 = writer.prefix("Name");
    if let Some(var_732) = &input.name {
        scope_731.string(var_732);
    }
    #[allow(unused_mut)]
    let mut scope_733 = writer.prefix("ClientToken");
    if let Some(var_734) = &input.client_token {
        scope_733.string(var_734);
    }
    #[allow(unused_mut)]
    let mut scope_735 = writer.prefix("TagSpecification");
    if let Some(var_736) = &input.tag_specifications {
        let mut list_738 = scope_735.start_list(true, Some("item"));
        for item_737 in var_736 {
            #[allow(unused_mut)]
            let mut entry_739 = list_738.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_739, item_737,
            )?;
        }
        list_738.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_image(
    input: &crate::input::CreateImageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_740 = writer.prefix("BlockDeviceMapping");
    if let Some(var_741) = &input.block_device_mappings {
        let mut list_743 = scope_740.start_list(true, Some("BlockDeviceMapping"));
        for item_742 in var_741 {
            #[allow(unused_mut)]
            let mut entry_744 = list_743.entry();
            crate::query_ser::serialize_structure_crate_model_block_device_mapping(
                entry_744, item_742,
            )?;
        }
        list_743.finish();
    }
    #[allow(unused_mut)]
    let mut scope_745 = writer.prefix("Description");
    if let Some(var_746) = &input.description {
        scope_745.string(var_746);
    }
    #[allow(unused_mut)]
    let mut scope_747 = writer.prefix("DryRun");
    if let Some(var_748) = &input.dry_run {
        scope_747.boolean(*var_748);
    }
    #[allow(unused_mut)]
    let mut scope_749 = writer.prefix("InstanceId");
    if let Some(var_750) = &input.instance_id {
        scope_749.string(var_750);
    }
    #[allow(unused_mut)]
    let mut scope_751 = writer.prefix("Name");
    if let Some(var_752) = &input.name {
        scope_751.string(var_752);
    }
    #[allow(unused_mut)]
    let mut scope_753 = writer.prefix("NoReboot");
    if let Some(var_754) = &input.no_reboot {
        scope_753.boolean(*var_754);
    }
    #[allow(unused_mut)]
    let mut scope_755 = writer.prefix("TagSpecification");
    if let Some(var_756) = &input.tag_specifications {
        let mut list_758 = scope_755.start_list(true, Some("item"));
        for item_757 in var_756 {
            #[allow(unused_mut)]
            let mut entry_759 = list_758.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_759, item_757,
            )?;
        }
        list_758.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_instance_event_window(
    input: &crate::input::CreateInstanceEventWindowInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateInstanceEventWindow", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_760 = writer.prefix("DryRun");
    if let Some(var_761) = &input.dry_run {
        scope_760.boolean(*var_761);
    }
    #[allow(unused_mut)]
    let mut scope_762 = writer.prefix("Name");
    if let Some(var_763) = &input.name {
        scope_762.string(var_763);
    }
    #[allow(unused_mut)]
    let mut scope_764 = writer.prefix("TimeRange");
    if let Some(var_765) = &input.time_ranges {
        let mut list_767 = scope_764.start_list(true, None);
        for item_766 in var_765 {
            #[allow(unused_mut)]
            let mut entry_768 = list_767.entry();
            crate::query_ser::serialize_structure_crate_model_instance_event_window_time_range_request(entry_768, item_766)?;
        }
        list_767.finish();
    }
    #[allow(unused_mut)]
    let mut scope_769 = writer.prefix("CronExpression");
    if let Some(var_770) = &input.cron_expression {
        scope_769.string(var_770);
    }
    #[allow(unused_mut)]
    let mut scope_771 = writer.prefix("TagSpecification");
    if let Some(var_772) = &input.tag_specifications {
        let mut list_774 = scope_771.start_list(true, Some("item"));
        for item_773 in var_772 {
            #[allow(unused_mut)]
            let mut entry_775 = list_774.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_775, item_773,
            )?;
        }
        list_774.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_instance_export_task(
    input: &crate::input::CreateInstanceExportTaskInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateInstanceExportTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_776 = writer.prefix("Description");
    if let Some(var_777) = &input.description {
        scope_776.string(var_777);
    }
    #[allow(unused_mut)]
    let mut scope_778 = writer.prefix("ExportToS3");
    if let Some(var_779) = &input.export_to_s3_task {
        crate::query_ser::serialize_structure_crate_model_export_to_s3_task_specification(
            scope_778, var_779,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_780 = writer.prefix("InstanceId");
    if let Some(var_781) = &input.instance_id {
        scope_780.string(var_781);
    }
    #[allow(unused_mut)]
    let mut scope_782 = writer.prefix("TargetEnvironment");
    if let Some(var_783) = &input.target_environment {
        scope_782.string(var_783.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_784 = writer.prefix("TagSpecification");
    if let Some(var_785) = &input.tag_specifications {
        let mut list_787 = scope_784.start_list(true, Some("item"));
        for item_786 in var_785 {
            #[allow(unused_mut)]
            let mut entry_788 = list_787.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_788, item_786,
            )?;
        }
        list_787.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_internet_gateway(
    input: &crate::input::CreateInternetGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateInternetGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_789 = writer.prefix("TagSpecification");
    if let Some(var_790) = &input.tag_specifications {
        let mut list_792 = scope_789.start_list(true, Some("item"));
        for item_791 in var_790 {
            #[allow(unused_mut)]
            let mut entry_793 = list_792.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_793, item_791,
            )?;
        }
        list_792.finish();
    }
    #[allow(unused_mut)]
    let mut scope_794 = writer.prefix("DryRun");
    if let Some(var_795) = &input.dry_run {
        scope_794.boolean(*var_795);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_ipam(
    input: &crate::input::CreateIpamInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateIpam", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_796 = writer.prefix("DryRun");
    if let Some(var_797) = &input.dry_run {
        scope_796.boolean(*var_797);
    }
    #[allow(unused_mut)]
    let mut scope_798 = writer.prefix("Description");
    if let Some(var_799) = &input.description {
        scope_798.string(var_799);
    }
    #[allow(unused_mut)]
    let mut scope_800 = writer.prefix("OperatingRegion");
    if let Some(var_801) = &input.operating_regions {
        let mut list_803 = scope_800.start_list(true, None);
        for item_802 in var_801 {
            #[allow(unused_mut)]
            let mut entry_804 = list_803.entry();
            crate::query_ser::serialize_structure_crate_model_add_ipam_operating_region(
                entry_804, item_802,
            )?;
        }
        list_803.finish();
    }
    #[allow(unused_mut)]
    let mut scope_805 = writer.prefix("TagSpecification");
    if let Some(var_806) = &input.tag_specifications {
        let mut list_808 = scope_805.start_list(true, Some("item"));
        for item_807 in var_806 {
            #[allow(unused_mut)]
            let mut entry_809 = list_808.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_809, item_807,
            )?;
        }
        list_808.finish();
    }
    #[allow(unused_mut)]
    let mut scope_810 = writer.prefix("ClientToken");
    if let Some(var_811) = &input.client_token {
        scope_810.string(var_811);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_ipam_pool(
    input: &crate::input::CreateIpamPoolInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateIpamPool", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_812 = writer.prefix("DryRun");
    if let Some(var_813) = &input.dry_run {
        scope_812.boolean(*var_813);
    }
    #[allow(unused_mut)]
    let mut scope_814 = writer.prefix("IpamScopeId");
    if let Some(var_815) = &input.ipam_scope_id {
        scope_814.string(var_815);
    }
    #[allow(unused_mut)]
    let mut scope_816 = writer.prefix("Locale");
    if let Some(var_817) = &input.locale {
        scope_816.string(var_817);
    }
    #[allow(unused_mut)]
    let mut scope_818 = writer.prefix("SourceIpamPoolId");
    if let Some(var_819) = &input.source_ipam_pool_id {
        scope_818.string(var_819);
    }
    #[allow(unused_mut)]
    let mut scope_820 = writer.prefix("Description");
    if let Some(var_821) = &input.description {
        scope_820.string(var_821);
    }
    #[allow(unused_mut)]
    let mut scope_822 = writer.prefix("AddressFamily");
    if let Some(var_823) = &input.address_family {
        scope_822.string(var_823.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_824 = writer.prefix("AutoImport");
    if let Some(var_825) = &input.auto_import {
        scope_824.boolean(*var_825);
    }
    #[allow(unused_mut)]
    let mut scope_826 = writer.prefix("PubliclyAdvertisable");
    if let Some(var_827) = &input.publicly_advertisable {
        scope_826.boolean(*var_827);
    }
    #[allow(unused_mut)]
    let mut scope_828 = writer.prefix("AllocationMinNetmaskLength");
    if let Some(var_829) = &input.allocation_min_netmask_length {
        scope_828.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_829).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_830 = writer.prefix("AllocationMaxNetmaskLength");
    if let Some(var_831) = &input.allocation_max_netmask_length {
        scope_830.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_831).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_832 = writer.prefix("AllocationDefaultNetmaskLength");
    if let Some(var_833) = &input.allocation_default_netmask_length {
        scope_832.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_833).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_834 = writer.prefix("AllocationResourceTag");
    if let Some(var_835) = &input.allocation_resource_tags {
        let mut list_837 = scope_834.start_list(true, Some("item"));
        for item_836 in var_835 {
            #[allow(unused_mut)]
            let mut entry_838 = list_837.entry();
            crate::query_ser::serialize_structure_crate_model_request_ipam_resource_tag(
                entry_838, item_836,
            )?;
        }
        list_837.finish();
    }
    #[allow(unused_mut)]
    let mut scope_839 = writer.prefix("TagSpecification");
    if let Some(var_840) = &input.tag_specifications {
        let mut list_842 = scope_839.start_list(true, Some("item"));
        for item_841 in var_840 {
            #[allow(unused_mut)]
            let mut entry_843 = list_842.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_843, item_841,
            )?;
        }
        list_842.finish();
    }
    #[allow(unused_mut)]
    let mut scope_844 = writer.prefix("ClientToken");
    if let Some(var_845) = &input.client_token {
        scope_844.string(var_845);
    }
    #[allow(unused_mut)]
    let mut scope_846 = writer.prefix("AwsService");
    if let Some(var_847) = &input.aws_service {
        scope_846.string(var_847.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_ipam_scope(
    input: &crate::input::CreateIpamScopeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateIpamScope", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_848 = writer.prefix("DryRun");
    if let Some(var_849) = &input.dry_run {
        scope_848.boolean(*var_849);
    }
    #[allow(unused_mut)]
    let mut scope_850 = writer.prefix("IpamId");
    if let Some(var_851) = &input.ipam_id {
        scope_850.string(var_851);
    }
    #[allow(unused_mut)]
    let mut scope_852 = writer.prefix("Description");
    if let Some(var_853) = &input.description {
        scope_852.string(var_853);
    }
    #[allow(unused_mut)]
    let mut scope_854 = writer.prefix("TagSpecification");
    if let Some(var_855) = &input.tag_specifications {
        let mut list_857 = scope_854.start_list(true, Some("item"));
        for item_856 in var_855 {
            #[allow(unused_mut)]
            let mut entry_858 = list_857.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_858, item_856,
            )?;
        }
        list_857.finish();
    }
    #[allow(unused_mut)]
    let mut scope_859 = writer.prefix("ClientToken");
    if let Some(var_860) = &input.client_token {
        scope_859.string(var_860);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_key_pair(
    input: &crate::input::CreateKeyPairInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateKeyPair", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_861 = writer.prefix("KeyName");
    if let Some(var_862) = &input.key_name {
        scope_861.string(var_862);
    }
    #[allow(unused_mut)]
    let mut scope_863 = writer.prefix("DryRun");
    if let Some(var_864) = &input.dry_run {
        scope_863.boolean(*var_864);
    }
    #[allow(unused_mut)]
    let mut scope_865 = writer.prefix("KeyType");
    if let Some(var_866) = &input.key_type {
        scope_865.string(var_866.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_867 = writer.prefix("TagSpecification");
    if let Some(var_868) = &input.tag_specifications {
        let mut list_870 = scope_867.start_list(true, Some("item"));
        for item_869 in var_868 {
            #[allow(unused_mut)]
            let mut entry_871 = list_870.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_871, item_869,
            )?;
        }
        list_870.finish();
    }
    #[allow(unused_mut)]
    let mut scope_872 = writer.prefix("KeyFormat");
    if let Some(var_873) = &input.key_format {
        scope_872.string(var_873.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_launch_template(
    input: &crate::input::CreateLaunchTemplateInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateLaunchTemplate", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_874 = writer.prefix("DryRun");
    if let Some(var_875) = &input.dry_run {
        scope_874.boolean(*var_875);
    }
    #[allow(unused_mut)]
    let mut scope_876 = writer.prefix("ClientToken");
    if let Some(var_877) = &input.client_token {
        scope_876.string(var_877);
    }
    #[allow(unused_mut)]
    let mut scope_878 = writer.prefix("LaunchTemplateName");
    if let Some(var_879) = &input.launch_template_name {
        scope_878.string(var_879);
    }
    #[allow(unused_mut)]
    let mut scope_880 = writer.prefix("VersionDescription");
    if let Some(var_881) = &input.version_description {
        scope_880.string(var_881);
    }
    #[allow(unused_mut)]
    let mut scope_882 = writer.prefix("LaunchTemplateData");
    if let Some(var_883) = &input.launch_template_data {
        crate::query_ser::serialize_structure_crate_model_request_launch_template_data(
            scope_882, var_883,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_884 = writer.prefix("TagSpecification");
    if let Some(var_885) = &input.tag_specifications {
        let mut list_887 = scope_884.start_list(true, Some("item"));
        for item_886 in var_885 {
            #[allow(unused_mut)]
            let mut entry_888 = list_887.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_888, item_886,
            )?;
        }
        list_887.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_launch_template_version(
    input: &crate::input::CreateLaunchTemplateVersionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateLaunchTemplateVersion", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_889 = writer.prefix("DryRun");
    if let Some(var_890) = &input.dry_run {
        scope_889.boolean(*var_890);
    }
    #[allow(unused_mut)]
    let mut scope_891 = writer.prefix("ClientToken");
    if let Some(var_892) = &input.client_token {
        scope_891.string(var_892);
    }
    #[allow(unused_mut)]
    let mut scope_893 = writer.prefix("LaunchTemplateId");
    if let Some(var_894) = &input.launch_template_id {
        scope_893.string(var_894);
    }
    #[allow(unused_mut)]
    let mut scope_895 = writer.prefix("LaunchTemplateName");
    if let Some(var_896) = &input.launch_template_name {
        scope_895.string(var_896);
    }
    #[allow(unused_mut)]
    let mut scope_897 = writer.prefix("SourceVersion");
    if let Some(var_898) = &input.source_version {
        scope_897.string(var_898);
    }
    #[allow(unused_mut)]
    let mut scope_899 = writer.prefix("VersionDescription");
    if let Some(var_900) = &input.version_description {
        scope_899.string(var_900);
    }
    #[allow(unused_mut)]
    let mut scope_901 = writer.prefix("LaunchTemplateData");
    if let Some(var_902) = &input.launch_template_data {
        crate::query_ser::serialize_structure_crate_model_request_launch_template_data(
            scope_901, var_902,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_local_gateway_route(
    input: &crate::input::CreateLocalGatewayRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateLocalGatewayRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_903 = writer.prefix("DestinationCidrBlock");
    if let Some(var_904) = &input.destination_cidr_block {
        scope_903.string(var_904);
    }
    #[allow(unused_mut)]
    let mut scope_905 = writer.prefix("LocalGatewayRouteTableId");
    if let Some(var_906) = &input.local_gateway_route_table_id {
        scope_905.string(var_906);
    }
    #[allow(unused_mut)]
    let mut scope_907 = writer.prefix("LocalGatewayVirtualInterfaceGroupId");
    if let Some(var_908) = &input.local_gateway_virtual_interface_group_id {
        scope_907.string(var_908);
    }
    #[allow(unused_mut)]
    let mut scope_909 = writer.prefix("DryRun");
    if let Some(var_910) = &input.dry_run {
        scope_909.boolean(*var_910);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_local_gateway_route_table_vpc_association(
    input: &crate::input::CreateLocalGatewayRouteTableVpcAssociationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateLocalGatewayRouteTableVpcAssociation",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_911 = writer.prefix("LocalGatewayRouteTableId");
    if let Some(var_912) = &input.local_gateway_route_table_id {
        scope_911.string(var_912);
    }
    #[allow(unused_mut)]
    let mut scope_913 = writer.prefix("VpcId");
    if let Some(var_914) = &input.vpc_id {
        scope_913.string(var_914);
    }
    #[allow(unused_mut)]
    let mut scope_915 = writer.prefix("TagSpecification");
    if let Some(var_916) = &input.tag_specifications {
        let mut list_918 = scope_915.start_list(true, Some("item"));
        for item_917 in var_916 {
            #[allow(unused_mut)]
            let mut entry_919 = list_918.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_919, item_917,
            )?;
        }
        list_918.finish();
    }
    #[allow(unused_mut)]
    let mut scope_920 = writer.prefix("DryRun");
    if let Some(var_921) = &input.dry_run {
        scope_920.boolean(*var_921);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_managed_prefix_list(
    input: &crate::input::CreateManagedPrefixListInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateManagedPrefixList", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_922 = writer.prefix("DryRun");
    if let Some(var_923) = &input.dry_run {
        scope_922.boolean(*var_923);
    }
    #[allow(unused_mut)]
    let mut scope_924 = writer.prefix("PrefixListName");
    if let Some(var_925) = &input.prefix_list_name {
        scope_924.string(var_925);
    }
    #[allow(unused_mut)]
    let mut scope_926 = writer.prefix("Entry");
    if let Some(var_927) = &input.entries {
        let mut list_929 = scope_926.start_list(true, None);
        for item_928 in var_927 {
            #[allow(unused_mut)]
            let mut entry_930 = list_929.entry();
            crate::query_ser::serialize_structure_crate_model_add_prefix_list_entry(
                entry_930, item_928,
            )?;
        }
        list_929.finish();
    }
    #[allow(unused_mut)]
    let mut scope_931 = writer.prefix("MaxEntries");
    if let Some(var_932) = &input.max_entries {
        scope_931.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_932).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_933 = writer.prefix("TagSpecification");
    if let Some(var_934) = &input.tag_specifications {
        let mut list_936 = scope_933.start_list(true, Some("item"));
        for item_935 in var_934 {
            #[allow(unused_mut)]
            let mut entry_937 = list_936.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_937, item_935,
            )?;
        }
        list_936.finish();
    }
    #[allow(unused_mut)]
    let mut scope_938 = writer.prefix("AddressFamily");
    if let Some(var_939) = &input.address_family {
        scope_938.string(var_939);
    }
    #[allow(unused_mut)]
    let mut scope_940 = writer.prefix("ClientToken");
    if let Some(var_941) = &input.client_token {
        scope_940.string(var_941);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_nat_gateway(
    input: &crate::input::CreateNatGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateNatGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_942 = writer.prefix("AllocationId");
    if let Some(var_943) = &input.allocation_id {
        scope_942.string(var_943);
    }
    #[allow(unused_mut)]
    let mut scope_944 = writer.prefix("ClientToken");
    if let Some(var_945) = &input.client_token {
        scope_944.string(var_945);
    }
    #[allow(unused_mut)]
    let mut scope_946 = writer.prefix("DryRun");
    if let Some(var_947) = &input.dry_run {
        scope_946.boolean(*var_947);
    }
    #[allow(unused_mut)]
    let mut scope_948 = writer.prefix("SubnetId");
    if let Some(var_949) = &input.subnet_id {
        scope_948.string(var_949);
    }
    #[allow(unused_mut)]
    let mut scope_950 = writer.prefix("TagSpecification");
    if let Some(var_951) = &input.tag_specifications {
        let mut list_953 = scope_950.start_list(true, Some("item"));
        for item_952 in var_951 {
            #[allow(unused_mut)]
            let mut entry_954 = list_953.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_954, item_952,
            )?;
        }
        list_953.finish();
    }
    #[allow(unused_mut)]
    let mut scope_955 = writer.prefix("ConnectivityType");
    if let Some(var_956) = &input.connectivity_type {
        scope_955.string(var_956.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_network_acl(
    input: &crate::input::CreateNetworkAclInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateNetworkAcl", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_957 = writer.prefix("DryRun");
    if let Some(var_958) = &input.dry_run {
        scope_957.boolean(*var_958);
    }
    #[allow(unused_mut)]
    let mut scope_959 = writer.prefix("VpcId");
    if let Some(var_960) = &input.vpc_id {
        scope_959.string(var_960);
    }
    #[allow(unused_mut)]
    let mut scope_961 = writer.prefix("TagSpecification");
    if let Some(var_962) = &input.tag_specifications {
        let mut list_964 = scope_961.start_list(true, Some("item"));
        for item_963 in var_962 {
            #[allow(unused_mut)]
            let mut entry_965 = list_964.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_965, item_963,
            )?;
        }
        list_964.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_network_acl_entry(
    input: &crate::input::CreateNetworkAclEntryInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateNetworkAclEntry", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_966 = writer.prefix("CidrBlock");
    if let Some(var_967) = &input.cidr_block {
        scope_966.string(var_967);
    }
    #[allow(unused_mut)]
    let mut scope_968 = writer.prefix("DryRun");
    if let Some(var_969) = &input.dry_run {
        scope_968.boolean(*var_969);
    }
    #[allow(unused_mut)]
    let mut scope_970 = writer.prefix("Egress");
    if let Some(var_971) = &input.egress {
        scope_970.boolean(*var_971);
    }
    #[allow(unused_mut)]
    let mut scope_972 = writer.prefix("Icmp");
    if let Some(var_973) = &input.icmp_type_code {
        crate::query_ser::serialize_structure_crate_model_icmp_type_code(scope_972, var_973)?;
    }
    #[allow(unused_mut)]
    let mut scope_974 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_975) = &input.ipv6_cidr_block {
        scope_974.string(var_975);
    }
    #[allow(unused_mut)]
    let mut scope_976 = writer.prefix("NetworkAclId");
    if let Some(var_977) = &input.network_acl_id {
        scope_976.string(var_977);
    }
    #[allow(unused_mut)]
    let mut scope_978 = writer.prefix("PortRange");
    if let Some(var_979) = &input.port_range {
        crate::query_ser::serialize_structure_crate_model_port_range(scope_978, var_979)?;
    }
    #[allow(unused_mut)]
    let mut scope_980 = writer.prefix("Protocol");
    if let Some(var_981) = &input.protocol {
        scope_980.string(var_981);
    }
    #[allow(unused_mut)]
    let mut scope_982 = writer.prefix("RuleAction");
    if let Some(var_983) = &input.rule_action {
        scope_982.string(var_983.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_984 = writer.prefix("RuleNumber");
    if let Some(var_985) = &input.rule_number {
        scope_984.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_985).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_network_insights_access_scope(
    input: &crate::input::CreateNetworkInsightsAccessScopeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateNetworkInsightsAccessScope",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_986 = writer.prefix("MatchPath");
    if let Some(var_987) = &input.match_paths {
        let mut list_989 = scope_986.start_list(true, Some("item"));
        for item_988 in var_987 {
            #[allow(unused_mut)]
            let mut entry_990 = list_989.entry();
            crate::query_ser::serialize_structure_crate_model_access_scope_path_request(
                entry_990, item_988,
            )?;
        }
        list_989.finish();
    }
    #[allow(unused_mut)]
    let mut scope_991 = writer.prefix("ExcludePath");
    if let Some(var_992) = &input.exclude_paths {
        let mut list_994 = scope_991.start_list(true, Some("item"));
        for item_993 in var_992 {
            #[allow(unused_mut)]
            let mut entry_995 = list_994.entry();
            crate::query_ser::serialize_structure_crate_model_access_scope_path_request(
                entry_995, item_993,
            )?;
        }
        list_994.finish();
    }
    #[allow(unused_mut)]
    let mut scope_996 = writer.prefix("ClientToken");
    if let Some(var_997) = &input.client_token {
        scope_996.string(var_997);
    }
    #[allow(unused_mut)]
    let mut scope_998 = writer.prefix("TagSpecification");
    if let Some(var_999) = &input.tag_specifications {
        let mut list_1001 = scope_998.start_list(true, Some("item"));
        for item_1000 in var_999 {
            #[allow(unused_mut)]
            let mut entry_1002 = list_1001.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1002, item_1000,
            )?;
        }
        list_1001.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1003 = writer.prefix("DryRun");
    if let Some(var_1004) = &input.dry_run {
        scope_1003.boolean(*var_1004);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_network_insights_path(
    input: &crate::input::CreateNetworkInsightsPathInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateNetworkInsightsPath", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1005 = writer.prefix("SourceIp");
    if let Some(var_1006) = &input.source_ip {
        scope_1005.string(var_1006);
    }
    #[allow(unused_mut)]
    let mut scope_1007 = writer.prefix("DestinationIp");
    if let Some(var_1008) = &input.destination_ip {
        scope_1007.string(var_1008);
    }
    #[allow(unused_mut)]
    let mut scope_1009 = writer.prefix("Source");
    if let Some(var_1010) = &input.source {
        scope_1009.string(var_1010);
    }
    #[allow(unused_mut)]
    let mut scope_1011 = writer.prefix("Destination");
    if let Some(var_1012) = &input.destination {
        scope_1011.string(var_1012);
    }
    #[allow(unused_mut)]
    let mut scope_1013 = writer.prefix("Protocol");
    if let Some(var_1014) = &input.protocol {
        scope_1013.string(var_1014.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1015 = writer.prefix("DestinationPort");
    if let Some(var_1016) = &input.destination_port {
        scope_1015.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1016).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1017 = writer.prefix("TagSpecification");
    if let Some(var_1018) = &input.tag_specifications {
        let mut list_1020 = scope_1017.start_list(true, Some("item"));
        for item_1019 in var_1018 {
            #[allow(unused_mut)]
            let mut entry_1021 = list_1020.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1021, item_1019,
            )?;
        }
        list_1020.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1022 = writer.prefix("DryRun");
    if let Some(var_1023) = &input.dry_run {
        scope_1022.boolean(*var_1023);
    }
    #[allow(unused_mut)]
    let mut scope_1024 = writer.prefix("ClientToken");
    if let Some(var_1025) = &input.client_token {
        scope_1024.string(var_1025);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_network_interface(
    input: &crate::input::CreateNetworkInterfaceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateNetworkInterface", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1026 = writer.prefix("Description");
    if let Some(var_1027) = &input.description {
        scope_1026.string(var_1027);
    }
    #[allow(unused_mut)]
    let mut scope_1028 = writer.prefix("DryRun");
    if let Some(var_1029) = &input.dry_run {
        scope_1028.boolean(*var_1029);
    }
    #[allow(unused_mut)]
    let mut scope_1030 = writer.prefix("SecurityGroupId");
    if let Some(var_1031) = &input.groups {
        let mut list_1033 = scope_1030.start_list(true, Some("SecurityGroupId"));
        for item_1032 in var_1031 {
            #[allow(unused_mut)]
            let mut entry_1034 = list_1033.entry();
            entry_1034.string(item_1032);
        }
        list_1033.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1035 = writer.prefix("Ipv6AddressCount");
    if let Some(var_1036) = &input.ipv6_address_count {
        scope_1035.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1036).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1037 = writer.prefix("Ipv6Addresses");
    if let Some(var_1038) = &input.ipv6_addresses {
        let mut list_1040 = scope_1037.start_list(true, Some("item"));
        for item_1039 in var_1038 {
            #[allow(unused_mut)]
            let mut entry_1041 = list_1040.entry();
            crate::query_ser::serialize_structure_crate_model_instance_ipv6_address(
                entry_1041, item_1039,
            )?;
        }
        list_1040.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1042 = writer.prefix("PrivateIpAddress");
    if let Some(var_1043) = &input.private_ip_address {
        scope_1042.string(var_1043);
    }
    #[allow(unused_mut)]
    let mut scope_1044 = writer.prefix("PrivateIpAddresses");
    if let Some(var_1045) = &input.private_ip_addresses {
        let mut list_1047 = scope_1044.start_list(true, Some("item"));
        for item_1046 in var_1045 {
            #[allow(unused_mut)]
            let mut entry_1048 = list_1047.entry();
            crate::query_ser::serialize_structure_crate_model_private_ip_address_specification(
                entry_1048, item_1046,
            )?;
        }
        list_1047.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1049 = writer.prefix("SecondaryPrivateIpAddressCount");
    if let Some(var_1050) = &input.secondary_private_ip_address_count {
        scope_1049.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1050).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1051 = writer.prefix("Ipv4Prefix");
    if let Some(var_1052) = &input.ipv4_prefixes {
        let mut list_1054 = scope_1051.start_list(true, Some("item"));
        for item_1053 in var_1052 {
            #[allow(unused_mut)]
            let mut entry_1055 = list_1054.entry();
            crate::query_ser::serialize_structure_crate_model_ipv4_prefix_specification_request(
                entry_1055, item_1053,
            )?;
        }
        list_1054.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1056 = writer.prefix("Ipv4PrefixCount");
    if let Some(var_1057) = &input.ipv4_prefix_count {
        scope_1056.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1057).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1058 = writer.prefix("Ipv6Prefix");
    if let Some(var_1059) = &input.ipv6_prefixes {
        let mut list_1061 = scope_1058.start_list(true, Some("item"));
        for item_1060 in var_1059 {
            #[allow(unused_mut)]
            let mut entry_1062 = list_1061.entry();
            crate::query_ser::serialize_structure_crate_model_ipv6_prefix_specification_request(
                entry_1062, item_1060,
            )?;
        }
        list_1061.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1063 = writer.prefix("Ipv6PrefixCount");
    if let Some(var_1064) = &input.ipv6_prefix_count {
        scope_1063.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1064).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1065 = writer.prefix("InterfaceType");
    if let Some(var_1066) = &input.interface_type {
        scope_1065.string(var_1066.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1067 = writer.prefix("SubnetId");
    if let Some(var_1068) = &input.subnet_id {
        scope_1067.string(var_1068);
    }
    #[allow(unused_mut)]
    let mut scope_1069 = writer.prefix("TagSpecification");
    if let Some(var_1070) = &input.tag_specifications {
        let mut list_1072 = scope_1069.start_list(true, Some("item"));
        for item_1071 in var_1070 {
            #[allow(unused_mut)]
            let mut entry_1073 = list_1072.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1073, item_1071,
            )?;
        }
        list_1072.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1074 = writer.prefix("ClientToken");
    if let Some(var_1075) = &input.client_token {
        scope_1074.string(var_1075);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_network_interface_permission(
    input: &crate::input::CreateNetworkInterfacePermissionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateNetworkInterfacePermission",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1076 = writer.prefix("NetworkInterfaceId");
    if let Some(var_1077) = &input.network_interface_id {
        scope_1076.string(var_1077);
    }
    #[allow(unused_mut)]
    let mut scope_1078 = writer.prefix("AwsAccountId");
    if let Some(var_1079) = &input.aws_account_id {
        scope_1078.string(var_1079);
    }
    #[allow(unused_mut)]
    let mut scope_1080 = writer.prefix("AwsService");
    if let Some(var_1081) = &input.aws_service {
        scope_1080.string(var_1081);
    }
    #[allow(unused_mut)]
    let mut scope_1082 = writer.prefix("Permission");
    if let Some(var_1083) = &input.permission {
        scope_1082.string(var_1083.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1084 = writer.prefix("DryRun");
    if let Some(var_1085) = &input.dry_run {
        scope_1084.boolean(*var_1085);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_placement_group(
    input: &crate::input::CreatePlacementGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreatePlacementGroup", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1086 = writer.prefix("DryRun");
    if let Some(var_1087) = &input.dry_run {
        scope_1086.boolean(*var_1087);
    }
    #[allow(unused_mut)]
    let mut scope_1088 = writer.prefix("GroupName");
    if let Some(var_1089) = &input.group_name {
        scope_1088.string(var_1089);
    }
    #[allow(unused_mut)]
    let mut scope_1090 = writer.prefix("Strategy");
    if let Some(var_1091) = &input.strategy {
        scope_1090.string(var_1091.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1092 = writer.prefix("PartitionCount");
    if let Some(var_1093) = &input.partition_count {
        scope_1092.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1093).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1094 = writer.prefix("TagSpecification");
    if let Some(var_1095) = &input.tag_specifications {
        let mut list_1097 = scope_1094.start_list(true, Some("item"));
        for item_1096 in var_1095 {
            #[allow(unused_mut)]
            let mut entry_1098 = list_1097.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1098, item_1096,
            )?;
        }
        list_1097.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_public_ipv4_pool(
    input: &crate::input::CreatePublicIpv4PoolInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreatePublicIpv4Pool", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1099 = writer.prefix("DryRun");
    if let Some(var_1100) = &input.dry_run {
        scope_1099.boolean(*var_1100);
    }
    #[allow(unused_mut)]
    let mut scope_1101 = writer.prefix("TagSpecification");
    if let Some(var_1102) = &input.tag_specifications {
        let mut list_1104 = scope_1101.start_list(true, Some("item"));
        for item_1103 in var_1102 {
            #[allow(unused_mut)]
            let mut entry_1105 = list_1104.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1105, item_1103,
            )?;
        }
        list_1104.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_replace_root_volume_task(
    input: &crate::input::CreateReplaceRootVolumeTaskInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateReplaceRootVolumeTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1106 = writer.prefix("InstanceId");
    if let Some(var_1107) = &input.instance_id {
        scope_1106.string(var_1107);
    }
    #[allow(unused_mut)]
    let mut scope_1108 = writer.prefix("SnapshotId");
    if let Some(var_1109) = &input.snapshot_id {
        scope_1108.string(var_1109);
    }
    #[allow(unused_mut)]
    let mut scope_1110 = writer.prefix("ClientToken");
    if let Some(var_1111) = &input.client_token {
        scope_1110.string(var_1111);
    }
    #[allow(unused_mut)]
    let mut scope_1112 = writer.prefix("DryRun");
    if let Some(var_1113) = &input.dry_run {
        scope_1112.boolean(*var_1113);
    }
    #[allow(unused_mut)]
    let mut scope_1114 = writer.prefix("TagSpecification");
    if let Some(var_1115) = &input.tag_specifications {
        let mut list_1117 = scope_1114.start_list(true, Some("item"));
        for item_1116 in var_1115 {
            #[allow(unused_mut)]
            let mut entry_1118 = list_1117.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1118, item_1116,
            )?;
        }
        list_1117.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_reserved_instances_listing(
    input: &crate::input::CreateReservedInstancesListingInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateReservedInstancesListing",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1119 = writer.prefix("ClientToken");
    if let Some(var_1120) = &input.client_token {
        scope_1119.string(var_1120);
    }
    #[allow(unused_mut)]
    let mut scope_1121 = writer.prefix("InstanceCount");
    if let Some(var_1122) = &input.instance_count {
        scope_1121.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1122).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1123 = writer.prefix("PriceSchedules");
    if let Some(var_1124) = &input.price_schedules {
        let mut list_1126 = scope_1123.start_list(true, Some("item"));
        for item_1125 in var_1124 {
            #[allow(unused_mut)]
            let mut entry_1127 = list_1126.entry();
            crate::query_ser::serialize_structure_crate_model_price_schedule_specification(
                entry_1127, item_1125,
            )?;
        }
        list_1126.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1128 = writer.prefix("ReservedInstancesId");
    if let Some(var_1129) = &input.reserved_instances_id {
        scope_1128.string(var_1129);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_restore_image_task(
    input: &crate::input::CreateRestoreImageTaskInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateRestoreImageTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1130 = writer.prefix("Bucket");
    if let Some(var_1131) = &input.bucket {
        scope_1130.string(var_1131);
    }
    #[allow(unused_mut)]
    let mut scope_1132 = writer.prefix("ObjectKey");
    if let Some(var_1133) = &input.object_key {
        scope_1132.string(var_1133);
    }
    #[allow(unused_mut)]
    let mut scope_1134 = writer.prefix("Name");
    if let Some(var_1135) = &input.name {
        scope_1134.string(var_1135);
    }
    #[allow(unused_mut)]
    let mut scope_1136 = writer.prefix("TagSpecification");
    if let Some(var_1137) = &input.tag_specifications {
        let mut list_1139 = scope_1136.start_list(true, Some("item"));
        for item_1138 in var_1137 {
            #[allow(unused_mut)]
            let mut entry_1140 = list_1139.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1140, item_1138,
            )?;
        }
        list_1139.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1141 = writer.prefix("DryRun");
    if let Some(var_1142) = &input.dry_run {
        scope_1141.boolean(*var_1142);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_route(
    input: &crate::input::CreateRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1143 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1144) = &input.destination_cidr_block {
        scope_1143.string(var_1144);
    }
    #[allow(unused_mut)]
    let mut scope_1145 = writer.prefix("DestinationIpv6CidrBlock");
    if let Some(var_1146) = &input.destination_ipv6_cidr_block {
        scope_1145.string(var_1146);
    }
    #[allow(unused_mut)]
    let mut scope_1147 = writer.prefix("DestinationPrefixListId");
    if let Some(var_1148) = &input.destination_prefix_list_id {
        scope_1147.string(var_1148);
    }
    #[allow(unused_mut)]
    let mut scope_1149 = writer.prefix("DryRun");
    if let Some(var_1150) = &input.dry_run {
        scope_1149.boolean(*var_1150);
    }
    #[allow(unused_mut)]
    let mut scope_1151 = writer.prefix("VpcEndpointId");
    if let Some(var_1152) = &input.vpc_endpoint_id {
        scope_1151.string(var_1152);
    }
    #[allow(unused_mut)]
    let mut scope_1153 = writer.prefix("EgressOnlyInternetGatewayId");
    if let Some(var_1154) = &input.egress_only_internet_gateway_id {
        scope_1153.string(var_1154);
    }
    #[allow(unused_mut)]
    let mut scope_1155 = writer.prefix("GatewayId");
    if let Some(var_1156) = &input.gateway_id {
        scope_1155.string(var_1156);
    }
    #[allow(unused_mut)]
    let mut scope_1157 = writer.prefix("InstanceId");
    if let Some(var_1158) = &input.instance_id {
        scope_1157.string(var_1158);
    }
    #[allow(unused_mut)]
    let mut scope_1159 = writer.prefix("NatGatewayId");
    if let Some(var_1160) = &input.nat_gateway_id {
        scope_1159.string(var_1160);
    }
    #[allow(unused_mut)]
    let mut scope_1161 = writer.prefix("TransitGatewayId");
    if let Some(var_1162) = &input.transit_gateway_id {
        scope_1161.string(var_1162);
    }
    #[allow(unused_mut)]
    let mut scope_1163 = writer.prefix("LocalGatewayId");
    if let Some(var_1164) = &input.local_gateway_id {
        scope_1163.string(var_1164);
    }
    #[allow(unused_mut)]
    let mut scope_1165 = writer.prefix("CarrierGatewayId");
    if let Some(var_1166) = &input.carrier_gateway_id {
        scope_1165.string(var_1166);
    }
    #[allow(unused_mut)]
    let mut scope_1167 = writer.prefix("NetworkInterfaceId");
    if let Some(var_1168) = &input.network_interface_id {
        scope_1167.string(var_1168);
    }
    #[allow(unused_mut)]
    let mut scope_1169 = writer.prefix("RouteTableId");
    if let Some(var_1170) = &input.route_table_id {
        scope_1169.string(var_1170);
    }
    #[allow(unused_mut)]
    let mut scope_1171 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_1172) = &input.vpc_peering_connection_id {
        scope_1171.string(var_1172);
    }
    #[allow(unused_mut)]
    let mut scope_1173 = writer.prefix("CoreNetworkArn");
    if let Some(var_1174) = &input.core_network_arn {
        scope_1173.string(var_1174);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_route_table(
    input: &crate::input::CreateRouteTableInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateRouteTable", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1175 = writer.prefix("DryRun");
    if let Some(var_1176) = &input.dry_run {
        scope_1175.boolean(*var_1176);
    }
    #[allow(unused_mut)]
    let mut scope_1177 = writer.prefix("VpcId");
    if let Some(var_1178) = &input.vpc_id {
        scope_1177.string(var_1178);
    }
    #[allow(unused_mut)]
    let mut scope_1179 = writer.prefix("TagSpecification");
    if let Some(var_1180) = &input.tag_specifications {
        let mut list_1182 = scope_1179.start_list(true, Some("item"));
        for item_1181 in var_1180 {
            #[allow(unused_mut)]
            let mut entry_1183 = list_1182.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1183, item_1181,
            )?;
        }
        list_1182.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_security_group(
    input: &crate::input::CreateSecurityGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateSecurityGroup", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1184 = writer.prefix("GroupDescription");
    if let Some(var_1185) = &input.description {
        scope_1184.string(var_1185);
    }
    #[allow(unused_mut)]
    let mut scope_1186 = writer.prefix("GroupName");
    if let Some(var_1187) = &input.group_name {
        scope_1186.string(var_1187);
    }
    #[allow(unused_mut)]
    let mut scope_1188 = writer.prefix("VpcId");
    if let Some(var_1189) = &input.vpc_id {
        scope_1188.string(var_1189);
    }
    #[allow(unused_mut)]
    let mut scope_1190 = writer.prefix("TagSpecification");
    if let Some(var_1191) = &input.tag_specifications {
        let mut list_1193 = scope_1190.start_list(true, Some("item"));
        for item_1192 in var_1191 {
            #[allow(unused_mut)]
            let mut entry_1194 = list_1193.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1194, item_1192,
            )?;
        }
        list_1193.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1195 = writer.prefix("DryRun");
    if let Some(var_1196) = &input.dry_run {
        scope_1195.boolean(*var_1196);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_snapshot(
    input: &crate::input::CreateSnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateSnapshot", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1197 = writer.prefix("Description");
    if let Some(var_1198) = &input.description {
        scope_1197.string(var_1198);
    }
    #[allow(unused_mut)]
    let mut scope_1199 = writer.prefix("OutpostArn");
    if let Some(var_1200) = &input.outpost_arn {
        scope_1199.string(var_1200);
    }
    #[allow(unused_mut)]
    let mut scope_1201 = writer.prefix("VolumeId");
    if let Some(var_1202) = &input.volume_id {
        scope_1201.string(var_1202);
    }
    #[allow(unused_mut)]
    let mut scope_1203 = writer.prefix("TagSpecification");
    if let Some(var_1204) = &input.tag_specifications {
        let mut list_1206 = scope_1203.start_list(true, Some("item"));
        for item_1205 in var_1204 {
            #[allow(unused_mut)]
            let mut entry_1207 = list_1206.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1207, item_1205,
            )?;
        }
        list_1206.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1208 = writer.prefix("DryRun");
    if let Some(var_1209) = &input.dry_run {
        scope_1208.boolean(*var_1209);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_snapshots(
    input: &crate::input::CreateSnapshotsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateSnapshots", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1210 = writer.prefix("Description");
    if let Some(var_1211) = &input.description {
        scope_1210.string(var_1211);
    }
    #[allow(unused_mut)]
    let mut scope_1212 = writer.prefix("InstanceSpecification");
    if let Some(var_1213) = &input.instance_specification {
        crate::query_ser::serialize_structure_crate_model_instance_specification(
            scope_1212, var_1213,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1214 = writer.prefix("OutpostArn");
    if let Some(var_1215) = &input.outpost_arn {
        scope_1214.string(var_1215);
    }
    #[allow(unused_mut)]
    let mut scope_1216 = writer.prefix("TagSpecification");
    if let Some(var_1217) = &input.tag_specifications {
        let mut list_1219 = scope_1216.start_list(true, Some("item"));
        for item_1218 in var_1217 {
            #[allow(unused_mut)]
            let mut entry_1220 = list_1219.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1220, item_1218,
            )?;
        }
        list_1219.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1221 = writer.prefix("DryRun");
    if let Some(var_1222) = &input.dry_run {
        scope_1221.boolean(*var_1222);
    }
    #[allow(unused_mut)]
    let mut scope_1223 = writer.prefix("CopyTagsFromSource");
    if let Some(var_1224) = &input.copy_tags_from_source {
        scope_1223.string(var_1224.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_spot_datafeed_subscription(
    input: &crate::input::CreateSpotDatafeedSubscriptionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateSpotDatafeedSubscription",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1225 = writer.prefix("Bucket");
    if let Some(var_1226) = &input.bucket {
        scope_1225.string(var_1226);
    }
    #[allow(unused_mut)]
    let mut scope_1227 = writer.prefix("DryRun");
    if let Some(var_1228) = &input.dry_run {
        scope_1227.boolean(*var_1228);
    }
    #[allow(unused_mut)]
    let mut scope_1229 = writer.prefix("Prefix");
    if let Some(var_1230) = &input.prefix {
        scope_1229.string(var_1230);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_store_image_task(
    input: &crate::input::CreateStoreImageTaskInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateStoreImageTask", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1231 = writer.prefix("ImageId");
    if let Some(var_1232) = &input.image_id {
        scope_1231.string(var_1232);
    }
    #[allow(unused_mut)]
    let mut scope_1233 = writer.prefix("Bucket");
    if let Some(var_1234) = &input.bucket {
        scope_1233.string(var_1234);
    }
    #[allow(unused_mut)]
    let mut scope_1235 = writer.prefix("S3ObjectTag");
    if let Some(var_1236) = &input.s3_object_tags {
        let mut list_1238 = scope_1235.start_list(true, Some("item"));
        for item_1237 in var_1236 {
            #[allow(unused_mut)]
            let mut entry_1239 = list_1238.entry();
            crate::query_ser::serialize_structure_crate_model_s3_object_tag(entry_1239, item_1237)?;
        }
        list_1238.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1240 = writer.prefix("DryRun");
    if let Some(var_1241) = &input.dry_run {
        scope_1240.boolean(*var_1241);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_subnet(
    input: &crate::input::CreateSubnetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateSubnet", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1242 = writer.prefix("TagSpecification");
    if let Some(var_1243) = &input.tag_specifications {
        let mut list_1245 = scope_1242.start_list(true, Some("item"));
        for item_1244 in var_1243 {
            #[allow(unused_mut)]
            let mut entry_1246 = list_1245.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1246, item_1244,
            )?;
        }
        list_1245.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1247 = writer.prefix("AvailabilityZone");
    if let Some(var_1248) = &input.availability_zone {
        scope_1247.string(var_1248);
    }
    #[allow(unused_mut)]
    let mut scope_1249 = writer.prefix("AvailabilityZoneId");
    if let Some(var_1250) = &input.availability_zone_id {
        scope_1249.string(var_1250);
    }
    #[allow(unused_mut)]
    let mut scope_1251 = writer.prefix("CidrBlock");
    if let Some(var_1252) = &input.cidr_block {
        scope_1251.string(var_1252);
    }
    #[allow(unused_mut)]
    let mut scope_1253 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_1254) = &input.ipv6_cidr_block {
        scope_1253.string(var_1254);
    }
    #[allow(unused_mut)]
    let mut scope_1255 = writer.prefix("OutpostArn");
    if let Some(var_1256) = &input.outpost_arn {
        scope_1255.string(var_1256);
    }
    #[allow(unused_mut)]
    let mut scope_1257 = writer.prefix("VpcId");
    if let Some(var_1258) = &input.vpc_id {
        scope_1257.string(var_1258);
    }
    #[allow(unused_mut)]
    let mut scope_1259 = writer.prefix("DryRun");
    if let Some(var_1260) = &input.dry_run {
        scope_1259.boolean(*var_1260);
    }
    #[allow(unused_mut)]
    let mut scope_1261 = writer.prefix("Ipv6Native");
    if let Some(var_1262) = &input.ipv6_native {
        scope_1261.boolean(*var_1262);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_subnet_cidr_reservation(
    input: &crate::input::CreateSubnetCidrReservationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateSubnetCidrReservation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1263 = writer.prefix("SubnetId");
    if let Some(var_1264) = &input.subnet_id {
        scope_1263.string(var_1264);
    }
    #[allow(unused_mut)]
    let mut scope_1265 = writer.prefix("Cidr");
    if let Some(var_1266) = &input.cidr {
        scope_1265.string(var_1266);
    }
    #[allow(unused_mut)]
    let mut scope_1267 = writer.prefix("ReservationType");
    if let Some(var_1268) = &input.reservation_type {
        scope_1267.string(var_1268.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1269 = writer.prefix("Description");
    if let Some(var_1270) = &input.description {
        scope_1269.string(var_1270);
    }
    #[allow(unused_mut)]
    let mut scope_1271 = writer.prefix("DryRun");
    if let Some(var_1272) = &input.dry_run {
        scope_1271.boolean(*var_1272);
    }
    #[allow(unused_mut)]
    let mut scope_1273 = writer.prefix("TagSpecification");
    if let Some(var_1274) = &input.tag_specifications {
        let mut list_1276 = scope_1273.start_list(true, Some("item"));
        for item_1275 in var_1274 {
            #[allow(unused_mut)]
            let mut entry_1277 = list_1276.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1277, item_1275,
            )?;
        }
        list_1276.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_tags(
    input: &crate::input::CreateTagsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateTags", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1278 = writer.prefix("DryRun");
    if let Some(var_1279) = &input.dry_run {
        scope_1278.boolean(*var_1279);
    }
    #[allow(unused_mut)]
    let mut scope_1280 = writer.prefix("ResourceId");
    if let Some(var_1281) = &input.resources {
        let mut list_1283 = scope_1280.start_list(true, None);
        for item_1282 in var_1281 {
            #[allow(unused_mut)]
            let mut entry_1284 = list_1283.entry();
            entry_1284.string(item_1282);
        }
        list_1283.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1285 = writer.prefix("Tag");
    if let Some(var_1286) = &input.tags {
        let mut list_1288 = scope_1285.start_list(true, Some("item"));
        for item_1287 in var_1286 {
            #[allow(unused_mut)]
            let mut entry_1289 = list_1288.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_1289, item_1287)?;
        }
        list_1288.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_traffic_mirror_filter(
    input: &crate::input::CreateTrafficMirrorFilterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateTrafficMirrorFilter", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1290 = writer.prefix("Description");
    if let Some(var_1291) = &input.description {
        scope_1290.string(var_1291);
    }
    #[allow(unused_mut)]
    let mut scope_1292 = writer.prefix("TagSpecification");
    if let Some(var_1293) = &input.tag_specifications {
        let mut list_1295 = scope_1292.start_list(true, Some("item"));
        for item_1294 in var_1293 {
            #[allow(unused_mut)]
            let mut entry_1296 = list_1295.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1296, item_1294,
            )?;
        }
        list_1295.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1297 = writer.prefix("DryRun");
    if let Some(var_1298) = &input.dry_run {
        scope_1297.boolean(*var_1298);
    }
    #[allow(unused_mut)]
    let mut scope_1299 = writer.prefix("ClientToken");
    if let Some(var_1300) = &input.client_token {
        scope_1299.string(var_1300);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_traffic_mirror_filter_rule(
    input: &crate::input::CreateTrafficMirrorFilterRuleInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateTrafficMirrorFilterRule", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1301 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_1302) = &input.traffic_mirror_filter_id {
        scope_1301.string(var_1302);
    }
    #[allow(unused_mut)]
    let mut scope_1303 = writer.prefix("TrafficDirection");
    if let Some(var_1304) = &input.traffic_direction {
        scope_1303.string(var_1304.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1305 = writer.prefix("RuleNumber");
    if let Some(var_1306) = &input.rule_number {
        scope_1305.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1306).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1307 = writer.prefix("RuleAction");
    if let Some(var_1308) = &input.rule_action {
        scope_1307.string(var_1308.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1309 = writer.prefix("DestinationPortRange");
    if let Some(var_1310) = &input.destination_port_range {
        crate::query_ser::serialize_structure_crate_model_traffic_mirror_port_range_request(
            scope_1309, var_1310,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1311 = writer.prefix("SourcePortRange");
    if let Some(var_1312) = &input.source_port_range {
        crate::query_ser::serialize_structure_crate_model_traffic_mirror_port_range_request(
            scope_1311, var_1312,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1313 = writer.prefix("Protocol");
    if let Some(var_1314) = &input.protocol {
        scope_1313.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1314).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1315 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1316) = &input.destination_cidr_block {
        scope_1315.string(var_1316);
    }
    #[allow(unused_mut)]
    let mut scope_1317 = writer.prefix("SourceCidrBlock");
    if let Some(var_1318) = &input.source_cidr_block {
        scope_1317.string(var_1318);
    }
    #[allow(unused_mut)]
    let mut scope_1319 = writer.prefix("Description");
    if let Some(var_1320) = &input.description {
        scope_1319.string(var_1320);
    }
    #[allow(unused_mut)]
    let mut scope_1321 = writer.prefix("DryRun");
    if let Some(var_1322) = &input.dry_run {
        scope_1321.boolean(*var_1322);
    }
    #[allow(unused_mut)]
    let mut scope_1323 = writer.prefix("ClientToken");
    if let Some(var_1324) = &input.client_token {
        scope_1323.string(var_1324);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_traffic_mirror_session(
    input: &crate::input::CreateTrafficMirrorSessionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateTrafficMirrorSession", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1325 = writer.prefix("NetworkInterfaceId");
    if let Some(var_1326) = &input.network_interface_id {
        scope_1325.string(var_1326);
    }
    #[allow(unused_mut)]
    let mut scope_1327 = writer.prefix("TrafficMirrorTargetId");
    if let Some(var_1328) = &input.traffic_mirror_target_id {
        scope_1327.string(var_1328);
    }
    #[allow(unused_mut)]
    let mut scope_1329 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_1330) = &input.traffic_mirror_filter_id {
        scope_1329.string(var_1330);
    }
    #[allow(unused_mut)]
    let mut scope_1331 = writer.prefix("PacketLength");
    if let Some(var_1332) = &input.packet_length {
        scope_1331.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1332).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1333 = writer.prefix("SessionNumber");
    if let Some(var_1334) = &input.session_number {
        scope_1333.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1334).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1335 = writer.prefix("VirtualNetworkId");
    if let Some(var_1336) = &input.virtual_network_id {
        scope_1335.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1336).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1337 = writer.prefix("Description");
    if let Some(var_1338) = &input.description {
        scope_1337.string(var_1338);
    }
    #[allow(unused_mut)]
    let mut scope_1339 = writer.prefix("TagSpecification");
    if let Some(var_1340) = &input.tag_specifications {
        let mut list_1342 = scope_1339.start_list(true, Some("item"));
        for item_1341 in var_1340 {
            #[allow(unused_mut)]
            let mut entry_1343 = list_1342.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1343, item_1341,
            )?;
        }
        list_1342.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1344 = writer.prefix("DryRun");
    if let Some(var_1345) = &input.dry_run {
        scope_1344.boolean(*var_1345);
    }
    #[allow(unused_mut)]
    let mut scope_1346 = writer.prefix("ClientToken");
    if let Some(var_1347) = &input.client_token {
        scope_1346.string(var_1347);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_traffic_mirror_target(
    input: &crate::input::CreateTrafficMirrorTargetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateTrafficMirrorTarget", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1348 = writer.prefix("NetworkInterfaceId");
    if let Some(var_1349) = &input.network_interface_id {
        scope_1348.string(var_1349);
    }
    #[allow(unused_mut)]
    let mut scope_1350 = writer.prefix("NetworkLoadBalancerArn");
    if let Some(var_1351) = &input.network_load_balancer_arn {
        scope_1350.string(var_1351);
    }
    #[allow(unused_mut)]
    let mut scope_1352 = writer.prefix("Description");
    if let Some(var_1353) = &input.description {
        scope_1352.string(var_1353);
    }
    #[allow(unused_mut)]
    let mut scope_1354 = writer.prefix("TagSpecification");
    if let Some(var_1355) = &input.tag_specifications {
        let mut list_1357 = scope_1354.start_list(true, Some("item"));
        for item_1356 in var_1355 {
            #[allow(unused_mut)]
            let mut entry_1358 = list_1357.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1358, item_1356,
            )?;
        }
        list_1357.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1359 = writer.prefix("DryRun");
    if let Some(var_1360) = &input.dry_run {
        scope_1359.boolean(*var_1360);
    }
    #[allow(unused_mut)]
    let mut scope_1361 = writer.prefix("ClientToken");
    if let Some(var_1362) = &input.client_token {
        scope_1361.string(var_1362);
    }
    #[allow(unused_mut)]
    let mut scope_1363 = writer.prefix("GatewayLoadBalancerEndpointId");
    if let Some(var_1364) = &input.gateway_load_balancer_endpoint_id {
        scope_1363.string(var_1364);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway(
    input: &crate::input::CreateTransitGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateTransitGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1365 = writer.prefix("Description");
    if let Some(var_1366) = &input.description {
        scope_1365.string(var_1366);
    }
    #[allow(unused_mut)]
    let mut scope_1367 = writer.prefix("Options");
    if let Some(var_1368) = &input.options {
        crate::query_ser::serialize_structure_crate_model_transit_gateway_request_options(
            scope_1367, var_1368,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1369 = writer.prefix("TagSpecification");
    if let Some(var_1370) = &input.tag_specifications {
        let mut list_1372 = scope_1369.start_list(true, Some("item"));
        for item_1371 in var_1370 {
            #[allow(unused_mut)]
            let mut entry_1373 = list_1372.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1373, item_1371,
            )?;
        }
        list_1372.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1374 = writer.prefix("DryRun");
    if let Some(var_1375) = &input.dry_run {
        scope_1374.boolean(*var_1375);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_connect(
    input: &crate::input::CreateTransitGatewayConnectInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateTransitGatewayConnect", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1376 = writer.prefix("TransportTransitGatewayAttachmentId");
    if let Some(var_1377) = &input.transport_transit_gateway_attachment_id {
        scope_1376.string(var_1377);
    }
    #[allow(unused_mut)]
    let mut scope_1378 = writer.prefix("Options");
    if let Some(var_1379) = &input.options {
        crate::query_ser::serialize_structure_crate_model_create_transit_gateway_connect_request_options(scope_1378, var_1379)?;
    }
    #[allow(unused_mut)]
    let mut scope_1380 = writer.prefix("TagSpecification");
    if let Some(var_1381) = &input.tag_specifications {
        let mut list_1383 = scope_1380.start_list(true, Some("item"));
        for item_1382 in var_1381 {
            #[allow(unused_mut)]
            let mut entry_1384 = list_1383.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1384, item_1382,
            )?;
        }
        list_1383.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1385 = writer.prefix("DryRun");
    if let Some(var_1386) = &input.dry_run {
        scope_1385.boolean(*var_1386);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_connect_peer(
    input: &crate::input::CreateTransitGatewayConnectPeerInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateTransitGatewayConnectPeer",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1387 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_1388) = &input.transit_gateway_attachment_id {
        scope_1387.string(var_1388);
    }
    #[allow(unused_mut)]
    let mut scope_1389 = writer.prefix("TransitGatewayAddress");
    if let Some(var_1390) = &input.transit_gateway_address {
        scope_1389.string(var_1390);
    }
    #[allow(unused_mut)]
    let mut scope_1391 = writer.prefix("PeerAddress");
    if let Some(var_1392) = &input.peer_address {
        scope_1391.string(var_1392);
    }
    #[allow(unused_mut)]
    let mut scope_1393 = writer.prefix("BgpOptions");
    if let Some(var_1394) = &input.bgp_options {
        crate::query_ser::serialize_structure_crate_model_transit_gateway_connect_request_bgp_options(scope_1393, var_1394)?;
    }
    #[allow(unused_mut)]
    let mut scope_1395 = writer.prefix("InsideCidrBlocks");
    if let Some(var_1396) = &input.inside_cidr_blocks {
        let mut list_1398 = scope_1395.start_list(true, Some("item"));
        for item_1397 in var_1396 {
            #[allow(unused_mut)]
            let mut entry_1399 = list_1398.entry();
            entry_1399.string(item_1397);
        }
        list_1398.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1400 = writer.prefix("TagSpecification");
    if let Some(var_1401) = &input.tag_specifications {
        let mut list_1403 = scope_1400.start_list(true, Some("item"));
        for item_1402 in var_1401 {
            #[allow(unused_mut)]
            let mut entry_1404 = list_1403.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1404, item_1402,
            )?;
        }
        list_1403.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1405 = writer.prefix("DryRun");
    if let Some(var_1406) = &input.dry_run {
        scope_1405.boolean(*var_1406);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_multicast_domain(
    input: &crate::input::CreateTransitGatewayMulticastDomainInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateTransitGatewayMulticastDomain",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1407 = writer.prefix("TransitGatewayId");
    if let Some(var_1408) = &input.transit_gateway_id {
        scope_1407.string(var_1408);
    }
    #[allow(unused_mut)]
    let mut scope_1409 = writer.prefix("Options");
    if let Some(var_1410) = &input.options {
        crate::query_ser::serialize_structure_crate_model_create_transit_gateway_multicast_domain_request_options(scope_1409, var_1410)?;
    }
    #[allow(unused_mut)]
    let mut scope_1411 = writer.prefix("TagSpecification");
    if let Some(var_1412) = &input.tag_specifications {
        let mut list_1414 = scope_1411.start_list(true, Some("item"));
        for item_1413 in var_1412 {
            #[allow(unused_mut)]
            let mut entry_1415 = list_1414.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1415, item_1413,
            )?;
        }
        list_1414.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1416 = writer.prefix("DryRun");
    if let Some(var_1417) = &input.dry_run {
        scope_1416.boolean(*var_1417);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_peering_attachment(
    input: &crate::input::CreateTransitGatewayPeeringAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateTransitGatewayPeeringAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1418 = writer.prefix("TransitGatewayId");
    if let Some(var_1419) = &input.transit_gateway_id {
        scope_1418.string(var_1419);
    }
    #[allow(unused_mut)]
    let mut scope_1420 = writer.prefix("PeerTransitGatewayId");
    if let Some(var_1421) = &input.peer_transit_gateway_id {
        scope_1420.string(var_1421);
    }
    #[allow(unused_mut)]
    let mut scope_1422 = writer.prefix("PeerAccountId");
    if let Some(var_1423) = &input.peer_account_id {
        scope_1422.string(var_1423);
    }
    #[allow(unused_mut)]
    let mut scope_1424 = writer.prefix("PeerRegion");
    if let Some(var_1425) = &input.peer_region {
        scope_1424.string(var_1425);
    }
    #[allow(unused_mut)]
    let mut scope_1426 = writer.prefix("TagSpecification");
    if let Some(var_1427) = &input.tag_specifications {
        let mut list_1429 = scope_1426.start_list(true, Some("item"));
        for item_1428 in var_1427 {
            #[allow(unused_mut)]
            let mut entry_1430 = list_1429.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1430, item_1428,
            )?;
        }
        list_1429.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1431 = writer.prefix("DryRun");
    if let Some(var_1432) = &input.dry_run {
        scope_1431.boolean(*var_1432);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_prefix_list_reference(
    input: &crate::input::CreateTransitGatewayPrefixListReferenceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateTransitGatewayPrefixListReference",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1433 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_1434) = &input.transit_gateway_route_table_id {
        scope_1433.string(var_1434);
    }
    #[allow(unused_mut)]
    let mut scope_1435 = writer.prefix("PrefixListId");
    if let Some(var_1436) = &input.prefix_list_id {
        scope_1435.string(var_1436);
    }
    #[allow(unused_mut)]
    let mut scope_1437 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_1438) = &input.transit_gateway_attachment_id {
        scope_1437.string(var_1438);
    }
    #[allow(unused_mut)]
    let mut scope_1439 = writer.prefix("Blackhole");
    if let Some(var_1440) = &input.blackhole {
        scope_1439.boolean(*var_1440);
    }
    #[allow(unused_mut)]
    let mut scope_1441 = writer.prefix("DryRun");
    if let Some(var_1442) = &input.dry_run {
        scope_1441.boolean(*var_1442);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_route(
    input: &crate::input::CreateTransitGatewayRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateTransitGatewayRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1443 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1444) = &input.destination_cidr_block {
        scope_1443.string(var_1444);
    }
    #[allow(unused_mut)]
    let mut scope_1445 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_1446) = &input.transit_gateway_route_table_id {
        scope_1445.string(var_1446);
    }
    #[allow(unused_mut)]
    let mut scope_1447 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_1448) = &input.transit_gateway_attachment_id {
        scope_1447.string(var_1448);
    }
    #[allow(unused_mut)]
    let mut scope_1449 = writer.prefix("Blackhole");
    if let Some(var_1450) = &input.blackhole {
        scope_1449.boolean(*var_1450);
    }
    #[allow(unused_mut)]
    let mut scope_1451 = writer.prefix("DryRun");
    if let Some(var_1452) = &input.dry_run {
        scope_1451.boolean(*var_1452);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_route_table(
    input: &crate::input::CreateTransitGatewayRouteTableInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateTransitGatewayRouteTable",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1453 = writer.prefix("TransitGatewayId");
    if let Some(var_1454) = &input.transit_gateway_id {
        scope_1453.string(var_1454);
    }
    #[allow(unused_mut)]
    let mut scope_1455 = writer.prefix("TagSpecifications");
    if let Some(var_1456) = &input.tag_specifications {
        let mut list_1458 = scope_1455.start_list(true, Some("item"));
        for item_1457 in var_1456 {
            #[allow(unused_mut)]
            let mut entry_1459 = list_1458.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1459, item_1457,
            )?;
        }
        list_1458.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1460 = writer.prefix("DryRun");
    if let Some(var_1461) = &input.dry_run {
        scope_1460.boolean(*var_1461);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_transit_gateway_vpc_attachment(
    input: &crate::input::CreateTransitGatewayVpcAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateTransitGatewayVpcAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1462 = writer.prefix("TransitGatewayId");
    if let Some(var_1463) = &input.transit_gateway_id {
        scope_1462.string(var_1463);
    }
    #[allow(unused_mut)]
    let mut scope_1464 = writer.prefix("VpcId");
    if let Some(var_1465) = &input.vpc_id {
        scope_1464.string(var_1465);
    }
    #[allow(unused_mut)]
    let mut scope_1466 = writer.prefix("SubnetIds");
    if let Some(var_1467) = &input.subnet_ids {
        let mut list_1469 = scope_1466.start_list(true, Some("item"));
        for item_1468 in var_1467 {
            #[allow(unused_mut)]
            let mut entry_1470 = list_1469.entry();
            entry_1470.string(item_1468);
        }
        list_1469.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1471 = writer.prefix("Options");
    if let Some(var_1472) = &input.options {
        crate::query_ser::serialize_structure_crate_model_create_transit_gateway_vpc_attachment_request_options(scope_1471, var_1472)?;
    }
    #[allow(unused_mut)]
    let mut scope_1473 = writer.prefix("TagSpecifications");
    if let Some(var_1474) = &input.tag_specifications {
        let mut list_1476 = scope_1473.start_list(true, Some("item"));
        for item_1475 in var_1474 {
            #[allow(unused_mut)]
            let mut entry_1477 = list_1476.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1477, item_1475,
            )?;
        }
        list_1476.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1478 = writer.prefix("DryRun");
    if let Some(var_1479) = &input.dry_run {
        scope_1478.boolean(*var_1479);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_volume(
    input: &crate::input::CreateVolumeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateVolume", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1480 = writer.prefix("AvailabilityZone");
    if let Some(var_1481) = &input.availability_zone {
        scope_1480.string(var_1481);
    }
    #[allow(unused_mut)]
    let mut scope_1482 = writer.prefix("Encrypted");
    if let Some(var_1483) = &input.encrypted {
        scope_1482.boolean(*var_1483);
    }
    #[allow(unused_mut)]
    let mut scope_1484 = writer.prefix("Iops");
    if let Some(var_1485) = &input.iops {
        scope_1484.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1485).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1486 = writer.prefix("KmsKeyId");
    if let Some(var_1487) = &input.kms_key_id {
        scope_1486.string(var_1487);
    }
    #[allow(unused_mut)]
    let mut scope_1488 = writer.prefix("OutpostArn");
    if let Some(var_1489) = &input.outpost_arn {
        scope_1488.string(var_1489);
    }
    #[allow(unused_mut)]
    let mut scope_1490 = writer.prefix("Size");
    if let Some(var_1491) = &input.size {
        scope_1490.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1491).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1492 = writer.prefix("SnapshotId");
    if let Some(var_1493) = &input.snapshot_id {
        scope_1492.string(var_1493);
    }
    #[allow(unused_mut)]
    let mut scope_1494 = writer.prefix("VolumeType");
    if let Some(var_1495) = &input.volume_type {
        scope_1494.string(var_1495.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1496 = writer.prefix("DryRun");
    if let Some(var_1497) = &input.dry_run {
        scope_1496.boolean(*var_1497);
    }
    #[allow(unused_mut)]
    let mut scope_1498 = writer.prefix("TagSpecification");
    if let Some(var_1499) = &input.tag_specifications {
        let mut list_1501 = scope_1498.start_list(true, Some("item"));
        for item_1500 in var_1499 {
            #[allow(unused_mut)]
            let mut entry_1502 = list_1501.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1502, item_1500,
            )?;
        }
        list_1501.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1503 = writer.prefix("MultiAttachEnabled");
    if let Some(var_1504) = &input.multi_attach_enabled {
        scope_1503.boolean(*var_1504);
    }
    #[allow(unused_mut)]
    let mut scope_1505 = writer.prefix("Throughput");
    if let Some(var_1506) = &input.throughput {
        scope_1505.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1506).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1507 = writer.prefix("ClientToken");
    if let Some(var_1508) = &input.client_token {
        scope_1507.string(var_1508);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpc(
    input: &crate::input::CreateVpcInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateVpc", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1509 = writer.prefix("CidrBlock");
    if let Some(var_1510) = &input.cidr_block {
        scope_1509.string(var_1510);
    }
    #[allow(unused_mut)]
    let mut scope_1511 = writer.prefix("AmazonProvidedIpv6CidrBlock");
    if let Some(var_1512) = &input.amazon_provided_ipv6_cidr_block {
        scope_1511.boolean(*var_1512);
    }
    #[allow(unused_mut)]
    let mut scope_1513 = writer.prefix("Ipv6Pool");
    if let Some(var_1514) = &input.ipv6_pool {
        scope_1513.string(var_1514);
    }
    #[allow(unused_mut)]
    let mut scope_1515 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_1516) = &input.ipv6_cidr_block {
        scope_1515.string(var_1516);
    }
    #[allow(unused_mut)]
    let mut scope_1517 = writer.prefix("Ipv4IpamPoolId");
    if let Some(var_1518) = &input.ipv4_ipam_pool_id {
        scope_1517.string(var_1518);
    }
    #[allow(unused_mut)]
    let mut scope_1519 = writer.prefix("Ipv4NetmaskLength");
    if let Some(var_1520) = &input.ipv4_netmask_length {
        scope_1519.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1520).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1521 = writer.prefix("Ipv6IpamPoolId");
    if let Some(var_1522) = &input.ipv6_ipam_pool_id {
        scope_1521.string(var_1522);
    }
    #[allow(unused_mut)]
    let mut scope_1523 = writer.prefix("Ipv6NetmaskLength");
    if let Some(var_1524) = &input.ipv6_netmask_length {
        scope_1523.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1524).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1525 = writer.prefix("DryRun");
    if let Some(var_1526) = &input.dry_run {
        scope_1525.boolean(*var_1526);
    }
    #[allow(unused_mut)]
    let mut scope_1527 = writer.prefix("InstanceTenancy");
    if let Some(var_1528) = &input.instance_tenancy {
        scope_1527.string(var_1528.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1529 = writer.prefix("Ipv6CidrBlockNetworkBorderGroup");
    if let Some(var_1530) = &input.ipv6_cidr_block_network_border_group {
        scope_1529.string(var_1530);
    }
    #[allow(unused_mut)]
    let mut scope_1531 = writer.prefix("TagSpecification");
    if let Some(var_1532) = &input.tag_specifications {
        let mut list_1534 = scope_1531.start_list(true, Some("item"));
        for item_1533 in var_1532 {
            #[allow(unused_mut)]
            let mut entry_1535 = list_1534.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1535, item_1533,
            )?;
        }
        list_1534.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpc_endpoint(
    input: &crate::input::CreateVpcEndpointInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateVpcEndpoint", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1536 = writer.prefix("DryRun");
    if let Some(var_1537) = &input.dry_run {
        scope_1536.boolean(*var_1537);
    }
    #[allow(unused_mut)]
    let mut scope_1538 = writer.prefix("VpcEndpointType");
    if let Some(var_1539) = &input.vpc_endpoint_type {
        scope_1538.string(var_1539.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1540 = writer.prefix("VpcId");
    if let Some(var_1541) = &input.vpc_id {
        scope_1540.string(var_1541);
    }
    #[allow(unused_mut)]
    let mut scope_1542 = writer.prefix("ServiceName");
    if let Some(var_1543) = &input.service_name {
        scope_1542.string(var_1543);
    }
    #[allow(unused_mut)]
    let mut scope_1544 = writer.prefix("PolicyDocument");
    if let Some(var_1545) = &input.policy_document {
        scope_1544.string(var_1545);
    }
    #[allow(unused_mut)]
    let mut scope_1546 = writer.prefix("RouteTableId");
    if let Some(var_1547) = &input.route_table_ids {
        let mut list_1549 = scope_1546.start_list(true, Some("item"));
        for item_1548 in var_1547 {
            #[allow(unused_mut)]
            let mut entry_1550 = list_1549.entry();
            entry_1550.string(item_1548);
        }
        list_1549.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1551 = writer.prefix("SubnetId");
    if let Some(var_1552) = &input.subnet_ids {
        let mut list_1554 = scope_1551.start_list(true, Some("item"));
        for item_1553 in var_1552 {
            #[allow(unused_mut)]
            let mut entry_1555 = list_1554.entry();
            entry_1555.string(item_1553);
        }
        list_1554.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1556 = writer.prefix("SecurityGroupId");
    if let Some(var_1557) = &input.security_group_ids {
        let mut list_1559 = scope_1556.start_list(true, Some("item"));
        for item_1558 in var_1557 {
            #[allow(unused_mut)]
            let mut entry_1560 = list_1559.entry();
            entry_1560.string(item_1558);
        }
        list_1559.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1561 = writer.prefix("IpAddressType");
    if let Some(var_1562) = &input.ip_address_type {
        scope_1561.string(var_1562.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1563 = writer.prefix("DnsOptions");
    if let Some(var_1564) = &input.dns_options {
        crate::query_ser::serialize_structure_crate_model_dns_options_specification(
            scope_1563, var_1564,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1565 = writer.prefix("ClientToken");
    if let Some(var_1566) = &input.client_token {
        scope_1565.string(var_1566);
    }
    #[allow(unused_mut)]
    let mut scope_1567 = writer.prefix("PrivateDnsEnabled");
    if let Some(var_1568) = &input.private_dns_enabled {
        scope_1567.boolean(*var_1568);
    }
    #[allow(unused_mut)]
    let mut scope_1569 = writer.prefix("TagSpecification");
    if let Some(var_1570) = &input.tag_specifications {
        let mut list_1572 = scope_1569.start_list(true, Some("item"));
        for item_1571 in var_1570 {
            #[allow(unused_mut)]
            let mut entry_1573 = list_1572.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1573, item_1571,
            )?;
        }
        list_1572.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpc_endpoint_connection_notification(
    input: &crate::input::CreateVpcEndpointConnectionNotificationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateVpcEndpointConnectionNotification",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1574 = writer.prefix("DryRun");
    if let Some(var_1575) = &input.dry_run {
        scope_1574.boolean(*var_1575);
    }
    #[allow(unused_mut)]
    let mut scope_1576 = writer.prefix("ServiceId");
    if let Some(var_1577) = &input.service_id {
        scope_1576.string(var_1577);
    }
    #[allow(unused_mut)]
    let mut scope_1578 = writer.prefix("VpcEndpointId");
    if let Some(var_1579) = &input.vpc_endpoint_id {
        scope_1578.string(var_1579);
    }
    #[allow(unused_mut)]
    let mut scope_1580 = writer.prefix("ConnectionNotificationArn");
    if let Some(var_1581) = &input.connection_notification_arn {
        scope_1580.string(var_1581);
    }
    #[allow(unused_mut)]
    let mut scope_1582 = writer.prefix("ConnectionEvents");
    if let Some(var_1583) = &input.connection_events {
        let mut list_1585 = scope_1582.start_list(true, Some("item"));
        for item_1584 in var_1583 {
            #[allow(unused_mut)]
            let mut entry_1586 = list_1585.entry();
            entry_1586.string(item_1584);
        }
        list_1585.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1587 = writer.prefix("ClientToken");
    if let Some(var_1588) = &input.client_token {
        scope_1587.string(var_1588);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpc_endpoint_service_configuration(
    input: &crate::input::CreateVpcEndpointServiceConfigurationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "CreateVpcEndpointServiceConfiguration",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1589 = writer.prefix("DryRun");
    if let Some(var_1590) = &input.dry_run {
        scope_1589.boolean(*var_1590);
    }
    #[allow(unused_mut)]
    let mut scope_1591 = writer.prefix("AcceptanceRequired");
    if let Some(var_1592) = &input.acceptance_required {
        scope_1591.boolean(*var_1592);
    }
    #[allow(unused_mut)]
    let mut scope_1593 = writer.prefix("PrivateDnsName");
    if let Some(var_1594) = &input.private_dns_name {
        scope_1593.string(var_1594);
    }
    #[allow(unused_mut)]
    let mut scope_1595 = writer.prefix("NetworkLoadBalancerArn");
    if let Some(var_1596) = &input.network_load_balancer_arns {
        let mut list_1598 = scope_1595.start_list(true, Some("item"));
        for item_1597 in var_1596 {
            #[allow(unused_mut)]
            let mut entry_1599 = list_1598.entry();
            entry_1599.string(item_1597);
        }
        list_1598.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1600 = writer.prefix("GatewayLoadBalancerArn");
    if let Some(var_1601) = &input.gateway_load_balancer_arns {
        let mut list_1603 = scope_1600.start_list(true, Some("item"));
        for item_1602 in var_1601 {
            #[allow(unused_mut)]
            let mut entry_1604 = list_1603.entry();
            entry_1604.string(item_1602);
        }
        list_1603.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1605 = writer.prefix("SupportedIpAddressType");
    if let Some(var_1606) = &input.supported_ip_address_types {
        let mut list_1608 = scope_1605.start_list(true, Some("item"));
        for item_1607 in var_1606 {
            #[allow(unused_mut)]
            let mut entry_1609 = list_1608.entry();
            entry_1609.string(item_1607);
        }
        list_1608.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1610 = writer.prefix("ClientToken");
    if let Some(var_1611) = &input.client_token {
        scope_1610.string(var_1611);
    }
    #[allow(unused_mut)]
    let mut scope_1612 = writer.prefix("TagSpecification");
    if let Some(var_1613) = &input.tag_specifications {
        let mut list_1615 = scope_1612.start_list(true, Some("item"));
        for item_1614 in var_1613 {
            #[allow(unused_mut)]
            let mut entry_1616 = list_1615.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1616, item_1614,
            )?;
        }
        list_1615.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpc_peering_connection(
    input: &crate::input::CreateVpcPeeringConnectionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateVpcPeeringConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1617 = writer.prefix("DryRun");
    if let Some(var_1618) = &input.dry_run {
        scope_1617.boolean(*var_1618);
    }
    #[allow(unused_mut)]
    let mut scope_1619 = writer.prefix("PeerOwnerId");
    if let Some(var_1620) = &input.peer_owner_id {
        scope_1619.string(var_1620);
    }
    #[allow(unused_mut)]
    let mut scope_1621 = writer.prefix("PeerVpcId");
    if let Some(var_1622) = &input.peer_vpc_id {
        scope_1621.string(var_1622);
    }
    #[allow(unused_mut)]
    let mut scope_1623 = writer.prefix("VpcId");
    if let Some(var_1624) = &input.vpc_id {
        scope_1623.string(var_1624);
    }
    #[allow(unused_mut)]
    let mut scope_1625 = writer.prefix("PeerRegion");
    if let Some(var_1626) = &input.peer_region {
        scope_1625.string(var_1626);
    }
    #[allow(unused_mut)]
    let mut scope_1627 = writer.prefix("TagSpecification");
    if let Some(var_1628) = &input.tag_specifications {
        let mut list_1630 = scope_1627.start_list(true, Some("item"));
        for item_1629 in var_1628 {
            #[allow(unused_mut)]
            let mut entry_1631 = list_1630.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1631, item_1629,
            )?;
        }
        list_1630.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpn_connection(
    input: &crate::input::CreateVpnConnectionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateVpnConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1632 = writer.prefix("CustomerGatewayId");
    if let Some(var_1633) = &input.customer_gateway_id {
        scope_1632.string(var_1633);
    }
    #[allow(unused_mut)]
    let mut scope_1634 = writer.prefix("Type");
    if let Some(var_1635) = &input.r#type {
        scope_1634.string(var_1635);
    }
    #[allow(unused_mut)]
    let mut scope_1636 = writer.prefix("VpnGatewayId");
    if let Some(var_1637) = &input.vpn_gateway_id {
        scope_1636.string(var_1637);
    }
    #[allow(unused_mut)]
    let mut scope_1638 = writer.prefix("TransitGatewayId");
    if let Some(var_1639) = &input.transit_gateway_id {
        scope_1638.string(var_1639);
    }
    #[allow(unused_mut)]
    let mut scope_1640 = writer.prefix("DryRun");
    if let Some(var_1641) = &input.dry_run {
        scope_1640.boolean(*var_1641);
    }
    #[allow(unused_mut)]
    let mut scope_1642 = writer.prefix("Options");
    if let Some(var_1643) = &input.options {
        crate::query_ser::serialize_structure_crate_model_vpn_connection_options_specification(
            scope_1642, var_1643,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1644 = writer.prefix("TagSpecification");
    if let Some(var_1645) = &input.tag_specifications {
        let mut list_1647 = scope_1644.start_list(true, Some("item"));
        for item_1646 in var_1645 {
            #[allow(unused_mut)]
            let mut entry_1648 = list_1647.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1648, item_1646,
            )?;
        }
        list_1647.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpn_connection_route(
    input: &crate::input::CreateVpnConnectionRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateVpnConnectionRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1649 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1650) = &input.destination_cidr_block {
        scope_1649.string(var_1650);
    }
    #[allow(unused_mut)]
    let mut scope_1651 = writer.prefix("VpnConnectionId");
    if let Some(var_1652) = &input.vpn_connection_id {
        scope_1651.string(var_1652);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_vpn_gateway(
    input: &crate::input::CreateVpnGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateVpnGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1653 = writer.prefix("AvailabilityZone");
    if let Some(var_1654) = &input.availability_zone {
        scope_1653.string(var_1654);
    }
    #[allow(unused_mut)]
    let mut scope_1655 = writer.prefix("Type");
    if let Some(var_1656) = &input.r#type {
        scope_1655.string(var_1656.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1657 = writer.prefix("TagSpecification");
    if let Some(var_1658) = &input.tag_specifications {
        let mut list_1660 = scope_1657.start_list(true, Some("item"));
        for item_1659 in var_1658 {
            #[allow(unused_mut)]
            let mut entry_1661 = list_1660.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_1661, item_1659,
            )?;
        }
        list_1660.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1662 = writer.prefix("AmazonSideAsn");
    if let Some(var_1663) = &input.amazon_side_asn {
        scope_1662.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1663).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1664 = writer.prefix("DryRun");
    if let Some(var_1665) = &input.dry_run {
        scope_1664.boolean(*var_1665);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_carrier_gateway(
    input: &crate::input::DeleteCarrierGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteCarrierGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1666 = writer.prefix("CarrierGatewayId");
    if let Some(var_1667) = &input.carrier_gateway_id {
        scope_1666.string(var_1667);
    }
    #[allow(unused_mut)]
    let mut scope_1668 = writer.prefix("DryRun");
    if let Some(var_1669) = &input.dry_run {
        scope_1668.boolean(*var_1669);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_client_vpn_endpoint(
    input: &crate::input::DeleteClientVpnEndpointInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteClientVpnEndpoint", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1670 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_1671) = &input.client_vpn_endpoint_id {
        scope_1670.string(var_1671);
    }
    #[allow(unused_mut)]
    let mut scope_1672 = writer.prefix("DryRun");
    if let Some(var_1673) = &input.dry_run {
        scope_1672.boolean(*var_1673);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_client_vpn_route(
    input: &crate::input::DeleteClientVpnRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteClientVpnRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1674 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_1675) = &input.client_vpn_endpoint_id {
        scope_1674.string(var_1675);
    }
    #[allow(unused_mut)]
    let mut scope_1676 = writer.prefix("TargetVpcSubnetId");
    if let Some(var_1677) = &input.target_vpc_subnet_id {
        scope_1676.string(var_1677);
    }
    #[allow(unused_mut)]
    let mut scope_1678 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1679) = &input.destination_cidr_block {
        scope_1678.string(var_1679);
    }
    #[allow(unused_mut)]
    let mut scope_1680 = writer.prefix("DryRun");
    if let Some(var_1681) = &input.dry_run {
        scope_1680.boolean(*var_1681);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_customer_gateway(
    input: &crate::input::DeleteCustomerGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteCustomerGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1682 = writer.prefix("CustomerGatewayId");
    if let Some(var_1683) = &input.customer_gateway_id {
        scope_1682.string(var_1683);
    }
    #[allow(unused_mut)]
    let mut scope_1684 = writer.prefix("DryRun");
    if let Some(var_1685) = &input.dry_run {
        scope_1684.boolean(*var_1685);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_dhcp_options(
    input: &crate::input::DeleteDhcpOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteDhcpOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1686 = writer.prefix("DhcpOptionsId");
    if let Some(var_1687) = &input.dhcp_options_id {
        scope_1686.string(var_1687);
    }
    #[allow(unused_mut)]
    let mut scope_1688 = writer.prefix("DryRun");
    if let Some(var_1689) = &input.dry_run {
        scope_1688.boolean(*var_1689);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_egress_only_internet_gateway(
    input: &crate::input::DeleteEgressOnlyInternetGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteEgressOnlyInternetGateway",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1690 = writer.prefix("DryRun");
    if let Some(var_1691) = &input.dry_run {
        scope_1690.boolean(*var_1691);
    }
    #[allow(unused_mut)]
    let mut scope_1692 = writer.prefix("EgressOnlyInternetGatewayId");
    if let Some(var_1693) = &input.egress_only_internet_gateway_id {
        scope_1692.string(var_1693);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_fleets(
    input: &crate::input::DeleteFleetsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteFleets", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1694 = writer.prefix("DryRun");
    if let Some(var_1695) = &input.dry_run {
        scope_1694.boolean(*var_1695);
    }
    #[allow(unused_mut)]
    let mut scope_1696 = writer.prefix("FleetId");
    if let Some(var_1697) = &input.fleet_ids {
        let mut list_1699 = scope_1696.start_list(true, None);
        for item_1698 in var_1697 {
            #[allow(unused_mut)]
            let mut entry_1700 = list_1699.entry();
            entry_1700.string(item_1698);
        }
        list_1699.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1701 = writer.prefix("TerminateInstances");
    if let Some(var_1702) = &input.terminate_instances {
        scope_1701.boolean(*var_1702);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_flow_logs(
    input: &crate::input::DeleteFlowLogsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteFlowLogs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1703 = writer.prefix("DryRun");
    if let Some(var_1704) = &input.dry_run {
        scope_1703.boolean(*var_1704);
    }
    #[allow(unused_mut)]
    let mut scope_1705 = writer.prefix("FlowLogId");
    if let Some(var_1706) = &input.flow_log_ids {
        let mut list_1708 = scope_1705.start_list(true, Some("item"));
        for item_1707 in var_1706 {
            #[allow(unused_mut)]
            let mut entry_1709 = list_1708.entry();
            entry_1709.string(item_1707);
        }
        list_1708.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_fpga_image(
    input: &crate::input::DeleteFpgaImageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteFpgaImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1710 = writer.prefix("DryRun");
    if let Some(var_1711) = &input.dry_run {
        scope_1710.boolean(*var_1711);
    }
    #[allow(unused_mut)]
    let mut scope_1712 = writer.prefix("FpgaImageId");
    if let Some(var_1713) = &input.fpga_image_id {
        scope_1712.string(var_1713);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_instance_event_window(
    input: &crate::input::DeleteInstanceEventWindowInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteInstanceEventWindow", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1714 = writer.prefix("DryRun");
    if let Some(var_1715) = &input.dry_run {
        scope_1714.boolean(*var_1715);
    }
    #[allow(unused_mut)]
    let mut scope_1716 = writer.prefix("ForceDelete");
    if let Some(var_1717) = &input.force_delete {
        scope_1716.boolean(*var_1717);
    }
    #[allow(unused_mut)]
    let mut scope_1718 = writer.prefix("InstanceEventWindowId");
    if let Some(var_1719) = &input.instance_event_window_id {
        scope_1718.string(var_1719);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_internet_gateway(
    input: &crate::input::DeleteInternetGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteInternetGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1720 = writer.prefix("DryRun");
    if let Some(var_1721) = &input.dry_run {
        scope_1720.boolean(*var_1721);
    }
    #[allow(unused_mut)]
    let mut scope_1722 = writer.prefix("InternetGatewayId");
    if let Some(var_1723) = &input.internet_gateway_id {
        scope_1722.string(var_1723);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_ipam(
    input: &crate::input::DeleteIpamInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteIpam", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1724 = writer.prefix("DryRun");
    if let Some(var_1725) = &input.dry_run {
        scope_1724.boolean(*var_1725);
    }
    #[allow(unused_mut)]
    let mut scope_1726 = writer.prefix("IpamId");
    if let Some(var_1727) = &input.ipam_id {
        scope_1726.string(var_1727);
    }
    #[allow(unused_mut)]
    let mut scope_1728 = writer.prefix("Cascade");
    if let Some(var_1729) = &input.cascade {
        scope_1728.boolean(*var_1729);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_ipam_pool(
    input: &crate::input::DeleteIpamPoolInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteIpamPool", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1730 = writer.prefix("DryRun");
    if let Some(var_1731) = &input.dry_run {
        scope_1730.boolean(*var_1731);
    }
    #[allow(unused_mut)]
    let mut scope_1732 = writer.prefix("IpamPoolId");
    if let Some(var_1733) = &input.ipam_pool_id {
        scope_1732.string(var_1733);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_ipam_scope(
    input: &crate::input::DeleteIpamScopeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteIpamScope", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1734 = writer.prefix("DryRun");
    if let Some(var_1735) = &input.dry_run {
        scope_1734.boolean(*var_1735);
    }
    #[allow(unused_mut)]
    let mut scope_1736 = writer.prefix("IpamScopeId");
    if let Some(var_1737) = &input.ipam_scope_id {
        scope_1736.string(var_1737);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_key_pair(
    input: &crate::input::DeleteKeyPairInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteKeyPair", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1738 = writer.prefix("KeyName");
    if let Some(var_1739) = &input.key_name {
        scope_1738.string(var_1739);
    }
    #[allow(unused_mut)]
    let mut scope_1740 = writer.prefix("KeyPairId");
    if let Some(var_1741) = &input.key_pair_id {
        scope_1740.string(var_1741);
    }
    #[allow(unused_mut)]
    let mut scope_1742 = writer.prefix("DryRun");
    if let Some(var_1743) = &input.dry_run {
        scope_1742.boolean(*var_1743);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_launch_template(
    input: &crate::input::DeleteLaunchTemplateInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteLaunchTemplate", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1744 = writer.prefix("DryRun");
    if let Some(var_1745) = &input.dry_run {
        scope_1744.boolean(*var_1745);
    }
    #[allow(unused_mut)]
    let mut scope_1746 = writer.prefix("LaunchTemplateId");
    if let Some(var_1747) = &input.launch_template_id {
        scope_1746.string(var_1747);
    }
    #[allow(unused_mut)]
    let mut scope_1748 = writer.prefix("LaunchTemplateName");
    if let Some(var_1749) = &input.launch_template_name {
        scope_1748.string(var_1749);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_launch_template_versions(
    input: &crate::input::DeleteLaunchTemplateVersionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteLaunchTemplateVersions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1750 = writer.prefix("DryRun");
    if let Some(var_1751) = &input.dry_run {
        scope_1750.boolean(*var_1751);
    }
    #[allow(unused_mut)]
    let mut scope_1752 = writer.prefix("LaunchTemplateId");
    if let Some(var_1753) = &input.launch_template_id {
        scope_1752.string(var_1753);
    }
    #[allow(unused_mut)]
    let mut scope_1754 = writer.prefix("LaunchTemplateName");
    if let Some(var_1755) = &input.launch_template_name {
        scope_1754.string(var_1755);
    }
    #[allow(unused_mut)]
    let mut scope_1756 = writer.prefix("LaunchTemplateVersion");
    if let Some(var_1757) = &input.versions {
        let mut list_1759 = scope_1756.start_list(true, Some("item"));
        for item_1758 in var_1757 {
            #[allow(unused_mut)]
            let mut entry_1760 = list_1759.entry();
            entry_1760.string(item_1758);
        }
        list_1759.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_local_gateway_route(
    input: &crate::input::DeleteLocalGatewayRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteLocalGatewayRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1761 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1762) = &input.destination_cidr_block {
        scope_1761.string(var_1762);
    }
    #[allow(unused_mut)]
    let mut scope_1763 = writer.prefix("LocalGatewayRouteTableId");
    if let Some(var_1764) = &input.local_gateway_route_table_id {
        scope_1763.string(var_1764);
    }
    #[allow(unused_mut)]
    let mut scope_1765 = writer.prefix("DryRun");
    if let Some(var_1766) = &input.dry_run {
        scope_1765.boolean(*var_1766);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_local_gateway_route_table_vpc_association(
    input: &crate::input::DeleteLocalGatewayRouteTableVpcAssociationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteLocalGatewayRouteTableVpcAssociation",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1767 = writer.prefix("LocalGatewayRouteTableVpcAssociationId");
    if let Some(var_1768) = &input.local_gateway_route_table_vpc_association_id {
        scope_1767.string(var_1768);
    }
    #[allow(unused_mut)]
    let mut scope_1769 = writer.prefix("DryRun");
    if let Some(var_1770) = &input.dry_run {
        scope_1769.boolean(*var_1770);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_managed_prefix_list(
    input: &crate::input::DeleteManagedPrefixListInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteManagedPrefixList", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1771 = writer.prefix("DryRun");
    if let Some(var_1772) = &input.dry_run {
        scope_1771.boolean(*var_1772);
    }
    #[allow(unused_mut)]
    let mut scope_1773 = writer.prefix("PrefixListId");
    if let Some(var_1774) = &input.prefix_list_id {
        scope_1773.string(var_1774);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_nat_gateway(
    input: &crate::input::DeleteNatGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteNatGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1775 = writer.prefix("DryRun");
    if let Some(var_1776) = &input.dry_run {
        scope_1775.boolean(*var_1776);
    }
    #[allow(unused_mut)]
    let mut scope_1777 = writer.prefix("NatGatewayId");
    if let Some(var_1778) = &input.nat_gateway_id {
        scope_1777.string(var_1778);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_acl(
    input: &crate::input::DeleteNetworkAclInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteNetworkAcl", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1779 = writer.prefix("DryRun");
    if let Some(var_1780) = &input.dry_run {
        scope_1779.boolean(*var_1780);
    }
    #[allow(unused_mut)]
    let mut scope_1781 = writer.prefix("NetworkAclId");
    if let Some(var_1782) = &input.network_acl_id {
        scope_1781.string(var_1782);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_acl_entry(
    input: &crate::input::DeleteNetworkAclEntryInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteNetworkAclEntry", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1783 = writer.prefix("DryRun");
    if let Some(var_1784) = &input.dry_run {
        scope_1783.boolean(*var_1784);
    }
    #[allow(unused_mut)]
    let mut scope_1785 = writer.prefix("Egress");
    if let Some(var_1786) = &input.egress {
        scope_1785.boolean(*var_1786);
    }
    #[allow(unused_mut)]
    let mut scope_1787 = writer.prefix("NetworkAclId");
    if let Some(var_1788) = &input.network_acl_id {
        scope_1787.string(var_1788);
    }
    #[allow(unused_mut)]
    let mut scope_1789 = writer.prefix("RuleNumber");
    if let Some(var_1790) = &input.rule_number {
        scope_1789.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1790).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_insights_access_scope(
    input: &crate::input::DeleteNetworkInsightsAccessScopeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteNetworkInsightsAccessScope",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1791 = writer.prefix("DryRun");
    if let Some(var_1792) = &input.dry_run {
        scope_1791.boolean(*var_1792);
    }
    #[allow(unused_mut)]
    let mut scope_1793 = writer.prefix("NetworkInsightsAccessScopeId");
    if let Some(var_1794) = &input.network_insights_access_scope_id {
        scope_1793.string(var_1794);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_insights_access_scope_analysis(
    input: &crate::input::DeleteNetworkInsightsAccessScopeAnalysisInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteNetworkInsightsAccessScopeAnalysis",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1795 = writer.prefix("NetworkInsightsAccessScopeAnalysisId");
    if let Some(var_1796) = &input.network_insights_access_scope_analysis_id {
        scope_1795.string(var_1796);
    }
    #[allow(unused_mut)]
    let mut scope_1797 = writer.prefix("DryRun");
    if let Some(var_1798) = &input.dry_run {
        scope_1797.boolean(*var_1798);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_insights_analysis(
    input: &crate::input::DeleteNetworkInsightsAnalysisInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteNetworkInsightsAnalysis", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1799 = writer.prefix("DryRun");
    if let Some(var_1800) = &input.dry_run {
        scope_1799.boolean(*var_1800);
    }
    #[allow(unused_mut)]
    let mut scope_1801 = writer.prefix("NetworkInsightsAnalysisId");
    if let Some(var_1802) = &input.network_insights_analysis_id {
        scope_1801.string(var_1802);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_insights_path(
    input: &crate::input::DeleteNetworkInsightsPathInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteNetworkInsightsPath", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1803 = writer.prefix("DryRun");
    if let Some(var_1804) = &input.dry_run {
        scope_1803.boolean(*var_1804);
    }
    #[allow(unused_mut)]
    let mut scope_1805 = writer.prefix("NetworkInsightsPathId");
    if let Some(var_1806) = &input.network_insights_path_id {
        scope_1805.string(var_1806);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_interface(
    input: &crate::input::DeleteNetworkInterfaceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteNetworkInterface", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1807 = writer.prefix("DryRun");
    if let Some(var_1808) = &input.dry_run {
        scope_1807.boolean(*var_1808);
    }
    #[allow(unused_mut)]
    let mut scope_1809 = writer.prefix("NetworkInterfaceId");
    if let Some(var_1810) = &input.network_interface_id {
        scope_1809.string(var_1810);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_network_interface_permission(
    input: &crate::input::DeleteNetworkInterfacePermissionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteNetworkInterfacePermission",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1811 = writer.prefix("NetworkInterfacePermissionId");
    if let Some(var_1812) = &input.network_interface_permission_id {
        scope_1811.string(var_1812);
    }
    #[allow(unused_mut)]
    let mut scope_1813 = writer.prefix("Force");
    if let Some(var_1814) = &input.force {
        scope_1813.boolean(*var_1814);
    }
    #[allow(unused_mut)]
    let mut scope_1815 = writer.prefix("DryRun");
    if let Some(var_1816) = &input.dry_run {
        scope_1815.boolean(*var_1816);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_placement_group(
    input: &crate::input::DeletePlacementGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeletePlacementGroup", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1817 = writer.prefix("DryRun");
    if let Some(var_1818) = &input.dry_run {
        scope_1817.boolean(*var_1818);
    }
    #[allow(unused_mut)]
    let mut scope_1819 = writer.prefix("GroupName");
    if let Some(var_1820) = &input.group_name {
        scope_1819.string(var_1820);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_public_ipv4_pool(
    input: &crate::input::DeletePublicIpv4PoolInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeletePublicIpv4Pool", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1821 = writer.prefix("DryRun");
    if let Some(var_1822) = &input.dry_run {
        scope_1821.boolean(*var_1822);
    }
    #[allow(unused_mut)]
    let mut scope_1823 = writer.prefix("PoolId");
    if let Some(var_1824) = &input.pool_id {
        scope_1823.string(var_1824);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_queued_reserved_instances(
    input: &crate::input::DeleteQueuedReservedInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteQueuedReservedInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1825 = writer.prefix("DryRun");
    if let Some(var_1826) = &input.dry_run {
        scope_1825.boolean(*var_1826);
    }
    #[allow(unused_mut)]
    let mut scope_1827 = writer.prefix("ReservedInstancesId");
    if let Some(var_1828) = &input.reserved_instances_ids {
        let mut list_1830 = scope_1827.start_list(true, Some("item"));
        for item_1829 in var_1828 {
            #[allow(unused_mut)]
            let mut entry_1831 = list_1830.entry();
            entry_1831.string(item_1829);
        }
        list_1830.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_route(
    input: &crate::input::DeleteRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1832 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1833) = &input.destination_cidr_block {
        scope_1832.string(var_1833);
    }
    #[allow(unused_mut)]
    let mut scope_1834 = writer.prefix("DestinationIpv6CidrBlock");
    if let Some(var_1835) = &input.destination_ipv6_cidr_block {
        scope_1834.string(var_1835);
    }
    #[allow(unused_mut)]
    let mut scope_1836 = writer.prefix("DestinationPrefixListId");
    if let Some(var_1837) = &input.destination_prefix_list_id {
        scope_1836.string(var_1837);
    }
    #[allow(unused_mut)]
    let mut scope_1838 = writer.prefix("DryRun");
    if let Some(var_1839) = &input.dry_run {
        scope_1838.boolean(*var_1839);
    }
    #[allow(unused_mut)]
    let mut scope_1840 = writer.prefix("RouteTableId");
    if let Some(var_1841) = &input.route_table_id {
        scope_1840.string(var_1841);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_route_table(
    input: &crate::input::DeleteRouteTableInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteRouteTable", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1842 = writer.prefix("DryRun");
    if let Some(var_1843) = &input.dry_run {
        scope_1842.boolean(*var_1843);
    }
    #[allow(unused_mut)]
    let mut scope_1844 = writer.prefix("RouteTableId");
    if let Some(var_1845) = &input.route_table_id {
        scope_1844.string(var_1845);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_security_group(
    input: &crate::input::DeleteSecurityGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteSecurityGroup", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1846 = writer.prefix("GroupId");
    if let Some(var_1847) = &input.group_id {
        scope_1846.string(var_1847);
    }
    #[allow(unused_mut)]
    let mut scope_1848 = writer.prefix("GroupName");
    if let Some(var_1849) = &input.group_name {
        scope_1848.string(var_1849);
    }
    #[allow(unused_mut)]
    let mut scope_1850 = writer.prefix("DryRun");
    if let Some(var_1851) = &input.dry_run {
        scope_1850.boolean(*var_1851);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_snapshot(
    input: &crate::input::DeleteSnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteSnapshot", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1852 = writer.prefix("SnapshotId");
    if let Some(var_1853) = &input.snapshot_id {
        scope_1852.string(var_1853);
    }
    #[allow(unused_mut)]
    let mut scope_1854 = writer.prefix("DryRun");
    if let Some(var_1855) = &input.dry_run {
        scope_1854.boolean(*var_1855);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_spot_datafeed_subscription(
    input: &crate::input::DeleteSpotDatafeedSubscriptionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteSpotDatafeedSubscription",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1856 = writer.prefix("DryRun");
    if let Some(var_1857) = &input.dry_run {
        scope_1856.boolean(*var_1857);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_subnet(
    input: &crate::input::DeleteSubnetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteSubnet", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1858 = writer.prefix("SubnetId");
    if let Some(var_1859) = &input.subnet_id {
        scope_1858.string(var_1859);
    }
    #[allow(unused_mut)]
    let mut scope_1860 = writer.prefix("DryRun");
    if let Some(var_1861) = &input.dry_run {
        scope_1860.boolean(*var_1861);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_subnet_cidr_reservation(
    input: &crate::input::DeleteSubnetCidrReservationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteSubnetCidrReservation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1862 = writer.prefix("SubnetCidrReservationId");
    if let Some(var_1863) = &input.subnet_cidr_reservation_id {
        scope_1862.string(var_1863);
    }
    #[allow(unused_mut)]
    let mut scope_1864 = writer.prefix("DryRun");
    if let Some(var_1865) = &input.dry_run {
        scope_1864.boolean(*var_1865);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_tags(
    input: &crate::input::DeleteTagsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteTags", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1866 = writer.prefix("DryRun");
    if let Some(var_1867) = &input.dry_run {
        scope_1866.boolean(*var_1867);
    }
    #[allow(unused_mut)]
    let mut scope_1868 = writer.prefix("ResourceId");
    if let Some(var_1869) = &input.resources {
        let mut list_1871 = scope_1868.start_list(true, None);
        for item_1870 in var_1869 {
            #[allow(unused_mut)]
            let mut entry_1872 = list_1871.entry();
            entry_1872.string(item_1870);
        }
        list_1871.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1873 = writer.prefix("Tag");
    if let Some(var_1874) = &input.tags {
        let mut list_1876 = scope_1873.start_list(true, Some("item"));
        for item_1875 in var_1874 {
            #[allow(unused_mut)]
            let mut entry_1877 = list_1876.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_1877, item_1875)?;
        }
        list_1876.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_traffic_mirror_filter(
    input: &crate::input::DeleteTrafficMirrorFilterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteTrafficMirrorFilter", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1878 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_1879) = &input.traffic_mirror_filter_id {
        scope_1878.string(var_1879);
    }
    #[allow(unused_mut)]
    let mut scope_1880 = writer.prefix("DryRun");
    if let Some(var_1881) = &input.dry_run {
        scope_1880.boolean(*var_1881);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_traffic_mirror_filter_rule(
    input: &crate::input::DeleteTrafficMirrorFilterRuleInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteTrafficMirrorFilterRule", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1882 = writer.prefix("TrafficMirrorFilterRuleId");
    if let Some(var_1883) = &input.traffic_mirror_filter_rule_id {
        scope_1882.string(var_1883);
    }
    #[allow(unused_mut)]
    let mut scope_1884 = writer.prefix("DryRun");
    if let Some(var_1885) = &input.dry_run {
        scope_1884.boolean(*var_1885);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_traffic_mirror_session(
    input: &crate::input::DeleteTrafficMirrorSessionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteTrafficMirrorSession", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1886 = writer.prefix("TrafficMirrorSessionId");
    if let Some(var_1887) = &input.traffic_mirror_session_id {
        scope_1886.string(var_1887);
    }
    #[allow(unused_mut)]
    let mut scope_1888 = writer.prefix("DryRun");
    if let Some(var_1889) = &input.dry_run {
        scope_1888.boolean(*var_1889);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_traffic_mirror_target(
    input: &crate::input::DeleteTrafficMirrorTargetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteTrafficMirrorTarget", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1890 = writer.prefix("TrafficMirrorTargetId");
    if let Some(var_1891) = &input.traffic_mirror_target_id {
        scope_1890.string(var_1891);
    }
    #[allow(unused_mut)]
    let mut scope_1892 = writer.prefix("DryRun");
    if let Some(var_1893) = &input.dry_run {
        scope_1892.boolean(*var_1893);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway(
    input: &crate::input::DeleteTransitGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteTransitGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1894 = writer.prefix("TransitGatewayId");
    if let Some(var_1895) = &input.transit_gateway_id {
        scope_1894.string(var_1895);
    }
    #[allow(unused_mut)]
    let mut scope_1896 = writer.prefix("DryRun");
    if let Some(var_1897) = &input.dry_run {
        scope_1896.boolean(*var_1897);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_connect(
    input: &crate::input::DeleteTransitGatewayConnectInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteTransitGatewayConnect", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1898 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_1899) = &input.transit_gateway_attachment_id {
        scope_1898.string(var_1899);
    }
    #[allow(unused_mut)]
    let mut scope_1900 = writer.prefix("DryRun");
    if let Some(var_1901) = &input.dry_run {
        scope_1900.boolean(*var_1901);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_connect_peer(
    input: &crate::input::DeleteTransitGatewayConnectPeerInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteTransitGatewayConnectPeer",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1902 = writer.prefix("TransitGatewayConnectPeerId");
    if let Some(var_1903) = &input.transit_gateway_connect_peer_id {
        scope_1902.string(var_1903);
    }
    #[allow(unused_mut)]
    let mut scope_1904 = writer.prefix("DryRun");
    if let Some(var_1905) = &input.dry_run {
        scope_1904.boolean(*var_1905);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_multicast_domain(
    input: &crate::input::DeleteTransitGatewayMulticastDomainInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteTransitGatewayMulticastDomain",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1906 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_1907) = &input.transit_gateway_multicast_domain_id {
        scope_1906.string(var_1907);
    }
    #[allow(unused_mut)]
    let mut scope_1908 = writer.prefix("DryRun");
    if let Some(var_1909) = &input.dry_run {
        scope_1908.boolean(*var_1909);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_peering_attachment(
    input: &crate::input::DeleteTransitGatewayPeeringAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteTransitGatewayPeeringAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1910 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_1911) = &input.transit_gateway_attachment_id {
        scope_1910.string(var_1911);
    }
    #[allow(unused_mut)]
    let mut scope_1912 = writer.prefix("DryRun");
    if let Some(var_1913) = &input.dry_run {
        scope_1912.boolean(*var_1913);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_prefix_list_reference(
    input: &crate::input::DeleteTransitGatewayPrefixListReferenceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteTransitGatewayPrefixListReference",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1914 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_1915) = &input.transit_gateway_route_table_id {
        scope_1914.string(var_1915);
    }
    #[allow(unused_mut)]
    let mut scope_1916 = writer.prefix("PrefixListId");
    if let Some(var_1917) = &input.prefix_list_id {
        scope_1916.string(var_1917);
    }
    #[allow(unused_mut)]
    let mut scope_1918 = writer.prefix("DryRun");
    if let Some(var_1919) = &input.dry_run {
        scope_1918.boolean(*var_1919);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_route(
    input: &crate::input::DeleteTransitGatewayRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteTransitGatewayRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1920 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_1921) = &input.transit_gateway_route_table_id {
        scope_1920.string(var_1921);
    }
    #[allow(unused_mut)]
    let mut scope_1922 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1923) = &input.destination_cidr_block {
        scope_1922.string(var_1923);
    }
    #[allow(unused_mut)]
    let mut scope_1924 = writer.prefix("DryRun");
    if let Some(var_1925) = &input.dry_run {
        scope_1924.boolean(*var_1925);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_route_table(
    input: &crate::input::DeleteTransitGatewayRouteTableInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteTransitGatewayRouteTable",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1926 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_1927) = &input.transit_gateway_route_table_id {
        scope_1926.string(var_1927);
    }
    #[allow(unused_mut)]
    let mut scope_1928 = writer.prefix("DryRun");
    if let Some(var_1929) = &input.dry_run {
        scope_1928.boolean(*var_1929);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_transit_gateway_vpc_attachment(
    input: &crate::input::DeleteTransitGatewayVpcAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteTransitGatewayVpcAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1930 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_1931) = &input.transit_gateway_attachment_id {
        scope_1930.string(var_1931);
    }
    #[allow(unused_mut)]
    let mut scope_1932 = writer.prefix("DryRun");
    if let Some(var_1933) = &input.dry_run {
        scope_1932.boolean(*var_1933);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_volume(
    input: &crate::input::DeleteVolumeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteVolume", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1934 = writer.prefix("VolumeId");
    if let Some(var_1935) = &input.volume_id {
        scope_1934.string(var_1935);
    }
    #[allow(unused_mut)]
    let mut scope_1936 = writer.prefix("DryRun");
    if let Some(var_1937) = &input.dry_run {
        scope_1936.boolean(*var_1937);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpc(
    input: &crate::input::DeleteVpcInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteVpc", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1938 = writer.prefix("VpcId");
    if let Some(var_1939) = &input.vpc_id {
        scope_1938.string(var_1939);
    }
    #[allow(unused_mut)]
    let mut scope_1940 = writer.prefix("DryRun");
    if let Some(var_1941) = &input.dry_run {
        scope_1940.boolean(*var_1941);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpc_endpoint_connection_notifications(
    input: &crate::input::DeleteVpcEndpointConnectionNotificationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteVpcEndpointConnectionNotifications",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1942 = writer.prefix("DryRun");
    if let Some(var_1943) = &input.dry_run {
        scope_1942.boolean(*var_1943);
    }
    #[allow(unused_mut)]
    let mut scope_1944 = writer.prefix("ConnectionNotificationId");
    if let Some(var_1945) = &input.connection_notification_ids {
        let mut list_1947 = scope_1944.start_list(true, Some("item"));
        for item_1946 in var_1945 {
            #[allow(unused_mut)]
            let mut entry_1948 = list_1947.entry();
            entry_1948.string(item_1946);
        }
        list_1947.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpc_endpoints(
    input: &crate::input::DeleteVpcEndpointsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteVpcEndpoints", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1949 = writer.prefix("DryRun");
    if let Some(var_1950) = &input.dry_run {
        scope_1949.boolean(*var_1950);
    }
    #[allow(unused_mut)]
    let mut scope_1951 = writer.prefix("VpcEndpointId");
    if let Some(var_1952) = &input.vpc_endpoint_ids {
        let mut list_1954 = scope_1951.start_list(true, Some("item"));
        for item_1953 in var_1952 {
            #[allow(unused_mut)]
            let mut entry_1955 = list_1954.entry();
            entry_1955.string(item_1953);
        }
        list_1954.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpc_endpoint_service_configurations(
    input: &crate::input::DeleteVpcEndpointServiceConfigurationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteVpcEndpointServiceConfigurations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1956 = writer.prefix("DryRun");
    if let Some(var_1957) = &input.dry_run {
        scope_1956.boolean(*var_1957);
    }
    #[allow(unused_mut)]
    let mut scope_1958 = writer.prefix("ServiceId");
    if let Some(var_1959) = &input.service_ids {
        let mut list_1961 = scope_1958.start_list(true, Some("item"));
        for item_1960 in var_1959 {
            #[allow(unused_mut)]
            let mut entry_1962 = list_1961.entry();
            entry_1962.string(item_1960);
        }
        list_1961.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpc_peering_connection(
    input: &crate::input::DeleteVpcPeeringConnectionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteVpcPeeringConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1963 = writer.prefix("DryRun");
    if let Some(var_1964) = &input.dry_run {
        scope_1963.boolean(*var_1964);
    }
    #[allow(unused_mut)]
    let mut scope_1965 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_1966) = &input.vpc_peering_connection_id {
        scope_1965.string(var_1966);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpn_connection(
    input: &crate::input::DeleteVpnConnectionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteVpnConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1967 = writer.prefix("VpnConnectionId");
    if let Some(var_1968) = &input.vpn_connection_id {
        scope_1967.string(var_1968);
    }
    #[allow(unused_mut)]
    let mut scope_1969 = writer.prefix("DryRun");
    if let Some(var_1970) = &input.dry_run {
        scope_1969.boolean(*var_1970);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpn_connection_route(
    input: &crate::input::DeleteVpnConnectionRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteVpnConnectionRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1971 = writer.prefix("DestinationCidrBlock");
    if let Some(var_1972) = &input.destination_cidr_block {
        scope_1971.string(var_1972);
    }
    #[allow(unused_mut)]
    let mut scope_1973 = writer.prefix("VpnConnectionId");
    if let Some(var_1974) = &input.vpn_connection_id {
        scope_1973.string(var_1974);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_vpn_gateway(
    input: &crate::input::DeleteVpnGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteVpnGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1975 = writer.prefix("VpnGatewayId");
    if let Some(var_1976) = &input.vpn_gateway_id {
        scope_1975.string(var_1976);
    }
    #[allow(unused_mut)]
    let mut scope_1977 = writer.prefix("DryRun");
    if let Some(var_1978) = &input.dry_run {
        scope_1977.boolean(*var_1978);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deprovision_byoip_cidr(
    input: &crate::input::DeprovisionByoipCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeprovisionByoipCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1979 = writer.prefix("Cidr");
    if let Some(var_1980) = &input.cidr {
        scope_1979.string(var_1980);
    }
    #[allow(unused_mut)]
    let mut scope_1981 = writer.prefix("DryRun");
    if let Some(var_1982) = &input.dry_run {
        scope_1981.boolean(*var_1982);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deprovision_ipam_pool_cidr(
    input: &crate::input::DeprovisionIpamPoolCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeprovisionIpamPoolCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1983 = writer.prefix("DryRun");
    if let Some(var_1984) = &input.dry_run {
        scope_1983.boolean(*var_1984);
    }
    #[allow(unused_mut)]
    let mut scope_1985 = writer.prefix("IpamPoolId");
    if let Some(var_1986) = &input.ipam_pool_id {
        scope_1985.string(var_1986);
    }
    #[allow(unused_mut)]
    let mut scope_1987 = writer.prefix("Cidr");
    if let Some(var_1988) = &input.cidr {
        scope_1987.string(var_1988);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deprovision_public_ipv4_pool_cidr(
    input: &crate::input::DeprovisionPublicIpv4PoolCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeprovisionPublicIpv4PoolCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1989 = writer.prefix("DryRun");
    if let Some(var_1990) = &input.dry_run {
        scope_1989.boolean(*var_1990);
    }
    #[allow(unused_mut)]
    let mut scope_1991 = writer.prefix("PoolId");
    if let Some(var_1992) = &input.pool_id {
        scope_1991.string(var_1992);
    }
    #[allow(unused_mut)]
    let mut scope_1993 = writer.prefix("Cidr");
    if let Some(var_1994) = &input.cidr {
        scope_1993.string(var_1994);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deregister_image(
    input: &crate::input::DeregisterImageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeregisterImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_1995 = writer.prefix("ImageId");
    if let Some(var_1996) = &input.image_id {
        scope_1995.string(var_1996);
    }
    #[allow(unused_mut)]
    let mut scope_1997 = writer.prefix("DryRun");
    if let Some(var_1998) = &input.dry_run {
        scope_1997.boolean(*var_1998);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deregister_instance_event_notification_attributes(
    input: &crate::input::DeregisterInstanceEventNotificationAttributesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeregisterInstanceEventNotificationAttributes",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_1999 = writer.prefix("DryRun");
    if let Some(var_2000) = &input.dry_run {
        scope_1999.boolean(*var_2000);
    }
    #[allow(unused_mut)]
    let mut scope_2001 = writer.prefix("InstanceTagAttribute");
    if let Some(var_2002) = &input.instance_tag_attribute {
        crate::query_ser::serialize_structure_crate_model_deregister_instance_tag_attribute_request(scope_2001, var_2002)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deregister_transit_gateway_multicast_group_members(
    input: &crate::input::DeregisterTransitGatewayMulticastGroupMembersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeregisterTransitGatewayMulticastGroupMembers",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2003 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_2004) = &input.transit_gateway_multicast_domain_id {
        scope_2003.string(var_2004);
    }
    #[allow(unused_mut)]
    let mut scope_2005 = writer.prefix("GroupIpAddress");
    if let Some(var_2006) = &input.group_ip_address {
        scope_2005.string(var_2006);
    }
    #[allow(unused_mut)]
    let mut scope_2007 = writer.prefix("NetworkInterfaceIds");
    if let Some(var_2008) = &input.network_interface_ids {
        let mut list_2010 = scope_2007.start_list(true, Some("item"));
        for item_2009 in var_2008 {
            #[allow(unused_mut)]
            let mut entry_2011 = list_2010.entry();
            entry_2011.string(item_2009);
        }
        list_2010.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2012 = writer.prefix("DryRun");
    if let Some(var_2013) = &input.dry_run {
        scope_2012.boolean(*var_2013);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deregister_transit_gateway_multicast_group_sources(
    input: &crate::input::DeregisterTransitGatewayMulticastGroupSourcesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeregisterTransitGatewayMulticastGroupSources",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2014 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_2015) = &input.transit_gateway_multicast_domain_id {
        scope_2014.string(var_2015);
    }
    #[allow(unused_mut)]
    let mut scope_2016 = writer.prefix("GroupIpAddress");
    if let Some(var_2017) = &input.group_ip_address {
        scope_2016.string(var_2017);
    }
    #[allow(unused_mut)]
    let mut scope_2018 = writer.prefix("NetworkInterfaceIds");
    if let Some(var_2019) = &input.network_interface_ids {
        let mut list_2021 = scope_2018.start_list(true, Some("item"));
        for item_2020 in var_2019 {
            #[allow(unused_mut)]
            let mut entry_2022 = list_2021.entry();
            entry_2022.string(item_2020);
        }
        list_2021.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2023 = writer.prefix("DryRun");
    if let Some(var_2024) = &input.dry_run {
        scope_2023.boolean(*var_2024);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_account_attributes(
    input: &crate::input::DescribeAccountAttributesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeAccountAttributes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2025 = writer.prefix("AttributeName");
    if let Some(var_2026) = &input.attribute_names {
        let mut list_2028 = scope_2025.start_list(true, Some("attributeName"));
        for item_2027 in var_2026 {
            #[allow(unused_mut)]
            let mut entry_2029 = list_2028.entry();
            entry_2029.string(item_2027.as_str());
        }
        list_2028.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2030 = writer.prefix("DryRun");
    if let Some(var_2031) = &input.dry_run {
        scope_2030.boolean(*var_2031);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_addresses(
    input: &crate::input::DescribeAddressesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeAddresses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2032 = writer.prefix("Filter");
    if let Some(var_2033) = &input.filters {
        let mut list_2035 = scope_2032.start_list(true, Some("Filter"));
        for item_2034 in var_2033 {
            #[allow(unused_mut)]
            let mut entry_2036 = list_2035.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2036, item_2034)?;
        }
        list_2035.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2037 = writer.prefix("PublicIp");
    if let Some(var_2038) = &input.public_ips {
        let mut list_2040 = scope_2037.start_list(true, Some("PublicIp"));
        for item_2039 in var_2038 {
            #[allow(unused_mut)]
            let mut entry_2041 = list_2040.entry();
            entry_2041.string(item_2039);
        }
        list_2040.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2042 = writer.prefix("AllocationId");
    if let Some(var_2043) = &input.allocation_ids {
        let mut list_2045 = scope_2042.start_list(true, Some("AllocationId"));
        for item_2044 in var_2043 {
            #[allow(unused_mut)]
            let mut entry_2046 = list_2045.entry();
            entry_2046.string(item_2044);
        }
        list_2045.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2047 = writer.prefix("DryRun");
    if let Some(var_2048) = &input.dry_run {
        scope_2047.boolean(*var_2048);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_addresses_attribute(
    input: &crate::input::DescribeAddressesAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeAddressesAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2049 = writer.prefix("AllocationId");
    if let Some(var_2050) = &input.allocation_ids {
        let mut list_2052 = scope_2049.start_list(true, Some("item"));
        for item_2051 in var_2050 {
            #[allow(unused_mut)]
            let mut entry_2053 = list_2052.entry();
            entry_2053.string(item_2051);
        }
        list_2052.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2054 = writer.prefix("Attribute");
    if let Some(var_2055) = &input.attribute {
        scope_2054.string(var_2055.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2056 = writer.prefix("NextToken");
    if let Some(var_2057) = &input.next_token {
        scope_2056.string(var_2057);
    }
    #[allow(unused_mut)]
    let mut scope_2058 = writer.prefix("MaxResults");
    if let Some(var_2059) = &input.max_results {
        scope_2058.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2059).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2060 = writer.prefix("DryRun");
    if let Some(var_2061) = &input.dry_run {
        scope_2060.boolean(*var_2061);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_aggregate_id_format(
    input: &crate::input::DescribeAggregateIdFormatInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeAggregateIdFormat", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2062 = writer.prefix("DryRun");
    if let Some(var_2063) = &input.dry_run {
        scope_2062.boolean(*var_2063);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_availability_zones(
    input: &crate::input::DescribeAvailabilityZonesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeAvailabilityZones", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2064 = writer.prefix("Filter");
    if let Some(var_2065) = &input.filters {
        let mut list_2067 = scope_2064.start_list(true, Some("Filter"));
        for item_2066 in var_2065 {
            #[allow(unused_mut)]
            let mut entry_2068 = list_2067.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2068, item_2066)?;
        }
        list_2067.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2069 = writer.prefix("ZoneName");
    if let Some(var_2070) = &input.zone_names {
        let mut list_2072 = scope_2069.start_list(true, Some("ZoneName"));
        for item_2071 in var_2070 {
            #[allow(unused_mut)]
            let mut entry_2073 = list_2072.entry();
            entry_2073.string(item_2071);
        }
        list_2072.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2074 = writer.prefix("ZoneId");
    if let Some(var_2075) = &input.zone_ids {
        let mut list_2077 = scope_2074.start_list(true, Some("ZoneId"));
        for item_2076 in var_2075 {
            #[allow(unused_mut)]
            let mut entry_2078 = list_2077.entry();
            entry_2078.string(item_2076);
        }
        list_2077.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2079 = writer.prefix("AllAvailabilityZones");
    if let Some(var_2080) = &input.all_availability_zones {
        scope_2079.boolean(*var_2080);
    }
    #[allow(unused_mut)]
    let mut scope_2081 = writer.prefix("DryRun");
    if let Some(var_2082) = &input.dry_run {
        scope_2081.boolean(*var_2082);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_bundle_tasks(
    input: &crate::input::DescribeBundleTasksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeBundleTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2083 = writer.prefix("BundleId");
    if let Some(var_2084) = &input.bundle_ids {
        let mut list_2086 = scope_2083.start_list(true, Some("BundleId"));
        for item_2085 in var_2084 {
            #[allow(unused_mut)]
            let mut entry_2087 = list_2086.entry();
            entry_2087.string(item_2085);
        }
        list_2086.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2088 = writer.prefix("Filter");
    if let Some(var_2089) = &input.filters {
        let mut list_2091 = scope_2088.start_list(true, Some("Filter"));
        for item_2090 in var_2089 {
            #[allow(unused_mut)]
            let mut entry_2092 = list_2091.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2092, item_2090)?;
        }
        list_2091.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2093 = writer.prefix("DryRun");
    if let Some(var_2094) = &input.dry_run {
        scope_2093.boolean(*var_2094);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_byoip_cidrs(
    input: &crate::input::DescribeByoipCidrsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeByoipCidrs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2095 = writer.prefix("DryRun");
    if let Some(var_2096) = &input.dry_run {
        scope_2095.boolean(*var_2096);
    }
    #[allow(unused_mut)]
    let mut scope_2097 = writer.prefix("MaxResults");
    if let Some(var_2098) = &input.max_results {
        scope_2097.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2098).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2099 = writer.prefix("NextToken");
    if let Some(var_2100) = &input.next_token {
        scope_2099.string(var_2100);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_capacity_reservation_fleets(
    input: &crate::input::DescribeCapacityReservationFleetsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeCapacityReservationFleets",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2101 = writer.prefix("CapacityReservationFleetId");
    if let Some(var_2102) = &input.capacity_reservation_fleet_ids {
        let mut list_2104 = scope_2101.start_list(true, Some("item"));
        for item_2103 in var_2102 {
            #[allow(unused_mut)]
            let mut entry_2105 = list_2104.entry();
            entry_2105.string(item_2103);
        }
        list_2104.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2106 = writer.prefix("NextToken");
    if let Some(var_2107) = &input.next_token {
        scope_2106.string(var_2107);
    }
    #[allow(unused_mut)]
    let mut scope_2108 = writer.prefix("MaxResults");
    if let Some(var_2109) = &input.max_results {
        scope_2108.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2109).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2110 = writer.prefix("Filter");
    if let Some(var_2111) = &input.filters {
        let mut list_2113 = scope_2110.start_list(true, Some("Filter"));
        for item_2112 in var_2111 {
            #[allow(unused_mut)]
            let mut entry_2114 = list_2113.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2114, item_2112)?;
        }
        list_2113.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2115 = writer.prefix("DryRun");
    if let Some(var_2116) = &input.dry_run {
        scope_2115.boolean(*var_2116);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_capacity_reservations(
    input: &crate::input::DescribeCapacityReservationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeCapacityReservations", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2117 = writer.prefix("CapacityReservationId");
    if let Some(var_2118) = &input.capacity_reservation_ids {
        let mut list_2120 = scope_2117.start_list(true, Some("item"));
        for item_2119 in var_2118 {
            #[allow(unused_mut)]
            let mut entry_2121 = list_2120.entry();
            entry_2121.string(item_2119);
        }
        list_2120.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2122 = writer.prefix("NextToken");
    if let Some(var_2123) = &input.next_token {
        scope_2122.string(var_2123);
    }
    #[allow(unused_mut)]
    let mut scope_2124 = writer.prefix("MaxResults");
    if let Some(var_2125) = &input.max_results {
        scope_2124.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2125).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2126 = writer.prefix("Filter");
    if let Some(var_2127) = &input.filters {
        let mut list_2129 = scope_2126.start_list(true, Some("Filter"));
        for item_2128 in var_2127 {
            #[allow(unused_mut)]
            let mut entry_2130 = list_2129.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2130, item_2128)?;
        }
        list_2129.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2131 = writer.prefix("DryRun");
    if let Some(var_2132) = &input.dry_run {
        scope_2131.boolean(*var_2132);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_carrier_gateways(
    input: &crate::input::DescribeCarrierGatewaysInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeCarrierGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2133 = writer.prefix("CarrierGatewayId");
    if let Some(var_2134) = &input.carrier_gateway_ids {
        let mut list_2136 = scope_2133.start_list(true, None);
        for item_2135 in var_2134 {
            #[allow(unused_mut)]
            let mut entry_2137 = list_2136.entry();
            entry_2137.string(item_2135);
        }
        list_2136.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2138 = writer.prefix("Filter");
    if let Some(var_2139) = &input.filters {
        let mut list_2141 = scope_2138.start_list(true, Some("Filter"));
        for item_2140 in var_2139 {
            #[allow(unused_mut)]
            let mut entry_2142 = list_2141.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2142, item_2140)?;
        }
        list_2141.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2143 = writer.prefix("MaxResults");
    if let Some(var_2144) = &input.max_results {
        scope_2143.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2144).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2145 = writer.prefix("NextToken");
    if let Some(var_2146) = &input.next_token {
        scope_2145.string(var_2146);
    }
    #[allow(unused_mut)]
    let mut scope_2147 = writer.prefix("DryRun");
    if let Some(var_2148) = &input.dry_run {
        scope_2147.boolean(*var_2148);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_classic_link_instances(
    input: &crate::input::DescribeClassicLinkInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeClassicLinkInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2149 = writer.prefix("Filter");
    if let Some(var_2150) = &input.filters {
        let mut list_2152 = scope_2149.start_list(true, Some("Filter"));
        for item_2151 in var_2150 {
            #[allow(unused_mut)]
            let mut entry_2153 = list_2152.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2153, item_2151)?;
        }
        list_2152.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2154 = writer.prefix("DryRun");
    if let Some(var_2155) = &input.dry_run {
        scope_2154.boolean(*var_2155);
    }
    #[allow(unused_mut)]
    let mut scope_2156 = writer.prefix("InstanceId");
    if let Some(var_2157) = &input.instance_ids {
        let mut list_2159 = scope_2156.start_list(true, Some("InstanceId"));
        for item_2158 in var_2157 {
            #[allow(unused_mut)]
            let mut entry_2160 = list_2159.entry();
            entry_2160.string(item_2158);
        }
        list_2159.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2161 = writer.prefix("MaxResults");
    if let Some(var_2162) = &input.max_results {
        scope_2161.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2162).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2163 = writer.prefix("NextToken");
    if let Some(var_2164) = &input.next_token {
        scope_2163.string(var_2164);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_client_vpn_authorization_rules(
    input: &crate::input::DescribeClientVpnAuthorizationRulesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeClientVpnAuthorizationRules",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2165 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_2166) = &input.client_vpn_endpoint_id {
        scope_2165.string(var_2166);
    }
    #[allow(unused_mut)]
    let mut scope_2167 = writer.prefix("DryRun");
    if let Some(var_2168) = &input.dry_run {
        scope_2167.boolean(*var_2168);
    }
    #[allow(unused_mut)]
    let mut scope_2169 = writer.prefix("NextToken");
    if let Some(var_2170) = &input.next_token {
        scope_2169.string(var_2170);
    }
    #[allow(unused_mut)]
    let mut scope_2171 = writer.prefix("Filter");
    if let Some(var_2172) = &input.filters {
        let mut list_2174 = scope_2171.start_list(true, Some("Filter"));
        for item_2173 in var_2172 {
            #[allow(unused_mut)]
            let mut entry_2175 = list_2174.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2175, item_2173)?;
        }
        list_2174.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2176 = writer.prefix("MaxResults");
    if let Some(var_2177) = &input.max_results {
        scope_2176.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2177).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_client_vpn_connections(
    input: &crate::input::DescribeClientVpnConnectionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeClientVpnConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2178 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_2179) = &input.client_vpn_endpoint_id {
        scope_2178.string(var_2179);
    }
    #[allow(unused_mut)]
    let mut scope_2180 = writer.prefix("Filter");
    if let Some(var_2181) = &input.filters {
        let mut list_2183 = scope_2180.start_list(true, Some("Filter"));
        for item_2182 in var_2181 {
            #[allow(unused_mut)]
            let mut entry_2184 = list_2183.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2184, item_2182)?;
        }
        list_2183.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2185 = writer.prefix("NextToken");
    if let Some(var_2186) = &input.next_token {
        scope_2185.string(var_2186);
    }
    #[allow(unused_mut)]
    let mut scope_2187 = writer.prefix("MaxResults");
    if let Some(var_2188) = &input.max_results {
        scope_2187.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2188).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2189 = writer.prefix("DryRun");
    if let Some(var_2190) = &input.dry_run {
        scope_2189.boolean(*var_2190);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_client_vpn_endpoints(
    input: &crate::input::DescribeClientVpnEndpointsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeClientVpnEndpoints", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2191 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_2192) = &input.client_vpn_endpoint_ids {
        let mut list_2194 = scope_2191.start_list(true, Some("item"));
        for item_2193 in var_2192 {
            #[allow(unused_mut)]
            let mut entry_2195 = list_2194.entry();
            entry_2195.string(item_2193);
        }
        list_2194.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2196 = writer.prefix("MaxResults");
    if let Some(var_2197) = &input.max_results {
        scope_2196.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2197).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2198 = writer.prefix("NextToken");
    if let Some(var_2199) = &input.next_token {
        scope_2198.string(var_2199);
    }
    #[allow(unused_mut)]
    let mut scope_2200 = writer.prefix("Filter");
    if let Some(var_2201) = &input.filters {
        let mut list_2203 = scope_2200.start_list(true, Some("Filter"));
        for item_2202 in var_2201 {
            #[allow(unused_mut)]
            let mut entry_2204 = list_2203.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2204, item_2202)?;
        }
        list_2203.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2205 = writer.prefix("DryRun");
    if let Some(var_2206) = &input.dry_run {
        scope_2205.boolean(*var_2206);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_client_vpn_routes(
    input: &crate::input::DescribeClientVpnRoutesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeClientVpnRoutes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2207 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_2208) = &input.client_vpn_endpoint_id {
        scope_2207.string(var_2208);
    }
    #[allow(unused_mut)]
    let mut scope_2209 = writer.prefix("Filter");
    if let Some(var_2210) = &input.filters {
        let mut list_2212 = scope_2209.start_list(true, Some("Filter"));
        for item_2211 in var_2210 {
            #[allow(unused_mut)]
            let mut entry_2213 = list_2212.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2213, item_2211)?;
        }
        list_2212.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2214 = writer.prefix("MaxResults");
    if let Some(var_2215) = &input.max_results {
        scope_2214.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2215).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2216 = writer.prefix("NextToken");
    if let Some(var_2217) = &input.next_token {
        scope_2216.string(var_2217);
    }
    #[allow(unused_mut)]
    let mut scope_2218 = writer.prefix("DryRun");
    if let Some(var_2219) = &input.dry_run {
        scope_2218.boolean(*var_2219);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_client_vpn_target_networks(
    input: &crate::input::DescribeClientVpnTargetNetworksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeClientVpnTargetNetworks",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2220 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_2221) = &input.client_vpn_endpoint_id {
        scope_2220.string(var_2221);
    }
    #[allow(unused_mut)]
    let mut scope_2222 = writer.prefix("AssociationIds");
    if let Some(var_2223) = &input.association_ids {
        let mut list_2225 = scope_2222.start_list(true, Some("item"));
        for item_2224 in var_2223 {
            #[allow(unused_mut)]
            let mut entry_2226 = list_2225.entry();
            entry_2226.string(item_2224);
        }
        list_2225.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2227 = writer.prefix("MaxResults");
    if let Some(var_2228) = &input.max_results {
        scope_2227.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2228).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2229 = writer.prefix("NextToken");
    if let Some(var_2230) = &input.next_token {
        scope_2229.string(var_2230);
    }
    #[allow(unused_mut)]
    let mut scope_2231 = writer.prefix("Filter");
    if let Some(var_2232) = &input.filters {
        let mut list_2234 = scope_2231.start_list(true, Some("Filter"));
        for item_2233 in var_2232 {
            #[allow(unused_mut)]
            let mut entry_2235 = list_2234.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2235, item_2233)?;
        }
        list_2234.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2236 = writer.prefix("DryRun");
    if let Some(var_2237) = &input.dry_run {
        scope_2236.boolean(*var_2237);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_coip_pools(
    input: &crate::input::DescribeCoipPoolsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeCoipPools", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2238 = writer.prefix("PoolId");
    if let Some(var_2239) = &input.pool_ids {
        let mut list_2241 = scope_2238.start_list(true, Some("item"));
        for item_2240 in var_2239 {
            #[allow(unused_mut)]
            let mut entry_2242 = list_2241.entry();
            entry_2242.string(item_2240);
        }
        list_2241.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2243 = writer.prefix("Filter");
    if let Some(var_2244) = &input.filters {
        let mut list_2246 = scope_2243.start_list(true, Some("Filter"));
        for item_2245 in var_2244 {
            #[allow(unused_mut)]
            let mut entry_2247 = list_2246.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2247, item_2245)?;
        }
        list_2246.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2248 = writer.prefix("MaxResults");
    if let Some(var_2249) = &input.max_results {
        scope_2248.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2249).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2250 = writer.prefix("NextToken");
    if let Some(var_2251) = &input.next_token {
        scope_2250.string(var_2251);
    }
    #[allow(unused_mut)]
    let mut scope_2252 = writer.prefix("DryRun");
    if let Some(var_2253) = &input.dry_run {
        scope_2252.boolean(*var_2253);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_conversion_tasks(
    input: &crate::input::DescribeConversionTasksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeConversionTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2254 = writer.prefix("ConversionTaskId");
    if let Some(var_2255) = &input.conversion_task_ids {
        let mut list_2257 = scope_2254.start_list(true, Some("item"));
        for item_2256 in var_2255 {
            #[allow(unused_mut)]
            let mut entry_2258 = list_2257.entry();
            entry_2258.string(item_2256);
        }
        list_2257.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2259 = writer.prefix("DryRun");
    if let Some(var_2260) = &input.dry_run {
        scope_2259.boolean(*var_2260);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_customer_gateways(
    input: &crate::input::DescribeCustomerGatewaysInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeCustomerGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2261 = writer.prefix("CustomerGatewayId");
    if let Some(var_2262) = &input.customer_gateway_ids {
        let mut list_2264 = scope_2261.start_list(true, Some("CustomerGatewayId"));
        for item_2263 in var_2262 {
            #[allow(unused_mut)]
            let mut entry_2265 = list_2264.entry();
            entry_2265.string(item_2263);
        }
        list_2264.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2266 = writer.prefix("Filter");
    if let Some(var_2267) = &input.filters {
        let mut list_2269 = scope_2266.start_list(true, Some("Filter"));
        for item_2268 in var_2267 {
            #[allow(unused_mut)]
            let mut entry_2270 = list_2269.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2270, item_2268)?;
        }
        list_2269.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2271 = writer.prefix("DryRun");
    if let Some(var_2272) = &input.dry_run {
        scope_2271.boolean(*var_2272);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_dhcp_options(
    input: &crate::input::DescribeDhcpOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeDhcpOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2273 = writer.prefix("DhcpOptionsId");
    if let Some(var_2274) = &input.dhcp_options_ids {
        let mut list_2276 = scope_2273.start_list(true, Some("DhcpOptionsId"));
        for item_2275 in var_2274 {
            #[allow(unused_mut)]
            let mut entry_2277 = list_2276.entry();
            entry_2277.string(item_2275);
        }
        list_2276.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2278 = writer.prefix("Filter");
    if let Some(var_2279) = &input.filters {
        let mut list_2281 = scope_2278.start_list(true, Some("Filter"));
        for item_2280 in var_2279 {
            #[allow(unused_mut)]
            let mut entry_2282 = list_2281.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2282, item_2280)?;
        }
        list_2281.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2283 = writer.prefix("DryRun");
    if let Some(var_2284) = &input.dry_run {
        scope_2283.boolean(*var_2284);
    }
    #[allow(unused_mut)]
    let mut scope_2285 = writer.prefix("NextToken");
    if let Some(var_2286) = &input.next_token {
        scope_2285.string(var_2286);
    }
    #[allow(unused_mut)]
    let mut scope_2287 = writer.prefix("MaxResults");
    if let Some(var_2288) = &input.max_results {
        scope_2287.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2288).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_egress_only_internet_gateways(
    input: &crate::input::DescribeEgressOnlyInternetGatewaysInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeEgressOnlyInternetGateways",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2289 = writer.prefix("DryRun");
    if let Some(var_2290) = &input.dry_run {
        scope_2289.boolean(*var_2290);
    }
    #[allow(unused_mut)]
    let mut scope_2291 = writer.prefix("EgressOnlyInternetGatewayId");
    if let Some(var_2292) = &input.egress_only_internet_gateway_ids {
        let mut list_2294 = scope_2291.start_list(true, Some("item"));
        for item_2293 in var_2292 {
            #[allow(unused_mut)]
            let mut entry_2295 = list_2294.entry();
            entry_2295.string(item_2293);
        }
        list_2294.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2296 = writer.prefix("MaxResults");
    if let Some(var_2297) = &input.max_results {
        scope_2296.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2297).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2298 = writer.prefix("NextToken");
    if let Some(var_2299) = &input.next_token {
        scope_2298.string(var_2299);
    }
    #[allow(unused_mut)]
    let mut scope_2300 = writer.prefix("Filter");
    if let Some(var_2301) = &input.filters {
        let mut list_2303 = scope_2300.start_list(true, Some("Filter"));
        for item_2302 in var_2301 {
            #[allow(unused_mut)]
            let mut entry_2304 = list_2303.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2304, item_2302)?;
        }
        list_2303.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_elastic_gpus(
    input: &crate::input::DescribeElasticGpusInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeElasticGpus", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2305 = writer.prefix("ElasticGpuId");
    if let Some(var_2306) = &input.elastic_gpu_ids {
        let mut list_2308 = scope_2305.start_list(true, Some("item"));
        for item_2307 in var_2306 {
            #[allow(unused_mut)]
            let mut entry_2309 = list_2308.entry();
            entry_2309.string(item_2307);
        }
        list_2308.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2310 = writer.prefix("DryRun");
    if let Some(var_2311) = &input.dry_run {
        scope_2310.boolean(*var_2311);
    }
    #[allow(unused_mut)]
    let mut scope_2312 = writer.prefix("Filter");
    if let Some(var_2313) = &input.filters {
        let mut list_2315 = scope_2312.start_list(true, Some("Filter"));
        for item_2314 in var_2313 {
            #[allow(unused_mut)]
            let mut entry_2316 = list_2315.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2316, item_2314)?;
        }
        list_2315.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2317 = writer.prefix("MaxResults");
    if let Some(var_2318) = &input.max_results {
        scope_2317.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2318).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2319 = writer.prefix("NextToken");
    if let Some(var_2320) = &input.next_token {
        scope_2319.string(var_2320);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_export_image_tasks(
    input: &crate::input::DescribeExportImageTasksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeExportImageTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2321 = writer.prefix("DryRun");
    if let Some(var_2322) = &input.dry_run {
        scope_2321.boolean(*var_2322);
    }
    #[allow(unused_mut)]
    let mut scope_2323 = writer.prefix("Filter");
    if let Some(var_2324) = &input.filters {
        let mut list_2326 = scope_2323.start_list(true, Some("Filter"));
        for item_2325 in var_2324 {
            #[allow(unused_mut)]
            let mut entry_2327 = list_2326.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2327, item_2325)?;
        }
        list_2326.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2328 = writer.prefix("ExportImageTaskId");
    if let Some(var_2329) = &input.export_image_task_ids {
        let mut list_2331 = scope_2328.start_list(true, Some("ExportImageTaskId"));
        for item_2330 in var_2329 {
            #[allow(unused_mut)]
            let mut entry_2332 = list_2331.entry();
            entry_2332.string(item_2330);
        }
        list_2331.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2333 = writer.prefix("MaxResults");
    if let Some(var_2334) = &input.max_results {
        scope_2333.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2334).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2335 = writer.prefix("NextToken");
    if let Some(var_2336) = &input.next_token {
        scope_2335.string(var_2336);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_export_tasks(
    input: &crate::input::DescribeExportTasksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeExportTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2337 = writer.prefix("ExportTaskId");
    if let Some(var_2338) = &input.export_task_ids {
        let mut list_2340 = scope_2337.start_list(true, Some("ExportTaskId"));
        for item_2339 in var_2338 {
            #[allow(unused_mut)]
            let mut entry_2341 = list_2340.entry();
            entry_2341.string(item_2339);
        }
        list_2340.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2342 = writer.prefix("Filter");
    if let Some(var_2343) = &input.filters {
        let mut list_2345 = scope_2342.start_list(true, Some("Filter"));
        for item_2344 in var_2343 {
            #[allow(unused_mut)]
            let mut entry_2346 = list_2345.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2346, item_2344)?;
        }
        list_2345.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fast_launch_images(
    input: &crate::input::DescribeFastLaunchImagesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeFastLaunchImages", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2347 = writer.prefix("ImageId");
    if let Some(var_2348) = &input.image_ids {
        let mut list_2350 = scope_2347.start_list(true, Some("ImageId"));
        for item_2349 in var_2348 {
            #[allow(unused_mut)]
            let mut entry_2351 = list_2350.entry();
            entry_2351.string(item_2349);
        }
        list_2350.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2352 = writer.prefix("Filter");
    if let Some(var_2353) = &input.filters {
        let mut list_2355 = scope_2352.start_list(true, Some("Filter"));
        for item_2354 in var_2353 {
            #[allow(unused_mut)]
            let mut entry_2356 = list_2355.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2356, item_2354)?;
        }
        list_2355.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2357 = writer.prefix("MaxResults");
    if let Some(var_2358) = &input.max_results {
        scope_2357.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2358).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2359 = writer.prefix("NextToken");
    if let Some(var_2360) = &input.next_token {
        scope_2359.string(var_2360);
    }
    #[allow(unused_mut)]
    let mut scope_2361 = writer.prefix("DryRun");
    if let Some(var_2362) = &input.dry_run {
        scope_2361.boolean(*var_2362);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fast_snapshot_restores(
    input: &crate::input::DescribeFastSnapshotRestoresInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeFastSnapshotRestores", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2363 = writer.prefix("Filter");
    if let Some(var_2364) = &input.filters {
        let mut list_2366 = scope_2363.start_list(true, Some("Filter"));
        for item_2365 in var_2364 {
            #[allow(unused_mut)]
            let mut entry_2367 = list_2366.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2367, item_2365)?;
        }
        list_2366.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2368 = writer.prefix("MaxResults");
    if let Some(var_2369) = &input.max_results {
        scope_2368.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2369).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2370 = writer.prefix("NextToken");
    if let Some(var_2371) = &input.next_token {
        scope_2370.string(var_2371);
    }
    #[allow(unused_mut)]
    let mut scope_2372 = writer.prefix("DryRun");
    if let Some(var_2373) = &input.dry_run {
        scope_2372.boolean(*var_2373);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fleet_history(
    input: &crate::input::DescribeFleetHistoryInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeFleetHistory", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2374 = writer.prefix("DryRun");
    if let Some(var_2375) = &input.dry_run {
        scope_2374.boolean(*var_2375);
    }
    #[allow(unused_mut)]
    let mut scope_2376 = writer.prefix("EventType");
    if let Some(var_2377) = &input.event_type {
        scope_2376.string(var_2377.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2378 = writer.prefix("MaxResults");
    if let Some(var_2379) = &input.max_results {
        scope_2378.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2379).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2380 = writer.prefix("NextToken");
    if let Some(var_2381) = &input.next_token {
        scope_2380.string(var_2381);
    }
    #[allow(unused_mut)]
    let mut scope_2382 = writer.prefix("FleetId");
    if let Some(var_2383) = &input.fleet_id {
        scope_2382.string(var_2383);
    }
    #[allow(unused_mut)]
    let mut scope_2384 = writer.prefix("StartTime");
    if let Some(var_2385) = &input.start_time {
        scope_2384.date_time(var_2385, aws_smithy_types::date_time::Format::DateTime)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fleet_instances(
    input: &crate::input::DescribeFleetInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeFleetInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2386 = writer.prefix("DryRun");
    if let Some(var_2387) = &input.dry_run {
        scope_2386.boolean(*var_2387);
    }
    #[allow(unused_mut)]
    let mut scope_2388 = writer.prefix("MaxResults");
    if let Some(var_2389) = &input.max_results {
        scope_2388.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2389).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2390 = writer.prefix("NextToken");
    if let Some(var_2391) = &input.next_token {
        scope_2390.string(var_2391);
    }
    #[allow(unused_mut)]
    let mut scope_2392 = writer.prefix("FleetId");
    if let Some(var_2393) = &input.fleet_id {
        scope_2392.string(var_2393);
    }
    #[allow(unused_mut)]
    let mut scope_2394 = writer.prefix("Filter");
    if let Some(var_2395) = &input.filters {
        let mut list_2397 = scope_2394.start_list(true, Some("Filter"));
        for item_2396 in var_2395 {
            #[allow(unused_mut)]
            let mut entry_2398 = list_2397.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2398, item_2396)?;
        }
        list_2397.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fleets(
    input: &crate::input::DescribeFleetsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeFleets", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2399 = writer.prefix("DryRun");
    if let Some(var_2400) = &input.dry_run {
        scope_2399.boolean(*var_2400);
    }
    #[allow(unused_mut)]
    let mut scope_2401 = writer.prefix("MaxResults");
    if let Some(var_2402) = &input.max_results {
        scope_2401.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2402).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2403 = writer.prefix("NextToken");
    if let Some(var_2404) = &input.next_token {
        scope_2403.string(var_2404);
    }
    #[allow(unused_mut)]
    let mut scope_2405 = writer.prefix("FleetId");
    if let Some(var_2406) = &input.fleet_ids {
        let mut list_2408 = scope_2405.start_list(true, None);
        for item_2407 in var_2406 {
            #[allow(unused_mut)]
            let mut entry_2409 = list_2408.entry();
            entry_2409.string(item_2407);
        }
        list_2408.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2410 = writer.prefix("Filter");
    if let Some(var_2411) = &input.filters {
        let mut list_2413 = scope_2410.start_list(true, Some("Filter"));
        for item_2412 in var_2411 {
            #[allow(unused_mut)]
            let mut entry_2414 = list_2413.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2414, item_2412)?;
        }
        list_2413.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_flow_logs(
    input: &crate::input::DescribeFlowLogsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeFlowLogs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2415 = writer.prefix("DryRun");
    if let Some(var_2416) = &input.dry_run {
        scope_2415.boolean(*var_2416);
    }
    #[allow(unused_mut)]
    let mut scope_2417 = writer.prefix("Filter");
    if let Some(var_2418) = &input.filter {
        let mut list_2420 = scope_2417.start_list(true, Some("Filter"));
        for item_2419 in var_2418 {
            #[allow(unused_mut)]
            let mut entry_2421 = list_2420.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2421, item_2419)?;
        }
        list_2420.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2422 = writer.prefix("FlowLogId");
    if let Some(var_2423) = &input.flow_log_ids {
        let mut list_2425 = scope_2422.start_list(true, Some("item"));
        for item_2424 in var_2423 {
            #[allow(unused_mut)]
            let mut entry_2426 = list_2425.entry();
            entry_2426.string(item_2424);
        }
        list_2425.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2427 = writer.prefix("MaxResults");
    if let Some(var_2428) = &input.max_results {
        scope_2427.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2428).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2429 = writer.prefix("NextToken");
    if let Some(var_2430) = &input.next_token {
        scope_2429.string(var_2430);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fpga_image_attribute(
    input: &crate::input::DescribeFpgaImageAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeFpgaImageAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2431 = writer.prefix("DryRun");
    if let Some(var_2432) = &input.dry_run {
        scope_2431.boolean(*var_2432);
    }
    #[allow(unused_mut)]
    let mut scope_2433 = writer.prefix("FpgaImageId");
    if let Some(var_2434) = &input.fpga_image_id {
        scope_2433.string(var_2434);
    }
    #[allow(unused_mut)]
    let mut scope_2435 = writer.prefix("Attribute");
    if let Some(var_2436) = &input.attribute {
        scope_2435.string(var_2436.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_fpga_images(
    input: &crate::input::DescribeFpgaImagesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeFpgaImages", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2437 = writer.prefix("DryRun");
    if let Some(var_2438) = &input.dry_run {
        scope_2437.boolean(*var_2438);
    }
    #[allow(unused_mut)]
    let mut scope_2439 = writer.prefix("FpgaImageId");
    if let Some(var_2440) = &input.fpga_image_ids {
        let mut list_2442 = scope_2439.start_list(true, Some("item"));
        for item_2441 in var_2440 {
            #[allow(unused_mut)]
            let mut entry_2443 = list_2442.entry();
            entry_2443.string(item_2441);
        }
        list_2442.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2444 = writer.prefix("Owner");
    if let Some(var_2445) = &input.owners {
        let mut list_2447 = scope_2444.start_list(true, Some("Owner"));
        for item_2446 in var_2445 {
            #[allow(unused_mut)]
            let mut entry_2448 = list_2447.entry();
            entry_2448.string(item_2446);
        }
        list_2447.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2449 = writer.prefix("Filter");
    if let Some(var_2450) = &input.filters {
        let mut list_2452 = scope_2449.start_list(true, Some("Filter"));
        for item_2451 in var_2450 {
            #[allow(unused_mut)]
            let mut entry_2453 = list_2452.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2453, item_2451)?;
        }
        list_2452.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2454 = writer.prefix("NextToken");
    if let Some(var_2455) = &input.next_token {
        scope_2454.string(var_2455);
    }
    #[allow(unused_mut)]
    let mut scope_2456 = writer.prefix("MaxResults");
    if let Some(var_2457) = &input.max_results {
        scope_2456.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2457).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_host_reservation_offerings(
    input: &crate::input::DescribeHostReservationOfferingsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeHostReservationOfferings",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2458 = writer.prefix("Filter");
    if let Some(var_2459) = &input.filter {
        let mut list_2461 = scope_2458.start_list(true, Some("Filter"));
        for item_2460 in var_2459 {
            #[allow(unused_mut)]
            let mut entry_2462 = list_2461.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2462, item_2460)?;
        }
        list_2461.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2463 = writer.prefix("MaxDuration");
    if let Some(var_2464) = &input.max_duration {
        scope_2463.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2464).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2465 = writer.prefix("MaxResults");
    if let Some(var_2466) = &input.max_results {
        scope_2465.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2466).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2467 = writer.prefix("MinDuration");
    if let Some(var_2468) = &input.min_duration {
        scope_2467.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2468).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2469 = writer.prefix("NextToken");
    if let Some(var_2470) = &input.next_token {
        scope_2469.string(var_2470);
    }
    #[allow(unused_mut)]
    let mut scope_2471 = writer.prefix("OfferingId");
    if let Some(var_2472) = &input.offering_id {
        scope_2471.string(var_2472);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_host_reservations(
    input: &crate::input::DescribeHostReservationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeHostReservations", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2473 = writer.prefix("Filter");
    if let Some(var_2474) = &input.filter {
        let mut list_2476 = scope_2473.start_list(true, Some("Filter"));
        for item_2475 in var_2474 {
            #[allow(unused_mut)]
            let mut entry_2477 = list_2476.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2477, item_2475)?;
        }
        list_2476.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2478 = writer.prefix("HostReservationIdSet");
    if let Some(var_2479) = &input.host_reservation_id_set {
        let mut list_2481 = scope_2478.start_list(true, Some("item"));
        for item_2480 in var_2479 {
            #[allow(unused_mut)]
            let mut entry_2482 = list_2481.entry();
            entry_2482.string(item_2480);
        }
        list_2481.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2483 = writer.prefix("MaxResults");
    if let Some(var_2484) = &input.max_results {
        scope_2483.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2484).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2485 = writer.prefix("NextToken");
    if let Some(var_2486) = &input.next_token {
        scope_2485.string(var_2486);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_hosts(
    input: &crate::input::DescribeHostsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeHosts", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2487 = writer.prefix("Filter");
    if let Some(var_2488) = &input.filter {
        let mut list_2490 = scope_2487.start_list(true, Some("Filter"));
        for item_2489 in var_2488 {
            #[allow(unused_mut)]
            let mut entry_2491 = list_2490.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2491, item_2489)?;
        }
        list_2490.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2492 = writer.prefix("HostId");
    if let Some(var_2493) = &input.host_ids {
        let mut list_2495 = scope_2492.start_list(true, Some("item"));
        for item_2494 in var_2493 {
            #[allow(unused_mut)]
            let mut entry_2496 = list_2495.entry();
            entry_2496.string(item_2494);
        }
        list_2495.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2497 = writer.prefix("MaxResults");
    if let Some(var_2498) = &input.max_results {
        scope_2497.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2498).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2499 = writer.prefix("NextToken");
    if let Some(var_2500) = &input.next_token {
        scope_2499.string(var_2500);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_iam_instance_profile_associations(
    input: &crate::input::DescribeIamInstanceProfileAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeIamInstanceProfileAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2501 = writer.prefix("AssociationId");
    if let Some(var_2502) = &input.association_ids {
        let mut list_2504 = scope_2501.start_list(true, Some("AssociationId"));
        for item_2503 in var_2502 {
            #[allow(unused_mut)]
            let mut entry_2505 = list_2504.entry();
            entry_2505.string(item_2503);
        }
        list_2504.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2506 = writer.prefix("Filter");
    if let Some(var_2507) = &input.filters {
        let mut list_2509 = scope_2506.start_list(true, Some("Filter"));
        for item_2508 in var_2507 {
            #[allow(unused_mut)]
            let mut entry_2510 = list_2509.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2510, item_2508)?;
        }
        list_2509.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2511 = writer.prefix("MaxResults");
    if let Some(var_2512) = &input.max_results {
        scope_2511.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2512).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2513 = writer.prefix("NextToken");
    if let Some(var_2514) = &input.next_token {
        scope_2513.string(var_2514);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_identity_id_format(
    input: &crate::input::DescribeIdentityIdFormatInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeIdentityIdFormat", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2515 = writer.prefix("PrincipalArn");
    if let Some(var_2516) = &input.principal_arn {
        scope_2515.string(var_2516);
    }
    #[allow(unused_mut)]
    let mut scope_2517 = writer.prefix("Resource");
    if let Some(var_2518) = &input.resource {
        scope_2517.string(var_2518);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_id_format(
    input: &crate::input::DescribeIdFormatInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeIdFormat", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2519 = writer.prefix("Resource");
    if let Some(var_2520) = &input.resource {
        scope_2519.string(var_2520);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_image_attribute(
    input: &crate::input::DescribeImageAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeImageAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2521 = writer.prefix("Attribute");
    if let Some(var_2522) = &input.attribute {
        scope_2521.string(var_2522.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2523 = writer.prefix("ImageId");
    if let Some(var_2524) = &input.image_id {
        scope_2523.string(var_2524);
    }
    #[allow(unused_mut)]
    let mut scope_2525 = writer.prefix("DryRun");
    if let Some(var_2526) = &input.dry_run {
        scope_2525.boolean(*var_2526);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_images(
    input: &crate::input::DescribeImagesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeImages", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2527 = writer.prefix("ExecutableBy");
    if let Some(var_2528) = &input.executable_users {
        let mut list_2530 = scope_2527.start_list(true, Some("ExecutableBy"));
        for item_2529 in var_2528 {
            #[allow(unused_mut)]
            let mut entry_2531 = list_2530.entry();
            entry_2531.string(item_2529);
        }
        list_2530.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2532 = writer.prefix("Filter");
    if let Some(var_2533) = &input.filters {
        let mut list_2535 = scope_2532.start_list(true, Some("Filter"));
        for item_2534 in var_2533 {
            #[allow(unused_mut)]
            let mut entry_2536 = list_2535.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2536, item_2534)?;
        }
        list_2535.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2537 = writer.prefix("ImageId");
    if let Some(var_2538) = &input.image_ids {
        let mut list_2540 = scope_2537.start_list(true, Some("ImageId"));
        for item_2539 in var_2538 {
            #[allow(unused_mut)]
            let mut entry_2541 = list_2540.entry();
            entry_2541.string(item_2539);
        }
        list_2540.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2542 = writer.prefix("Owner");
    if let Some(var_2543) = &input.owners {
        let mut list_2545 = scope_2542.start_list(true, Some("Owner"));
        for item_2544 in var_2543 {
            #[allow(unused_mut)]
            let mut entry_2546 = list_2545.entry();
            entry_2546.string(item_2544);
        }
        list_2545.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2547 = writer.prefix("IncludeDeprecated");
    if let Some(var_2548) = &input.include_deprecated {
        scope_2547.boolean(*var_2548);
    }
    #[allow(unused_mut)]
    let mut scope_2549 = writer.prefix("DryRun");
    if let Some(var_2550) = &input.dry_run {
        scope_2549.boolean(*var_2550);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_import_image_tasks(
    input: &crate::input::DescribeImportImageTasksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeImportImageTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2551 = writer.prefix("DryRun");
    if let Some(var_2552) = &input.dry_run {
        scope_2551.boolean(*var_2552);
    }
    #[allow(unused_mut)]
    let mut scope_2553 = writer.prefix("Filters");
    if let Some(var_2554) = &input.filters {
        let mut list_2556 = scope_2553.start_list(true, Some("Filter"));
        for item_2555 in var_2554 {
            #[allow(unused_mut)]
            let mut entry_2557 = list_2556.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2557, item_2555)?;
        }
        list_2556.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2558 = writer.prefix("ImportTaskId");
    if let Some(var_2559) = &input.import_task_ids {
        let mut list_2561 = scope_2558.start_list(true, Some("ImportTaskId"));
        for item_2560 in var_2559 {
            #[allow(unused_mut)]
            let mut entry_2562 = list_2561.entry();
            entry_2562.string(item_2560);
        }
        list_2561.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2563 = writer.prefix("MaxResults");
    if let Some(var_2564) = &input.max_results {
        scope_2563.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2564).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2565 = writer.prefix("NextToken");
    if let Some(var_2566) = &input.next_token {
        scope_2565.string(var_2566);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_import_snapshot_tasks(
    input: &crate::input::DescribeImportSnapshotTasksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeImportSnapshotTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2567 = writer.prefix("DryRun");
    if let Some(var_2568) = &input.dry_run {
        scope_2567.boolean(*var_2568);
    }
    #[allow(unused_mut)]
    let mut scope_2569 = writer.prefix("Filters");
    if let Some(var_2570) = &input.filters {
        let mut list_2572 = scope_2569.start_list(true, Some("Filter"));
        for item_2571 in var_2570 {
            #[allow(unused_mut)]
            let mut entry_2573 = list_2572.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2573, item_2571)?;
        }
        list_2572.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2574 = writer.prefix("ImportTaskId");
    if let Some(var_2575) = &input.import_task_ids {
        let mut list_2577 = scope_2574.start_list(true, Some("ImportTaskId"));
        for item_2576 in var_2575 {
            #[allow(unused_mut)]
            let mut entry_2578 = list_2577.entry();
            entry_2578.string(item_2576);
        }
        list_2577.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2579 = writer.prefix("MaxResults");
    if let Some(var_2580) = &input.max_results {
        scope_2579.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2580).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2581 = writer.prefix("NextToken");
    if let Some(var_2582) = &input.next_token {
        scope_2581.string(var_2582);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_attribute(
    input: &crate::input::DescribeInstanceAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeInstanceAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2583 = writer.prefix("Attribute");
    if let Some(var_2584) = &input.attribute {
        scope_2583.string(var_2584.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2585 = writer.prefix("DryRun");
    if let Some(var_2586) = &input.dry_run {
        scope_2585.boolean(*var_2586);
    }
    #[allow(unused_mut)]
    let mut scope_2587 = writer.prefix("InstanceId");
    if let Some(var_2588) = &input.instance_id {
        scope_2587.string(var_2588);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_credit_specifications(
    input: &crate::input::DescribeInstanceCreditSpecificationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeInstanceCreditSpecifications",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2589 = writer.prefix("DryRun");
    if let Some(var_2590) = &input.dry_run {
        scope_2589.boolean(*var_2590);
    }
    #[allow(unused_mut)]
    let mut scope_2591 = writer.prefix("Filter");
    if let Some(var_2592) = &input.filters {
        let mut list_2594 = scope_2591.start_list(true, Some("Filter"));
        for item_2593 in var_2592 {
            #[allow(unused_mut)]
            let mut entry_2595 = list_2594.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2595, item_2593)?;
        }
        list_2594.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2596 = writer.prefix("InstanceId");
    if let Some(var_2597) = &input.instance_ids {
        let mut list_2599 = scope_2596.start_list(true, Some("InstanceId"));
        for item_2598 in var_2597 {
            #[allow(unused_mut)]
            let mut entry_2600 = list_2599.entry();
            entry_2600.string(item_2598);
        }
        list_2599.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2601 = writer.prefix("MaxResults");
    if let Some(var_2602) = &input.max_results {
        scope_2601.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2602).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2603 = writer.prefix("NextToken");
    if let Some(var_2604) = &input.next_token {
        scope_2603.string(var_2604);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_event_notification_attributes(
    input: &crate::input::DescribeInstanceEventNotificationAttributesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeInstanceEventNotificationAttributes",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2605 = writer.prefix("DryRun");
    if let Some(var_2606) = &input.dry_run {
        scope_2605.boolean(*var_2606);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_event_windows(
    input: &crate::input::DescribeInstanceEventWindowsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeInstanceEventWindows", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2607 = writer.prefix("DryRun");
    if let Some(var_2608) = &input.dry_run {
        scope_2607.boolean(*var_2608);
    }
    #[allow(unused_mut)]
    let mut scope_2609 = writer.prefix("InstanceEventWindowId");
    if let Some(var_2610) = &input.instance_event_window_ids {
        let mut list_2612 = scope_2609.start_list(true, Some("InstanceEventWindowId"));
        for item_2611 in var_2610 {
            #[allow(unused_mut)]
            let mut entry_2613 = list_2612.entry();
            entry_2613.string(item_2611);
        }
        list_2612.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2614 = writer.prefix("Filter");
    if let Some(var_2615) = &input.filters {
        let mut list_2617 = scope_2614.start_list(true, Some("Filter"));
        for item_2616 in var_2615 {
            #[allow(unused_mut)]
            let mut entry_2618 = list_2617.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2618, item_2616)?;
        }
        list_2617.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2619 = writer.prefix("MaxResults");
    if let Some(var_2620) = &input.max_results {
        scope_2619.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2620).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2621 = writer.prefix("NextToken");
    if let Some(var_2622) = &input.next_token {
        scope_2621.string(var_2622);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instances(
    input: &crate::input::DescribeInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2623 = writer.prefix("Filter");
    if let Some(var_2624) = &input.filters {
        let mut list_2626 = scope_2623.start_list(true, Some("Filter"));
        for item_2625 in var_2624 {
            #[allow(unused_mut)]
            let mut entry_2627 = list_2626.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2627, item_2625)?;
        }
        list_2626.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2628 = writer.prefix("InstanceId");
    if let Some(var_2629) = &input.instance_ids {
        let mut list_2631 = scope_2628.start_list(true, Some("InstanceId"));
        for item_2630 in var_2629 {
            #[allow(unused_mut)]
            let mut entry_2632 = list_2631.entry();
            entry_2632.string(item_2630);
        }
        list_2631.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2633 = writer.prefix("DryRun");
    if let Some(var_2634) = &input.dry_run {
        scope_2633.boolean(*var_2634);
    }
    #[allow(unused_mut)]
    let mut scope_2635 = writer.prefix("MaxResults");
    if let Some(var_2636) = &input.max_results {
        scope_2635.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2636).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2637 = writer.prefix("NextToken");
    if let Some(var_2638) = &input.next_token {
        scope_2637.string(var_2638);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_status(
    input: &crate::input::DescribeInstanceStatusInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeInstanceStatus", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2639 = writer.prefix("Filter");
    if let Some(var_2640) = &input.filters {
        let mut list_2642 = scope_2639.start_list(true, Some("Filter"));
        for item_2641 in var_2640 {
            #[allow(unused_mut)]
            let mut entry_2643 = list_2642.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2643, item_2641)?;
        }
        list_2642.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2644 = writer.prefix("InstanceId");
    if let Some(var_2645) = &input.instance_ids {
        let mut list_2647 = scope_2644.start_list(true, Some("InstanceId"));
        for item_2646 in var_2645 {
            #[allow(unused_mut)]
            let mut entry_2648 = list_2647.entry();
            entry_2648.string(item_2646);
        }
        list_2647.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2649 = writer.prefix("MaxResults");
    if let Some(var_2650) = &input.max_results {
        scope_2649.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2650).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2651 = writer.prefix("NextToken");
    if let Some(var_2652) = &input.next_token {
        scope_2651.string(var_2652);
    }
    #[allow(unused_mut)]
    let mut scope_2653 = writer.prefix("DryRun");
    if let Some(var_2654) = &input.dry_run {
        scope_2653.boolean(*var_2654);
    }
    #[allow(unused_mut)]
    let mut scope_2655 = writer.prefix("IncludeAllInstances");
    if let Some(var_2656) = &input.include_all_instances {
        scope_2655.boolean(*var_2656);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_type_offerings(
    input: &crate::input::DescribeInstanceTypeOfferingsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeInstanceTypeOfferings", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2657 = writer.prefix("DryRun");
    if let Some(var_2658) = &input.dry_run {
        scope_2657.boolean(*var_2658);
    }
    #[allow(unused_mut)]
    let mut scope_2659 = writer.prefix("LocationType");
    if let Some(var_2660) = &input.location_type {
        scope_2659.string(var_2660.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2661 = writer.prefix("Filter");
    if let Some(var_2662) = &input.filters {
        let mut list_2664 = scope_2661.start_list(true, Some("Filter"));
        for item_2663 in var_2662 {
            #[allow(unused_mut)]
            let mut entry_2665 = list_2664.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2665, item_2663)?;
        }
        list_2664.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2666 = writer.prefix("MaxResults");
    if let Some(var_2667) = &input.max_results {
        scope_2666.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2667).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2668 = writer.prefix("NextToken");
    if let Some(var_2669) = &input.next_token {
        scope_2668.string(var_2669);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_types(
    input: &crate::input::DescribeInstanceTypesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeInstanceTypes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2670 = writer.prefix("DryRun");
    if let Some(var_2671) = &input.dry_run {
        scope_2670.boolean(*var_2671);
    }
    #[allow(unused_mut)]
    let mut scope_2672 = writer.prefix("InstanceType");
    if let Some(var_2673) = &input.instance_types {
        let mut list_2675 = scope_2672.start_list(true, None);
        for item_2674 in var_2673 {
            #[allow(unused_mut)]
            let mut entry_2676 = list_2675.entry();
            entry_2676.string(item_2674.as_str());
        }
        list_2675.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2677 = writer.prefix("Filter");
    if let Some(var_2678) = &input.filters {
        let mut list_2680 = scope_2677.start_list(true, Some("Filter"));
        for item_2679 in var_2678 {
            #[allow(unused_mut)]
            let mut entry_2681 = list_2680.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2681, item_2679)?;
        }
        list_2680.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2682 = writer.prefix("MaxResults");
    if let Some(var_2683) = &input.max_results {
        scope_2682.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2683).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2684 = writer.prefix("NextToken");
    if let Some(var_2685) = &input.next_token {
        scope_2684.string(var_2685);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_internet_gateways(
    input: &crate::input::DescribeInternetGatewaysInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeInternetGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2686 = writer.prefix("Filter");
    if let Some(var_2687) = &input.filters {
        let mut list_2689 = scope_2686.start_list(true, Some("Filter"));
        for item_2688 in var_2687 {
            #[allow(unused_mut)]
            let mut entry_2690 = list_2689.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2690, item_2688)?;
        }
        list_2689.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2691 = writer.prefix("DryRun");
    if let Some(var_2692) = &input.dry_run {
        scope_2691.boolean(*var_2692);
    }
    #[allow(unused_mut)]
    let mut scope_2693 = writer.prefix("InternetGatewayId");
    if let Some(var_2694) = &input.internet_gateway_ids {
        let mut list_2696 = scope_2693.start_list(true, Some("item"));
        for item_2695 in var_2694 {
            #[allow(unused_mut)]
            let mut entry_2697 = list_2696.entry();
            entry_2697.string(item_2695);
        }
        list_2696.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2698 = writer.prefix("NextToken");
    if let Some(var_2699) = &input.next_token {
        scope_2698.string(var_2699);
    }
    #[allow(unused_mut)]
    let mut scope_2700 = writer.prefix("MaxResults");
    if let Some(var_2701) = &input.max_results {
        scope_2700.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2701).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_ipam_pools(
    input: &crate::input::DescribeIpamPoolsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeIpamPools", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2702 = writer.prefix("DryRun");
    if let Some(var_2703) = &input.dry_run {
        scope_2702.boolean(*var_2703);
    }
    #[allow(unused_mut)]
    let mut scope_2704 = writer.prefix("Filter");
    if let Some(var_2705) = &input.filters {
        let mut list_2707 = scope_2704.start_list(true, Some("Filter"));
        for item_2706 in var_2705 {
            #[allow(unused_mut)]
            let mut entry_2708 = list_2707.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2708, item_2706)?;
        }
        list_2707.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2709 = writer.prefix("MaxResults");
    if let Some(var_2710) = &input.max_results {
        scope_2709.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2710).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2711 = writer.prefix("NextToken");
    if let Some(var_2712) = &input.next_token {
        scope_2711.string(var_2712);
    }
    #[allow(unused_mut)]
    let mut scope_2713 = writer.prefix("IpamPoolId");
    if let Some(var_2714) = &input.ipam_pool_ids {
        let mut list_2716 = scope_2713.start_list(true, Some("item"));
        for item_2715 in var_2714 {
            #[allow(unused_mut)]
            let mut entry_2717 = list_2716.entry();
            entry_2717.string(item_2715);
        }
        list_2716.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_ipams(
    input: &crate::input::DescribeIpamsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeIpams", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2718 = writer.prefix("DryRun");
    if let Some(var_2719) = &input.dry_run {
        scope_2718.boolean(*var_2719);
    }
    #[allow(unused_mut)]
    let mut scope_2720 = writer.prefix("Filter");
    if let Some(var_2721) = &input.filters {
        let mut list_2723 = scope_2720.start_list(true, Some("Filter"));
        for item_2722 in var_2721 {
            #[allow(unused_mut)]
            let mut entry_2724 = list_2723.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2724, item_2722)?;
        }
        list_2723.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2725 = writer.prefix("MaxResults");
    if let Some(var_2726) = &input.max_results {
        scope_2725.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2726).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2727 = writer.prefix("NextToken");
    if let Some(var_2728) = &input.next_token {
        scope_2727.string(var_2728);
    }
    #[allow(unused_mut)]
    let mut scope_2729 = writer.prefix("IpamId");
    if let Some(var_2730) = &input.ipam_ids {
        let mut list_2732 = scope_2729.start_list(true, Some("item"));
        for item_2731 in var_2730 {
            #[allow(unused_mut)]
            let mut entry_2733 = list_2732.entry();
            entry_2733.string(item_2731);
        }
        list_2732.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_ipam_scopes(
    input: &crate::input::DescribeIpamScopesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeIpamScopes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2734 = writer.prefix("DryRun");
    if let Some(var_2735) = &input.dry_run {
        scope_2734.boolean(*var_2735);
    }
    #[allow(unused_mut)]
    let mut scope_2736 = writer.prefix("Filter");
    if let Some(var_2737) = &input.filters {
        let mut list_2739 = scope_2736.start_list(true, Some("Filter"));
        for item_2738 in var_2737 {
            #[allow(unused_mut)]
            let mut entry_2740 = list_2739.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2740, item_2738)?;
        }
        list_2739.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2741 = writer.prefix("MaxResults");
    if let Some(var_2742) = &input.max_results {
        scope_2741.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2742).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2743 = writer.prefix("NextToken");
    if let Some(var_2744) = &input.next_token {
        scope_2743.string(var_2744);
    }
    #[allow(unused_mut)]
    let mut scope_2745 = writer.prefix("IpamScopeId");
    if let Some(var_2746) = &input.ipam_scope_ids {
        let mut list_2748 = scope_2745.start_list(true, Some("item"));
        for item_2747 in var_2746 {
            #[allow(unused_mut)]
            let mut entry_2749 = list_2748.entry();
            entry_2749.string(item_2747);
        }
        list_2748.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_ipv6_pools(
    input: &crate::input::DescribeIpv6PoolsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeIpv6Pools", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2750 = writer.prefix("PoolId");
    if let Some(var_2751) = &input.pool_ids {
        let mut list_2753 = scope_2750.start_list(true, Some("item"));
        for item_2752 in var_2751 {
            #[allow(unused_mut)]
            let mut entry_2754 = list_2753.entry();
            entry_2754.string(item_2752);
        }
        list_2753.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2755 = writer.prefix("NextToken");
    if let Some(var_2756) = &input.next_token {
        scope_2755.string(var_2756);
    }
    #[allow(unused_mut)]
    let mut scope_2757 = writer.prefix("MaxResults");
    if let Some(var_2758) = &input.max_results {
        scope_2757.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2758).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2759 = writer.prefix("DryRun");
    if let Some(var_2760) = &input.dry_run {
        scope_2759.boolean(*var_2760);
    }
    #[allow(unused_mut)]
    let mut scope_2761 = writer.prefix("Filter");
    if let Some(var_2762) = &input.filters {
        let mut list_2764 = scope_2761.start_list(true, Some("Filter"));
        for item_2763 in var_2762 {
            #[allow(unused_mut)]
            let mut entry_2765 = list_2764.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2765, item_2763)?;
        }
        list_2764.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_key_pairs(
    input: &crate::input::DescribeKeyPairsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeKeyPairs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2766 = writer.prefix("Filter");
    if let Some(var_2767) = &input.filters {
        let mut list_2769 = scope_2766.start_list(true, Some("Filter"));
        for item_2768 in var_2767 {
            #[allow(unused_mut)]
            let mut entry_2770 = list_2769.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2770, item_2768)?;
        }
        list_2769.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2771 = writer.prefix("KeyName");
    if let Some(var_2772) = &input.key_names {
        let mut list_2774 = scope_2771.start_list(true, Some("KeyName"));
        for item_2773 in var_2772 {
            #[allow(unused_mut)]
            let mut entry_2775 = list_2774.entry();
            entry_2775.string(item_2773);
        }
        list_2774.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2776 = writer.prefix("KeyPairId");
    if let Some(var_2777) = &input.key_pair_ids {
        let mut list_2779 = scope_2776.start_list(true, Some("KeyPairId"));
        for item_2778 in var_2777 {
            #[allow(unused_mut)]
            let mut entry_2780 = list_2779.entry();
            entry_2780.string(item_2778);
        }
        list_2779.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2781 = writer.prefix("DryRun");
    if let Some(var_2782) = &input.dry_run {
        scope_2781.boolean(*var_2782);
    }
    #[allow(unused_mut)]
    let mut scope_2783 = writer.prefix("IncludePublicKey");
    if let Some(var_2784) = &input.include_public_key {
        scope_2783.boolean(*var_2784);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_launch_templates(
    input: &crate::input::DescribeLaunchTemplatesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeLaunchTemplates", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2785 = writer.prefix("DryRun");
    if let Some(var_2786) = &input.dry_run {
        scope_2785.boolean(*var_2786);
    }
    #[allow(unused_mut)]
    let mut scope_2787 = writer.prefix("LaunchTemplateId");
    if let Some(var_2788) = &input.launch_template_ids {
        let mut list_2790 = scope_2787.start_list(true, Some("item"));
        for item_2789 in var_2788 {
            #[allow(unused_mut)]
            let mut entry_2791 = list_2790.entry();
            entry_2791.string(item_2789);
        }
        list_2790.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2792 = writer.prefix("LaunchTemplateName");
    if let Some(var_2793) = &input.launch_template_names {
        let mut list_2795 = scope_2792.start_list(true, Some("item"));
        for item_2794 in var_2793 {
            #[allow(unused_mut)]
            let mut entry_2796 = list_2795.entry();
            entry_2796.string(item_2794);
        }
        list_2795.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2797 = writer.prefix("Filter");
    if let Some(var_2798) = &input.filters {
        let mut list_2800 = scope_2797.start_list(true, Some("Filter"));
        for item_2799 in var_2798 {
            #[allow(unused_mut)]
            let mut entry_2801 = list_2800.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2801, item_2799)?;
        }
        list_2800.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2802 = writer.prefix("NextToken");
    if let Some(var_2803) = &input.next_token {
        scope_2802.string(var_2803);
    }
    #[allow(unused_mut)]
    let mut scope_2804 = writer.prefix("MaxResults");
    if let Some(var_2805) = &input.max_results {
        scope_2804.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2805).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_launch_template_versions(
    input: &crate::input::DescribeLaunchTemplateVersionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeLaunchTemplateVersions",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2806 = writer.prefix("DryRun");
    if let Some(var_2807) = &input.dry_run {
        scope_2806.boolean(*var_2807);
    }
    #[allow(unused_mut)]
    let mut scope_2808 = writer.prefix("LaunchTemplateId");
    if let Some(var_2809) = &input.launch_template_id {
        scope_2808.string(var_2809);
    }
    #[allow(unused_mut)]
    let mut scope_2810 = writer.prefix("LaunchTemplateName");
    if let Some(var_2811) = &input.launch_template_name {
        scope_2810.string(var_2811);
    }
    #[allow(unused_mut)]
    let mut scope_2812 = writer.prefix("LaunchTemplateVersion");
    if let Some(var_2813) = &input.versions {
        let mut list_2815 = scope_2812.start_list(true, Some("item"));
        for item_2814 in var_2813 {
            #[allow(unused_mut)]
            let mut entry_2816 = list_2815.entry();
            entry_2816.string(item_2814);
        }
        list_2815.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2817 = writer.prefix("MinVersion");
    if let Some(var_2818) = &input.min_version {
        scope_2817.string(var_2818);
    }
    #[allow(unused_mut)]
    let mut scope_2819 = writer.prefix("MaxVersion");
    if let Some(var_2820) = &input.max_version {
        scope_2819.string(var_2820);
    }
    #[allow(unused_mut)]
    let mut scope_2821 = writer.prefix("NextToken");
    if let Some(var_2822) = &input.next_token {
        scope_2821.string(var_2822);
    }
    #[allow(unused_mut)]
    let mut scope_2823 = writer.prefix("MaxResults");
    if let Some(var_2824) = &input.max_results {
        scope_2823.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2824).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2825 = writer.prefix("Filter");
    if let Some(var_2826) = &input.filters {
        let mut list_2828 = scope_2825.start_list(true, Some("Filter"));
        for item_2827 in var_2826 {
            #[allow(unused_mut)]
            let mut entry_2829 = list_2828.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2829, item_2827)?;
        }
        list_2828.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_local_gateway_route_tables(
    input: &crate::input::DescribeLocalGatewayRouteTablesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeLocalGatewayRouteTables",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2830 = writer.prefix("LocalGatewayRouteTableId");
    if let Some(var_2831) = &input.local_gateway_route_table_ids {
        let mut list_2833 = scope_2830.start_list(true, Some("item"));
        for item_2832 in var_2831 {
            #[allow(unused_mut)]
            let mut entry_2834 = list_2833.entry();
            entry_2834.string(item_2832);
        }
        list_2833.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2835 = writer.prefix("Filter");
    if let Some(var_2836) = &input.filters {
        let mut list_2838 = scope_2835.start_list(true, Some("Filter"));
        for item_2837 in var_2836 {
            #[allow(unused_mut)]
            let mut entry_2839 = list_2838.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2839, item_2837)?;
        }
        list_2838.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2840 = writer.prefix("MaxResults");
    if let Some(var_2841) = &input.max_results {
        scope_2840.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2841).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2842 = writer.prefix("NextToken");
    if let Some(var_2843) = &input.next_token {
        scope_2842.string(var_2843);
    }
    #[allow(unused_mut)]
    let mut scope_2844 = writer.prefix("DryRun");
    if let Some(var_2845) = &input.dry_run {
        scope_2844.boolean(*var_2845);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_local_gateway_route_table_virtual_interface_group_associations(
    input: &crate::input::DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2846 = writer.prefix("LocalGatewayRouteTableVirtualInterfaceGroupAssociationId");
    if let Some(var_2847) = &input.local_gateway_route_table_virtual_interface_group_association_ids
    {
        let mut list_2849 = scope_2846.start_list(true, Some("item"));
        for item_2848 in var_2847 {
            #[allow(unused_mut)]
            let mut entry_2850 = list_2849.entry();
            entry_2850.string(item_2848);
        }
        list_2849.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2851 = writer.prefix("Filter");
    if let Some(var_2852) = &input.filters {
        let mut list_2854 = scope_2851.start_list(true, Some("Filter"));
        for item_2853 in var_2852 {
            #[allow(unused_mut)]
            let mut entry_2855 = list_2854.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2855, item_2853)?;
        }
        list_2854.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2856 = writer.prefix("MaxResults");
    if let Some(var_2857) = &input.max_results {
        scope_2856.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2857).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2858 = writer.prefix("NextToken");
    if let Some(var_2859) = &input.next_token {
        scope_2858.string(var_2859);
    }
    #[allow(unused_mut)]
    let mut scope_2860 = writer.prefix("DryRun");
    if let Some(var_2861) = &input.dry_run {
        scope_2860.boolean(*var_2861);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_local_gateway_route_table_vpc_associations(
    input: &crate::input::DescribeLocalGatewayRouteTableVpcAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeLocalGatewayRouteTableVpcAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2862 = writer.prefix("LocalGatewayRouteTableVpcAssociationId");
    if let Some(var_2863) = &input.local_gateway_route_table_vpc_association_ids {
        let mut list_2865 = scope_2862.start_list(true, Some("item"));
        for item_2864 in var_2863 {
            #[allow(unused_mut)]
            let mut entry_2866 = list_2865.entry();
            entry_2866.string(item_2864);
        }
        list_2865.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2867 = writer.prefix("Filter");
    if let Some(var_2868) = &input.filters {
        let mut list_2870 = scope_2867.start_list(true, Some("Filter"));
        for item_2869 in var_2868 {
            #[allow(unused_mut)]
            let mut entry_2871 = list_2870.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2871, item_2869)?;
        }
        list_2870.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2872 = writer.prefix("MaxResults");
    if let Some(var_2873) = &input.max_results {
        scope_2872.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2873).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2874 = writer.prefix("NextToken");
    if let Some(var_2875) = &input.next_token {
        scope_2874.string(var_2875);
    }
    #[allow(unused_mut)]
    let mut scope_2876 = writer.prefix("DryRun");
    if let Some(var_2877) = &input.dry_run {
        scope_2876.boolean(*var_2877);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_local_gateways(
    input: &crate::input::DescribeLocalGatewaysInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeLocalGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2878 = writer.prefix("LocalGatewayId");
    if let Some(var_2879) = &input.local_gateway_ids {
        let mut list_2881 = scope_2878.start_list(true, Some("item"));
        for item_2880 in var_2879 {
            #[allow(unused_mut)]
            let mut entry_2882 = list_2881.entry();
            entry_2882.string(item_2880);
        }
        list_2881.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2883 = writer.prefix("Filter");
    if let Some(var_2884) = &input.filters {
        let mut list_2886 = scope_2883.start_list(true, Some("Filter"));
        for item_2885 in var_2884 {
            #[allow(unused_mut)]
            let mut entry_2887 = list_2886.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2887, item_2885)?;
        }
        list_2886.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2888 = writer.prefix("MaxResults");
    if let Some(var_2889) = &input.max_results {
        scope_2888.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2889).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2890 = writer.prefix("NextToken");
    if let Some(var_2891) = &input.next_token {
        scope_2890.string(var_2891);
    }
    #[allow(unused_mut)]
    let mut scope_2892 = writer.prefix("DryRun");
    if let Some(var_2893) = &input.dry_run {
        scope_2892.boolean(*var_2893);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_local_gateway_virtual_interface_groups(
    input: &crate::input::DescribeLocalGatewayVirtualInterfaceGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeLocalGatewayVirtualInterfaceGroups",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2894 = writer.prefix("LocalGatewayVirtualInterfaceGroupId");
    if let Some(var_2895) = &input.local_gateway_virtual_interface_group_ids {
        let mut list_2897 = scope_2894.start_list(true, Some("item"));
        for item_2896 in var_2895 {
            #[allow(unused_mut)]
            let mut entry_2898 = list_2897.entry();
            entry_2898.string(item_2896);
        }
        list_2897.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2899 = writer.prefix("Filter");
    if let Some(var_2900) = &input.filters {
        let mut list_2902 = scope_2899.start_list(true, Some("Filter"));
        for item_2901 in var_2900 {
            #[allow(unused_mut)]
            let mut entry_2903 = list_2902.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2903, item_2901)?;
        }
        list_2902.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2904 = writer.prefix("MaxResults");
    if let Some(var_2905) = &input.max_results {
        scope_2904.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2905).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2906 = writer.prefix("NextToken");
    if let Some(var_2907) = &input.next_token {
        scope_2906.string(var_2907);
    }
    #[allow(unused_mut)]
    let mut scope_2908 = writer.prefix("DryRun");
    if let Some(var_2909) = &input.dry_run {
        scope_2908.boolean(*var_2909);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_local_gateway_virtual_interfaces(
    input: &crate::input::DescribeLocalGatewayVirtualInterfacesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeLocalGatewayVirtualInterfaces",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2910 = writer.prefix("LocalGatewayVirtualInterfaceId");
    if let Some(var_2911) = &input.local_gateway_virtual_interface_ids {
        let mut list_2913 = scope_2910.start_list(true, Some("item"));
        for item_2912 in var_2911 {
            #[allow(unused_mut)]
            let mut entry_2914 = list_2913.entry();
            entry_2914.string(item_2912);
        }
        list_2913.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2915 = writer.prefix("Filter");
    if let Some(var_2916) = &input.filters {
        let mut list_2918 = scope_2915.start_list(true, Some("Filter"));
        for item_2917 in var_2916 {
            #[allow(unused_mut)]
            let mut entry_2919 = list_2918.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2919, item_2917)?;
        }
        list_2918.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2920 = writer.prefix("MaxResults");
    if let Some(var_2921) = &input.max_results {
        scope_2920.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2921).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2922 = writer.prefix("NextToken");
    if let Some(var_2923) = &input.next_token {
        scope_2922.string(var_2923);
    }
    #[allow(unused_mut)]
    let mut scope_2924 = writer.prefix("DryRun");
    if let Some(var_2925) = &input.dry_run {
        scope_2924.boolean(*var_2925);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_managed_prefix_lists(
    input: &crate::input::DescribeManagedPrefixListsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeManagedPrefixLists", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2926 = writer.prefix("DryRun");
    if let Some(var_2927) = &input.dry_run {
        scope_2926.boolean(*var_2927);
    }
    #[allow(unused_mut)]
    let mut scope_2928 = writer.prefix("Filter");
    if let Some(var_2929) = &input.filters {
        let mut list_2931 = scope_2928.start_list(true, Some("Filter"));
        for item_2930 in var_2929 {
            #[allow(unused_mut)]
            let mut entry_2932 = list_2931.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2932, item_2930)?;
        }
        list_2931.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2933 = writer.prefix("MaxResults");
    if let Some(var_2934) = &input.max_results {
        scope_2933.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2934).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2935 = writer.prefix("NextToken");
    if let Some(var_2936) = &input.next_token {
        scope_2935.string(var_2936);
    }
    #[allow(unused_mut)]
    let mut scope_2937 = writer.prefix("PrefixListId");
    if let Some(var_2938) = &input.prefix_list_ids {
        let mut list_2940 = scope_2937.start_list(true, Some("item"));
        for item_2939 in var_2938 {
            #[allow(unused_mut)]
            let mut entry_2941 = list_2940.entry();
            entry_2941.string(item_2939);
        }
        list_2940.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_moving_addresses(
    input: &crate::input::DescribeMovingAddressesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeMovingAddresses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2942 = writer.prefix("Filter");
    if let Some(var_2943) = &input.filters {
        let mut list_2945 = scope_2942.start_list(true, Some("Filter"));
        for item_2944 in var_2943 {
            #[allow(unused_mut)]
            let mut entry_2946 = list_2945.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2946, item_2944)?;
        }
        list_2945.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2947 = writer.prefix("DryRun");
    if let Some(var_2948) = &input.dry_run {
        scope_2947.boolean(*var_2948);
    }
    #[allow(unused_mut)]
    let mut scope_2949 = writer.prefix("MaxResults");
    if let Some(var_2950) = &input.max_results {
        scope_2949.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2950).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2951 = writer.prefix("NextToken");
    if let Some(var_2952) = &input.next_token {
        scope_2951.string(var_2952);
    }
    #[allow(unused_mut)]
    let mut scope_2953 = writer.prefix("PublicIp");
    if let Some(var_2954) = &input.public_ips {
        let mut list_2956 = scope_2953.start_list(true, Some("item"));
        for item_2955 in var_2954 {
            #[allow(unused_mut)]
            let mut entry_2957 = list_2956.entry();
            entry_2957.string(item_2955);
        }
        list_2956.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_nat_gateways(
    input: &crate::input::DescribeNatGatewaysInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeNatGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2958 = writer.prefix("DryRun");
    if let Some(var_2959) = &input.dry_run {
        scope_2958.boolean(*var_2959);
    }
    #[allow(unused_mut)]
    let mut scope_2960 = writer.prefix("Filter");
    if let Some(var_2961) = &input.filter {
        let mut list_2963 = scope_2960.start_list(true, Some("Filter"));
        for item_2962 in var_2961 {
            #[allow(unused_mut)]
            let mut entry_2964 = list_2963.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2964, item_2962)?;
        }
        list_2963.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2965 = writer.prefix("MaxResults");
    if let Some(var_2966) = &input.max_results {
        scope_2965.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2966).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2967 = writer.prefix("NatGatewayId");
    if let Some(var_2968) = &input.nat_gateway_ids {
        let mut list_2970 = scope_2967.start_list(true, Some("item"));
        for item_2969 in var_2968 {
            #[allow(unused_mut)]
            let mut entry_2971 = list_2970.entry();
            entry_2971.string(item_2969);
        }
        list_2970.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2972 = writer.prefix("NextToken");
    if let Some(var_2973) = &input.next_token {
        scope_2972.string(var_2973);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_acls(
    input: &crate::input::DescribeNetworkAclsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeNetworkAcls", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_2974 = writer.prefix("Filter");
    if let Some(var_2975) = &input.filters {
        let mut list_2977 = scope_2974.start_list(true, Some("Filter"));
        for item_2976 in var_2975 {
            #[allow(unused_mut)]
            let mut entry_2978 = list_2977.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_2978, item_2976)?;
        }
        list_2977.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2979 = writer.prefix("DryRun");
    if let Some(var_2980) = &input.dry_run {
        scope_2979.boolean(*var_2980);
    }
    #[allow(unused_mut)]
    let mut scope_2981 = writer.prefix("NetworkAclId");
    if let Some(var_2982) = &input.network_acl_ids {
        let mut list_2984 = scope_2981.start_list(true, Some("item"));
        for item_2983 in var_2982 {
            #[allow(unused_mut)]
            let mut entry_2985 = list_2984.entry();
            entry_2985.string(item_2983);
        }
        list_2984.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2986 = writer.prefix("NextToken");
    if let Some(var_2987) = &input.next_token {
        scope_2986.string(var_2987);
    }
    #[allow(unused_mut)]
    let mut scope_2988 = writer.prefix("MaxResults");
    if let Some(var_2989) = &input.max_results {
        scope_2988.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2989).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_insights_access_scope_analyses(
    input: &crate::input::DescribeNetworkInsightsAccessScopeAnalysesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeNetworkInsightsAccessScopeAnalyses",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_2990 = writer.prefix("NetworkInsightsAccessScopeAnalysisId");
    if let Some(var_2991) = &input.network_insights_access_scope_analysis_ids {
        let mut list_2993 = scope_2990.start_list(true, Some("item"));
        for item_2992 in var_2991 {
            #[allow(unused_mut)]
            let mut entry_2994 = list_2993.entry();
            entry_2994.string(item_2992);
        }
        list_2993.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2995 = writer.prefix("NetworkInsightsAccessScopeId");
    if let Some(var_2996) = &input.network_insights_access_scope_id {
        scope_2995.string(var_2996);
    }
    #[allow(unused_mut)]
    let mut scope_2997 = writer.prefix("AnalysisStartTimeBegin");
    if let Some(var_2998) = &input.analysis_start_time_begin {
        scope_2997.date_time(var_2998, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_2999 = writer.prefix("AnalysisStartTimeEnd");
    if let Some(var_3000) = &input.analysis_start_time_end {
        scope_2999.date_time(var_3000, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_3001 = writer.prefix("Filter");
    if let Some(var_3002) = &input.filters {
        let mut list_3004 = scope_3001.start_list(true, Some("Filter"));
        for item_3003 in var_3002 {
            #[allow(unused_mut)]
            let mut entry_3005 = list_3004.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3005, item_3003)?;
        }
        list_3004.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3006 = writer.prefix("MaxResults");
    if let Some(var_3007) = &input.max_results {
        scope_3006.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3007).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3008 = writer.prefix("DryRun");
    if let Some(var_3009) = &input.dry_run {
        scope_3008.boolean(*var_3009);
    }
    #[allow(unused_mut)]
    let mut scope_3010 = writer.prefix("NextToken");
    if let Some(var_3011) = &input.next_token {
        scope_3010.string(var_3011);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_insights_access_scopes(
    input: &crate::input::DescribeNetworkInsightsAccessScopesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeNetworkInsightsAccessScopes",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3012 = writer.prefix("NetworkInsightsAccessScopeId");
    if let Some(var_3013) = &input.network_insights_access_scope_ids {
        let mut list_3015 = scope_3012.start_list(true, Some("item"));
        for item_3014 in var_3013 {
            #[allow(unused_mut)]
            let mut entry_3016 = list_3015.entry();
            entry_3016.string(item_3014);
        }
        list_3015.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3017 = writer.prefix("Filter");
    if let Some(var_3018) = &input.filters {
        let mut list_3020 = scope_3017.start_list(true, Some("Filter"));
        for item_3019 in var_3018 {
            #[allow(unused_mut)]
            let mut entry_3021 = list_3020.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3021, item_3019)?;
        }
        list_3020.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3022 = writer.prefix("MaxResults");
    if let Some(var_3023) = &input.max_results {
        scope_3022.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3023).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3024 = writer.prefix("DryRun");
    if let Some(var_3025) = &input.dry_run {
        scope_3024.boolean(*var_3025);
    }
    #[allow(unused_mut)]
    let mut scope_3026 = writer.prefix("NextToken");
    if let Some(var_3027) = &input.next_token {
        scope_3026.string(var_3027);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_insights_analyses(
    input: &crate::input::DescribeNetworkInsightsAnalysesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeNetworkInsightsAnalyses",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3028 = writer.prefix("NetworkInsightsAnalysisId");
    if let Some(var_3029) = &input.network_insights_analysis_ids {
        let mut list_3031 = scope_3028.start_list(true, Some("item"));
        for item_3030 in var_3029 {
            #[allow(unused_mut)]
            let mut entry_3032 = list_3031.entry();
            entry_3032.string(item_3030);
        }
        list_3031.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3033 = writer.prefix("NetworkInsightsPathId");
    if let Some(var_3034) = &input.network_insights_path_id {
        scope_3033.string(var_3034);
    }
    #[allow(unused_mut)]
    let mut scope_3035 = writer.prefix("AnalysisStartTime");
    if let Some(var_3036) = &input.analysis_start_time {
        scope_3035.date_time(var_3036, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_3037 = writer.prefix("AnalysisEndTime");
    if let Some(var_3038) = &input.analysis_end_time {
        scope_3037.date_time(var_3038, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_3039 = writer.prefix("Filter");
    if let Some(var_3040) = &input.filters {
        let mut list_3042 = scope_3039.start_list(true, Some("Filter"));
        for item_3041 in var_3040 {
            #[allow(unused_mut)]
            let mut entry_3043 = list_3042.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3043, item_3041)?;
        }
        list_3042.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3044 = writer.prefix("MaxResults");
    if let Some(var_3045) = &input.max_results {
        scope_3044.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3045).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3046 = writer.prefix("DryRun");
    if let Some(var_3047) = &input.dry_run {
        scope_3046.boolean(*var_3047);
    }
    #[allow(unused_mut)]
    let mut scope_3048 = writer.prefix("NextToken");
    if let Some(var_3049) = &input.next_token {
        scope_3048.string(var_3049);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_insights_paths(
    input: &crate::input::DescribeNetworkInsightsPathsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeNetworkInsightsPaths", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3050 = writer.prefix("NetworkInsightsPathId");
    if let Some(var_3051) = &input.network_insights_path_ids {
        let mut list_3053 = scope_3050.start_list(true, Some("item"));
        for item_3052 in var_3051 {
            #[allow(unused_mut)]
            let mut entry_3054 = list_3053.entry();
            entry_3054.string(item_3052);
        }
        list_3053.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3055 = writer.prefix("Filter");
    if let Some(var_3056) = &input.filters {
        let mut list_3058 = scope_3055.start_list(true, Some("Filter"));
        for item_3057 in var_3056 {
            #[allow(unused_mut)]
            let mut entry_3059 = list_3058.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3059, item_3057)?;
        }
        list_3058.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3060 = writer.prefix("MaxResults");
    if let Some(var_3061) = &input.max_results {
        scope_3060.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3061).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3062 = writer.prefix("DryRun");
    if let Some(var_3063) = &input.dry_run {
        scope_3062.boolean(*var_3063);
    }
    #[allow(unused_mut)]
    let mut scope_3064 = writer.prefix("NextToken");
    if let Some(var_3065) = &input.next_token {
        scope_3064.string(var_3065);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_interface_attribute(
    input: &crate::input::DescribeNetworkInterfaceAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeNetworkInterfaceAttribute",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3066 = writer.prefix("Attribute");
    if let Some(var_3067) = &input.attribute {
        scope_3066.string(var_3067.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3068 = writer.prefix("DryRun");
    if let Some(var_3069) = &input.dry_run {
        scope_3068.boolean(*var_3069);
    }
    #[allow(unused_mut)]
    let mut scope_3070 = writer.prefix("NetworkInterfaceId");
    if let Some(var_3071) = &input.network_interface_id {
        scope_3070.string(var_3071);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_interface_permissions(
    input: &crate::input::DescribeNetworkInterfacePermissionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeNetworkInterfacePermissions",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3072 = writer.prefix("NetworkInterfacePermissionId");
    if let Some(var_3073) = &input.network_interface_permission_ids {
        let mut list_3075 = scope_3072.start_list(true, None);
        for item_3074 in var_3073 {
            #[allow(unused_mut)]
            let mut entry_3076 = list_3075.entry();
            entry_3076.string(item_3074);
        }
        list_3075.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3077 = writer.prefix("Filter");
    if let Some(var_3078) = &input.filters {
        let mut list_3080 = scope_3077.start_list(true, Some("Filter"));
        for item_3079 in var_3078 {
            #[allow(unused_mut)]
            let mut entry_3081 = list_3080.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3081, item_3079)?;
        }
        list_3080.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3082 = writer.prefix("NextToken");
    if let Some(var_3083) = &input.next_token {
        scope_3082.string(var_3083);
    }
    #[allow(unused_mut)]
    let mut scope_3084 = writer.prefix("MaxResults");
    if let Some(var_3085) = &input.max_results {
        scope_3084.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3085).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_network_interfaces(
    input: &crate::input::DescribeNetworkInterfacesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeNetworkInterfaces", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3086 = writer.prefix("Filter");
    if let Some(var_3087) = &input.filters {
        let mut list_3089 = scope_3086.start_list(true, Some("Filter"));
        for item_3088 in var_3087 {
            #[allow(unused_mut)]
            let mut entry_3090 = list_3089.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3090, item_3088)?;
        }
        list_3089.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3091 = writer.prefix("DryRun");
    if let Some(var_3092) = &input.dry_run {
        scope_3091.boolean(*var_3092);
    }
    #[allow(unused_mut)]
    let mut scope_3093 = writer.prefix("NetworkInterfaceId");
    if let Some(var_3094) = &input.network_interface_ids {
        let mut list_3096 = scope_3093.start_list(true, Some("item"));
        for item_3095 in var_3094 {
            #[allow(unused_mut)]
            let mut entry_3097 = list_3096.entry();
            entry_3097.string(item_3095);
        }
        list_3096.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3098 = writer.prefix("NextToken");
    if let Some(var_3099) = &input.next_token {
        scope_3098.string(var_3099);
    }
    #[allow(unused_mut)]
    let mut scope_3100 = writer.prefix("MaxResults");
    if let Some(var_3101) = &input.max_results {
        scope_3100.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3101).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_placement_groups(
    input: &crate::input::DescribePlacementGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribePlacementGroups", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3102 = writer.prefix("Filter");
    if let Some(var_3103) = &input.filters {
        let mut list_3105 = scope_3102.start_list(true, Some("Filter"));
        for item_3104 in var_3103 {
            #[allow(unused_mut)]
            let mut entry_3106 = list_3105.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3106, item_3104)?;
        }
        list_3105.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3107 = writer.prefix("DryRun");
    if let Some(var_3108) = &input.dry_run {
        scope_3107.boolean(*var_3108);
    }
    #[allow(unused_mut)]
    let mut scope_3109 = writer.prefix("GroupName");
    if let Some(var_3110) = &input.group_names {
        let mut list_3112 = scope_3109.start_list(true, None);
        for item_3111 in var_3110 {
            #[allow(unused_mut)]
            let mut entry_3113 = list_3112.entry();
            entry_3113.string(item_3111);
        }
        list_3112.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3114 = writer.prefix("GroupId");
    if let Some(var_3115) = &input.group_ids {
        let mut list_3117 = scope_3114.start_list(true, Some("GroupId"));
        for item_3116 in var_3115 {
            #[allow(unused_mut)]
            let mut entry_3118 = list_3117.entry();
            entry_3118.string(item_3116);
        }
        list_3117.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_prefix_lists(
    input: &crate::input::DescribePrefixListsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribePrefixLists", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3119 = writer.prefix("DryRun");
    if let Some(var_3120) = &input.dry_run {
        scope_3119.boolean(*var_3120);
    }
    #[allow(unused_mut)]
    let mut scope_3121 = writer.prefix("Filter");
    if let Some(var_3122) = &input.filters {
        let mut list_3124 = scope_3121.start_list(true, Some("Filter"));
        for item_3123 in var_3122 {
            #[allow(unused_mut)]
            let mut entry_3125 = list_3124.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3125, item_3123)?;
        }
        list_3124.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3126 = writer.prefix("MaxResults");
    if let Some(var_3127) = &input.max_results {
        scope_3126.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3127).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3128 = writer.prefix("NextToken");
    if let Some(var_3129) = &input.next_token {
        scope_3128.string(var_3129);
    }
    #[allow(unused_mut)]
    let mut scope_3130 = writer.prefix("PrefixListId");
    if let Some(var_3131) = &input.prefix_list_ids {
        let mut list_3133 = scope_3130.start_list(true, Some("item"));
        for item_3132 in var_3131 {
            #[allow(unused_mut)]
            let mut entry_3134 = list_3133.entry();
            entry_3134.string(item_3132);
        }
        list_3133.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_principal_id_format(
    input: &crate::input::DescribePrincipalIdFormatInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribePrincipalIdFormat", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3135 = writer.prefix("DryRun");
    if let Some(var_3136) = &input.dry_run {
        scope_3135.boolean(*var_3136);
    }
    #[allow(unused_mut)]
    let mut scope_3137 = writer.prefix("Resource");
    if let Some(var_3138) = &input.resources {
        let mut list_3140 = scope_3137.start_list(true, Some("item"));
        for item_3139 in var_3138 {
            #[allow(unused_mut)]
            let mut entry_3141 = list_3140.entry();
            entry_3141.string(item_3139);
        }
        list_3140.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3142 = writer.prefix("MaxResults");
    if let Some(var_3143) = &input.max_results {
        scope_3142.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3143).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3144 = writer.prefix("NextToken");
    if let Some(var_3145) = &input.next_token {
        scope_3144.string(var_3145);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_public_ipv4_pools(
    input: &crate::input::DescribePublicIpv4PoolsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribePublicIpv4Pools", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3146 = writer.prefix("PoolId");
    if let Some(var_3147) = &input.pool_ids {
        let mut list_3149 = scope_3146.start_list(true, Some("item"));
        for item_3148 in var_3147 {
            #[allow(unused_mut)]
            let mut entry_3150 = list_3149.entry();
            entry_3150.string(item_3148);
        }
        list_3149.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3151 = writer.prefix("NextToken");
    if let Some(var_3152) = &input.next_token {
        scope_3151.string(var_3152);
    }
    #[allow(unused_mut)]
    let mut scope_3153 = writer.prefix("MaxResults");
    if let Some(var_3154) = &input.max_results {
        scope_3153.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3154).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3155 = writer.prefix("Filter");
    if let Some(var_3156) = &input.filters {
        let mut list_3158 = scope_3155.start_list(true, Some("Filter"));
        for item_3157 in var_3156 {
            #[allow(unused_mut)]
            let mut entry_3159 = list_3158.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3159, item_3157)?;
        }
        list_3158.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_regions(
    input: &crate::input::DescribeRegionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeRegions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3160 = writer.prefix("Filter");
    if let Some(var_3161) = &input.filters {
        let mut list_3163 = scope_3160.start_list(true, Some("Filter"));
        for item_3162 in var_3161 {
            #[allow(unused_mut)]
            let mut entry_3164 = list_3163.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3164, item_3162)?;
        }
        list_3163.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3165 = writer.prefix("RegionName");
    if let Some(var_3166) = &input.region_names {
        let mut list_3168 = scope_3165.start_list(true, Some("RegionName"));
        for item_3167 in var_3166 {
            #[allow(unused_mut)]
            let mut entry_3169 = list_3168.entry();
            entry_3169.string(item_3167);
        }
        list_3168.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3170 = writer.prefix("DryRun");
    if let Some(var_3171) = &input.dry_run {
        scope_3170.boolean(*var_3171);
    }
    #[allow(unused_mut)]
    let mut scope_3172 = writer.prefix("AllRegions");
    if let Some(var_3173) = &input.all_regions {
        scope_3172.boolean(*var_3173);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_replace_root_volume_tasks(
    input: &crate::input::DescribeReplaceRootVolumeTasksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeReplaceRootVolumeTasks",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3174 = writer.prefix("ReplaceRootVolumeTaskId");
    if let Some(var_3175) = &input.replace_root_volume_task_ids {
        let mut list_3177 = scope_3174.start_list(true, Some("ReplaceRootVolumeTaskId"));
        for item_3176 in var_3175 {
            #[allow(unused_mut)]
            let mut entry_3178 = list_3177.entry();
            entry_3178.string(item_3176);
        }
        list_3177.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3179 = writer.prefix("Filter");
    if let Some(var_3180) = &input.filters {
        let mut list_3182 = scope_3179.start_list(true, Some("Filter"));
        for item_3181 in var_3180 {
            #[allow(unused_mut)]
            let mut entry_3183 = list_3182.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3183, item_3181)?;
        }
        list_3182.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3184 = writer.prefix("MaxResults");
    if let Some(var_3185) = &input.max_results {
        scope_3184.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3185).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3186 = writer.prefix("NextToken");
    if let Some(var_3187) = &input.next_token {
        scope_3186.string(var_3187);
    }
    #[allow(unused_mut)]
    let mut scope_3188 = writer.prefix("DryRun");
    if let Some(var_3189) = &input.dry_run {
        scope_3188.boolean(*var_3189);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_reserved_instances(
    input: &crate::input::DescribeReservedInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeReservedInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3190 = writer.prefix("Filter");
    if let Some(var_3191) = &input.filters {
        let mut list_3193 = scope_3190.start_list(true, Some("Filter"));
        for item_3192 in var_3191 {
            #[allow(unused_mut)]
            let mut entry_3194 = list_3193.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3194, item_3192)?;
        }
        list_3193.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3195 = writer.prefix("OfferingClass");
    if let Some(var_3196) = &input.offering_class {
        scope_3195.string(var_3196.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3197 = writer.prefix("ReservedInstancesId");
    if let Some(var_3198) = &input.reserved_instances_ids {
        let mut list_3200 = scope_3197.start_list(true, Some("ReservedInstancesId"));
        for item_3199 in var_3198 {
            #[allow(unused_mut)]
            let mut entry_3201 = list_3200.entry();
            entry_3201.string(item_3199);
        }
        list_3200.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3202 = writer.prefix("DryRun");
    if let Some(var_3203) = &input.dry_run {
        scope_3202.boolean(*var_3203);
    }
    #[allow(unused_mut)]
    let mut scope_3204 = writer.prefix("OfferingType");
    if let Some(var_3205) = &input.offering_type {
        scope_3204.string(var_3205.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_reserved_instances_listings(
    input: &crate::input::DescribeReservedInstancesListingsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeReservedInstancesListings",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3206 = writer.prefix("Filter");
    if let Some(var_3207) = &input.filters {
        let mut list_3209 = scope_3206.start_list(true, Some("Filter"));
        for item_3208 in var_3207 {
            #[allow(unused_mut)]
            let mut entry_3210 = list_3209.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3210, item_3208)?;
        }
        list_3209.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3211 = writer.prefix("ReservedInstancesId");
    if let Some(var_3212) = &input.reserved_instances_id {
        scope_3211.string(var_3212);
    }
    #[allow(unused_mut)]
    let mut scope_3213 = writer.prefix("ReservedInstancesListingId");
    if let Some(var_3214) = &input.reserved_instances_listing_id {
        scope_3213.string(var_3214);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_reserved_instances_modifications(
    input: &crate::input::DescribeReservedInstancesModificationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeReservedInstancesModifications",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3215 = writer.prefix("Filter");
    if let Some(var_3216) = &input.filters {
        let mut list_3218 = scope_3215.start_list(true, Some("Filter"));
        for item_3217 in var_3216 {
            #[allow(unused_mut)]
            let mut entry_3219 = list_3218.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3219, item_3217)?;
        }
        list_3218.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3220 = writer.prefix("ReservedInstancesModificationId");
    if let Some(var_3221) = &input.reserved_instances_modification_ids {
        let mut list_3223 = scope_3220.start_list(true, Some("ReservedInstancesModificationId"));
        for item_3222 in var_3221 {
            #[allow(unused_mut)]
            let mut entry_3224 = list_3223.entry();
            entry_3224.string(item_3222);
        }
        list_3223.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3225 = writer.prefix("NextToken");
    if let Some(var_3226) = &input.next_token {
        scope_3225.string(var_3226);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_reserved_instances_offerings(
    input: &crate::input::DescribeReservedInstancesOfferingsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeReservedInstancesOfferings",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3227 = writer.prefix("AvailabilityZone");
    if let Some(var_3228) = &input.availability_zone {
        scope_3227.string(var_3228);
    }
    #[allow(unused_mut)]
    let mut scope_3229 = writer.prefix("Filter");
    if let Some(var_3230) = &input.filters {
        let mut list_3232 = scope_3229.start_list(true, Some("Filter"));
        for item_3231 in var_3230 {
            #[allow(unused_mut)]
            let mut entry_3233 = list_3232.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3233, item_3231)?;
        }
        list_3232.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3234 = writer.prefix("IncludeMarketplace");
    if let Some(var_3235) = &input.include_marketplace {
        scope_3234.boolean(*var_3235);
    }
    #[allow(unused_mut)]
    let mut scope_3236 = writer.prefix("InstanceType");
    if let Some(var_3237) = &input.instance_type {
        scope_3236.string(var_3237.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3238 = writer.prefix("MaxDuration");
    if let Some(var_3239) = &input.max_duration {
        scope_3238.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3239).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3240 = writer.prefix("MaxInstanceCount");
    if let Some(var_3241) = &input.max_instance_count {
        scope_3240.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3241).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3242 = writer.prefix("MinDuration");
    if let Some(var_3243) = &input.min_duration {
        scope_3242.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3243).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3244 = writer.prefix("OfferingClass");
    if let Some(var_3245) = &input.offering_class {
        scope_3244.string(var_3245.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3246 = writer.prefix("ProductDescription");
    if let Some(var_3247) = &input.product_description {
        scope_3246.string(var_3247.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3248 = writer.prefix("ReservedInstancesOfferingId");
    if let Some(var_3249) = &input.reserved_instances_offering_ids {
        let mut list_3251 = scope_3248.start_list(true, None);
        for item_3250 in var_3249 {
            #[allow(unused_mut)]
            let mut entry_3252 = list_3251.entry();
            entry_3252.string(item_3250);
        }
        list_3251.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3253 = writer.prefix("DryRun");
    if let Some(var_3254) = &input.dry_run {
        scope_3253.boolean(*var_3254);
    }
    #[allow(unused_mut)]
    let mut scope_3255 = writer.prefix("InstanceTenancy");
    if let Some(var_3256) = &input.instance_tenancy {
        scope_3255.string(var_3256.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3257 = writer.prefix("MaxResults");
    if let Some(var_3258) = &input.max_results {
        scope_3257.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3258).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3259 = writer.prefix("NextToken");
    if let Some(var_3260) = &input.next_token {
        scope_3259.string(var_3260);
    }
    #[allow(unused_mut)]
    let mut scope_3261 = writer.prefix("OfferingType");
    if let Some(var_3262) = &input.offering_type {
        scope_3261.string(var_3262.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_route_tables(
    input: &crate::input::DescribeRouteTablesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeRouteTables", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3263 = writer.prefix("Filter");
    if let Some(var_3264) = &input.filters {
        let mut list_3266 = scope_3263.start_list(true, Some("Filter"));
        for item_3265 in var_3264 {
            #[allow(unused_mut)]
            let mut entry_3267 = list_3266.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3267, item_3265)?;
        }
        list_3266.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3268 = writer.prefix("DryRun");
    if let Some(var_3269) = &input.dry_run {
        scope_3268.boolean(*var_3269);
    }
    #[allow(unused_mut)]
    let mut scope_3270 = writer.prefix("RouteTableId");
    if let Some(var_3271) = &input.route_table_ids {
        let mut list_3273 = scope_3270.start_list(true, Some("item"));
        for item_3272 in var_3271 {
            #[allow(unused_mut)]
            let mut entry_3274 = list_3273.entry();
            entry_3274.string(item_3272);
        }
        list_3273.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3275 = writer.prefix("NextToken");
    if let Some(var_3276) = &input.next_token {
        scope_3275.string(var_3276);
    }
    #[allow(unused_mut)]
    let mut scope_3277 = writer.prefix("MaxResults");
    if let Some(var_3278) = &input.max_results {
        scope_3277.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3278).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_scheduled_instance_availability(
    input: &crate::input::DescribeScheduledInstanceAvailabilityInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeScheduledInstanceAvailability",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3279 = writer.prefix("DryRun");
    if let Some(var_3280) = &input.dry_run {
        scope_3279.boolean(*var_3280);
    }
    #[allow(unused_mut)]
    let mut scope_3281 = writer.prefix("Filter");
    if let Some(var_3282) = &input.filters {
        let mut list_3284 = scope_3281.start_list(true, Some("Filter"));
        for item_3283 in var_3282 {
            #[allow(unused_mut)]
            let mut entry_3285 = list_3284.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3285, item_3283)?;
        }
        list_3284.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3286 = writer.prefix("FirstSlotStartTimeRange");
    if let Some(var_3287) = &input.first_slot_start_time_range {
        crate::query_ser::serialize_structure_crate_model_slot_date_time_range_request(
            scope_3286, var_3287,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_3288 = writer.prefix("MaxResults");
    if let Some(var_3289) = &input.max_results {
        scope_3288.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3289).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3290 = writer.prefix("MaxSlotDurationInHours");
    if let Some(var_3291) = &input.max_slot_duration_in_hours {
        scope_3290.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3291).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3292 = writer.prefix("MinSlotDurationInHours");
    if let Some(var_3293) = &input.min_slot_duration_in_hours {
        scope_3292.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3293).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3294 = writer.prefix("NextToken");
    if let Some(var_3295) = &input.next_token {
        scope_3294.string(var_3295);
    }
    #[allow(unused_mut)]
    let mut scope_3296 = writer.prefix("Recurrence");
    if let Some(var_3297) = &input.recurrence {
        crate::query_ser::serialize_structure_crate_model_scheduled_instance_recurrence_request(
            scope_3296, var_3297,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_scheduled_instances(
    input: &crate::input::DescribeScheduledInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeScheduledInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3298 = writer.prefix("DryRun");
    if let Some(var_3299) = &input.dry_run {
        scope_3298.boolean(*var_3299);
    }
    #[allow(unused_mut)]
    let mut scope_3300 = writer.prefix("Filter");
    if let Some(var_3301) = &input.filters {
        let mut list_3303 = scope_3300.start_list(true, Some("Filter"));
        for item_3302 in var_3301 {
            #[allow(unused_mut)]
            let mut entry_3304 = list_3303.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3304, item_3302)?;
        }
        list_3303.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3305 = writer.prefix("MaxResults");
    if let Some(var_3306) = &input.max_results {
        scope_3305.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3306).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3307 = writer.prefix("NextToken");
    if let Some(var_3308) = &input.next_token {
        scope_3307.string(var_3308);
    }
    #[allow(unused_mut)]
    let mut scope_3309 = writer.prefix("ScheduledInstanceId");
    if let Some(var_3310) = &input.scheduled_instance_ids {
        let mut list_3312 = scope_3309.start_list(true, Some("ScheduledInstanceId"));
        for item_3311 in var_3310 {
            #[allow(unused_mut)]
            let mut entry_3313 = list_3312.entry();
            entry_3313.string(item_3311);
        }
        list_3312.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3314 = writer.prefix("SlotStartTimeRange");
    if let Some(var_3315) = &input.slot_start_time_range {
        crate::query_ser::serialize_structure_crate_model_slot_start_time_range_request(
            scope_3314, var_3315,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_security_group_references(
    input: &crate::input::DescribeSecurityGroupReferencesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeSecurityGroupReferences",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3316 = writer.prefix("DryRun");
    if let Some(var_3317) = &input.dry_run {
        scope_3316.boolean(*var_3317);
    }
    #[allow(unused_mut)]
    let mut scope_3318 = writer.prefix("GroupId");
    if let Some(var_3319) = &input.group_id {
        let mut list_3321 = scope_3318.start_list(true, Some("item"));
        for item_3320 in var_3319 {
            #[allow(unused_mut)]
            let mut entry_3322 = list_3321.entry();
            entry_3322.string(item_3320);
        }
        list_3321.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_security_group_rules(
    input: &crate::input::DescribeSecurityGroupRulesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSecurityGroupRules", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3323 = writer.prefix("Filter");
    if let Some(var_3324) = &input.filters {
        let mut list_3326 = scope_3323.start_list(true, Some("Filter"));
        for item_3325 in var_3324 {
            #[allow(unused_mut)]
            let mut entry_3327 = list_3326.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3327, item_3325)?;
        }
        list_3326.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3328 = writer.prefix("SecurityGroupRuleId");
    if let Some(var_3329) = &input.security_group_rule_ids {
        let mut list_3331 = scope_3328.start_list(true, Some("item"));
        for item_3330 in var_3329 {
            #[allow(unused_mut)]
            let mut entry_3332 = list_3331.entry();
            entry_3332.string(item_3330);
        }
        list_3331.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3333 = writer.prefix("DryRun");
    if let Some(var_3334) = &input.dry_run {
        scope_3333.boolean(*var_3334);
    }
    #[allow(unused_mut)]
    let mut scope_3335 = writer.prefix("NextToken");
    if let Some(var_3336) = &input.next_token {
        scope_3335.string(var_3336);
    }
    #[allow(unused_mut)]
    let mut scope_3337 = writer.prefix("MaxResults");
    if let Some(var_3338) = &input.max_results {
        scope_3337.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3338).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_security_groups(
    input: &crate::input::DescribeSecurityGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSecurityGroups", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3339 = writer.prefix("Filter");
    if let Some(var_3340) = &input.filters {
        let mut list_3342 = scope_3339.start_list(true, Some("Filter"));
        for item_3341 in var_3340 {
            #[allow(unused_mut)]
            let mut entry_3343 = list_3342.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3343, item_3341)?;
        }
        list_3342.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3344 = writer.prefix("GroupId");
    if let Some(var_3345) = &input.group_ids {
        let mut list_3347 = scope_3344.start_list(true, Some("groupId"));
        for item_3346 in var_3345 {
            #[allow(unused_mut)]
            let mut entry_3348 = list_3347.entry();
            entry_3348.string(item_3346);
        }
        list_3347.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3349 = writer.prefix("GroupName");
    if let Some(var_3350) = &input.group_names {
        let mut list_3352 = scope_3349.start_list(true, Some("GroupName"));
        for item_3351 in var_3350 {
            #[allow(unused_mut)]
            let mut entry_3353 = list_3352.entry();
            entry_3353.string(item_3351);
        }
        list_3352.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3354 = writer.prefix("DryRun");
    if let Some(var_3355) = &input.dry_run {
        scope_3354.boolean(*var_3355);
    }
    #[allow(unused_mut)]
    let mut scope_3356 = writer.prefix("NextToken");
    if let Some(var_3357) = &input.next_token {
        scope_3356.string(var_3357);
    }
    #[allow(unused_mut)]
    let mut scope_3358 = writer.prefix("MaxResults");
    if let Some(var_3359) = &input.max_results {
        scope_3358.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3359).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_snapshot_attribute(
    input: &crate::input::DescribeSnapshotAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSnapshotAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3360 = writer.prefix("Attribute");
    if let Some(var_3361) = &input.attribute {
        scope_3360.string(var_3361.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3362 = writer.prefix("SnapshotId");
    if let Some(var_3363) = &input.snapshot_id {
        scope_3362.string(var_3363);
    }
    #[allow(unused_mut)]
    let mut scope_3364 = writer.prefix("DryRun");
    if let Some(var_3365) = &input.dry_run {
        scope_3364.boolean(*var_3365);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_snapshots(
    input: &crate::input::DescribeSnapshotsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSnapshots", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3366 = writer.prefix("Filter");
    if let Some(var_3367) = &input.filters {
        let mut list_3369 = scope_3366.start_list(true, Some("Filter"));
        for item_3368 in var_3367 {
            #[allow(unused_mut)]
            let mut entry_3370 = list_3369.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3370, item_3368)?;
        }
        list_3369.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3371 = writer.prefix("MaxResults");
    if let Some(var_3372) = &input.max_results {
        scope_3371.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3372).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3373 = writer.prefix("NextToken");
    if let Some(var_3374) = &input.next_token {
        scope_3373.string(var_3374);
    }
    #[allow(unused_mut)]
    let mut scope_3375 = writer.prefix("Owner");
    if let Some(var_3376) = &input.owner_ids {
        let mut list_3378 = scope_3375.start_list(true, Some("Owner"));
        for item_3377 in var_3376 {
            #[allow(unused_mut)]
            let mut entry_3379 = list_3378.entry();
            entry_3379.string(item_3377);
        }
        list_3378.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3380 = writer.prefix("RestorableBy");
    if let Some(var_3381) = &input.restorable_by_user_ids {
        let mut list_3383 = scope_3380.start_list(true, None);
        for item_3382 in var_3381 {
            #[allow(unused_mut)]
            let mut entry_3384 = list_3383.entry();
            entry_3384.string(item_3382);
        }
        list_3383.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3385 = writer.prefix("SnapshotId");
    if let Some(var_3386) = &input.snapshot_ids {
        let mut list_3388 = scope_3385.start_list(true, Some("SnapshotId"));
        for item_3387 in var_3386 {
            #[allow(unused_mut)]
            let mut entry_3389 = list_3388.entry();
            entry_3389.string(item_3387);
        }
        list_3388.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3390 = writer.prefix("DryRun");
    if let Some(var_3391) = &input.dry_run {
        scope_3390.boolean(*var_3391);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_snapshot_tier_status(
    input: &crate::input::DescribeSnapshotTierStatusInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSnapshotTierStatus", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3392 = writer.prefix("Filter");
    if let Some(var_3393) = &input.filters {
        let mut list_3395 = scope_3392.start_list(true, Some("Filter"));
        for item_3394 in var_3393 {
            #[allow(unused_mut)]
            let mut entry_3396 = list_3395.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3396, item_3394)?;
        }
        list_3395.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3397 = writer.prefix("DryRun");
    if let Some(var_3398) = &input.dry_run {
        scope_3397.boolean(*var_3398);
    }
    #[allow(unused_mut)]
    let mut scope_3399 = writer.prefix("NextToken");
    if let Some(var_3400) = &input.next_token {
        scope_3399.string(var_3400);
    }
    #[allow(unused_mut)]
    let mut scope_3401 = writer.prefix("MaxResults");
    if let Some(var_3402) = &input.max_results {
        scope_3401.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3402).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_spot_datafeed_subscription(
    input: &crate::input::DescribeSpotDatafeedSubscriptionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeSpotDatafeedSubscription",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3403 = writer.prefix("DryRun");
    if let Some(var_3404) = &input.dry_run {
        scope_3403.boolean(*var_3404);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_spot_fleet_instances(
    input: &crate::input::DescribeSpotFleetInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSpotFleetInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3405 = writer.prefix("DryRun");
    if let Some(var_3406) = &input.dry_run {
        scope_3405.boolean(*var_3406);
    }
    #[allow(unused_mut)]
    let mut scope_3407 = writer.prefix("MaxResults");
    if let Some(var_3408) = &input.max_results {
        scope_3407.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3408).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3409 = writer.prefix("NextToken");
    if let Some(var_3410) = &input.next_token {
        scope_3409.string(var_3410);
    }
    #[allow(unused_mut)]
    let mut scope_3411 = writer.prefix("SpotFleetRequestId");
    if let Some(var_3412) = &input.spot_fleet_request_id {
        scope_3411.string(var_3412);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_spot_fleet_request_history(
    input: &crate::input::DescribeSpotFleetRequestHistoryInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeSpotFleetRequestHistory",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3413 = writer.prefix("DryRun");
    if let Some(var_3414) = &input.dry_run {
        scope_3413.boolean(*var_3414);
    }
    #[allow(unused_mut)]
    let mut scope_3415 = writer.prefix("EventType");
    if let Some(var_3416) = &input.event_type {
        scope_3415.string(var_3416.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3417 = writer.prefix("MaxResults");
    if let Some(var_3418) = &input.max_results {
        scope_3417.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3418).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3419 = writer.prefix("NextToken");
    if let Some(var_3420) = &input.next_token {
        scope_3419.string(var_3420);
    }
    #[allow(unused_mut)]
    let mut scope_3421 = writer.prefix("SpotFleetRequestId");
    if let Some(var_3422) = &input.spot_fleet_request_id {
        scope_3421.string(var_3422);
    }
    #[allow(unused_mut)]
    let mut scope_3423 = writer.prefix("StartTime");
    if let Some(var_3424) = &input.start_time {
        scope_3423.date_time(var_3424, aws_smithy_types::date_time::Format::DateTime)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_spot_fleet_requests(
    input: &crate::input::DescribeSpotFleetRequestsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSpotFleetRequests", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3425 = writer.prefix("DryRun");
    if let Some(var_3426) = &input.dry_run {
        scope_3425.boolean(*var_3426);
    }
    #[allow(unused_mut)]
    let mut scope_3427 = writer.prefix("MaxResults");
    if let Some(var_3428) = &input.max_results {
        scope_3427.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3428).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3429 = writer.prefix("NextToken");
    if let Some(var_3430) = &input.next_token {
        scope_3429.string(var_3430);
    }
    #[allow(unused_mut)]
    let mut scope_3431 = writer.prefix("SpotFleetRequestId");
    if let Some(var_3432) = &input.spot_fleet_request_ids {
        let mut list_3434 = scope_3431.start_list(true, Some("item"));
        for item_3433 in var_3432 {
            #[allow(unused_mut)]
            let mut entry_3435 = list_3434.entry();
            entry_3435.string(item_3433);
        }
        list_3434.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_spot_instance_requests(
    input: &crate::input::DescribeSpotInstanceRequestsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSpotInstanceRequests", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3436 = writer.prefix("Filter");
    if let Some(var_3437) = &input.filters {
        let mut list_3439 = scope_3436.start_list(true, Some("Filter"));
        for item_3438 in var_3437 {
            #[allow(unused_mut)]
            let mut entry_3440 = list_3439.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3440, item_3438)?;
        }
        list_3439.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3441 = writer.prefix("DryRun");
    if let Some(var_3442) = &input.dry_run {
        scope_3441.boolean(*var_3442);
    }
    #[allow(unused_mut)]
    let mut scope_3443 = writer.prefix("SpotInstanceRequestId");
    if let Some(var_3444) = &input.spot_instance_request_ids {
        let mut list_3446 = scope_3443.start_list(true, Some("SpotInstanceRequestId"));
        for item_3445 in var_3444 {
            #[allow(unused_mut)]
            let mut entry_3447 = list_3446.entry();
            entry_3447.string(item_3445);
        }
        list_3446.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3448 = writer.prefix("NextToken");
    if let Some(var_3449) = &input.next_token {
        scope_3448.string(var_3449);
    }
    #[allow(unused_mut)]
    let mut scope_3450 = writer.prefix("MaxResults");
    if let Some(var_3451) = &input.max_results {
        scope_3450.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3451).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_spot_price_history(
    input: &crate::input::DescribeSpotPriceHistoryInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSpotPriceHistory", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3452 = writer.prefix("Filter");
    if let Some(var_3453) = &input.filters {
        let mut list_3455 = scope_3452.start_list(true, Some("Filter"));
        for item_3454 in var_3453 {
            #[allow(unused_mut)]
            let mut entry_3456 = list_3455.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3456, item_3454)?;
        }
        list_3455.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3457 = writer.prefix("AvailabilityZone");
    if let Some(var_3458) = &input.availability_zone {
        scope_3457.string(var_3458);
    }
    #[allow(unused_mut)]
    let mut scope_3459 = writer.prefix("DryRun");
    if let Some(var_3460) = &input.dry_run {
        scope_3459.boolean(*var_3460);
    }
    #[allow(unused_mut)]
    let mut scope_3461 = writer.prefix("EndTime");
    if let Some(var_3462) = &input.end_time {
        scope_3461.date_time(var_3462, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_3463 = writer.prefix("InstanceType");
    if let Some(var_3464) = &input.instance_types {
        let mut list_3466 = scope_3463.start_list(true, None);
        for item_3465 in var_3464 {
            #[allow(unused_mut)]
            let mut entry_3467 = list_3466.entry();
            entry_3467.string(item_3465.as_str());
        }
        list_3466.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3468 = writer.prefix("MaxResults");
    if let Some(var_3469) = &input.max_results {
        scope_3468.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3469).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3470 = writer.prefix("NextToken");
    if let Some(var_3471) = &input.next_token {
        scope_3470.string(var_3471);
    }
    #[allow(unused_mut)]
    let mut scope_3472 = writer.prefix("ProductDescription");
    if let Some(var_3473) = &input.product_descriptions {
        let mut list_3475 = scope_3472.start_list(true, None);
        for item_3474 in var_3473 {
            #[allow(unused_mut)]
            let mut entry_3476 = list_3475.entry();
            entry_3476.string(item_3474);
        }
        list_3475.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3477 = writer.prefix("StartTime");
    if let Some(var_3478) = &input.start_time {
        scope_3477.date_time(var_3478, aws_smithy_types::date_time::Format::DateTime)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_stale_security_groups(
    input: &crate::input::DescribeStaleSecurityGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeStaleSecurityGroups", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3479 = writer.prefix("DryRun");
    if let Some(var_3480) = &input.dry_run {
        scope_3479.boolean(*var_3480);
    }
    #[allow(unused_mut)]
    let mut scope_3481 = writer.prefix("MaxResults");
    if let Some(var_3482) = &input.max_results {
        scope_3481.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3482).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3483 = writer.prefix("NextToken");
    if let Some(var_3484) = &input.next_token {
        scope_3483.string(var_3484);
    }
    #[allow(unused_mut)]
    let mut scope_3485 = writer.prefix("VpcId");
    if let Some(var_3486) = &input.vpc_id {
        scope_3485.string(var_3486);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_store_image_tasks(
    input: &crate::input::DescribeStoreImageTasksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeStoreImageTasks", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3487 = writer.prefix("ImageId");
    if let Some(var_3488) = &input.image_ids {
        let mut list_3490 = scope_3487.start_list(true, Some("item"));
        for item_3489 in var_3488 {
            #[allow(unused_mut)]
            let mut entry_3491 = list_3490.entry();
            entry_3491.string(item_3489);
        }
        list_3490.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3492 = writer.prefix("DryRun");
    if let Some(var_3493) = &input.dry_run {
        scope_3492.boolean(*var_3493);
    }
    #[allow(unused_mut)]
    let mut scope_3494 = writer.prefix("Filter");
    if let Some(var_3495) = &input.filters {
        let mut list_3497 = scope_3494.start_list(true, Some("Filter"));
        for item_3496 in var_3495 {
            #[allow(unused_mut)]
            let mut entry_3498 = list_3497.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3498, item_3496)?;
        }
        list_3497.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3499 = writer.prefix("NextToken");
    if let Some(var_3500) = &input.next_token {
        scope_3499.string(var_3500);
    }
    #[allow(unused_mut)]
    let mut scope_3501 = writer.prefix("MaxResults");
    if let Some(var_3502) = &input.max_results {
        scope_3501.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3502).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_subnets(
    input: &crate::input::DescribeSubnetsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeSubnets", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3503 = writer.prefix("Filter");
    if let Some(var_3504) = &input.filters {
        let mut list_3506 = scope_3503.start_list(true, Some("Filter"));
        for item_3505 in var_3504 {
            #[allow(unused_mut)]
            let mut entry_3507 = list_3506.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3507, item_3505)?;
        }
        list_3506.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3508 = writer.prefix("SubnetId");
    if let Some(var_3509) = &input.subnet_ids {
        let mut list_3511 = scope_3508.start_list(true, Some("SubnetId"));
        for item_3510 in var_3509 {
            #[allow(unused_mut)]
            let mut entry_3512 = list_3511.entry();
            entry_3512.string(item_3510);
        }
        list_3511.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3513 = writer.prefix("DryRun");
    if let Some(var_3514) = &input.dry_run {
        scope_3513.boolean(*var_3514);
    }
    #[allow(unused_mut)]
    let mut scope_3515 = writer.prefix("NextToken");
    if let Some(var_3516) = &input.next_token {
        scope_3515.string(var_3516);
    }
    #[allow(unused_mut)]
    let mut scope_3517 = writer.prefix("MaxResults");
    if let Some(var_3518) = &input.max_results {
        scope_3517.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3518).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_tags(
    input: &crate::input::DescribeTagsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeTags", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3519 = writer.prefix("DryRun");
    if let Some(var_3520) = &input.dry_run {
        scope_3519.boolean(*var_3520);
    }
    #[allow(unused_mut)]
    let mut scope_3521 = writer.prefix("Filter");
    if let Some(var_3522) = &input.filters {
        let mut list_3524 = scope_3521.start_list(true, Some("Filter"));
        for item_3523 in var_3522 {
            #[allow(unused_mut)]
            let mut entry_3525 = list_3524.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3525, item_3523)?;
        }
        list_3524.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3526 = writer.prefix("MaxResults");
    if let Some(var_3527) = &input.max_results {
        scope_3526.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3527).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3528 = writer.prefix("NextToken");
    if let Some(var_3529) = &input.next_token {
        scope_3528.string(var_3529);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_traffic_mirror_filters(
    input: &crate::input::DescribeTrafficMirrorFiltersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeTrafficMirrorFilters", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3530 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_3531) = &input.traffic_mirror_filter_ids {
        let mut list_3533 = scope_3530.start_list(true, Some("item"));
        for item_3532 in var_3531 {
            #[allow(unused_mut)]
            let mut entry_3534 = list_3533.entry();
            entry_3534.string(item_3532);
        }
        list_3533.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3535 = writer.prefix("DryRun");
    if let Some(var_3536) = &input.dry_run {
        scope_3535.boolean(*var_3536);
    }
    #[allow(unused_mut)]
    let mut scope_3537 = writer.prefix("Filter");
    if let Some(var_3538) = &input.filters {
        let mut list_3540 = scope_3537.start_list(true, Some("Filter"));
        for item_3539 in var_3538 {
            #[allow(unused_mut)]
            let mut entry_3541 = list_3540.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3541, item_3539)?;
        }
        list_3540.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3542 = writer.prefix("MaxResults");
    if let Some(var_3543) = &input.max_results {
        scope_3542.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3543).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3544 = writer.prefix("NextToken");
    if let Some(var_3545) = &input.next_token {
        scope_3544.string(var_3545);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_traffic_mirror_sessions(
    input: &crate::input::DescribeTrafficMirrorSessionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeTrafficMirrorSessions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3546 = writer.prefix("TrafficMirrorSessionId");
    if let Some(var_3547) = &input.traffic_mirror_session_ids {
        let mut list_3549 = scope_3546.start_list(true, Some("item"));
        for item_3548 in var_3547 {
            #[allow(unused_mut)]
            let mut entry_3550 = list_3549.entry();
            entry_3550.string(item_3548);
        }
        list_3549.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3551 = writer.prefix("DryRun");
    if let Some(var_3552) = &input.dry_run {
        scope_3551.boolean(*var_3552);
    }
    #[allow(unused_mut)]
    let mut scope_3553 = writer.prefix("Filter");
    if let Some(var_3554) = &input.filters {
        let mut list_3556 = scope_3553.start_list(true, Some("Filter"));
        for item_3555 in var_3554 {
            #[allow(unused_mut)]
            let mut entry_3557 = list_3556.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3557, item_3555)?;
        }
        list_3556.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3558 = writer.prefix("MaxResults");
    if let Some(var_3559) = &input.max_results {
        scope_3558.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3559).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3560 = writer.prefix("NextToken");
    if let Some(var_3561) = &input.next_token {
        scope_3560.string(var_3561);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_traffic_mirror_targets(
    input: &crate::input::DescribeTrafficMirrorTargetsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeTrafficMirrorTargets", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3562 = writer.prefix("TrafficMirrorTargetId");
    if let Some(var_3563) = &input.traffic_mirror_target_ids {
        let mut list_3565 = scope_3562.start_list(true, Some("item"));
        for item_3564 in var_3563 {
            #[allow(unused_mut)]
            let mut entry_3566 = list_3565.entry();
            entry_3566.string(item_3564);
        }
        list_3565.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3567 = writer.prefix("DryRun");
    if let Some(var_3568) = &input.dry_run {
        scope_3567.boolean(*var_3568);
    }
    #[allow(unused_mut)]
    let mut scope_3569 = writer.prefix("Filter");
    if let Some(var_3570) = &input.filters {
        let mut list_3572 = scope_3569.start_list(true, Some("Filter"));
        for item_3571 in var_3570 {
            #[allow(unused_mut)]
            let mut entry_3573 = list_3572.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3573, item_3571)?;
        }
        list_3572.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3574 = writer.prefix("MaxResults");
    if let Some(var_3575) = &input.max_results {
        scope_3574.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3575).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3576 = writer.prefix("NextToken");
    if let Some(var_3577) = &input.next_token {
        scope_3576.string(var_3577);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_attachments(
    input: &crate::input::DescribeTransitGatewayAttachmentsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTransitGatewayAttachments",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3578 = writer.prefix("TransitGatewayAttachmentIds");
    if let Some(var_3579) = &input.transit_gateway_attachment_ids {
        let mut list_3581 = scope_3578.start_list(true, None);
        for item_3580 in var_3579 {
            #[allow(unused_mut)]
            let mut entry_3582 = list_3581.entry();
            entry_3582.string(item_3580);
        }
        list_3581.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3583 = writer.prefix("Filter");
    if let Some(var_3584) = &input.filters {
        let mut list_3586 = scope_3583.start_list(true, Some("Filter"));
        for item_3585 in var_3584 {
            #[allow(unused_mut)]
            let mut entry_3587 = list_3586.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3587, item_3585)?;
        }
        list_3586.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3588 = writer.prefix("MaxResults");
    if let Some(var_3589) = &input.max_results {
        scope_3588.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3589).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3590 = writer.prefix("NextToken");
    if let Some(var_3591) = &input.next_token {
        scope_3590.string(var_3591);
    }
    #[allow(unused_mut)]
    let mut scope_3592 = writer.prefix("DryRun");
    if let Some(var_3593) = &input.dry_run {
        scope_3592.boolean(*var_3593);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_connect_peers(
    input: &crate::input::DescribeTransitGatewayConnectPeersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTransitGatewayConnectPeers",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3594 = writer.prefix("TransitGatewayConnectPeerIds");
    if let Some(var_3595) = &input.transit_gateway_connect_peer_ids {
        let mut list_3597 = scope_3594.start_list(true, Some("item"));
        for item_3596 in var_3595 {
            #[allow(unused_mut)]
            let mut entry_3598 = list_3597.entry();
            entry_3598.string(item_3596);
        }
        list_3597.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3599 = writer.prefix("Filter");
    if let Some(var_3600) = &input.filters {
        let mut list_3602 = scope_3599.start_list(true, Some("Filter"));
        for item_3601 in var_3600 {
            #[allow(unused_mut)]
            let mut entry_3603 = list_3602.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3603, item_3601)?;
        }
        list_3602.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3604 = writer.prefix("MaxResults");
    if let Some(var_3605) = &input.max_results {
        scope_3604.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3605).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3606 = writer.prefix("NextToken");
    if let Some(var_3607) = &input.next_token {
        scope_3606.string(var_3607);
    }
    #[allow(unused_mut)]
    let mut scope_3608 = writer.prefix("DryRun");
    if let Some(var_3609) = &input.dry_run {
        scope_3608.boolean(*var_3609);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_connects(
    input: &crate::input::DescribeTransitGatewayConnectsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTransitGatewayConnects",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3610 = writer.prefix("TransitGatewayAttachmentIds");
    if let Some(var_3611) = &input.transit_gateway_attachment_ids {
        let mut list_3613 = scope_3610.start_list(true, None);
        for item_3612 in var_3611 {
            #[allow(unused_mut)]
            let mut entry_3614 = list_3613.entry();
            entry_3614.string(item_3612);
        }
        list_3613.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3615 = writer.prefix("Filter");
    if let Some(var_3616) = &input.filters {
        let mut list_3618 = scope_3615.start_list(true, Some("Filter"));
        for item_3617 in var_3616 {
            #[allow(unused_mut)]
            let mut entry_3619 = list_3618.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3619, item_3617)?;
        }
        list_3618.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3620 = writer.prefix("MaxResults");
    if let Some(var_3621) = &input.max_results {
        scope_3620.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3621).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3622 = writer.prefix("NextToken");
    if let Some(var_3623) = &input.next_token {
        scope_3622.string(var_3623);
    }
    #[allow(unused_mut)]
    let mut scope_3624 = writer.prefix("DryRun");
    if let Some(var_3625) = &input.dry_run {
        scope_3624.boolean(*var_3625);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_multicast_domains(
    input: &crate::input::DescribeTransitGatewayMulticastDomainsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTransitGatewayMulticastDomains",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3626 = writer.prefix("TransitGatewayMulticastDomainIds");
    if let Some(var_3627) = &input.transit_gateway_multicast_domain_ids {
        let mut list_3629 = scope_3626.start_list(true, Some("item"));
        for item_3628 in var_3627 {
            #[allow(unused_mut)]
            let mut entry_3630 = list_3629.entry();
            entry_3630.string(item_3628);
        }
        list_3629.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3631 = writer.prefix("Filter");
    if let Some(var_3632) = &input.filters {
        let mut list_3634 = scope_3631.start_list(true, Some("Filter"));
        for item_3633 in var_3632 {
            #[allow(unused_mut)]
            let mut entry_3635 = list_3634.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3635, item_3633)?;
        }
        list_3634.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3636 = writer.prefix("MaxResults");
    if let Some(var_3637) = &input.max_results {
        scope_3636.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3637).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3638 = writer.prefix("NextToken");
    if let Some(var_3639) = &input.next_token {
        scope_3638.string(var_3639);
    }
    #[allow(unused_mut)]
    let mut scope_3640 = writer.prefix("DryRun");
    if let Some(var_3641) = &input.dry_run {
        scope_3640.boolean(*var_3641);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_peering_attachments(
    input: &crate::input::DescribeTransitGatewayPeeringAttachmentsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTransitGatewayPeeringAttachments",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3642 = writer.prefix("TransitGatewayAttachmentIds");
    if let Some(var_3643) = &input.transit_gateway_attachment_ids {
        let mut list_3645 = scope_3642.start_list(true, None);
        for item_3644 in var_3643 {
            #[allow(unused_mut)]
            let mut entry_3646 = list_3645.entry();
            entry_3646.string(item_3644);
        }
        list_3645.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3647 = writer.prefix("Filter");
    if let Some(var_3648) = &input.filters {
        let mut list_3650 = scope_3647.start_list(true, Some("Filter"));
        for item_3649 in var_3648 {
            #[allow(unused_mut)]
            let mut entry_3651 = list_3650.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3651, item_3649)?;
        }
        list_3650.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3652 = writer.prefix("MaxResults");
    if let Some(var_3653) = &input.max_results {
        scope_3652.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3653).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3654 = writer.prefix("NextToken");
    if let Some(var_3655) = &input.next_token {
        scope_3654.string(var_3655);
    }
    #[allow(unused_mut)]
    let mut scope_3656 = writer.prefix("DryRun");
    if let Some(var_3657) = &input.dry_run {
        scope_3656.boolean(*var_3657);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_route_tables(
    input: &crate::input::DescribeTransitGatewayRouteTablesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTransitGatewayRouteTables",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3658 = writer.prefix("TransitGatewayRouteTableIds");
    if let Some(var_3659) = &input.transit_gateway_route_table_ids {
        let mut list_3661 = scope_3658.start_list(true, Some("item"));
        for item_3660 in var_3659 {
            #[allow(unused_mut)]
            let mut entry_3662 = list_3661.entry();
            entry_3662.string(item_3660);
        }
        list_3661.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3663 = writer.prefix("Filter");
    if let Some(var_3664) = &input.filters {
        let mut list_3666 = scope_3663.start_list(true, Some("Filter"));
        for item_3665 in var_3664 {
            #[allow(unused_mut)]
            let mut entry_3667 = list_3666.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3667, item_3665)?;
        }
        list_3666.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3668 = writer.prefix("MaxResults");
    if let Some(var_3669) = &input.max_results {
        scope_3668.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3669).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3670 = writer.prefix("NextToken");
    if let Some(var_3671) = &input.next_token {
        scope_3670.string(var_3671);
    }
    #[allow(unused_mut)]
    let mut scope_3672 = writer.prefix("DryRun");
    if let Some(var_3673) = &input.dry_run {
        scope_3672.boolean(*var_3673);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateways(
    input: &crate::input::DescribeTransitGatewaysInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeTransitGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3674 = writer.prefix("TransitGatewayIds");
    if let Some(var_3675) = &input.transit_gateway_ids {
        let mut list_3677 = scope_3674.start_list(true, Some("item"));
        for item_3676 in var_3675 {
            #[allow(unused_mut)]
            let mut entry_3678 = list_3677.entry();
            entry_3678.string(item_3676);
        }
        list_3677.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3679 = writer.prefix("Filter");
    if let Some(var_3680) = &input.filters {
        let mut list_3682 = scope_3679.start_list(true, Some("Filter"));
        for item_3681 in var_3680 {
            #[allow(unused_mut)]
            let mut entry_3683 = list_3682.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3683, item_3681)?;
        }
        list_3682.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3684 = writer.prefix("MaxResults");
    if let Some(var_3685) = &input.max_results {
        scope_3684.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3685).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3686 = writer.prefix("NextToken");
    if let Some(var_3687) = &input.next_token {
        scope_3686.string(var_3687);
    }
    #[allow(unused_mut)]
    let mut scope_3688 = writer.prefix("DryRun");
    if let Some(var_3689) = &input.dry_run {
        scope_3688.boolean(*var_3689);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_transit_gateway_vpc_attachments(
    input: &crate::input::DescribeTransitGatewayVpcAttachmentsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTransitGatewayVpcAttachments",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3690 = writer.prefix("TransitGatewayAttachmentIds");
    if let Some(var_3691) = &input.transit_gateway_attachment_ids {
        let mut list_3693 = scope_3690.start_list(true, None);
        for item_3692 in var_3691 {
            #[allow(unused_mut)]
            let mut entry_3694 = list_3693.entry();
            entry_3694.string(item_3692);
        }
        list_3693.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3695 = writer.prefix("Filter");
    if let Some(var_3696) = &input.filters {
        let mut list_3698 = scope_3695.start_list(true, Some("Filter"));
        for item_3697 in var_3696 {
            #[allow(unused_mut)]
            let mut entry_3699 = list_3698.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3699, item_3697)?;
        }
        list_3698.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3700 = writer.prefix("MaxResults");
    if let Some(var_3701) = &input.max_results {
        scope_3700.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3701).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3702 = writer.prefix("NextToken");
    if let Some(var_3703) = &input.next_token {
        scope_3702.string(var_3703);
    }
    #[allow(unused_mut)]
    let mut scope_3704 = writer.prefix("DryRun");
    if let Some(var_3705) = &input.dry_run {
        scope_3704.boolean(*var_3705);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_trunk_interface_associations(
    input: &crate::input::DescribeTrunkInterfaceAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTrunkInterfaceAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3706 = writer.prefix("AssociationId");
    if let Some(var_3707) = &input.association_ids {
        let mut list_3709 = scope_3706.start_list(true, Some("item"));
        for item_3708 in var_3707 {
            #[allow(unused_mut)]
            let mut entry_3710 = list_3709.entry();
            entry_3710.string(item_3708);
        }
        list_3709.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3711 = writer.prefix("DryRun");
    if let Some(var_3712) = &input.dry_run {
        scope_3711.boolean(*var_3712);
    }
    #[allow(unused_mut)]
    let mut scope_3713 = writer.prefix("Filter");
    if let Some(var_3714) = &input.filters {
        let mut list_3716 = scope_3713.start_list(true, Some("Filter"));
        for item_3715 in var_3714 {
            #[allow(unused_mut)]
            let mut entry_3717 = list_3716.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3717, item_3715)?;
        }
        list_3716.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3718 = writer.prefix("NextToken");
    if let Some(var_3719) = &input.next_token {
        scope_3718.string(var_3719);
    }
    #[allow(unused_mut)]
    let mut scope_3720 = writer.prefix("MaxResults");
    if let Some(var_3721) = &input.max_results {
        scope_3720.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3721).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_volume_attribute(
    input: &crate::input::DescribeVolumeAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVolumeAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3722 = writer.prefix("Attribute");
    if let Some(var_3723) = &input.attribute {
        scope_3722.string(var_3723.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3724 = writer.prefix("VolumeId");
    if let Some(var_3725) = &input.volume_id {
        scope_3724.string(var_3725);
    }
    #[allow(unused_mut)]
    let mut scope_3726 = writer.prefix("DryRun");
    if let Some(var_3727) = &input.dry_run {
        scope_3726.boolean(*var_3727);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_volumes(
    input: &crate::input::DescribeVolumesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeVolumes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3728 = writer.prefix("Filter");
    if let Some(var_3729) = &input.filters {
        let mut list_3731 = scope_3728.start_list(true, Some("Filter"));
        for item_3730 in var_3729 {
            #[allow(unused_mut)]
            let mut entry_3732 = list_3731.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3732, item_3730)?;
        }
        list_3731.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3733 = writer.prefix("VolumeId");
    if let Some(var_3734) = &input.volume_ids {
        let mut list_3736 = scope_3733.start_list(true, Some("VolumeId"));
        for item_3735 in var_3734 {
            #[allow(unused_mut)]
            let mut entry_3737 = list_3736.entry();
            entry_3737.string(item_3735);
        }
        list_3736.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3738 = writer.prefix("DryRun");
    if let Some(var_3739) = &input.dry_run {
        scope_3738.boolean(*var_3739);
    }
    #[allow(unused_mut)]
    let mut scope_3740 = writer.prefix("MaxResults");
    if let Some(var_3741) = &input.max_results {
        scope_3740.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3741).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3742 = writer.prefix("NextToken");
    if let Some(var_3743) = &input.next_token {
        scope_3742.string(var_3743);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_volumes_modifications(
    input: &crate::input::DescribeVolumesModificationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVolumesModifications", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3744 = writer.prefix("DryRun");
    if let Some(var_3745) = &input.dry_run {
        scope_3744.boolean(*var_3745);
    }
    #[allow(unused_mut)]
    let mut scope_3746 = writer.prefix("VolumeId");
    if let Some(var_3747) = &input.volume_ids {
        let mut list_3749 = scope_3746.start_list(true, Some("VolumeId"));
        for item_3748 in var_3747 {
            #[allow(unused_mut)]
            let mut entry_3750 = list_3749.entry();
            entry_3750.string(item_3748);
        }
        list_3749.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3751 = writer.prefix("Filter");
    if let Some(var_3752) = &input.filters {
        let mut list_3754 = scope_3751.start_list(true, Some("Filter"));
        for item_3753 in var_3752 {
            #[allow(unused_mut)]
            let mut entry_3755 = list_3754.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3755, item_3753)?;
        }
        list_3754.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3756 = writer.prefix("NextToken");
    if let Some(var_3757) = &input.next_token {
        scope_3756.string(var_3757);
    }
    #[allow(unused_mut)]
    let mut scope_3758 = writer.prefix("MaxResults");
    if let Some(var_3759) = &input.max_results {
        scope_3758.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3759).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_volume_status(
    input: &crate::input::DescribeVolumeStatusInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVolumeStatus", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3760 = writer.prefix("Filter");
    if let Some(var_3761) = &input.filters {
        let mut list_3763 = scope_3760.start_list(true, Some("Filter"));
        for item_3762 in var_3761 {
            #[allow(unused_mut)]
            let mut entry_3764 = list_3763.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3764, item_3762)?;
        }
        list_3763.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3765 = writer.prefix("MaxResults");
    if let Some(var_3766) = &input.max_results {
        scope_3765.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3766).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3767 = writer.prefix("NextToken");
    if let Some(var_3768) = &input.next_token {
        scope_3767.string(var_3768);
    }
    #[allow(unused_mut)]
    let mut scope_3769 = writer.prefix("VolumeId");
    if let Some(var_3770) = &input.volume_ids {
        let mut list_3772 = scope_3769.start_list(true, Some("VolumeId"));
        for item_3771 in var_3770 {
            #[allow(unused_mut)]
            let mut entry_3773 = list_3772.entry();
            entry_3773.string(item_3771);
        }
        list_3772.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3774 = writer.prefix("DryRun");
    if let Some(var_3775) = &input.dry_run {
        scope_3774.boolean(*var_3775);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_attribute(
    input: &crate::input::DescribeVpcAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpcAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3776 = writer.prefix("Attribute");
    if let Some(var_3777) = &input.attribute {
        scope_3776.string(var_3777.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3778 = writer.prefix("VpcId");
    if let Some(var_3779) = &input.vpc_id {
        scope_3778.string(var_3779);
    }
    #[allow(unused_mut)]
    let mut scope_3780 = writer.prefix("DryRun");
    if let Some(var_3781) = &input.dry_run {
        scope_3780.boolean(*var_3781);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_classic_link(
    input: &crate::input::DescribeVpcClassicLinkInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpcClassicLink", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3782 = writer.prefix("Filter");
    if let Some(var_3783) = &input.filters {
        let mut list_3785 = scope_3782.start_list(true, Some("Filter"));
        for item_3784 in var_3783 {
            #[allow(unused_mut)]
            let mut entry_3786 = list_3785.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3786, item_3784)?;
        }
        list_3785.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3787 = writer.prefix("DryRun");
    if let Some(var_3788) = &input.dry_run {
        scope_3787.boolean(*var_3788);
    }
    #[allow(unused_mut)]
    let mut scope_3789 = writer.prefix("VpcId");
    if let Some(var_3790) = &input.vpc_ids {
        let mut list_3792 = scope_3789.start_list(true, Some("VpcId"));
        for item_3791 in var_3790 {
            #[allow(unused_mut)]
            let mut entry_3793 = list_3792.entry();
            entry_3793.string(item_3791);
        }
        list_3792.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_classic_link_dns_support(
    input: &crate::input::DescribeVpcClassicLinkDnsSupportInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeVpcClassicLinkDnsSupport",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3794 = writer.prefix("MaxResults");
    if let Some(var_3795) = &input.max_results {
        scope_3794.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3795).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3796 = writer.prefix("NextToken");
    if let Some(var_3797) = &input.next_token {
        scope_3796.string(var_3797);
    }
    #[allow(unused_mut)]
    let mut scope_3798 = writer.prefix("VpcIds");
    if let Some(var_3799) = &input.vpc_ids {
        let mut list_3801 = scope_3798.start_list(true, Some("VpcId"));
        for item_3800 in var_3799 {
            #[allow(unused_mut)]
            let mut entry_3802 = list_3801.entry();
            entry_3802.string(item_3800);
        }
        list_3801.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_endpoint_connection_notifications(
    input: &crate::input::DescribeVpcEndpointConnectionNotificationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeVpcEndpointConnectionNotifications",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3803 = writer.prefix("DryRun");
    if let Some(var_3804) = &input.dry_run {
        scope_3803.boolean(*var_3804);
    }
    #[allow(unused_mut)]
    let mut scope_3805 = writer.prefix("ConnectionNotificationId");
    if let Some(var_3806) = &input.connection_notification_id {
        scope_3805.string(var_3806);
    }
    #[allow(unused_mut)]
    let mut scope_3807 = writer.prefix("Filter");
    if let Some(var_3808) = &input.filters {
        let mut list_3810 = scope_3807.start_list(true, Some("Filter"));
        for item_3809 in var_3808 {
            #[allow(unused_mut)]
            let mut entry_3811 = list_3810.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3811, item_3809)?;
        }
        list_3810.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3812 = writer.prefix("MaxResults");
    if let Some(var_3813) = &input.max_results {
        scope_3812.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3813).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3814 = writer.prefix("NextToken");
    if let Some(var_3815) = &input.next_token {
        scope_3814.string(var_3815);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_endpoint_connections(
    input: &crate::input::DescribeVpcEndpointConnectionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeVpcEndpointConnections",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3816 = writer.prefix("DryRun");
    if let Some(var_3817) = &input.dry_run {
        scope_3816.boolean(*var_3817);
    }
    #[allow(unused_mut)]
    let mut scope_3818 = writer.prefix("Filter");
    if let Some(var_3819) = &input.filters {
        let mut list_3821 = scope_3818.start_list(true, Some("Filter"));
        for item_3820 in var_3819 {
            #[allow(unused_mut)]
            let mut entry_3822 = list_3821.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3822, item_3820)?;
        }
        list_3821.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3823 = writer.prefix("MaxResults");
    if let Some(var_3824) = &input.max_results {
        scope_3823.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3824).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3825 = writer.prefix("NextToken");
    if let Some(var_3826) = &input.next_token {
        scope_3825.string(var_3826);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_endpoints(
    input: &crate::input::DescribeVpcEndpointsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpcEndpoints", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3827 = writer.prefix("DryRun");
    if let Some(var_3828) = &input.dry_run {
        scope_3827.boolean(*var_3828);
    }
    #[allow(unused_mut)]
    let mut scope_3829 = writer.prefix("VpcEndpointId");
    if let Some(var_3830) = &input.vpc_endpoint_ids {
        let mut list_3832 = scope_3829.start_list(true, Some("item"));
        for item_3831 in var_3830 {
            #[allow(unused_mut)]
            let mut entry_3833 = list_3832.entry();
            entry_3833.string(item_3831);
        }
        list_3832.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3834 = writer.prefix("Filter");
    if let Some(var_3835) = &input.filters {
        let mut list_3837 = scope_3834.start_list(true, Some("Filter"));
        for item_3836 in var_3835 {
            #[allow(unused_mut)]
            let mut entry_3838 = list_3837.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3838, item_3836)?;
        }
        list_3837.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3839 = writer.prefix("MaxResults");
    if let Some(var_3840) = &input.max_results {
        scope_3839.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3840).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3841 = writer.prefix("NextToken");
    if let Some(var_3842) = &input.next_token {
        scope_3841.string(var_3842);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_endpoint_service_configurations(
    input: &crate::input::DescribeVpcEndpointServiceConfigurationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeVpcEndpointServiceConfigurations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3843 = writer.prefix("DryRun");
    if let Some(var_3844) = &input.dry_run {
        scope_3843.boolean(*var_3844);
    }
    #[allow(unused_mut)]
    let mut scope_3845 = writer.prefix("ServiceId");
    if let Some(var_3846) = &input.service_ids {
        let mut list_3848 = scope_3845.start_list(true, Some("item"));
        for item_3847 in var_3846 {
            #[allow(unused_mut)]
            let mut entry_3849 = list_3848.entry();
            entry_3849.string(item_3847);
        }
        list_3848.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3850 = writer.prefix("Filter");
    if let Some(var_3851) = &input.filters {
        let mut list_3853 = scope_3850.start_list(true, Some("Filter"));
        for item_3852 in var_3851 {
            #[allow(unused_mut)]
            let mut entry_3854 = list_3853.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3854, item_3852)?;
        }
        list_3853.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3855 = writer.prefix("MaxResults");
    if let Some(var_3856) = &input.max_results {
        scope_3855.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3856).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3857 = writer.prefix("NextToken");
    if let Some(var_3858) = &input.next_token {
        scope_3857.string(var_3858);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_endpoint_service_permissions(
    input: &crate::input::DescribeVpcEndpointServicePermissionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeVpcEndpointServicePermissions",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_3859 = writer.prefix("DryRun");
    if let Some(var_3860) = &input.dry_run {
        scope_3859.boolean(*var_3860);
    }
    #[allow(unused_mut)]
    let mut scope_3861 = writer.prefix("ServiceId");
    if let Some(var_3862) = &input.service_id {
        scope_3861.string(var_3862);
    }
    #[allow(unused_mut)]
    let mut scope_3863 = writer.prefix("Filter");
    if let Some(var_3864) = &input.filters {
        let mut list_3866 = scope_3863.start_list(true, Some("Filter"));
        for item_3865 in var_3864 {
            #[allow(unused_mut)]
            let mut entry_3867 = list_3866.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3867, item_3865)?;
        }
        list_3866.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3868 = writer.prefix("MaxResults");
    if let Some(var_3869) = &input.max_results {
        scope_3868.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3869).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3870 = writer.prefix("NextToken");
    if let Some(var_3871) = &input.next_token {
        scope_3870.string(var_3871);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_endpoint_services(
    input: &crate::input::DescribeVpcEndpointServicesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpcEndpointServices", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3872 = writer.prefix("DryRun");
    if let Some(var_3873) = &input.dry_run {
        scope_3872.boolean(*var_3873);
    }
    #[allow(unused_mut)]
    let mut scope_3874 = writer.prefix("ServiceName");
    if let Some(var_3875) = &input.service_names {
        let mut list_3877 = scope_3874.start_list(true, Some("item"));
        for item_3876 in var_3875 {
            #[allow(unused_mut)]
            let mut entry_3878 = list_3877.entry();
            entry_3878.string(item_3876);
        }
        list_3877.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3879 = writer.prefix("Filter");
    if let Some(var_3880) = &input.filters {
        let mut list_3882 = scope_3879.start_list(true, Some("Filter"));
        for item_3881 in var_3880 {
            #[allow(unused_mut)]
            let mut entry_3883 = list_3882.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3883, item_3881)?;
        }
        list_3882.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3884 = writer.prefix("MaxResults");
    if let Some(var_3885) = &input.max_results {
        scope_3884.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3885).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3886 = writer.prefix("NextToken");
    if let Some(var_3887) = &input.next_token {
        scope_3886.string(var_3887);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpc_peering_connections(
    input: &crate::input::DescribeVpcPeeringConnectionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpcPeeringConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3888 = writer.prefix("Filter");
    if let Some(var_3889) = &input.filters {
        let mut list_3891 = scope_3888.start_list(true, Some("Filter"));
        for item_3890 in var_3889 {
            #[allow(unused_mut)]
            let mut entry_3892 = list_3891.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3892, item_3890)?;
        }
        list_3891.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3893 = writer.prefix("DryRun");
    if let Some(var_3894) = &input.dry_run {
        scope_3893.boolean(*var_3894);
    }
    #[allow(unused_mut)]
    let mut scope_3895 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_3896) = &input.vpc_peering_connection_ids {
        let mut list_3898 = scope_3895.start_list(true, Some("item"));
        for item_3897 in var_3896 {
            #[allow(unused_mut)]
            let mut entry_3899 = list_3898.entry();
            entry_3899.string(item_3897);
        }
        list_3898.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3900 = writer.prefix("NextToken");
    if let Some(var_3901) = &input.next_token {
        scope_3900.string(var_3901);
    }
    #[allow(unused_mut)]
    let mut scope_3902 = writer.prefix("MaxResults");
    if let Some(var_3903) = &input.max_results {
        scope_3902.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3903).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpcs(
    input: &crate::input::DescribeVpcsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpcs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3904 = writer.prefix("Filter");
    if let Some(var_3905) = &input.filters {
        let mut list_3907 = scope_3904.start_list(true, Some("Filter"));
        for item_3906 in var_3905 {
            #[allow(unused_mut)]
            let mut entry_3908 = list_3907.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3908, item_3906)?;
        }
        list_3907.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3909 = writer.prefix("VpcId");
    if let Some(var_3910) = &input.vpc_ids {
        let mut list_3912 = scope_3909.start_list(true, Some("VpcId"));
        for item_3911 in var_3910 {
            #[allow(unused_mut)]
            let mut entry_3913 = list_3912.entry();
            entry_3913.string(item_3911);
        }
        list_3912.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3914 = writer.prefix("DryRun");
    if let Some(var_3915) = &input.dry_run {
        scope_3914.boolean(*var_3915);
    }
    #[allow(unused_mut)]
    let mut scope_3916 = writer.prefix("NextToken");
    if let Some(var_3917) = &input.next_token {
        scope_3916.string(var_3917);
    }
    #[allow(unused_mut)]
    let mut scope_3918 = writer.prefix("MaxResults");
    if let Some(var_3919) = &input.max_results {
        scope_3918.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3919).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpn_connections(
    input: &crate::input::DescribeVpnConnectionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpnConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3920 = writer.prefix("Filter");
    if let Some(var_3921) = &input.filters {
        let mut list_3923 = scope_3920.start_list(true, Some("Filter"));
        for item_3922 in var_3921 {
            #[allow(unused_mut)]
            let mut entry_3924 = list_3923.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3924, item_3922)?;
        }
        list_3923.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3925 = writer.prefix("VpnConnectionId");
    if let Some(var_3926) = &input.vpn_connection_ids {
        let mut list_3928 = scope_3925.start_list(true, Some("VpnConnectionId"));
        for item_3927 in var_3926 {
            #[allow(unused_mut)]
            let mut entry_3929 = list_3928.entry();
            entry_3929.string(item_3927);
        }
        list_3928.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3930 = writer.prefix("DryRun");
    if let Some(var_3931) = &input.dry_run {
        scope_3930.boolean(*var_3931);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_vpn_gateways(
    input: &crate::input::DescribeVpnGatewaysInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeVpnGateways", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3932 = writer.prefix("Filter");
    if let Some(var_3933) = &input.filters {
        let mut list_3935 = scope_3932.start_list(true, Some("Filter"));
        for item_3934 in var_3933 {
            #[allow(unused_mut)]
            let mut entry_3936 = list_3935.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_3936, item_3934)?;
        }
        list_3935.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3937 = writer.prefix("VpnGatewayId");
    if let Some(var_3938) = &input.vpn_gateway_ids {
        let mut list_3940 = scope_3937.start_list(true, Some("VpnGatewayId"));
        for item_3939 in var_3938 {
            #[allow(unused_mut)]
            let mut entry_3941 = list_3940.entry();
            entry_3941.string(item_3939);
        }
        list_3940.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3942 = writer.prefix("DryRun");
    if let Some(var_3943) = &input.dry_run {
        scope_3942.boolean(*var_3943);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_detach_classic_link_vpc(
    input: &crate::input::DetachClassicLinkVpcInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DetachClassicLinkVpc", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3944 = writer.prefix("DryRun");
    if let Some(var_3945) = &input.dry_run {
        scope_3944.boolean(*var_3945);
    }
    #[allow(unused_mut)]
    let mut scope_3946 = writer.prefix("InstanceId");
    if let Some(var_3947) = &input.instance_id {
        scope_3946.string(var_3947);
    }
    #[allow(unused_mut)]
    let mut scope_3948 = writer.prefix("VpcId");
    if let Some(var_3949) = &input.vpc_id {
        scope_3948.string(var_3949);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_detach_internet_gateway(
    input: &crate::input::DetachInternetGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DetachInternetGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3950 = writer.prefix("DryRun");
    if let Some(var_3951) = &input.dry_run {
        scope_3950.boolean(*var_3951);
    }
    #[allow(unused_mut)]
    let mut scope_3952 = writer.prefix("InternetGatewayId");
    if let Some(var_3953) = &input.internet_gateway_id {
        scope_3952.string(var_3953);
    }
    #[allow(unused_mut)]
    let mut scope_3954 = writer.prefix("VpcId");
    if let Some(var_3955) = &input.vpc_id {
        scope_3954.string(var_3955);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_detach_network_interface(
    input: &crate::input::DetachNetworkInterfaceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DetachNetworkInterface", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3956 = writer.prefix("AttachmentId");
    if let Some(var_3957) = &input.attachment_id {
        scope_3956.string(var_3957);
    }
    #[allow(unused_mut)]
    let mut scope_3958 = writer.prefix("DryRun");
    if let Some(var_3959) = &input.dry_run {
        scope_3958.boolean(*var_3959);
    }
    #[allow(unused_mut)]
    let mut scope_3960 = writer.prefix("Force");
    if let Some(var_3961) = &input.force {
        scope_3960.boolean(*var_3961);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_detach_volume(
    input: &crate::input::DetachVolumeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DetachVolume", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3962 = writer.prefix("Device");
    if let Some(var_3963) = &input.device {
        scope_3962.string(var_3963);
    }
    #[allow(unused_mut)]
    let mut scope_3964 = writer.prefix("Force");
    if let Some(var_3965) = &input.force {
        scope_3964.boolean(*var_3965);
    }
    #[allow(unused_mut)]
    let mut scope_3966 = writer.prefix("InstanceId");
    if let Some(var_3967) = &input.instance_id {
        scope_3966.string(var_3967);
    }
    #[allow(unused_mut)]
    let mut scope_3968 = writer.prefix("VolumeId");
    if let Some(var_3969) = &input.volume_id {
        scope_3968.string(var_3969);
    }
    #[allow(unused_mut)]
    let mut scope_3970 = writer.prefix("DryRun");
    if let Some(var_3971) = &input.dry_run {
        scope_3970.boolean(*var_3971);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_detach_vpn_gateway(
    input: &crate::input::DetachVpnGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DetachVpnGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3972 = writer.prefix("VpcId");
    if let Some(var_3973) = &input.vpc_id {
        scope_3972.string(var_3973);
    }
    #[allow(unused_mut)]
    let mut scope_3974 = writer.prefix("VpnGatewayId");
    if let Some(var_3975) = &input.vpn_gateway_id {
        scope_3974.string(var_3975);
    }
    #[allow(unused_mut)]
    let mut scope_3976 = writer.prefix("DryRun");
    if let Some(var_3977) = &input.dry_run {
        scope_3976.boolean(*var_3977);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_ebs_encryption_by_default(
    input: &crate::input::DisableEbsEncryptionByDefaultInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisableEbsEncryptionByDefault", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3978 = writer.prefix("DryRun");
    if let Some(var_3979) = &input.dry_run {
        scope_3978.boolean(*var_3979);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_fast_launch(
    input: &crate::input::DisableFastLaunchInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisableFastLaunch", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3980 = writer.prefix("ImageId");
    if let Some(var_3981) = &input.image_id {
        scope_3980.string(var_3981);
    }
    #[allow(unused_mut)]
    let mut scope_3982 = writer.prefix("Force");
    if let Some(var_3983) = &input.force {
        scope_3982.boolean(*var_3983);
    }
    #[allow(unused_mut)]
    let mut scope_3984 = writer.prefix("DryRun");
    if let Some(var_3985) = &input.dry_run {
        scope_3984.boolean(*var_3985);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_fast_snapshot_restores(
    input: &crate::input::DisableFastSnapshotRestoresInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisableFastSnapshotRestores", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3986 = writer.prefix("AvailabilityZone");
    if let Some(var_3987) = &input.availability_zones {
        let mut list_3989 = scope_3986.start_list(true, Some("AvailabilityZone"));
        for item_3988 in var_3987 {
            #[allow(unused_mut)]
            let mut entry_3990 = list_3989.entry();
            entry_3990.string(item_3988);
        }
        list_3989.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3991 = writer.prefix("SourceSnapshotId");
    if let Some(var_3992) = &input.source_snapshot_ids {
        let mut list_3994 = scope_3991.start_list(true, Some("SnapshotId"));
        for item_3993 in var_3992 {
            #[allow(unused_mut)]
            let mut entry_3995 = list_3994.entry();
            entry_3995.string(item_3993);
        }
        list_3994.finish();
    }
    #[allow(unused_mut)]
    let mut scope_3996 = writer.prefix("DryRun");
    if let Some(var_3997) = &input.dry_run {
        scope_3996.boolean(*var_3997);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_image_deprecation(
    input: &crate::input::DisableImageDeprecationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisableImageDeprecation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_3998 = writer.prefix("ImageId");
    if let Some(var_3999) = &input.image_id {
        scope_3998.string(var_3999);
    }
    #[allow(unused_mut)]
    let mut scope_4000 = writer.prefix("DryRun");
    if let Some(var_4001) = &input.dry_run {
        scope_4000.boolean(*var_4001);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_ipam_organization_admin_account(
    input: &crate::input::DisableIpamOrganizationAdminAccountInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisableIpamOrganizationAdminAccount",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4002 = writer.prefix("DryRun");
    if let Some(var_4003) = &input.dry_run {
        scope_4002.boolean(*var_4003);
    }
    #[allow(unused_mut)]
    let mut scope_4004 = writer.prefix("DelegatedAdminAccountId");
    if let Some(var_4005) = &input.delegated_admin_account_id {
        scope_4004.string(var_4005);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_serial_console_access(
    input: &crate::input::DisableSerialConsoleAccessInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisableSerialConsoleAccess", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4006 = writer.prefix("DryRun");
    if let Some(var_4007) = &input.dry_run {
        scope_4006.boolean(*var_4007);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_transit_gateway_route_table_propagation(
    input: &crate::input::DisableTransitGatewayRouteTablePropagationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisableTransitGatewayRouteTablePropagation",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4008 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_4009) = &input.transit_gateway_route_table_id {
        scope_4008.string(var_4009);
    }
    #[allow(unused_mut)]
    let mut scope_4010 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_4011) = &input.transit_gateway_attachment_id {
        scope_4010.string(var_4011);
    }
    #[allow(unused_mut)]
    let mut scope_4012 = writer.prefix("DryRun");
    if let Some(var_4013) = &input.dry_run {
        scope_4012.boolean(*var_4013);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_vgw_route_propagation(
    input: &crate::input::DisableVgwRoutePropagationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisableVgwRoutePropagation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4014 = writer.prefix("GatewayId");
    if let Some(var_4015) = &input.gateway_id {
        scope_4014.string(var_4015);
    }
    #[allow(unused_mut)]
    let mut scope_4016 = writer.prefix("RouteTableId");
    if let Some(var_4017) = &input.route_table_id {
        scope_4016.string(var_4017);
    }
    #[allow(unused_mut)]
    let mut scope_4018 = writer.prefix("DryRun");
    if let Some(var_4019) = &input.dry_run {
        scope_4018.boolean(*var_4019);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_vpc_classic_link(
    input: &crate::input::DisableVpcClassicLinkInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisableVpcClassicLink", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4020 = writer.prefix("DryRun");
    if let Some(var_4021) = &input.dry_run {
        scope_4020.boolean(*var_4021);
    }
    #[allow(unused_mut)]
    let mut scope_4022 = writer.prefix("VpcId");
    if let Some(var_4023) = &input.vpc_id {
        scope_4022.string(var_4023);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_vpc_classic_link_dns_support(
    input: &crate::input::DisableVpcClassicLinkDnsSupportInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisableVpcClassicLinkDnsSupport",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4024 = writer.prefix("VpcId");
    if let Some(var_4025) = &input.vpc_id {
        scope_4024.string(var_4025);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_address(
    input: &crate::input::DisassociateAddressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisassociateAddress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4026 = writer.prefix("AssociationId");
    if let Some(var_4027) = &input.association_id {
        scope_4026.string(var_4027);
    }
    #[allow(unused_mut)]
    let mut scope_4028 = writer.prefix("PublicIp");
    if let Some(var_4029) = &input.public_ip {
        scope_4028.string(var_4029);
    }
    #[allow(unused_mut)]
    let mut scope_4030 = writer.prefix("DryRun");
    if let Some(var_4031) = &input.dry_run {
        scope_4030.boolean(*var_4031);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_client_vpn_target_network(
    input: &crate::input::DisassociateClientVpnTargetNetworkInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisassociateClientVpnTargetNetwork",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4032 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_4033) = &input.client_vpn_endpoint_id {
        scope_4032.string(var_4033);
    }
    #[allow(unused_mut)]
    let mut scope_4034 = writer.prefix("AssociationId");
    if let Some(var_4035) = &input.association_id {
        scope_4034.string(var_4035);
    }
    #[allow(unused_mut)]
    let mut scope_4036 = writer.prefix("DryRun");
    if let Some(var_4037) = &input.dry_run {
        scope_4036.boolean(*var_4037);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_enclave_certificate_iam_role(
    input: &crate::input::DisassociateEnclaveCertificateIamRoleInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisassociateEnclaveCertificateIamRole",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4038 = writer.prefix("CertificateArn");
    if let Some(var_4039) = &input.certificate_arn {
        scope_4038.string(var_4039);
    }
    #[allow(unused_mut)]
    let mut scope_4040 = writer.prefix("RoleArn");
    if let Some(var_4041) = &input.role_arn {
        scope_4040.string(var_4041);
    }
    #[allow(unused_mut)]
    let mut scope_4042 = writer.prefix("DryRun");
    if let Some(var_4043) = &input.dry_run {
        scope_4042.boolean(*var_4043);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_iam_instance_profile(
    input: &crate::input::DisassociateIamInstanceProfileInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisassociateIamInstanceProfile",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4044 = writer.prefix("AssociationId");
    if let Some(var_4045) = &input.association_id {
        scope_4044.string(var_4045);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_instance_event_window(
    input: &crate::input::DisassociateInstanceEventWindowInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisassociateInstanceEventWindow",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4046 = writer.prefix("DryRun");
    if let Some(var_4047) = &input.dry_run {
        scope_4046.boolean(*var_4047);
    }
    #[allow(unused_mut)]
    let mut scope_4048 = writer.prefix("InstanceEventWindowId");
    if let Some(var_4049) = &input.instance_event_window_id {
        scope_4048.string(var_4049);
    }
    #[allow(unused_mut)]
    let mut scope_4050 = writer.prefix("AssociationTarget");
    if let Some(var_4051) = &input.association_target {
        crate::query_ser::serialize_structure_crate_model_instance_event_window_disassociation_request(scope_4050, var_4051)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_route_table(
    input: &crate::input::DisassociateRouteTableInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisassociateRouteTable", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4052 = writer.prefix("AssociationId");
    if let Some(var_4053) = &input.association_id {
        scope_4052.string(var_4053);
    }
    #[allow(unused_mut)]
    let mut scope_4054 = writer.prefix("DryRun");
    if let Some(var_4055) = &input.dry_run {
        scope_4054.boolean(*var_4055);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_subnet_cidr_block(
    input: &crate::input::DisassociateSubnetCidrBlockInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisassociateSubnetCidrBlock", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4056 = writer.prefix("AssociationId");
    if let Some(var_4057) = &input.association_id {
        scope_4056.string(var_4057);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_transit_gateway_multicast_domain(
    input: &crate::input::DisassociateTransitGatewayMulticastDomainInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisassociateTransitGatewayMulticastDomain",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4058 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_4059) = &input.transit_gateway_multicast_domain_id {
        scope_4058.string(var_4059);
    }
    #[allow(unused_mut)]
    let mut scope_4060 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_4061) = &input.transit_gateway_attachment_id {
        scope_4060.string(var_4061);
    }
    #[allow(unused_mut)]
    let mut scope_4062 = writer.prefix("SubnetIds");
    if let Some(var_4063) = &input.subnet_ids {
        let mut list_4065 = scope_4062.start_list(true, Some("item"));
        for item_4064 in var_4063 {
            #[allow(unused_mut)]
            let mut entry_4066 = list_4065.entry();
            entry_4066.string(item_4064);
        }
        list_4065.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4067 = writer.prefix("DryRun");
    if let Some(var_4068) = &input.dry_run {
        scope_4067.boolean(*var_4068);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_transit_gateway_route_table(
    input: &crate::input::DisassociateTransitGatewayRouteTableInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisassociateTransitGatewayRouteTable",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4069 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_4070) = &input.transit_gateway_route_table_id {
        scope_4069.string(var_4070);
    }
    #[allow(unused_mut)]
    let mut scope_4071 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_4072) = &input.transit_gateway_attachment_id {
        scope_4071.string(var_4072);
    }
    #[allow(unused_mut)]
    let mut scope_4073 = writer.prefix("DryRun");
    if let Some(var_4074) = &input.dry_run {
        scope_4073.boolean(*var_4074);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_trunk_interface(
    input: &crate::input::DisassociateTrunkInterfaceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisassociateTrunkInterface", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4075 = writer.prefix("AssociationId");
    if let Some(var_4076) = &input.association_id {
        scope_4075.string(var_4076);
    }
    #[allow(unused_mut)]
    let mut scope_4077 = writer.prefix("ClientToken");
    if let Some(var_4078) = &input.client_token {
        scope_4077.string(var_4078);
    }
    #[allow(unused_mut)]
    let mut scope_4079 = writer.prefix("DryRun");
    if let Some(var_4080) = &input.dry_run {
        scope_4079.boolean(*var_4080);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_vpc_cidr_block(
    input: &crate::input::DisassociateVpcCidrBlockInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisassociateVpcCidrBlock", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4081 = writer.prefix("AssociationId");
    if let Some(var_4082) = &input.association_id {
        scope_4081.string(var_4082);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_ebs_encryption_by_default(
    input: &crate::input::EnableEbsEncryptionByDefaultInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "EnableEbsEncryptionByDefault", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4083 = writer.prefix("DryRun");
    if let Some(var_4084) = &input.dry_run {
        scope_4083.boolean(*var_4084);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_fast_launch(
    input: &crate::input::EnableFastLaunchInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "EnableFastLaunch", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4085 = writer.prefix("ImageId");
    if let Some(var_4086) = &input.image_id {
        scope_4085.string(var_4086);
    }
    #[allow(unused_mut)]
    let mut scope_4087 = writer.prefix("ResourceType");
    if let Some(var_4088) = &input.resource_type {
        scope_4087.string(var_4088);
    }
    #[allow(unused_mut)]
    let mut scope_4089 = writer.prefix("SnapshotConfiguration");
    if let Some(var_4090) = &input.snapshot_configuration {
        crate::query_ser::serialize_structure_crate_model_fast_launch_snapshot_configuration_request(scope_4089, var_4090)?;
    }
    #[allow(unused_mut)]
    let mut scope_4091 = writer.prefix("LaunchTemplate");
    if let Some(var_4092) = &input.launch_template {
        crate::query_ser::serialize_structure_crate_model_fast_launch_launch_template_specification_request(scope_4091, var_4092)?;
    }
    #[allow(unused_mut)]
    let mut scope_4093 = writer.prefix("MaxParallelLaunches");
    if let Some(var_4094) = &input.max_parallel_launches {
        scope_4093.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4094).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4095 = writer.prefix("DryRun");
    if let Some(var_4096) = &input.dry_run {
        scope_4095.boolean(*var_4096);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_fast_snapshot_restores(
    input: &crate::input::EnableFastSnapshotRestoresInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "EnableFastSnapshotRestores", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4097 = writer.prefix("AvailabilityZone");
    if let Some(var_4098) = &input.availability_zones {
        let mut list_4100 = scope_4097.start_list(true, Some("AvailabilityZone"));
        for item_4099 in var_4098 {
            #[allow(unused_mut)]
            let mut entry_4101 = list_4100.entry();
            entry_4101.string(item_4099);
        }
        list_4100.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4102 = writer.prefix("SourceSnapshotId");
    if let Some(var_4103) = &input.source_snapshot_ids {
        let mut list_4105 = scope_4102.start_list(true, Some("SnapshotId"));
        for item_4104 in var_4103 {
            #[allow(unused_mut)]
            let mut entry_4106 = list_4105.entry();
            entry_4106.string(item_4104);
        }
        list_4105.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4107 = writer.prefix("DryRun");
    if let Some(var_4108) = &input.dry_run {
        scope_4107.boolean(*var_4108);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_image_deprecation(
    input: &crate::input::EnableImageDeprecationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "EnableImageDeprecation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4109 = writer.prefix("ImageId");
    if let Some(var_4110) = &input.image_id {
        scope_4109.string(var_4110);
    }
    #[allow(unused_mut)]
    let mut scope_4111 = writer.prefix("DeprecateAt");
    if let Some(var_4112) = &input.deprecate_at {
        scope_4111.date_time(var_4112, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_4113 = writer.prefix("DryRun");
    if let Some(var_4114) = &input.dry_run {
        scope_4113.boolean(*var_4114);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_ipam_organization_admin_account(
    input: &crate::input::EnableIpamOrganizationAdminAccountInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "EnableIpamOrganizationAdminAccount",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4115 = writer.prefix("DryRun");
    if let Some(var_4116) = &input.dry_run {
        scope_4115.boolean(*var_4116);
    }
    #[allow(unused_mut)]
    let mut scope_4117 = writer.prefix("DelegatedAdminAccountId");
    if let Some(var_4118) = &input.delegated_admin_account_id {
        scope_4117.string(var_4118);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_serial_console_access(
    input: &crate::input::EnableSerialConsoleAccessInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "EnableSerialConsoleAccess", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4119 = writer.prefix("DryRun");
    if let Some(var_4120) = &input.dry_run {
        scope_4119.boolean(*var_4120);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_transit_gateway_route_table_propagation(
    input: &crate::input::EnableTransitGatewayRouteTablePropagationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "EnableTransitGatewayRouteTablePropagation",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4121 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_4122) = &input.transit_gateway_route_table_id {
        scope_4121.string(var_4122);
    }
    #[allow(unused_mut)]
    let mut scope_4123 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_4124) = &input.transit_gateway_attachment_id {
        scope_4123.string(var_4124);
    }
    #[allow(unused_mut)]
    let mut scope_4125 = writer.prefix("DryRun");
    if let Some(var_4126) = &input.dry_run {
        scope_4125.boolean(*var_4126);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_vgw_route_propagation(
    input: &crate::input::EnableVgwRoutePropagationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "EnableVgwRoutePropagation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4127 = writer.prefix("GatewayId");
    if let Some(var_4128) = &input.gateway_id {
        scope_4127.string(var_4128);
    }
    #[allow(unused_mut)]
    let mut scope_4129 = writer.prefix("RouteTableId");
    if let Some(var_4130) = &input.route_table_id {
        scope_4129.string(var_4130);
    }
    #[allow(unused_mut)]
    let mut scope_4131 = writer.prefix("DryRun");
    if let Some(var_4132) = &input.dry_run {
        scope_4131.boolean(*var_4132);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_volume_io(
    input: &crate::input::EnableVolumeIoInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "EnableVolumeIO", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4133 = writer.prefix("DryRun");
    if let Some(var_4134) = &input.dry_run {
        scope_4133.boolean(*var_4134);
    }
    #[allow(unused_mut)]
    let mut scope_4135 = writer.prefix("VolumeId");
    if let Some(var_4136) = &input.volume_id {
        scope_4135.string(var_4136);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_vpc_classic_link(
    input: &crate::input::EnableVpcClassicLinkInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "EnableVpcClassicLink", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4137 = writer.prefix("DryRun");
    if let Some(var_4138) = &input.dry_run {
        scope_4137.boolean(*var_4138);
    }
    #[allow(unused_mut)]
    let mut scope_4139 = writer.prefix("VpcId");
    if let Some(var_4140) = &input.vpc_id {
        scope_4139.string(var_4140);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_vpc_classic_link_dns_support(
    input: &crate::input::EnableVpcClassicLinkDnsSupportInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "EnableVpcClassicLinkDnsSupport",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4141 = writer.prefix("VpcId");
    if let Some(var_4142) = &input.vpc_id {
        scope_4141.string(var_4142);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_export_client_vpn_client_certificate_revocation_list(
    input: &crate::input::ExportClientVpnClientCertificateRevocationListInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ExportClientVpnClientCertificateRevocationList",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4143 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_4144) = &input.client_vpn_endpoint_id {
        scope_4143.string(var_4144);
    }
    #[allow(unused_mut)]
    let mut scope_4145 = writer.prefix("DryRun");
    if let Some(var_4146) = &input.dry_run {
        scope_4145.boolean(*var_4146);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_export_client_vpn_client_configuration(
    input: &crate::input::ExportClientVpnClientConfigurationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ExportClientVpnClientConfiguration",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4147 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_4148) = &input.client_vpn_endpoint_id {
        scope_4147.string(var_4148);
    }
    #[allow(unused_mut)]
    let mut scope_4149 = writer.prefix("DryRun");
    if let Some(var_4150) = &input.dry_run {
        scope_4149.boolean(*var_4150);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_export_image(
    input: &crate::input::ExportImageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ExportImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4151 = writer.prefix("ClientToken");
    if let Some(var_4152) = &input.client_token {
        scope_4151.string(var_4152);
    }
    #[allow(unused_mut)]
    let mut scope_4153 = writer.prefix("Description");
    if let Some(var_4154) = &input.description {
        scope_4153.string(var_4154);
    }
    #[allow(unused_mut)]
    let mut scope_4155 = writer.prefix("DiskImageFormat");
    if let Some(var_4156) = &input.disk_image_format {
        scope_4155.string(var_4156.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4157 = writer.prefix("DryRun");
    if let Some(var_4158) = &input.dry_run {
        scope_4157.boolean(*var_4158);
    }
    #[allow(unused_mut)]
    let mut scope_4159 = writer.prefix("ImageId");
    if let Some(var_4160) = &input.image_id {
        scope_4159.string(var_4160);
    }
    #[allow(unused_mut)]
    let mut scope_4161 = writer.prefix("S3ExportLocation");
    if let Some(var_4162) = &input.s3_export_location {
        crate::query_ser::serialize_structure_crate_model_export_task_s3_location_request(
            scope_4161, var_4162,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4163 = writer.prefix("RoleName");
    if let Some(var_4164) = &input.role_name {
        scope_4163.string(var_4164);
    }
    #[allow(unused_mut)]
    let mut scope_4165 = writer.prefix("TagSpecification");
    if let Some(var_4166) = &input.tag_specifications {
        let mut list_4168 = scope_4165.start_list(true, Some("item"));
        for item_4167 in var_4166 {
            #[allow(unused_mut)]
            let mut entry_4169 = list_4168.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_4169, item_4167,
            )?;
        }
        list_4168.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_export_transit_gateway_routes(
    input: &crate::input::ExportTransitGatewayRoutesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ExportTransitGatewayRoutes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4170 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_4171) = &input.transit_gateway_route_table_id {
        scope_4170.string(var_4171);
    }
    #[allow(unused_mut)]
    let mut scope_4172 = writer.prefix("Filter");
    if let Some(var_4173) = &input.filters {
        let mut list_4175 = scope_4172.start_list(true, Some("Filter"));
        for item_4174 in var_4173 {
            #[allow(unused_mut)]
            let mut entry_4176 = list_4175.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4176, item_4174)?;
        }
        list_4175.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4177 = writer.prefix("S3Bucket");
    if let Some(var_4178) = &input.s3_bucket {
        scope_4177.string(var_4178);
    }
    #[allow(unused_mut)]
    let mut scope_4179 = writer.prefix("DryRun");
    if let Some(var_4180) = &input.dry_run {
        scope_4179.boolean(*var_4180);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_associated_enclave_certificate_iam_roles(
    input: &crate::input::GetAssociatedEnclaveCertificateIamRolesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetAssociatedEnclaveCertificateIamRoles",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4181 = writer.prefix("CertificateArn");
    if let Some(var_4182) = &input.certificate_arn {
        scope_4181.string(var_4182);
    }
    #[allow(unused_mut)]
    let mut scope_4183 = writer.prefix("DryRun");
    if let Some(var_4184) = &input.dry_run {
        scope_4183.boolean(*var_4184);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_associated_ipv6_pool_cidrs(
    input: &crate::input::GetAssociatedIpv6PoolCidrsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetAssociatedIpv6PoolCidrs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4185 = writer.prefix("PoolId");
    if let Some(var_4186) = &input.pool_id {
        scope_4185.string(var_4186);
    }
    #[allow(unused_mut)]
    let mut scope_4187 = writer.prefix("NextToken");
    if let Some(var_4188) = &input.next_token {
        scope_4187.string(var_4188);
    }
    #[allow(unused_mut)]
    let mut scope_4189 = writer.prefix("MaxResults");
    if let Some(var_4190) = &input.max_results {
        scope_4189.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4190).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4191 = writer.prefix("DryRun");
    if let Some(var_4192) = &input.dry_run {
        scope_4191.boolean(*var_4192);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_capacity_reservation_usage(
    input: &crate::input::GetCapacityReservationUsageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetCapacityReservationUsage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4193 = writer.prefix("CapacityReservationId");
    if let Some(var_4194) = &input.capacity_reservation_id {
        scope_4193.string(var_4194);
    }
    #[allow(unused_mut)]
    let mut scope_4195 = writer.prefix("NextToken");
    if let Some(var_4196) = &input.next_token {
        scope_4195.string(var_4196);
    }
    #[allow(unused_mut)]
    let mut scope_4197 = writer.prefix("MaxResults");
    if let Some(var_4198) = &input.max_results {
        scope_4197.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4198).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4199 = writer.prefix("DryRun");
    if let Some(var_4200) = &input.dry_run {
        scope_4199.boolean(*var_4200);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_coip_pool_usage(
    input: &crate::input::GetCoipPoolUsageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetCoipPoolUsage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4201 = writer.prefix("PoolId");
    if let Some(var_4202) = &input.pool_id {
        scope_4201.string(var_4202);
    }
    #[allow(unused_mut)]
    let mut scope_4203 = writer.prefix("Filter");
    if let Some(var_4204) = &input.filters {
        let mut list_4206 = scope_4203.start_list(true, Some("Filter"));
        for item_4205 in var_4204 {
            #[allow(unused_mut)]
            let mut entry_4207 = list_4206.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4207, item_4205)?;
        }
        list_4206.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4208 = writer.prefix("MaxResults");
    if let Some(var_4209) = &input.max_results {
        scope_4208.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4209).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4210 = writer.prefix("NextToken");
    if let Some(var_4211) = &input.next_token {
        scope_4210.string(var_4211);
    }
    #[allow(unused_mut)]
    let mut scope_4212 = writer.prefix("DryRun");
    if let Some(var_4213) = &input.dry_run {
        scope_4212.boolean(*var_4213);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_console_output(
    input: &crate::input::GetConsoleOutputInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetConsoleOutput", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4214 = writer.prefix("InstanceId");
    if let Some(var_4215) = &input.instance_id {
        scope_4214.string(var_4215);
    }
    #[allow(unused_mut)]
    let mut scope_4216 = writer.prefix("DryRun");
    if let Some(var_4217) = &input.dry_run {
        scope_4216.boolean(*var_4217);
    }
    #[allow(unused_mut)]
    let mut scope_4218 = writer.prefix("Latest");
    if let Some(var_4219) = &input.latest {
        scope_4218.boolean(*var_4219);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_console_screenshot(
    input: &crate::input::GetConsoleScreenshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetConsoleScreenshot", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4220 = writer.prefix("DryRun");
    if let Some(var_4221) = &input.dry_run {
        scope_4220.boolean(*var_4221);
    }
    #[allow(unused_mut)]
    let mut scope_4222 = writer.prefix("InstanceId");
    if let Some(var_4223) = &input.instance_id {
        scope_4222.string(var_4223);
    }
    #[allow(unused_mut)]
    let mut scope_4224 = writer.prefix("WakeUp");
    if let Some(var_4225) = &input.wake_up {
        scope_4224.boolean(*var_4225);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_default_credit_specification(
    input: &crate::input::GetDefaultCreditSpecificationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetDefaultCreditSpecification", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4226 = writer.prefix("DryRun");
    if let Some(var_4227) = &input.dry_run {
        scope_4226.boolean(*var_4227);
    }
    #[allow(unused_mut)]
    let mut scope_4228 = writer.prefix("InstanceFamily");
    if let Some(var_4229) = &input.instance_family {
        scope_4228.string(var_4229.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_ebs_default_kms_key_id(
    input: &crate::input::GetEbsDefaultKmsKeyIdInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetEbsDefaultKmsKeyId", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4230 = writer.prefix("DryRun");
    if let Some(var_4231) = &input.dry_run {
        scope_4230.boolean(*var_4231);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_ebs_encryption_by_default(
    input: &crate::input::GetEbsEncryptionByDefaultInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetEbsEncryptionByDefault", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4232 = writer.prefix("DryRun");
    if let Some(var_4233) = &input.dry_run {
        scope_4232.boolean(*var_4233);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_flow_logs_integration_template(
    input: &crate::input::GetFlowLogsIntegrationTemplateInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetFlowLogsIntegrationTemplate",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4234 = writer.prefix("DryRun");
    if let Some(var_4235) = &input.dry_run {
        scope_4234.boolean(*var_4235);
    }
    #[allow(unused_mut)]
    let mut scope_4236 = writer.prefix("FlowLogId");
    if let Some(var_4237) = &input.flow_log_id {
        scope_4236.string(var_4237);
    }
    #[allow(unused_mut)]
    let mut scope_4238 = writer.prefix("ConfigDeliveryS3DestinationArn");
    if let Some(var_4239) = &input.config_delivery_s3_destination_arn {
        scope_4238.string(var_4239);
    }
    #[allow(unused_mut)]
    let mut scope_4240 = writer.prefix("IntegrateService");
    if let Some(var_4241) = &input.integrate_services {
        crate::query_ser::serialize_structure_crate_model_integrate_services(scope_4240, var_4241)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_groups_for_capacity_reservation(
    input: &crate::input::GetGroupsForCapacityReservationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetGroupsForCapacityReservation",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4242 = writer.prefix("CapacityReservationId");
    if let Some(var_4243) = &input.capacity_reservation_id {
        scope_4242.string(var_4243);
    }
    #[allow(unused_mut)]
    let mut scope_4244 = writer.prefix("NextToken");
    if let Some(var_4245) = &input.next_token {
        scope_4244.string(var_4245);
    }
    #[allow(unused_mut)]
    let mut scope_4246 = writer.prefix("MaxResults");
    if let Some(var_4247) = &input.max_results {
        scope_4246.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4247).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4248 = writer.prefix("DryRun");
    if let Some(var_4249) = &input.dry_run {
        scope_4248.boolean(*var_4249);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_host_reservation_purchase_preview(
    input: &crate::input::GetHostReservationPurchasePreviewInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetHostReservationPurchasePreview",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4250 = writer.prefix("HostIdSet");
    if let Some(var_4251) = &input.host_id_set {
        let mut list_4253 = scope_4250.start_list(true, Some("item"));
        for item_4252 in var_4251 {
            #[allow(unused_mut)]
            let mut entry_4254 = list_4253.entry();
            entry_4254.string(item_4252);
        }
        list_4253.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4255 = writer.prefix("OfferingId");
    if let Some(var_4256) = &input.offering_id {
        scope_4255.string(var_4256);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_instance_types_from_instance_requirements(
    input: &crate::input::GetInstanceTypesFromInstanceRequirementsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetInstanceTypesFromInstanceRequirements",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4257 = writer.prefix("DryRun");
    if let Some(var_4258) = &input.dry_run {
        scope_4257.boolean(*var_4258);
    }
    #[allow(unused_mut)]
    let mut scope_4259 = writer.prefix("ArchitectureType");
    if let Some(var_4260) = &input.architecture_types {
        let mut list_4262 = scope_4259.start_list(true, Some("item"));
        for item_4261 in var_4260 {
            #[allow(unused_mut)]
            let mut entry_4263 = list_4262.entry();
            entry_4263.string(item_4261.as_str());
        }
        list_4262.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4264 = writer.prefix("VirtualizationType");
    if let Some(var_4265) = &input.virtualization_types {
        let mut list_4267 = scope_4264.start_list(true, Some("item"));
        for item_4266 in var_4265 {
            #[allow(unused_mut)]
            let mut entry_4268 = list_4267.entry();
            entry_4268.string(item_4266.as_str());
        }
        list_4267.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4269 = writer.prefix("InstanceRequirements");
    if let Some(var_4270) = &input.instance_requirements {
        crate::query_ser::serialize_structure_crate_model_instance_requirements_request(
            scope_4269, var_4270,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4271 = writer.prefix("MaxResults");
    if let Some(var_4272) = &input.max_results {
        scope_4271.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4272).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4273 = writer.prefix("NextToken");
    if let Some(var_4274) = &input.next_token {
        scope_4273.string(var_4274);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_instance_uefi_data(
    input: &crate::input::GetInstanceUefiDataInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetInstanceUefiData", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4275 = writer.prefix("InstanceId");
    if let Some(var_4276) = &input.instance_id {
        scope_4275.string(var_4276);
    }
    #[allow(unused_mut)]
    let mut scope_4277 = writer.prefix("DryRun");
    if let Some(var_4278) = &input.dry_run {
        scope_4277.boolean(*var_4278);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_ipam_address_history(
    input: &crate::input::GetIpamAddressHistoryInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetIpamAddressHistory", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4279 = writer.prefix("DryRun");
    if let Some(var_4280) = &input.dry_run {
        scope_4279.boolean(*var_4280);
    }
    #[allow(unused_mut)]
    let mut scope_4281 = writer.prefix("Cidr");
    if let Some(var_4282) = &input.cidr {
        scope_4281.string(var_4282);
    }
    #[allow(unused_mut)]
    let mut scope_4283 = writer.prefix("IpamScopeId");
    if let Some(var_4284) = &input.ipam_scope_id {
        scope_4283.string(var_4284);
    }
    #[allow(unused_mut)]
    let mut scope_4285 = writer.prefix("VpcId");
    if let Some(var_4286) = &input.vpc_id {
        scope_4285.string(var_4286);
    }
    #[allow(unused_mut)]
    let mut scope_4287 = writer.prefix("StartTime");
    if let Some(var_4288) = &input.start_time {
        scope_4287.date_time(var_4288, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_4289 = writer.prefix("EndTime");
    if let Some(var_4290) = &input.end_time {
        scope_4289.date_time(var_4290, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_4291 = writer.prefix("MaxResults");
    if let Some(var_4292) = &input.max_results {
        scope_4291.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4292).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4293 = writer.prefix("NextToken");
    if let Some(var_4294) = &input.next_token {
        scope_4293.string(var_4294);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_ipam_pool_allocations(
    input: &crate::input::GetIpamPoolAllocationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetIpamPoolAllocations", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4295 = writer.prefix("DryRun");
    if let Some(var_4296) = &input.dry_run {
        scope_4295.boolean(*var_4296);
    }
    #[allow(unused_mut)]
    let mut scope_4297 = writer.prefix("IpamPoolId");
    if let Some(var_4298) = &input.ipam_pool_id {
        scope_4297.string(var_4298);
    }
    #[allow(unused_mut)]
    let mut scope_4299 = writer.prefix("IpamPoolAllocationId");
    if let Some(var_4300) = &input.ipam_pool_allocation_id {
        scope_4299.string(var_4300);
    }
    #[allow(unused_mut)]
    let mut scope_4301 = writer.prefix("Filter");
    if let Some(var_4302) = &input.filters {
        let mut list_4304 = scope_4301.start_list(true, Some("Filter"));
        for item_4303 in var_4302 {
            #[allow(unused_mut)]
            let mut entry_4305 = list_4304.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4305, item_4303)?;
        }
        list_4304.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4306 = writer.prefix("MaxResults");
    if let Some(var_4307) = &input.max_results {
        scope_4306.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4307).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4308 = writer.prefix("NextToken");
    if let Some(var_4309) = &input.next_token {
        scope_4308.string(var_4309);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_ipam_pool_cidrs(
    input: &crate::input::GetIpamPoolCidrsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetIpamPoolCidrs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4310 = writer.prefix("DryRun");
    if let Some(var_4311) = &input.dry_run {
        scope_4310.boolean(*var_4311);
    }
    #[allow(unused_mut)]
    let mut scope_4312 = writer.prefix("IpamPoolId");
    if let Some(var_4313) = &input.ipam_pool_id {
        scope_4312.string(var_4313);
    }
    #[allow(unused_mut)]
    let mut scope_4314 = writer.prefix("Filter");
    if let Some(var_4315) = &input.filters {
        let mut list_4317 = scope_4314.start_list(true, Some("Filter"));
        for item_4316 in var_4315 {
            #[allow(unused_mut)]
            let mut entry_4318 = list_4317.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4318, item_4316)?;
        }
        list_4317.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4319 = writer.prefix("MaxResults");
    if let Some(var_4320) = &input.max_results {
        scope_4319.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4320).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4321 = writer.prefix("NextToken");
    if let Some(var_4322) = &input.next_token {
        scope_4321.string(var_4322);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_ipam_resource_cidrs(
    input: &crate::input::GetIpamResourceCidrsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetIpamResourceCidrs", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4323 = writer.prefix("DryRun");
    if let Some(var_4324) = &input.dry_run {
        scope_4323.boolean(*var_4324);
    }
    #[allow(unused_mut)]
    let mut scope_4325 = writer.prefix("Filter");
    if let Some(var_4326) = &input.filters {
        let mut list_4328 = scope_4325.start_list(true, Some("Filter"));
        for item_4327 in var_4326 {
            #[allow(unused_mut)]
            let mut entry_4329 = list_4328.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4329, item_4327)?;
        }
        list_4328.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4330 = writer.prefix("MaxResults");
    if let Some(var_4331) = &input.max_results {
        scope_4330.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4331).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4332 = writer.prefix("NextToken");
    if let Some(var_4333) = &input.next_token {
        scope_4332.string(var_4333);
    }
    #[allow(unused_mut)]
    let mut scope_4334 = writer.prefix("IpamScopeId");
    if let Some(var_4335) = &input.ipam_scope_id {
        scope_4334.string(var_4335);
    }
    #[allow(unused_mut)]
    let mut scope_4336 = writer.prefix("IpamPoolId");
    if let Some(var_4337) = &input.ipam_pool_id {
        scope_4336.string(var_4337);
    }
    #[allow(unused_mut)]
    let mut scope_4338 = writer.prefix("ResourceId");
    if let Some(var_4339) = &input.resource_id {
        scope_4338.string(var_4339);
    }
    #[allow(unused_mut)]
    let mut scope_4340 = writer.prefix("ResourceType");
    if let Some(var_4341) = &input.resource_type {
        scope_4340.string(var_4341.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4342 = writer.prefix("ResourceTag");
    if let Some(var_4343) = &input.resource_tag {
        crate::query_ser::serialize_structure_crate_model_request_ipam_resource_tag(
            scope_4342, var_4343,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4344 = writer.prefix("ResourceOwner");
    if let Some(var_4345) = &input.resource_owner {
        scope_4344.string(var_4345);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_launch_template_data(
    input: &crate::input::GetLaunchTemplateDataInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetLaunchTemplateData", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4346 = writer.prefix("DryRun");
    if let Some(var_4347) = &input.dry_run {
        scope_4346.boolean(*var_4347);
    }
    #[allow(unused_mut)]
    let mut scope_4348 = writer.prefix("InstanceId");
    if let Some(var_4349) = &input.instance_id {
        scope_4348.string(var_4349);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_managed_prefix_list_associations(
    input: &crate::input::GetManagedPrefixListAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetManagedPrefixListAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4350 = writer.prefix("DryRun");
    if let Some(var_4351) = &input.dry_run {
        scope_4350.boolean(*var_4351);
    }
    #[allow(unused_mut)]
    let mut scope_4352 = writer.prefix("PrefixListId");
    if let Some(var_4353) = &input.prefix_list_id {
        scope_4352.string(var_4353);
    }
    #[allow(unused_mut)]
    let mut scope_4354 = writer.prefix("MaxResults");
    if let Some(var_4355) = &input.max_results {
        scope_4354.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4355).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4356 = writer.prefix("NextToken");
    if let Some(var_4357) = &input.next_token {
        scope_4356.string(var_4357);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_managed_prefix_list_entries(
    input: &crate::input::GetManagedPrefixListEntriesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetManagedPrefixListEntries", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4358 = writer.prefix("DryRun");
    if let Some(var_4359) = &input.dry_run {
        scope_4358.boolean(*var_4359);
    }
    #[allow(unused_mut)]
    let mut scope_4360 = writer.prefix("PrefixListId");
    if let Some(var_4361) = &input.prefix_list_id {
        scope_4360.string(var_4361);
    }
    #[allow(unused_mut)]
    let mut scope_4362 = writer.prefix("TargetVersion");
    if let Some(var_4363) = &input.target_version {
        scope_4362.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4363).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4364 = writer.prefix("MaxResults");
    if let Some(var_4365) = &input.max_results {
        scope_4364.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4365).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4366 = writer.prefix("NextToken");
    if let Some(var_4367) = &input.next_token {
        scope_4366.string(var_4367);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_network_insights_access_scope_analysis_findings(
    input: &crate::input::GetNetworkInsightsAccessScopeAnalysisFindingsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetNetworkInsightsAccessScopeAnalysisFindings",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4368 = writer.prefix("NetworkInsightsAccessScopeAnalysisId");
    if let Some(var_4369) = &input.network_insights_access_scope_analysis_id {
        scope_4368.string(var_4369);
    }
    #[allow(unused_mut)]
    let mut scope_4370 = writer.prefix("MaxResults");
    if let Some(var_4371) = &input.max_results {
        scope_4370.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4371).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4372 = writer.prefix("NextToken");
    if let Some(var_4373) = &input.next_token {
        scope_4372.string(var_4373);
    }
    #[allow(unused_mut)]
    let mut scope_4374 = writer.prefix("DryRun");
    if let Some(var_4375) = &input.dry_run {
        scope_4374.boolean(*var_4375);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_network_insights_access_scope_content(
    input: &crate::input::GetNetworkInsightsAccessScopeContentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetNetworkInsightsAccessScopeContent",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4376 = writer.prefix("NetworkInsightsAccessScopeId");
    if let Some(var_4377) = &input.network_insights_access_scope_id {
        scope_4376.string(var_4377);
    }
    #[allow(unused_mut)]
    let mut scope_4378 = writer.prefix("DryRun");
    if let Some(var_4379) = &input.dry_run {
        scope_4378.boolean(*var_4379);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_password_data(
    input: &crate::input::GetPasswordDataInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetPasswordData", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4380 = writer.prefix("InstanceId");
    if let Some(var_4381) = &input.instance_id {
        scope_4380.string(var_4381);
    }
    #[allow(unused_mut)]
    let mut scope_4382 = writer.prefix("DryRun");
    if let Some(var_4383) = &input.dry_run {
        scope_4382.boolean(*var_4383);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_reserved_instances_exchange_quote(
    input: &crate::input::GetReservedInstancesExchangeQuoteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetReservedInstancesExchangeQuote",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4384 = writer.prefix("DryRun");
    if let Some(var_4385) = &input.dry_run {
        scope_4384.boolean(*var_4385);
    }
    #[allow(unused_mut)]
    let mut scope_4386 = writer.prefix("ReservedInstanceId");
    if let Some(var_4387) = &input.reserved_instance_ids {
        let mut list_4389 = scope_4386.start_list(true, Some("ReservedInstanceId"));
        for item_4388 in var_4387 {
            #[allow(unused_mut)]
            let mut entry_4390 = list_4389.entry();
            entry_4390.string(item_4388);
        }
        list_4389.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4391 = writer.prefix("TargetConfiguration");
    if let Some(var_4392) = &input.target_configurations {
        let mut list_4394 = scope_4391.start_list(true, Some("TargetConfigurationRequest"));
        for item_4393 in var_4392 {
            #[allow(unused_mut)]
            let mut entry_4395 = list_4394.entry();
            crate::query_ser::serialize_structure_crate_model_target_configuration_request(
                entry_4395, item_4393,
            )?;
        }
        list_4394.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_serial_console_access_status(
    input: &crate::input::GetSerialConsoleAccessStatusInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetSerialConsoleAccessStatus", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4396 = writer.prefix("DryRun");
    if let Some(var_4397) = &input.dry_run {
        scope_4396.boolean(*var_4397);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_spot_placement_scores(
    input: &crate::input::GetSpotPlacementScoresInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetSpotPlacementScores", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4398 = writer.prefix("InstanceType");
    if let Some(var_4399) = &input.instance_types {
        let mut list_4401 = scope_4398.start_list(true, None);
        for item_4400 in var_4399 {
            #[allow(unused_mut)]
            let mut entry_4402 = list_4401.entry();
            entry_4402.string(item_4400);
        }
        list_4401.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4403 = writer.prefix("TargetCapacity");
    if let Some(var_4404) = &input.target_capacity {
        scope_4403.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4404).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4405 = writer.prefix("TargetCapacityUnitType");
    if let Some(var_4406) = &input.target_capacity_unit_type {
        scope_4405.string(var_4406.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4407 = writer.prefix("SingleAvailabilityZone");
    if let Some(var_4408) = &input.single_availability_zone {
        scope_4407.boolean(*var_4408);
    }
    #[allow(unused_mut)]
    let mut scope_4409 = writer.prefix("RegionName");
    if let Some(var_4410) = &input.region_names {
        let mut list_4412 = scope_4409.start_list(true, None);
        for item_4411 in var_4410 {
            #[allow(unused_mut)]
            let mut entry_4413 = list_4412.entry();
            entry_4413.string(item_4411);
        }
        list_4412.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4414 = writer.prefix("InstanceRequirementsWithMetadata");
    if let Some(var_4415) = &input.instance_requirements_with_metadata {
        crate::query_ser::serialize_structure_crate_model_instance_requirements_with_metadata_request(scope_4414, var_4415)?;
    }
    #[allow(unused_mut)]
    let mut scope_4416 = writer.prefix("DryRun");
    if let Some(var_4417) = &input.dry_run {
        scope_4416.boolean(*var_4417);
    }
    #[allow(unused_mut)]
    let mut scope_4418 = writer.prefix("MaxResults");
    if let Some(var_4419) = &input.max_results {
        scope_4418.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4419).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4420 = writer.prefix("NextToken");
    if let Some(var_4421) = &input.next_token {
        scope_4420.string(var_4421);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_subnet_cidr_reservations(
    input: &crate::input::GetSubnetCidrReservationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetSubnetCidrReservations", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4422 = writer.prefix("Filter");
    if let Some(var_4423) = &input.filters {
        let mut list_4425 = scope_4422.start_list(true, Some("Filter"));
        for item_4424 in var_4423 {
            #[allow(unused_mut)]
            let mut entry_4426 = list_4425.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4426, item_4424)?;
        }
        list_4425.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4427 = writer.prefix("SubnetId");
    if let Some(var_4428) = &input.subnet_id {
        scope_4427.string(var_4428);
    }
    #[allow(unused_mut)]
    let mut scope_4429 = writer.prefix("DryRun");
    if let Some(var_4430) = &input.dry_run {
        scope_4429.boolean(*var_4430);
    }
    #[allow(unused_mut)]
    let mut scope_4431 = writer.prefix("NextToken");
    if let Some(var_4432) = &input.next_token {
        scope_4431.string(var_4432);
    }
    #[allow(unused_mut)]
    let mut scope_4433 = writer.prefix("MaxResults");
    if let Some(var_4434) = &input.max_results {
        scope_4433.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4434).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_transit_gateway_attachment_propagations(
    input: &crate::input::GetTransitGatewayAttachmentPropagationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetTransitGatewayAttachmentPropagations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4435 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_4436) = &input.transit_gateway_attachment_id {
        scope_4435.string(var_4436);
    }
    #[allow(unused_mut)]
    let mut scope_4437 = writer.prefix("Filter");
    if let Some(var_4438) = &input.filters {
        let mut list_4440 = scope_4437.start_list(true, Some("Filter"));
        for item_4439 in var_4438 {
            #[allow(unused_mut)]
            let mut entry_4441 = list_4440.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4441, item_4439)?;
        }
        list_4440.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4442 = writer.prefix("MaxResults");
    if let Some(var_4443) = &input.max_results {
        scope_4442.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4443).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4444 = writer.prefix("NextToken");
    if let Some(var_4445) = &input.next_token {
        scope_4444.string(var_4445);
    }
    #[allow(unused_mut)]
    let mut scope_4446 = writer.prefix("DryRun");
    if let Some(var_4447) = &input.dry_run {
        scope_4446.boolean(*var_4447);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_transit_gateway_multicast_domain_associations(
    input: &crate::input::GetTransitGatewayMulticastDomainAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetTransitGatewayMulticastDomainAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4448 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_4449) = &input.transit_gateway_multicast_domain_id {
        scope_4448.string(var_4449);
    }
    #[allow(unused_mut)]
    let mut scope_4450 = writer.prefix("Filter");
    if let Some(var_4451) = &input.filters {
        let mut list_4453 = scope_4450.start_list(true, Some("Filter"));
        for item_4452 in var_4451 {
            #[allow(unused_mut)]
            let mut entry_4454 = list_4453.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4454, item_4452)?;
        }
        list_4453.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4455 = writer.prefix("MaxResults");
    if let Some(var_4456) = &input.max_results {
        scope_4455.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4456).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4457 = writer.prefix("NextToken");
    if let Some(var_4458) = &input.next_token {
        scope_4457.string(var_4458);
    }
    #[allow(unused_mut)]
    let mut scope_4459 = writer.prefix("DryRun");
    if let Some(var_4460) = &input.dry_run {
        scope_4459.boolean(*var_4460);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_transit_gateway_prefix_list_references(
    input: &crate::input::GetTransitGatewayPrefixListReferencesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetTransitGatewayPrefixListReferences",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4461 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_4462) = &input.transit_gateway_route_table_id {
        scope_4461.string(var_4462);
    }
    #[allow(unused_mut)]
    let mut scope_4463 = writer.prefix("Filter");
    if let Some(var_4464) = &input.filters {
        let mut list_4466 = scope_4463.start_list(true, Some("Filter"));
        for item_4465 in var_4464 {
            #[allow(unused_mut)]
            let mut entry_4467 = list_4466.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4467, item_4465)?;
        }
        list_4466.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4468 = writer.prefix("MaxResults");
    if let Some(var_4469) = &input.max_results {
        scope_4468.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4469).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4470 = writer.prefix("NextToken");
    if let Some(var_4471) = &input.next_token {
        scope_4470.string(var_4471);
    }
    #[allow(unused_mut)]
    let mut scope_4472 = writer.prefix("DryRun");
    if let Some(var_4473) = &input.dry_run {
        scope_4472.boolean(*var_4473);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_transit_gateway_route_table_associations(
    input: &crate::input::GetTransitGatewayRouteTableAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetTransitGatewayRouteTableAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4474 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_4475) = &input.transit_gateway_route_table_id {
        scope_4474.string(var_4475);
    }
    #[allow(unused_mut)]
    let mut scope_4476 = writer.prefix("Filter");
    if let Some(var_4477) = &input.filters {
        let mut list_4479 = scope_4476.start_list(true, Some("Filter"));
        for item_4478 in var_4477 {
            #[allow(unused_mut)]
            let mut entry_4480 = list_4479.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4480, item_4478)?;
        }
        list_4479.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4481 = writer.prefix("MaxResults");
    if let Some(var_4482) = &input.max_results {
        scope_4481.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4482).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4483 = writer.prefix("NextToken");
    if let Some(var_4484) = &input.next_token {
        scope_4483.string(var_4484);
    }
    #[allow(unused_mut)]
    let mut scope_4485 = writer.prefix("DryRun");
    if let Some(var_4486) = &input.dry_run {
        scope_4485.boolean(*var_4486);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_transit_gateway_route_table_propagations(
    input: &crate::input::GetTransitGatewayRouteTablePropagationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetTransitGatewayRouteTablePropagations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4487 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_4488) = &input.transit_gateway_route_table_id {
        scope_4487.string(var_4488);
    }
    #[allow(unused_mut)]
    let mut scope_4489 = writer.prefix("Filter");
    if let Some(var_4490) = &input.filters {
        let mut list_4492 = scope_4489.start_list(true, Some("Filter"));
        for item_4491 in var_4490 {
            #[allow(unused_mut)]
            let mut entry_4493 = list_4492.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_4493, item_4491)?;
        }
        list_4492.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4494 = writer.prefix("MaxResults");
    if let Some(var_4495) = &input.max_results {
        scope_4494.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4495).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4496 = writer.prefix("NextToken");
    if let Some(var_4497) = &input.next_token {
        scope_4496.string(var_4497);
    }
    #[allow(unused_mut)]
    let mut scope_4498 = writer.prefix("DryRun");
    if let Some(var_4499) = &input.dry_run {
        scope_4498.boolean(*var_4499);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_vpn_connection_device_sample_configuration(
    input: &crate::input::GetVpnConnectionDeviceSampleConfigurationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetVpnConnectionDeviceSampleConfiguration",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4500 = writer.prefix("VpnConnectionId");
    if let Some(var_4501) = &input.vpn_connection_id {
        scope_4500.string(var_4501);
    }
    #[allow(unused_mut)]
    let mut scope_4502 = writer.prefix("VpnConnectionDeviceTypeId");
    if let Some(var_4503) = &input.vpn_connection_device_type_id {
        scope_4502.string(var_4503);
    }
    #[allow(unused_mut)]
    let mut scope_4504 = writer.prefix("InternetKeyExchangeVersion");
    if let Some(var_4505) = &input.internet_key_exchange_version {
        scope_4504.string(var_4505);
    }
    #[allow(unused_mut)]
    let mut scope_4506 = writer.prefix("DryRun");
    if let Some(var_4507) = &input.dry_run {
        scope_4506.boolean(*var_4507);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_vpn_connection_device_types(
    input: &crate::input::GetVpnConnectionDeviceTypesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetVpnConnectionDeviceTypes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4508 = writer.prefix("MaxResults");
    if let Some(var_4509) = &input.max_results {
        scope_4508.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4509).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4510 = writer.prefix("NextToken");
    if let Some(var_4511) = &input.next_token {
        scope_4510.string(var_4511);
    }
    #[allow(unused_mut)]
    let mut scope_4512 = writer.prefix("DryRun");
    if let Some(var_4513) = &input.dry_run {
        scope_4512.boolean(*var_4513);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_import_client_vpn_client_certificate_revocation_list(
    input: &crate::input::ImportClientVpnClientCertificateRevocationListInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ImportClientVpnClientCertificateRevocationList",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4514 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_4515) = &input.client_vpn_endpoint_id {
        scope_4514.string(var_4515);
    }
    #[allow(unused_mut)]
    let mut scope_4516 = writer.prefix("CertificateRevocationList");
    if let Some(var_4517) = &input.certificate_revocation_list {
        scope_4516.string(var_4517);
    }
    #[allow(unused_mut)]
    let mut scope_4518 = writer.prefix("DryRun");
    if let Some(var_4519) = &input.dry_run {
        scope_4518.boolean(*var_4519);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_import_image(
    input: &crate::input::ImportImageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ImportImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4520 = writer.prefix("Architecture");
    if let Some(var_4521) = &input.architecture {
        scope_4520.string(var_4521);
    }
    #[allow(unused_mut)]
    let mut scope_4522 = writer.prefix("ClientData");
    if let Some(var_4523) = &input.client_data {
        crate::query_ser::serialize_structure_crate_model_client_data(scope_4522, var_4523)?;
    }
    #[allow(unused_mut)]
    let mut scope_4524 = writer.prefix("ClientToken");
    if let Some(var_4525) = &input.client_token {
        scope_4524.string(var_4525);
    }
    #[allow(unused_mut)]
    let mut scope_4526 = writer.prefix("Description");
    if let Some(var_4527) = &input.description {
        scope_4526.string(var_4527);
    }
    #[allow(unused_mut)]
    let mut scope_4528 = writer.prefix("DiskContainer");
    if let Some(var_4529) = &input.disk_containers {
        let mut list_4531 = scope_4528.start_list(true, Some("item"));
        for item_4530 in var_4529 {
            #[allow(unused_mut)]
            let mut entry_4532 = list_4531.entry();
            crate::query_ser::serialize_structure_crate_model_image_disk_container(
                entry_4532, item_4530,
            )?;
        }
        list_4531.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4533 = writer.prefix("DryRun");
    if let Some(var_4534) = &input.dry_run {
        scope_4533.boolean(*var_4534);
    }
    #[allow(unused_mut)]
    let mut scope_4535 = writer.prefix("Encrypted");
    if let Some(var_4536) = &input.encrypted {
        scope_4535.boolean(*var_4536);
    }
    #[allow(unused_mut)]
    let mut scope_4537 = writer.prefix("Hypervisor");
    if let Some(var_4538) = &input.hypervisor {
        scope_4537.string(var_4538);
    }
    #[allow(unused_mut)]
    let mut scope_4539 = writer.prefix("KmsKeyId");
    if let Some(var_4540) = &input.kms_key_id {
        scope_4539.string(var_4540);
    }
    #[allow(unused_mut)]
    let mut scope_4541 = writer.prefix("LicenseType");
    if let Some(var_4542) = &input.license_type {
        scope_4541.string(var_4542);
    }
    #[allow(unused_mut)]
    let mut scope_4543 = writer.prefix("Platform");
    if let Some(var_4544) = &input.platform {
        scope_4543.string(var_4544);
    }
    #[allow(unused_mut)]
    let mut scope_4545 = writer.prefix("RoleName");
    if let Some(var_4546) = &input.role_name {
        scope_4545.string(var_4546);
    }
    #[allow(unused_mut)]
    let mut scope_4547 = writer.prefix("LicenseSpecifications");
    if let Some(var_4548) = &input.license_specifications {
        let mut list_4550 = scope_4547.start_list(true, Some("item"));
        for item_4549 in var_4548 {
            #[allow(unused_mut)]
            let mut entry_4551 = list_4550.entry();
            crate::query_ser::serialize_structure_crate_model_import_image_license_configuration_request(entry_4551, item_4549)?;
        }
        list_4550.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4552 = writer.prefix("TagSpecification");
    if let Some(var_4553) = &input.tag_specifications {
        let mut list_4555 = scope_4552.start_list(true, Some("item"));
        for item_4554 in var_4553 {
            #[allow(unused_mut)]
            let mut entry_4556 = list_4555.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_4556, item_4554,
            )?;
        }
        list_4555.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4557 = writer.prefix("UsageOperation");
    if let Some(var_4558) = &input.usage_operation {
        scope_4557.string(var_4558);
    }
    #[allow(unused_mut)]
    let mut scope_4559 = writer.prefix("BootMode");
    if let Some(var_4560) = &input.boot_mode {
        scope_4559.string(var_4560.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_import_instance(
    input: &crate::input::ImportInstanceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ImportInstance", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4561 = writer.prefix("Description");
    if let Some(var_4562) = &input.description {
        scope_4561.string(var_4562);
    }
    #[allow(unused_mut)]
    let mut scope_4563 = writer.prefix("DiskImage");
    if let Some(var_4564) = &input.disk_images {
        let mut list_4566 = scope_4563.start_list(true, None);
        for item_4565 in var_4564 {
            #[allow(unused_mut)]
            let mut entry_4567 = list_4566.entry();
            crate::query_ser::serialize_structure_crate_model_disk_image(entry_4567, item_4565)?;
        }
        list_4566.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4568 = writer.prefix("DryRun");
    if let Some(var_4569) = &input.dry_run {
        scope_4568.boolean(*var_4569);
    }
    #[allow(unused_mut)]
    let mut scope_4570 = writer.prefix("LaunchSpecification");
    if let Some(var_4571) = &input.launch_specification {
        crate::query_ser::serialize_structure_crate_model_import_instance_launch_specification(
            scope_4570, var_4571,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4572 = writer.prefix("Platform");
    if let Some(var_4573) = &input.platform {
        scope_4572.string(var_4573.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_import_key_pair(
    input: &crate::input::ImportKeyPairInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ImportKeyPair", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4574 = writer.prefix("DryRun");
    if let Some(var_4575) = &input.dry_run {
        scope_4574.boolean(*var_4575);
    }
    #[allow(unused_mut)]
    let mut scope_4576 = writer.prefix("KeyName");
    if let Some(var_4577) = &input.key_name {
        scope_4576.string(var_4577);
    }
    #[allow(unused_mut)]
    let mut scope_4578 = writer.prefix("PublicKeyMaterial");
    if let Some(var_4579) = &input.public_key_material {
        scope_4578.string(&aws_smithy_types::base64::encode(var_4579));
    }
    #[allow(unused_mut)]
    let mut scope_4580 = writer.prefix("TagSpecification");
    if let Some(var_4581) = &input.tag_specifications {
        let mut list_4583 = scope_4580.start_list(true, Some("item"));
        for item_4582 in var_4581 {
            #[allow(unused_mut)]
            let mut entry_4584 = list_4583.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_4584, item_4582,
            )?;
        }
        list_4583.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_import_snapshot(
    input: &crate::input::ImportSnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ImportSnapshot", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4585 = writer.prefix("ClientData");
    if let Some(var_4586) = &input.client_data {
        crate::query_ser::serialize_structure_crate_model_client_data(scope_4585, var_4586)?;
    }
    #[allow(unused_mut)]
    let mut scope_4587 = writer.prefix("ClientToken");
    if let Some(var_4588) = &input.client_token {
        scope_4587.string(var_4588);
    }
    #[allow(unused_mut)]
    let mut scope_4589 = writer.prefix("Description");
    if let Some(var_4590) = &input.description {
        scope_4589.string(var_4590);
    }
    #[allow(unused_mut)]
    let mut scope_4591 = writer.prefix("DiskContainer");
    if let Some(var_4592) = &input.disk_container {
        crate::query_ser::serialize_structure_crate_model_snapshot_disk_container(
            scope_4591, var_4592,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4593 = writer.prefix("DryRun");
    if let Some(var_4594) = &input.dry_run {
        scope_4593.boolean(*var_4594);
    }
    #[allow(unused_mut)]
    let mut scope_4595 = writer.prefix("Encrypted");
    if let Some(var_4596) = &input.encrypted {
        scope_4595.boolean(*var_4596);
    }
    #[allow(unused_mut)]
    let mut scope_4597 = writer.prefix("KmsKeyId");
    if let Some(var_4598) = &input.kms_key_id {
        scope_4597.string(var_4598);
    }
    #[allow(unused_mut)]
    let mut scope_4599 = writer.prefix("RoleName");
    if let Some(var_4600) = &input.role_name {
        scope_4599.string(var_4600);
    }
    #[allow(unused_mut)]
    let mut scope_4601 = writer.prefix("TagSpecification");
    if let Some(var_4602) = &input.tag_specifications {
        let mut list_4604 = scope_4601.start_list(true, Some("item"));
        for item_4603 in var_4602 {
            #[allow(unused_mut)]
            let mut entry_4605 = list_4604.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_4605, item_4603,
            )?;
        }
        list_4604.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_import_volume(
    input: &crate::input::ImportVolumeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ImportVolume", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4606 = writer.prefix("AvailabilityZone");
    if let Some(var_4607) = &input.availability_zone {
        scope_4606.string(var_4607);
    }
    #[allow(unused_mut)]
    let mut scope_4608 = writer.prefix("Description");
    if let Some(var_4609) = &input.description {
        scope_4608.string(var_4609);
    }
    #[allow(unused_mut)]
    let mut scope_4610 = writer.prefix("DryRun");
    if let Some(var_4611) = &input.dry_run {
        scope_4610.boolean(*var_4611);
    }
    #[allow(unused_mut)]
    let mut scope_4612 = writer.prefix("Image");
    if let Some(var_4613) = &input.image {
        crate::query_ser::serialize_structure_crate_model_disk_image_detail(scope_4612, var_4613)?;
    }
    #[allow(unused_mut)]
    let mut scope_4614 = writer.prefix("Volume");
    if let Some(var_4615) = &input.volume {
        crate::query_ser::serialize_structure_crate_model_volume_detail(scope_4614, var_4615)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_list_images_in_recycle_bin(
    input: &crate::input::ListImagesInRecycleBinInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ListImagesInRecycleBin", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4616 = writer.prefix("ImageId");
    if let Some(var_4617) = &input.image_ids {
        let mut list_4619 = scope_4616.start_list(true, Some("ImageId"));
        for item_4618 in var_4617 {
            #[allow(unused_mut)]
            let mut entry_4620 = list_4619.entry();
            entry_4620.string(item_4618);
        }
        list_4619.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4621 = writer.prefix("NextToken");
    if let Some(var_4622) = &input.next_token {
        scope_4621.string(var_4622);
    }
    #[allow(unused_mut)]
    let mut scope_4623 = writer.prefix("MaxResults");
    if let Some(var_4624) = &input.max_results {
        scope_4623.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4624).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4625 = writer.prefix("DryRun");
    if let Some(var_4626) = &input.dry_run {
        scope_4625.boolean(*var_4626);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_list_snapshots_in_recycle_bin(
    input: &crate::input::ListSnapshotsInRecycleBinInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ListSnapshotsInRecycleBin", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4627 = writer.prefix("MaxResults");
    if let Some(var_4628) = &input.max_results {
        scope_4627.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4628).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4629 = writer.prefix("NextToken");
    if let Some(var_4630) = &input.next_token {
        scope_4629.string(var_4630);
    }
    #[allow(unused_mut)]
    let mut scope_4631 = writer.prefix("SnapshotId");
    if let Some(var_4632) = &input.snapshot_ids {
        let mut list_4634 = scope_4631.start_list(true, Some("SnapshotId"));
        for item_4633 in var_4632 {
            #[allow(unused_mut)]
            let mut entry_4635 = list_4634.entry();
            entry_4635.string(item_4633);
        }
        list_4634.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4636 = writer.prefix("DryRun");
    if let Some(var_4637) = &input.dry_run {
        scope_4636.boolean(*var_4637);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_address_attribute(
    input: &crate::input::ModifyAddressAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyAddressAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4638 = writer.prefix("AllocationId");
    if let Some(var_4639) = &input.allocation_id {
        scope_4638.string(var_4639);
    }
    #[allow(unused_mut)]
    let mut scope_4640 = writer.prefix("DomainName");
    if let Some(var_4641) = &input.domain_name {
        scope_4640.string(var_4641);
    }
    #[allow(unused_mut)]
    let mut scope_4642 = writer.prefix("DryRun");
    if let Some(var_4643) = &input.dry_run {
        scope_4642.boolean(*var_4643);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_availability_zone_group(
    input: &crate::input::ModifyAvailabilityZoneGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyAvailabilityZoneGroup", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4644 = writer.prefix("GroupName");
    if let Some(var_4645) = &input.group_name {
        scope_4644.string(var_4645);
    }
    #[allow(unused_mut)]
    let mut scope_4646 = writer.prefix("OptInStatus");
    if let Some(var_4647) = &input.opt_in_status {
        scope_4646.string(var_4647.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4648 = writer.prefix("DryRun");
    if let Some(var_4649) = &input.dry_run {
        scope_4648.boolean(*var_4649);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_capacity_reservation(
    input: &crate::input::ModifyCapacityReservationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyCapacityReservation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4650 = writer.prefix("CapacityReservationId");
    if let Some(var_4651) = &input.capacity_reservation_id {
        scope_4650.string(var_4651);
    }
    #[allow(unused_mut)]
    let mut scope_4652 = writer.prefix("InstanceCount");
    if let Some(var_4653) = &input.instance_count {
        scope_4652.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4653).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4654 = writer.prefix("EndDate");
    if let Some(var_4655) = &input.end_date {
        scope_4654.date_time(var_4655, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_4656 = writer.prefix("EndDateType");
    if let Some(var_4657) = &input.end_date_type {
        scope_4656.string(var_4657.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4658 = writer.prefix("Accept");
    if let Some(var_4659) = &input.accept {
        scope_4658.boolean(*var_4659);
    }
    #[allow(unused_mut)]
    let mut scope_4660 = writer.prefix("DryRun");
    if let Some(var_4661) = &input.dry_run {
        scope_4660.boolean(*var_4661);
    }
    #[allow(unused_mut)]
    let mut scope_4662 = writer.prefix("AdditionalInfo");
    if let Some(var_4663) = &input.additional_info {
        scope_4662.string(var_4663);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_capacity_reservation_fleet(
    input: &crate::input::ModifyCapacityReservationFleetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyCapacityReservationFleet",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4664 = writer.prefix("CapacityReservationFleetId");
    if let Some(var_4665) = &input.capacity_reservation_fleet_id {
        scope_4664.string(var_4665);
    }
    #[allow(unused_mut)]
    let mut scope_4666 = writer.prefix("TotalTargetCapacity");
    if let Some(var_4667) = &input.total_target_capacity {
        scope_4666.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4667).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4668 = writer.prefix("EndDate");
    if let Some(var_4669) = &input.end_date {
        scope_4668.date_time(var_4669, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_4670 = writer.prefix("DryRun");
    if let Some(var_4671) = &input.dry_run {
        scope_4670.boolean(*var_4671);
    }
    #[allow(unused_mut)]
    let mut scope_4672 = writer.prefix("RemoveEndDate");
    if let Some(var_4673) = &input.remove_end_date {
        scope_4672.boolean(*var_4673);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_client_vpn_endpoint(
    input: &crate::input::ModifyClientVpnEndpointInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyClientVpnEndpoint", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4674 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_4675) = &input.client_vpn_endpoint_id {
        scope_4674.string(var_4675);
    }
    #[allow(unused_mut)]
    let mut scope_4676 = writer.prefix("ServerCertificateArn");
    if let Some(var_4677) = &input.server_certificate_arn {
        scope_4676.string(var_4677);
    }
    #[allow(unused_mut)]
    let mut scope_4678 = writer.prefix("ConnectionLogOptions");
    if let Some(var_4679) = &input.connection_log_options {
        crate::query_ser::serialize_structure_crate_model_connection_log_options(
            scope_4678, var_4679,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4680 = writer.prefix("DnsServers");
    if let Some(var_4681) = &input.dns_servers {
        crate::query_ser::serialize_structure_crate_model_dns_servers_options_modify_structure(
            scope_4680, var_4681,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4682 = writer.prefix("VpnPort");
    if let Some(var_4683) = &input.vpn_port {
        scope_4682.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4683).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4684 = writer.prefix("Description");
    if let Some(var_4685) = &input.description {
        scope_4684.string(var_4685);
    }
    #[allow(unused_mut)]
    let mut scope_4686 = writer.prefix("SplitTunnel");
    if let Some(var_4687) = &input.split_tunnel {
        scope_4686.boolean(*var_4687);
    }
    #[allow(unused_mut)]
    let mut scope_4688 = writer.prefix("DryRun");
    if let Some(var_4689) = &input.dry_run {
        scope_4688.boolean(*var_4689);
    }
    #[allow(unused_mut)]
    let mut scope_4690 = writer.prefix("SecurityGroupId");
    if let Some(var_4691) = &input.security_group_ids {
        let mut list_4693 = scope_4690.start_list(true, Some("item"));
        for item_4692 in var_4691 {
            #[allow(unused_mut)]
            let mut entry_4694 = list_4693.entry();
            entry_4694.string(item_4692);
        }
        list_4693.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4695 = writer.prefix("VpcId");
    if let Some(var_4696) = &input.vpc_id {
        scope_4695.string(var_4696);
    }
    #[allow(unused_mut)]
    let mut scope_4697 = writer.prefix("SelfServicePortal");
    if let Some(var_4698) = &input.self_service_portal {
        scope_4697.string(var_4698.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4699 = writer.prefix("ClientConnectOptions");
    if let Some(var_4700) = &input.client_connect_options {
        crate::query_ser::serialize_structure_crate_model_client_connect_options(
            scope_4699, var_4700,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4701 = writer.prefix("SessionTimeoutHours");
    if let Some(var_4702) = &input.session_timeout_hours {
        scope_4701.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4702).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4703 = writer.prefix("ClientLoginBannerOptions");
    if let Some(var_4704) = &input.client_login_banner_options {
        crate::query_ser::serialize_structure_crate_model_client_login_banner_options(
            scope_4703, var_4704,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_default_credit_specification(
    input: &crate::input::ModifyDefaultCreditSpecificationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyDefaultCreditSpecification",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4705 = writer.prefix("DryRun");
    if let Some(var_4706) = &input.dry_run {
        scope_4705.boolean(*var_4706);
    }
    #[allow(unused_mut)]
    let mut scope_4707 = writer.prefix("InstanceFamily");
    if let Some(var_4708) = &input.instance_family {
        scope_4707.string(var_4708.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4709 = writer.prefix("CpuCredits");
    if let Some(var_4710) = &input.cpu_credits {
        scope_4709.string(var_4710);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_ebs_default_kms_key_id(
    input: &crate::input::ModifyEbsDefaultKmsKeyIdInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyEbsDefaultKmsKeyId", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4711 = writer.prefix("KmsKeyId");
    if let Some(var_4712) = &input.kms_key_id {
        scope_4711.string(var_4712);
    }
    #[allow(unused_mut)]
    let mut scope_4713 = writer.prefix("DryRun");
    if let Some(var_4714) = &input.dry_run {
        scope_4713.boolean(*var_4714);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_fleet(
    input: &crate::input::ModifyFleetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyFleet", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4715 = writer.prefix("DryRun");
    if let Some(var_4716) = &input.dry_run {
        scope_4715.boolean(*var_4716);
    }
    #[allow(unused_mut)]
    let mut scope_4717 = writer.prefix("ExcessCapacityTerminationPolicy");
    if let Some(var_4718) = &input.excess_capacity_termination_policy {
        scope_4717.string(var_4718.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4719 = writer.prefix("LaunchTemplateConfig");
    if let Some(var_4720) = &input.launch_template_configs {
        let mut list_4722 = scope_4719.start_list(true, Some("item"));
        for item_4721 in var_4720 {
            #[allow(unused_mut)]
            let mut entry_4723 = list_4722.entry();
            crate::query_ser::serialize_structure_crate_model_fleet_launch_template_config_request(
                entry_4723, item_4721,
            )?;
        }
        list_4722.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4724 = writer.prefix("FleetId");
    if let Some(var_4725) = &input.fleet_id {
        scope_4724.string(var_4725);
    }
    #[allow(unused_mut)]
    let mut scope_4726 = writer.prefix("TargetCapacitySpecification");
    if let Some(var_4727) = &input.target_capacity_specification {
        crate::query_ser::serialize_structure_crate_model_target_capacity_specification_request(
            scope_4726, var_4727,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4728 = writer.prefix("Context");
    if let Some(var_4729) = &input.context {
        scope_4728.string(var_4729);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_fpga_image_attribute(
    input: &crate::input::ModifyFpgaImageAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyFpgaImageAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4730 = writer.prefix("DryRun");
    if let Some(var_4731) = &input.dry_run {
        scope_4730.boolean(*var_4731);
    }
    #[allow(unused_mut)]
    let mut scope_4732 = writer.prefix("FpgaImageId");
    if let Some(var_4733) = &input.fpga_image_id {
        scope_4732.string(var_4733);
    }
    #[allow(unused_mut)]
    let mut scope_4734 = writer.prefix("Attribute");
    if let Some(var_4735) = &input.attribute {
        scope_4734.string(var_4735.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4736 = writer.prefix("OperationType");
    if let Some(var_4737) = &input.operation_type {
        scope_4736.string(var_4737.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4738 = writer.prefix("UserId");
    if let Some(var_4739) = &input.user_ids {
        let mut list_4741 = scope_4738.start_list(true, Some("UserId"));
        for item_4740 in var_4739 {
            #[allow(unused_mut)]
            let mut entry_4742 = list_4741.entry();
            entry_4742.string(item_4740);
        }
        list_4741.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4743 = writer.prefix("UserGroup");
    if let Some(var_4744) = &input.user_groups {
        let mut list_4746 = scope_4743.start_list(true, Some("UserGroup"));
        for item_4745 in var_4744 {
            #[allow(unused_mut)]
            let mut entry_4747 = list_4746.entry();
            entry_4747.string(item_4745);
        }
        list_4746.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4748 = writer.prefix("ProductCode");
    if let Some(var_4749) = &input.product_codes {
        let mut list_4751 = scope_4748.start_list(true, Some("ProductCode"));
        for item_4750 in var_4749 {
            #[allow(unused_mut)]
            let mut entry_4752 = list_4751.entry();
            entry_4752.string(item_4750);
        }
        list_4751.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4753 = writer.prefix("LoadPermission");
    if let Some(var_4754) = &input.load_permission {
        crate::query_ser::serialize_structure_crate_model_load_permission_modifications(
            scope_4753, var_4754,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4755 = writer.prefix("Description");
    if let Some(var_4756) = &input.description {
        scope_4755.string(var_4756);
    }
    #[allow(unused_mut)]
    let mut scope_4757 = writer.prefix("Name");
    if let Some(var_4758) = &input.name {
        scope_4757.string(var_4758);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_hosts(
    input: &crate::input::ModifyHostsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyHosts", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4759 = writer.prefix("AutoPlacement");
    if let Some(var_4760) = &input.auto_placement {
        scope_4759.string(var_4760.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4761 = writer.prefix("HostId");
    if let Some(var_4762) = &input.host_ids {
        let mut list_4764 = scope_4761.start_list(true, Some("item"));
        for item_4763 in var_4762 {
            #[allow(unused_mut)]
            let mut entry_4765 = list_4764.entry();
            entry_4765.string(item_4763);
        }
        list_4764.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4766 = writer.prefix("HostRecovery");
    if let Some(var_4767) = &input.host_recovery {
        scope_4766.string(var_4767.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4768 = writer.prefix("InstanceType");
    if let Some(var_4769) = &input.instance_type {
        scope_4768.string(var_4769);
    }
    #[allow(unused_mut)]
    let mut scope_4770 = writer.prefix("InstanceFamily");
    if let Some(var_4771) = &input.instance_family {
        scope_4770.string(var_4771);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_identity_id_format(
    input: &crate::input::ModifyIdentityIdFormatInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyIdentityIdFormat", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4772 = writer.prefix("PrincipalArn");
    if let Some(var_4773) = &input.principal_arn {
        scope_4772.string(var_4773);
    }
    #[allow(unused_mut)]
    let mut scope_4774 = writer.prefix("Resource");
    if let Some(var_4775) = &input.resource {
        scope_4774.string(var_4775);
    }
    #[allow(unused_mut)]
    let mut scope_4776 = writer.prefix("UseLongIds");
    if let Some(var_4777) = &input.use_long_ids {
        scope_4776.boolean(*var_4777);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_id_format(
    input: &crate::input::ModifyIdFormatInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyIdFormat", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4778 = writer.prefix("Resource");
    if let Some(var_4779) = &input.resource {
        scope_4778.string(var_4779);
    }
    #[allow(unused_mut)]
    let mut scope_4780 = writer.prefix("UseLongIds");
    if let Some(var_4781) = &input.use_long_ids {
        scope_4780.boolean(*var_4781);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_image_attribute(
    input: &crate::input::ModifyImageAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyImageAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4782 = writer.prefix("Attribute");
    if let Some(var_4783) = &input.attribute {
        scope_4782.string(var_4783);
    }
    #[allow(unused_mut)]
    let mut scope_4784 = writer.prefix("Description");
    if let Some(var_4785) = &input.description {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_4784, var_4785)?;
    }
    #[allow(unused_mut)]
    let mut scope_4786 = writer.prefix("ImageId");
    if let Some(var_4787) = &input.image_id {
        scope_4786.string(var_4787);
    }
    #[allow(unused_mut)]
    let mut scope_4788 = writer.prefix("LaunchPermission");
    if let Some(var_4789) = &input.launch_permission {
        crate::query_ser::serialize_structure_crate_model_launch_permission_modifications(
            scope_4788, var_4789,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4790 = writer.prefix("OperationType");
    if let Some(var_4791) = &input.operation_type {
        scope_4790.string(var_4791.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4792 = writer.prefix("ProductCode");
    if let Some(var_4793) = &input.product_codes {
        let mut list_4795 = scope_4792.start_list(true, Some("ProductCode"));
        for item_4794 in var_4793 {
            #[allow(unused_mut)]
            let mut entry_4796 = list_4795.entry();
            entry_4796.string(item_4794);
        }
        list_4795.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4797 = writer.prefix("UserGroup");
    if let Some(var_4798) = &input.user_groups {
        let mut list_4800 = scope_4797.start_list(true, Some("UserGroup"));
        for item_4799 in var_4798 {
            #[allow(unused_mut)]
            let mut entry_4801 = list_4800.entry();
            entry_4801.string(item_4799);
        }
        list_4800.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4802 = writer.prefix("UserId");
    if let Some(var_4803) = &input.user_ids {
        let mut list_4805 = scope_4802.start_list(true, Some("UserId"));
        for item_4804 in var_4803 {
            #[allow(unused_mut)]
            let mut entry_4806 = list_4805.entry();
            entry_4806.string(item_4804);
        }
        list_4805.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4807 = writer.prefix("Value");
    if let Some(var_4808) = &input.value {
        scope_4807.string(var_4808);
    }
    #[allow(unused_mut)]
    let mut scope_4809 = writer.prefix("DryRun");
    if let Some(var_4810) = &input.dry_run {
        scope_4809.boolean(*var_4810);
    }
    #[allow(unused_mut)]
    let mut scope_4811 = writer.prefix("OrganizationArn");
    if let Some(var_4812) = &input.organization_arns {
        let mut list_4814 = scope_4811.start_list(true, Some("OrganizationArn"));
        for item_4813 in var_4812 {
            #[allow(unused_mut)]
            let mut entry_4815 = list_4814.entry();
            entry_4815.string(item_4813);
        }
        list_4814.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4816 = writer.prefix("OrganizationalUnitArn");
    if let Some(var_4817) = &input.organizational_unit_arns {
        let mut list_4819 = scope_4816.start_list(true, Some("OrganizationalUnitArn"));
        for item_4818 in var_4817 {
            #[allow(unused_mut)]
            let mut entry_4820 = list_4819.entry();
            entry_4820.string(item_4818);
        }
        list_4819.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_attribute(
    input: &crate::input::ModifyInstanceAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyInstanceAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4821 = writer.prefix("SourceDestCheck");
    if let Some(var_4822) = &input.source_dest_check {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_4821, var_4822,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4823 = writer.prefix("Attribute");
    if let Some(var_4824) = &input.attribute {
        scope_4823.string(var_4824.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4825 = writer.prefix("BlockDeviceMapping");
    if let Some(var_4826) = &input.block_device_mappings {
        let mut list_4828 = scope_4825.start_list(true, Some("item"));
        for item_4827 in var_4826 {
            #[allow(unused_mut)]
            let mut entry_4829 = list_4828.entry();
            crate::query_ser::serialize_structure_crate_model_instance_block_device_mapping_specification(entry_4829, item_4827)?;
        }
        list_4828.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4830 = writer.prefix("DisableApiTermination");
    if let Some(var_4831) = &input.disable_api_termination {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_4830, var_4831,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4832 = writer.prefix("DryRun");
    if let Some(var_4833) = &input.dry_run {
        scope_4832.boolean(*var_4833);
    }
    #[allow(unused_mut)]
    let mut scope_4834 = writer.prefix("EbsOptimized");
    if let Some(var_4835) = &input.ebs_optimized {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_4834, var_4835,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4836 = writer.prefix("EnaSupport");
    if let Some(var_4837) = &input.ena_support {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_4836, var_4837,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4838 = writer.prefix("GroupId");
    if let Some(var_4839) = &input.groups {
        let mut list_4841 = scope_4838.start_list(true, Some("groupId"));
        for item_4840 in var_4839 {
            #[allow(unused_mut)]
            let mut entry_4842 = list_4841.entry();
            entry_4842.string(item_4840);
        }
        list_4841.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4843 = writer.prefix("InstanceId");
    if let Some(var_4844) = &input.instance_id {
        scope_4843.string(var_4844);
    }
    #[allow(unused_mut)]
    let mut scope_4845 = writer.prefix("InstanceInitiatedShutdownBehavior");
    if let Some(var_4846) = &input.instance_initiated_shutdown_behavior {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_4845, var_4846)?;
    }
    #[allow(unused_mut)]
    let mut scope_4847 = writer.prefix("InstanceType");
    if let Some(var_4848) = &input.instance_type {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_4847, var_4848)?;
    }
    #[allow(unused_mut)]
    let mut scope_4849 = writer.prefix("Kernel");
    if let Some(var_4850) = &input.kernel {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_4849, var_4850)?;
    }
    #[allow(unused_mut)]
    let mut scope_4851 = writer.prefix("Ramdisk");
    if let Some(var_4852) = &input.ramdisk {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_4851, var_4852)?;
    }
    #[allow(unused_mut)]
    let mut scope_4853 = writer.prefix("SriovNetSupport");
    if let Some(var_4854) = &input.sriov_net_support {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_4853, var_4854)?;
    }
    #[allow(unused_mut)]
    let mut scope_4855 = writer.prefix("UserData");
    if let Some(var_4856) = &input.user_data {
        crate::query_ser::serialize_structure_crate_model_blob_attribute_value(
            scope_4855, var_4856,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4857 = writer.prefix("Value");
    if let Some(var_4858) = &input.value {
        scope_4857.string(var_4858);
    }
    #[allow(unused_mut)]
    let mut scope_4859 = writer.prefix("DisableApiStop");
    if let Some(var_4860) = &input.disable_api_stop {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_4859, var_4860,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_capacity_reservation_attributes(
    input: &crate::input::ModifyInstanceCapacityReservationAttributesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyInstanceCapacityReservationAttributes",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4861 = writer.prefix("InstanceId");
    if let Some(var_4862) = &input.instance_id {
        scope_4861.string(var_4862);
    }
    #[allow(unused_mut)]
    let mut scope_4863 = writer.prefix("CapacityReservationSpecification");
    if let Some(var_4864) = &input.capacity_reservation_specification {
        crate::query_ser::serialize_structure_crate_model_capacity_reservation_specification(
            scope_4863, var_4864,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_4865 = writer.prefix("DryRun");
    if let Some(var_4866) = &input.dry_run {
        scope_4865.boolean(*var_4866);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_credit_specification(
    input: &crate::input::ModifyInstanceCreditSpecificationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyInstanceCreditSpecification",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4867 = writer.prefix("DryRun");
    if let Some(var_4868) = &input.dry_run {
        scope_4867.boolean(*var_4868);
    }
    #[allow(unused_mut)]
    let mut scope_4869 = writer.prefix("ClientToken");
    if let Some(var_4870) = &input.client_token {
        scope_4869.string(var_4870);
    }
    #[allow(unused_mut)]
    let mut scope_4871 = writer.prefix("InstanceCreditSpecification");
    if let Some(var_4872) = &input.instance_credit_specifications {
        let mut list_4874 = scope_4871.start_list(true, Some("item"));
        for item_4873 in var_4872 {
            #[allow(unused_mut)]
            let mut entry_4875 = list_4874.entry();
            crate::query_ser::serialize_structure_crate_model_instance_credit_specification_request(entry_4875, item_4873)?;
        }
        list_4874.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_event_start_time(
    input: &crate::input::ModifyInstanceEventStartTimeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyInstanceEventStartTime", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4876 = writer.prefix("DryRun");
    if let Some(var_4877) = &input.dry_run {
        scope_4876.boolean(*var_4877);
    }
    #[allow(unused_mut)]
    let mut scope_4878 = writer.prefix("InstanceId");
    if let Some(var_4879) = &input.instance_id {
        scope_4878.string(var_4879);
    }
    #[allow(unused_mut)]
    let mut scope_4880 = writer.prefix("InstanceEventId");
    if let Some(var_4881) = &input.instance_event_id {
        scope_4880.string(var_4881);
    }
    #[allow(unused_mut)]
    let mut scope_4882 = writer.prefix("NotBefore");
    if let Some(var_4883) = &input.not_before {
        scope_4882.date_time(var_4883, aws_smithy_types::date_time::Format::DateTime)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_event_window(
    input: &crate::input::ModifyInstanceEventWindowInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyInstanceEventWindow", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4884 = writer.prefix("DryRun");
    if let Some(var_4885) = &input.dry_run {
        scope_4884.boolean(*var_4885);
    }
    #[allow(unused_mut)]
    let mut scope_4886 = writer.prefix("Name");
    if let Some(var_4887) = &input.name {
        scope_4886.string(var_4887);
    }
    #[allow(unused_mut)]
    let mut scope_4888 = writer.prefix("InstanceEventWindowId");
    if let Some(var_4889) = &input.instance_event_window_id {
        scope_4888.string(var_4889);
    }
    #[allow(unused_mut)]
    let mut scope_4890 = writer.prefix("TimeRange");
    if let Some(var_4891) = &input.time_ranges {
        let mut list_4893 = scope_4890.start_list(true, None);
        for item_4892 in var_4891 {
            #[allow(unused_mut)]
            let mut entry_4894 = list_4893.entry();
            crate::query_ser::serialize_structure_crate_model_instance_event_window_time_range_request(entry_4894, item_4892)?;
        }
        list_4893.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4895 = writer.prefix("CronExpression");
    if let Some(var_4896) = &input.cron_expression {
        scope_4895.string(var_4896);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_maintenance_options(
    input: &crate::input::ModifyInstanceMaintenanceOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyInstanceMaintenanceOptions",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_4897 = writer.prefix("InstanceId");
    if let Some(var_4898) = &input.instance_id {
        scope_4897.string(var_4898);
    }
    #[allow(unused_mut)]
    let mut scope_4899 = writer.prefix("AutoRecovery");
    if let Some(var_4900) = &input.auto_recovery {
        scope_4899.string(var_4900.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4901 = writer.prefix("DryRun");
    if let Some(var_4902) = &input.dry_run {
        scope_4901.boolean(*var_4902);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_metadata_options(
    input: &crate::input::ModifyInstanceMetadataOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyInstanceMetadataOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4903 = writer.prefix("InstanceId");
    if let Some(var_4904) = &input.instance_id {
        scope_4903.string(var_4904);
    }
    #[allow(unused_mut)]
    let mut scope_4905 = writer.prefix("HttpTokens");
    if let Some(var_4906) = &input.http_tokens {
        scope_4905.string(var_4906.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4907 = writer.prefix("HttpPutResponseHopLimit");
    if let Some(var_4908) = &input.http_put_response_hop_limit {
        scope_4907.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4908).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4909 = writer.prefix("HttpEndpoint");
    if let Some(var_4910) = &input.http_endpoint {
        scope_4909.string(var_4910.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4911 = writer.prefix("DryRun");
    if let Some(var_4912) = &input.dry_run {
        scope_4911.boolean(*var_4912);
    }
    #[allow(unused_mut)]
    let mut scope_4913 = writer.prefix("HttpProtocolIpv6");
    if let Some(var_4914) = &input.http_protocol_ipv6 {
        scope_4913.string(var_4914.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4915 = writer.prefix("InstanceMetadataTags");
    if let Some(var_4916) = &input.instance_metadata_tags {
        scope_4915.string(var_4916.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_instance_placement(
    input: &crate::input::ModifyInstancePlacementInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyInstancePlacement", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4917 = writer.prefix("Affinity");
    if let Some(var_4918) = &input.affinity {
        scope_4917.string(var_4918.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4919 = writer.prefix("GroupName");
    if let Some(var_4920) = &input.group_name {
        scope_4919.string(var_4920);
    }
    #[allow(unused_mut)]
    let mut scope_4921 = writer.prefix("HostId");
    if let Some(var_4922) = &input.host_id {
        scope_4921.string(var_4922);
    }
    #[allow(unused_mut)]
    let mut scope_4923 = writer.prefix("InstanceId");
    if let Some(var_4924) = &input.instance_id {
        scope_4923.string(var_4924);
    }
    #[allow(unused_mut)]
    let mut scope_4925 = writer.prefix("Tenancy");
    if let Some(var_4926) = &input.tenancy {
        scope_4925.string(var_4926.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_4927 = writer.prefix("PartitionNumber");
    if let Some(var_4928) = &input.partition_number {
        scope_4927.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4928).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4929 = writer.prefix("HostResourceGroupArn");
    if let Some(var_4930) = &input.host_resource_group_arn {
        scope_4929.string(var_4930);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_ipam(
    input: &crate::input::ModifyIpamInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyIpam", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4931 = writer.prefix("DryRun");
    if let Some(var_4932) = &input.dry_run {
        scope_4931.boolean(*var_4932);
    }
    #[allow(unused_mut)]
    let mut scope_4933 = writer.prefix("IpamId");
    if let Some(var_4934) = &input.ipam_id {
        scope_4933.string(var_4934);
    }
    #[allow(unused_mut)]
    let mut scope_4935 = writer.prefix("Description");
    if let Some(var_4936) = &input.description {
        scope_4935.string(var_4936);
    }
    #[allow(unused_mut)]
    let mut scope_4937 = writer.prefix("AddOperatingRegion");
    if let Some(var_4938) = &input.add_operating_regions {
        let mut list_4940 = scope_4937.start_list(true, None);
        for item_4939 in var_4938 {
            #[allow(unused_mut)]
            let mut entry_4941 = list_4940.entry();
            crate::query_ser::serialize_structure_crate_model_add_ipam_operating_region(
                entry_4941, item_4939,
            )?;
        }
        list_4940.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4942 = writer.prefix("RemoveOperatingRegion");
    if let Some(var_4943) = &input.remove_operating_regions {
        let mut list_4945 = scope_4942.start_list(true, None);
        for item_4944 in var_4943 {
            #[allow(unused_mut)]
            let mut entry_4946 = list_4945.entry();
            crate::query_ser::serialize_structure_crate_model_remove_ipam_operating_region(
                entry_4946, item_4944,
            )?;
        }
        list_4945.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_ipam_pool(
    input: &crate::input::ModifyIpamPoolInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyIpamPool", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4947 = writer.prefix("DryRun");
    if let Some(var_4948) = &input.dry_run {
        scope_4947.boolean(*var_4948);
    }
    #[allow(unused_mut)]
    let mut scope_4949 = writer.prefix("IpamPoolId");
    if let Some(var_4950) = &input.ipam_pool_id {
        scope_4949.string(var_4950);
    }
    #[allow(unused_mut)]
    let mut scope_4951 = writer.prefix("Description");
    if let Some(var_4952) = &input.description {
        scope_4951.string(var_4952);
    }
    #[allow(unused_mut)]
    let mut scope_4953 = writer.prefix("AutoImport");
    if let Some(var_4954) = &input.auto_import {
        scope_4953.boolean(*var_4954);
    }
    #[allow(unused_mut)]
    let mut scope_4955 = writer.prefix("AllocationMinNetmaskLength");
    if let Some(var_4956) = &input.allocation_min_netmask_length {
        scope_4955.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4956).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4957 = writer.prefix("AllocationMaxNetmaskLength");
    if let Some(var_4958) = &input.allocation_max_netmask_length {
        scope_4957.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4958).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4959 = writer.prefix("AllocationDefaultNetmaskLength");
    if let Some(var_4960) = &input.allocation_default_netmask_length {
        scope_4959.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4960).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_4961 = writer.prefix("ClearAllocationDefaultNetmaskLength");
    if let Some(var_4962) = &input.clear_allocation_default_netmask_length {
        scope_4961.boolean(*var_4962);
    }
    #[allow(unused_mut)]
    let mut scope_4963 = writer.prefix("AddAllocationResourceTag");
    if let Some(var_4964) = &input.add_allocation_resource_tags {
        let mut list_4966 = scope_4963.start_list(true, Some("item"));
        for item_4965 in var_4964 {
            #[allow(unused_mut)]
            let mut entry_4967 = list_4966.entry();
            crate::query_ser::serialize_structure_crate_model_request_ipam_resource_tag(
                entry_4967, item_4965,
            )?;
        }
        list_4966.finish();
    }
    #[allow(unused_mut)]
    let mut scope_4968 = writer.prefix("RemoveAllocationResourceTag");
    if let Some(var_4969) = &input.remove_allocation_resource_tags {
        let mut list_4971 = scope_4968.start_list(true, Some("item"));
        for item_4970 in var_4969 {
            #[allow(unused_mut)]
            let mut entry_4972 = list_4971.entry();
            crate::query_ser::serialize_structure_crate_model_request_ipam_resource_tag(
                entry_4972, item_4970,
            )?;
        }
        list_4971.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_ipam_resource_cidr(
    input: &crate::input::ModifyIpamResourceCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyIpamResourceCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4973 = writer.prefix("DryRun");
    if let Some(var_4974) = &input.dry_run {
        scope_4973.boolean(*var_4974);
    }
    #[allow(unused_mut)]
    let mut scope_4975 = writer.prefix("ResourceId");
    if let Some(var_4976) = &input.resource_id {
        scope_4975.string(var_4976);
    }
    #[allow(unused_mut)]
    let mut scope_4977 = writer.prefix("ResourceCidr");
    if let Some(var_4978) = &input.resource_cidr {
        scope_4977.string(var_4978);
    }
    #[allow(unused_mut)]
    let mut scope_4979 = writer.prefix("ResourceRegion");
    if let Some(var_4980) = &input.resource_region {
        scope_4979.string(var_4980);
    }
    #[allow(unused_mut)]
    let mut scope_4981 = writer.prefix("CurrentIpamScopeId");
    if let Some(var_4982) = &input.current_ipam_scope_id {
        scope_4981.string(var_4982);
    }
    #[allow(unused_mut)]
    let mut scope_4983 = writer.prefix("DestinationIpamScopeId");
    if let Some(var_4984) = &input.destination_ipam_scope_id {
        scope_4983.string(var_4984);
    }
    #[allow(unused_mut)]
    let mut scope_4985 = writer.prefix("Monitored");
    if let Some(var_4986) = &input.monitored {
        scope_4985.boolean(*var_4986);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_ipam_scope(
    input: &crate::input::ModifyIpamScopeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyIpamScope", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4987 = writer.prefix("DryRun");
    if let Some(var_4988) = &input.dry_run {
        scope_4987.boolean(*var_4988);
    }
    #[allow(unused_mut)]
    let mut scope_4989 = writer.prefix("IpamScopeId");
    if let Some(var_4990) = &input.ipam_scope_id {
        scope_4989.string(var_4990);
    }
    #[allow(unused_mut)]
    let mut scope_4991 = writer.prefix("Description");
    if let Some(var_4992) = &input.description {
        scope_4991.string(var_4992);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_launch_template(
    input: &crate::input::ModifyLaunchTemplateInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyLaunchTemplate", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_4993 = writer.prefix("DryRun");
    if let Some(var_4994) = &input.dry_run {
        scope_4993.boolean(*var_4994);
    }
    #[allow(unused_mut)]
    let mut scope_4995 = writer.prefix("ClientToken");
    if let Some(var_4996) = &input.client_token {
        scope_4995.string(var_4996);
    }
    #[allow(unused_mut)]
    let mut scope_4997 = writer.prefix("LaunchTemplateId");
    if let Some(var_4998) = &input.launch_template_id {
        scope_4997.string(var_4998);
    }
    #[allow(unused_mut)]
    let mut scope_4999 = writer.prefix("LaunchTemplateName");
    if let Some(var_5000) = &input.launch_template_name {
        scope_4999.string(var_5000);
    }
    #[allow(unused_mut)]
    let mut scope_5001 = writer.prefix("SetDefaultVersion");
    if let Some(var_5002) = &input.default_version {
        scope_5001.string(var_5002);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_managed_prefix_list(
    input: &crate::input::ModifyManagedPrefixListInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyManagedPrefixList", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5003 = writer.prefix("DryRun");
    if let Some(var_5004) = &input.dry_run {
        scope_5003.boolean(*var_5004);
    }
    #[allow(unused_mut)]
    let mut scope_5005 = writer.prefix("PrefixListId");
    if let Some(var_5006) = &input.prefix_list_id {
        scope_5005.string(var_5006);
    }
    #[allow(unused_mut)]
    let mut scope_5007 = writer.prefix("CurrentVersion");
    if let Some(var_5008) = &input.current_version {
        scope_5007.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5008).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5009 = writer.prefix("PrefixListName");
    if let Some(var_5010) = &input.prefix_list_name {
        scope_5009.string(var_5010);
    }
    #[allow(unused_mut)]
    let mut scope_5011 = writer.prefix("AddEntry");
    if let Some(var_5012) = &input.add_entries {
        let mut list_5014 = scope_5011.start_list(true, None);
        for item_5013 in var_5012 {
            #[allow(unused_mut)]
            let mut entry_5015 = list_5014.entry();
            crate::query_ser::serialize_structure_crate_model_add_prefix_list_entry(
                entry_5015, item_5013,
            )?;
        }
        list_5014.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5016 = writer.prefix("RemoveEntry");
    if let Some(var_5017) = &input.remove_entries {
        let mut list_5019 = scope_5016.start_list(true, None);
        for item_5018 in var_5017 {
            #[allow(unused_mut)]
            let mut entry_5020 = list_5019.entry();
            crate::query_ser::serialize_structure_crate_model_remove_prefix_list_entry(
                entry_5020, item_5018,
            )?;
        }
        list_5019.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5021 = writer.prefix("MaxEntries");
    if let Some(var_5022) = &input.max_entries {
        scope_5021.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5022).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_network_interface_attribute(
    input: &crate::input::ModifyNetworkInterfaceAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyNetworkInterfaceAttribute",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5023 = writer.prefix("Attachment");
    if let Some(var_5024) = &input.attachment {
        crate::query_ser::serialize_structure_crate_model_network_interface_attachment_changes(
            scope_5023, var_5024,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5025 = writer.prefix("Description");
    if let Some(var_5026) = &input.description {
        crate::query_ser::serialize_structure_crate_model_attribute_value(scope_5025, var_5026)?;
    }
    #[allow(unused_mut)]
    let mut scope_5027 = writer.prefix("DryRun");
    if let Some(var_5028) = &input.dry_run {
        scope_5027.boolean(*var_5028);
    }
    #[allow(unused_mut)]
    let mut scope_5029 = writer.prefix("SecurityGroupId");
    if let Some(var_5030) = &input.groups {
        let mut list_5032 = scope_5029.start_list(true, Some("SecurityGroupId"));
        for item_5031 in var_5030 {
            #[allow(unused_mut)]
            let mut entry_5033 = list_5032.entry();
            entry_5033.string(item_5031);
        }
        list_5032.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5034 = writer.prefix("NetworkInterfaceId");
    if let Some(var_5035) = &input.network_interface_id {
        scope_5034.string(var_5035);
    }
    #[allow(unused_mut)]
    let mut scope_5036 = writer.prefix("SourceDestCheck");
    if let Some(var_5037) = &input.source_dest_check {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5036, var_5037,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_private_dns_name_options(
    input: &crate::input::ModifyPrivateDnsNameOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyPrivateDnsNameOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5038 = writer.prefix("DryRun");
    if let Some(var_5039) = &input.dry_run {
        scope_5038.boolean(*var_5039);
    }
    #[allow(unused_mut)]
    let mut scope_5040 = writer.prefix("InstanceId");
    if let Some(var_5041) = &input.instance_id {
        scope_5040.string(var_5041);
    }
    #[allow(unused_mut)]
    let mut scope_5042 = writer.prefix("PrivateDnsHostnameType");
    if let Some(var_5043) = &input.private_dns_hostname_type {
        scope_5042.string(var_5043.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5044 = writer.prefix("EnableResourceNameDnsARecord");
    if let Some(var_5045) = &input.enable_resource_name_dns_a_record {
        scope_5044.boolean(*var_5045);
    }
    #[allow(unused_mut)]
    let mut scope_5046 = writer.prefix("EnableResourceNameDnsAAAARecord");
    if let Some(var_5047) = &input.enable_resource_name_dns_aaaa_record {
        scope_5046.boolean(*var_5047);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_reserved_instances(
    input: &crate::input::ModifyReservedInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyReservedInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5048 = writer.prefix("ReservedInstancesId");
    if let Some(var_5049) = &input.reserved_instances_ids {
        let mut list_5051 = scope_5048.start_list(true, Some("ReservedInstancesId"));
        for item_5050 in var_5049 {
            #[allow(unused_mut)]
            let mut entry_5052 = list_5051.entry();
            entry_5052.string(item_5050);
        }
        list_5051.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5053 = writer.prefix("ClientToken");
    if let Some(var_5054) = &input.client_token {
        scope_5053.string(var_5054);
    }
    #[allow(unused_mut)]
    let mut scope_5055 = writer.prefix("ReservedInstancesConfigurationSetItemType");
    if let Some(var_5056) = &input.target_configurations {
        let mut list_5058 = scope_5055.start_list(true, Some("item"));
        for item_5057 in var_5056 {
            #[allow(unused_mut)]
            let mut entry_5059 = list_5058.entry();
            crate::query_ser::serialize_structure_crate_model_reserved_instances_configuration(
                entry_5059, item_5057,
            )?;
        }
        list_5058.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_security_group_rules(
    input: &crate::input::ModifySecurityGroupRulesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifySecurityGroupRules", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5060 = writer.prefix("GroupId");
    if let Some(var_5061) = &input.group_id {
        scope_5060.string(var_5061);
    }
    #[allow(unused_mut)]
    let mut scope_5062 = writer.prefix("SecurityGroupRule");
    if let Some(var_5063) = &input.security_group_rules {
        let mut list_5065 = scope_5062.start_list(true, Some("item"));
        for item_5064 in var_5063 {
            #[allow(unused_mut)]
            let mut entry_5066 = list_5065.entry();
            crate::query_ser::serialize_structure_crate_model_security_group_rule_update(
                entry_5066, item_5064,
            )?;
        }
        list_5065.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5067 = writer.prefix("DryRun");
    if let Some(var_5068) = &input.dry_run {
        scope_5067.boolean(*var_5068);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_snapshot_attribute(
    input: &crate::input::ModifySnapshotAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifySnapshotAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5069 = writer.prefix("Attribute");
    if let Some(var_5070) = &input.attribute {
        scope_5069.string(var_5070.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5071 = writer.prefix("CreateVolumePermission");
    if let Some(var_5072) = &input.create_volume_permission {
        crate::query_ser::serialize_structure_crate_model_create_volume_permission_modifications(
            scope_5071, var_5072,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5073 = writer.prefix("UserGroup");
    if let Some(var_5074) = &input.group_names {
        let mut list_5076 = scope_5073.start_list(true, Some("GroupName"));
        for item_5075 in var_5074 {
            #[allow(unused_mut)]
            let mut entry_5077 = list_5076.entry();
            entry_5077.string(item_5075);
        }
        list_5076.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5078 = writer.prefix("OperationType");
    if let Some(var_5079) = &input.operation_type {
        scope_5078.string(var_5079.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5080 = writer.prefix("SnapshotId");
    if let Some(var_5081) = &input.snapshot_id {
        scope_5080.string(var_5081);
    }
    #[allow(unused_mut)]
    let mut scope_5082 = writer.prefix("UserId");
    if let Some(var_5083) = &input.user_ids {
        let mut list_5085 = scope_5082.start_list(true, Some("UserId"));
        for item_5084 in var_5083 {
            #[allow(unused_mut)]
            let mut entry_5086 = list_5085.entry();
            entry_5086.string(item_5084);
        }
        list_5085.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5087 = writer.prefix("DryRun");
    if let Some(var_5088) = &input.dry_run {
        scope_5087.boolean(*var_5088);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_snapshot_tier(
    input: &crate::input::ModifySnapshotTierInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifySnapshotTier", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5089 = writer.prefix("SnapshotId");
    if let Some(var_5090) = &input.snapshot_id {
        scope_5089.string(var_5090);
    }
    #[allow(unused_mut)]
    let mut scope_5091 = writer.prefix("StorageTier");
    if let Some(var_5092) = &input.storage_tier {
        scope_5091.string(var_5092.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5093 = writer.prefix("DryRun");
    if let Some(var_5094) = &input.dry_run {
        scope_5093.boolean(*var_5094);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_spot_fleet_request(
    input: &crate::input::ModifySpotFleetRequestInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifySpotFleetRequest", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5095 = writer.prefix("ExcessCapacityTerminationPolicy");
    if let Some(var_5096) = &input.excess_capacity_termination_policy {
        scope_5095.string(var_5096.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5097 = writer.prefix("LaunchTemplateConfig");
    if let Some(var_5098) = &input.launch_template_configs {
        let mut list_5100 = scope_5097.start_list(true, Some("item"));
        for item_5099 in var_5098 {
            #[allow(unused_mut)]
            let mut entry_5101 = list_5100.entry();
            crate::query_ser::serialize_structure_crate_model_launch_template_config(
                entry_5101, item_5099,
            )?;
        }
        list_5100.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5102 = writer.prefix("SpotFleetRequestId");
    if let Some(var_5103) = &input.spot_fleet_request_id {
        scope_5102.string(var_5103);
    }
    #[allow(unused_mut)]
    let mut scope_5104 = writer.prefix("TargetCapacity");
    if let Some(var_5105) = &input.target_capacity {
        scope_5104.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5105).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5106 = writer.prefix("OnDemandTargetCapacity");
    if let Some(var_5107) = &input.on_demand_target_capacity {
        scope_5106.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5107).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5108 = writer.prefix("Context");
    if let Some(var_5109) = &input.context {
        scope_5108.string(var_5109);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_subnet_attribute(
    input: &crate::input::ModifySubnetAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifySubnetAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5110 = writer.prefix("AssignIpv6AddressOnCreation");
    if let Some(var_5111) = &input.assign_ipv6_address_on_creation {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5110, var_5111,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5112 = writer.prefix("MapPublicIpOnLaunch");
    if let Some(var_5113) = &input.map_public_ip_on_launch {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5112, var_5113,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5114 = writer.prefix("SubnetId");
    if let Some(var_5115) = &input.subnet_id {
        scope_5114.string(var_5115);
    }
    #[allow(unused_mut)]
    let mut scope_5116 = writer.prefix("MapCustomerOwnedIpOnLaunch");
    if let Some(var_5117) = &input.map_customer_owned_ip_on_launch {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5116, var_5117,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5118 = writer.prefix("CustomerOwnedIpv4Pool");
    if let Some(var_5119) = &input.customer_owned_ipv4_pool {
        scope_5118.string(var_5119);
    }
    #[allow(unused_mut)]
    let mut scope_5120 = writer.prefix("EnableDns64");
    if let Some(var_5121) = &input.enable_dns64 {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5120, var_5121,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5122 = writer.prefix("PrivateDnsHostnameTypeOnLaunch");
    if let Some(var_5123) = &input.private_dns_hostname_type_on_launch {
        scope_5122.string(var_5123.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5124 = writer.prefix("EnableResourceNameDnsARecordOnLaunch");
    if let Some(var_5125) = &input.enable_resource_name_dns_a_record_on_launch {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5124, var_5125,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5126 = writer.prefix("EnableResourceNameDnsAAAARecordOnLaunch");
    if let Some(var_5127) = &input.enable_resource_name_dns_aaaa_record_on_launch {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5126, var_5127,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5128 = writer.prefix("EnableLniAtDeviceIndex");
    if let Some(var_5129) = &input.enable_lni_at_device_index {
        scope_5128.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5129).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5130 = writer.prefix("DisableLniAtDeviceIndex");
    if let Some(var_5131) = &input.disable_lni_at_device_index {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5130, var_5131,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_traffic_mirror_filter_network_services(
    input: &crate::input::ModifyTrafficMirrorFilterNetworkServicesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyTrafficMirrorFilterNetworkServices",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5132 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_5133) = &input.traffic_mirror_filter_id {
        scope_5132.string(var_5133);
    }
    #[allow(unused_mut)]
    let mut scope_5134 = writer.prefix("AddNetworkService");
    if let Some(var_5135) = &input.add_network_services {
        let mut list_5137 = scope_5134.start_list(true, Some("item"));
        for item_5136 in var_5135 {
            #[allow(unused_mut)]
            let mut entry_5138 = list_5137.entry();
            entry_5138.string(item_5136.as_str());
        }
        list_5137.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5139 = writer.prefix("RemoveNetworkService");
    if let Some(var_5140) = &input.remove_network_services {
        let mut list_5142 = scope_5139.start_list(true, Some("item"));
        for item_5141 in var_5140 {
            #[allow(unused_mut)]
            let mut entry_5143 = list_5142.entry();
            entry_5143.string(item_5141.as_str());
        }
        list_5142.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5144 = writer.prefix("DryRun");
    if let Some(var_5145) = &input.dry_run {
        scope_5144.boolean(*var_5145);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_traffic_mirror_filter_rule(
    input: &crate::input::ModifyTrafficMirrorFilterRuleInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyTrafficMirrorFilterRule", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5146 = writer.prefix("TrafficMirrorFilterRuleId");
    if let Some(var_5147) = &input.traffic_mirror_filter_rule_id {
        scope_5146.string(var_5147);
    }
    #[allow(unused_mut)]
    let mut scope_5148 = writer.prefix("TrafficDirection");
    if let Some(var_5149) = &input.traffic_direction {
        scope_5148.string(var_5149.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5150 = writer.prefix("RuleNumber");
    if let Some(var_5151) = &input.rule_number {
        scope_5150.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5151).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5152 = writer.prefix("RuleAction");
    if let Some(var_5153) = &input.rule_action {
        scope_5152.string(var_5153.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5154 = writer.prefix("DestinationPortRange");
    if let Some(var_5155) = &input.destination_port_range {
        crate::query_ser::serialize_structure_crate_model_traffic_mirror_port_range_request(
            scope_5154, var_5155,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5156 = writer.prefix("SourcePortRange");
    if let Some(var_5157) = &input.source_port_range {
        crate::query_ser::serialize_structure_crate_model_traffic_mirror_port_range_request(
            scope_5156, var_5157,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5158 = writer.prefix("Protocol");
    if let Some(var_5159) = &input.protocol {
        scope_5158.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5159).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5160 = writer.prefix("DestinationCidrBlock");
    if let Some(var_5161) = &input.destination_cidr_block {
        scope_5160.string(var_5161);
    }
    #[allow(unused_mut)]
    let mut scope_5162 = writer.prefix("SourceCidrBlock");
    if let Some(var_5163) = &input.source_cidr_block {
        scope_5162.string(var_5163);
    }
    #[allow(unused_mut)]
    let mut scope_5164 = writer.prefix("Description");
    if let Some(var_5165) = &input.description {
        scope_5164.string(var_5165);
    }
    #[allow(unused_mut)]
    let mut scope_5166 = writer.prefix("RemoveField");
    if let Some(var_5167) = &input.remove_fields {
        let mut list_5169 = scope_5166.start_list(true, None);
        for item_5168 in var_5167 {
            #[allow(unused_mut)]
            let mut entry_5170 = list_5169.entry();
            entry_5170.string(item_5168.as_str());
        }
        list_5169.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5171 = writer.prefix("DryRun");
    if let Some(var_5172) = &input.dry_run {
        scope_5171.boolean(*var_5172);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_traffic_mirror_session(
    input: &crate::input::ModifyTrafficMirrorSessionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyTrafficMirrorSession", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5173 = writer.prefix("TrafficMirrorSessionId");
    if let Some(var_5174) = &input.traffic_mirror_session_id {
        scope_5173.string(var_5174);
    }
    #[allow(unused_mut)]
    let mut scope_5175 = writer.prefix("TrafficMirrorTargetId");
    if let Some(var_5176) = &input.traffic_mirror_target_id {
        scope_5175.string(var_5176);
    }
    #[allow(unused_mut)]
    let mut scope_5177 = writer.prefix("TrafficMirrorFilterId");
    if let Some(var_5178) = &input.traffic_mirror_filter_id {
        scope_5177.string(var_5178);
    }
    #[allow(unused_mut)]
    let mut scope_5179 = writer.prefix("PacketLength");
    if let Some(var_5180) = &input.packet_length {
        scope_5179.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5180).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5181 = writer.prefix("SessionNumber");
    if let Some(var_5182) = &input.session_number {
        scope_5181.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5182).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5183 = writer.prefix("VirtualNetworkId");
    if let Some(var_5184) = &input.virtual_network_id {
        scope_5183.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5184).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5185 = writer.prefix("Description");
    if let Some(var_5186) = &input.description {
        scope_5185.string(var_5186);
    }
    #[allow(unused_mut)]
    let mut scope_5187 = writer.prefix("RemoveField");
    if let Some(var_5188) = &input.remove_fields {
        let mut list_5190 = scope_5187.start_list(true, None);
        for item_5189 in var_5188 {
            #[allow(unused_mut)]
            let mut entry_5191 = list_5190.entry();
            entry_5191.string(item_5189.as_str());
        }
        list_5190.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5192 = writer.prefix("DryRun");
    if let Some(var_5193) = &input.dry_run {
        scope_5192.boolean(*var_5193);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_transit_gateway(
    input: &crate::input::ModifyTransitGatewayInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyTransitGateway", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5194 = writer.prefix("TransitGatewayId");
    if let Some(var_5195) = &input.transit_gateway_id {
        scope_5194.string(var_5195);
    }
    #[allow(unused_mut)]
    let mut scope_5196 = writer.prefix("Description");
    if let Some(var_5197) = &input.description {
        scope_5196.string(var_5197);
    }
    #[allow(unused_mut)]
    let mut scope_5198 = writer.prefix("Options");
    if let Some(var_5199) = &input.options {
        crate::query_ser::serialize_structure_crate_model_modify_transit_gateway_options(
            scope_5198, var_5199,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5200 = writer.prefix("DryRun");
    if let Some(var_5201) = &input.dry_run {
        scope_5200.boolean(*var_5201);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_transit_gateway_prefix_list_reference(
    input: &crate::input::ModifyTransitGatewayPrefixListReferenceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyTransitGatewayPrefixListReference",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5202 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_5203) = &input.transit_gateway_route_table_id {
        scope_5202.string(var_5203);
    }
    #[allow(unused_mut)]
    let mut scope_5204 = writer.prefix("PrefixListId");
    if let Some(var_5205) = &input.prefix_list_id {
        scope_5204.string(var_5205);
    }
    #[allow(unused_mut)]
    let mut scope_5206 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_5207) = &input.transit_gateway_attachment_id {
        scope_5206.string(var_5207);
    }
    #[allow(unused_mut)]
    let mut scope_5208 = writer.prefix("Blackhole");
    if let Some(var_5209) = &input.blackhole {
        scope_5208.boolean(*var_5209);
    }
    #[allow(unused_mut)]
    let mut scope_5210 = writer.prefix("DryRun");
    if let Some(var_5211) = &input.dry_run {
        scope_5210.boolean(*var_5211);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_transit_gateway_vpc_attachment(
    input: &crate::input::ModifyTransitGatewayVpcAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyTransitGatewayVpcAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5212 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_5213) = &input.transit_gateway_attachment_id {
        scope_5212.string(var_5213);
    }
    #[allow(unused_mut)]
    let mut scope_5214 = writer.prefix("AddSubnetIds");
    if let Some(var_5215) = &input.add_subnet_ids {
        let mut list_5217 = scope_5214.start_list(true, Some("item"));
        for item_5216 in var_5215 {
            #[allow(unused_mut)]
            let mut entry_5218 = list_5217.entry();
            entry_5218.string(item_5216);
        }
        list_5217.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5219 = writer.prefix("RemoveSubnetIds");
    if let Some(var_5220) = &input.remove_subnet_ids {
        let mut list_5222 = scope_5219.start_list(true, Some("item"));
        for item_5221 in var_5220 {
            #[allow(unused_mut)]
            let mut entry_5223 = list_5222.entry();
            entry_5223.string(item_5221);
        }
        list_5222.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5224 = writer.prefix("Options");
    if let Some(var_5225) = &input.options {
        crate::query_ser::serialize_structure_crate_model_modify_transit_gateway_vpc_attachment_request_options(scope_5224, var_5225)?;
    }
    #[allow(unused_mut)]
    let mut scope_5226 = writer.prefix("DryRun");
    if let Some(var_5227) = &input.dry_run {
        scope_5226.boolean(*var_5227);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_volume(
    input: &crate::input::ModifyVolumeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyVolume", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5228 = writer.prefix("DryRun");
    if let Some(var_5229) = &input.dry_run {
        scope_5228.boolean(*var_5229);
    }
    #[allow(unused_mut)]
    let mut scope_5230 = writer.prefix("VolumeId");
    if let Some(var_5231) = &input.volume_id {
        scope_5230.string(var_5231);
    }
    #[allow(unused_mut)]
    let mut scope_5232 = writer.prefix("Size");
    if let Some(var_5233) = &input.size {
        scope_5232.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5233).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5234 = writer.prefix("VolumeType");
    if let Some(var_5235) = &input.volume_type {
        scope_5234.string(var_5235.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5236 = writer.prefix("Iops");
    if let Some(var_5237) = &input.iops {
        scope_5236.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5237).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5238 = writer.prefix("Throughput");
    if let Some(var_5239) = &input.throughput {
        scope_5238.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5239).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5240 = writer.prefix("MultiAttachEnabled");
    if let Some(var_5241) = &input.multi_attach_enabled {
        scope_5240.boolean(*var_5241);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_volume_attribute(
    input: &crate::input::ModifyVolumeAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyVolumeAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5242 = writer.prefix("AutoEnableIO");
    if let Some(var_5243) = &input.auto_enable_io {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5242, var_5243,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5244 = writer.prefix("VolumeId");
    if let Some(var_5245) = &input.volume_id {
        scope_5244.string(var_5245);
    }
    #[allow(unused_mut)]
    let mut scope_5246 = writer.prefix("DryRun");
    if let Some(var_5247) = &input.dry_run {
        scope_5246.boolean(*var_5247);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_attribute(
    input: &crate::input::ModifyVpcAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpcAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5248 = writer.prefix("EnableDnsHostnames");
    if let Some(var_5249) = &input.enable_dns_hostnames {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5248, var_5249,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5250 = writer.prefix("EnableDnsSupport");
    if let Some(var_5251) = &input.enable_dns_support {
        crate::query_ser::serialize_structure_crate_model_attribute_boolean_value(
            scope_5250, var_5251,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5252 = writer.prefix("VpcId");
    if let Some(var_5253) = &input.vpc_id {
        scope_5252.string(var_5253);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_endpoint(
    input: &crate::input::ModifyVpcEndpointInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpcEndpoint", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5254 = writer.prefix("DryRun");
    if let Some(var_5255) = &input.dry_run {
        scope_5254.boolean(*var_5255);
    }
    #[allow(unused_mut)]
    let mut scope_5256 = writer.prefix("VpcEndpointId");
    if let Some(var_5257) = &input.vpc_endpoint_id {
        scope_5256.string(var_5257);
    }
    #[allow(unused_mut)]
    let mut scope_5258 = writer.prefix("ResetPolicy");
    if let Some(var_5259) = &input.reset_policy {
        scope_5258.boolean(*var_5259);
    }
    #[allow(unused_mut)]
    let mut scope_5260 = writer.prefix("PolicyDocument");
    if let Some(var_5261) = &input.policy_document {
        scope_5260.string(var_5261);
    }
    #[allow(unused_mut)]
    let mut scope_5262 = writer.prefix("AddRouteTableId");
    if let Some(var_5263) = &input.add_route_table_ids {
        let mut list_5265 = scope_5262.start_list(true, Some("item"));
        for item_5264 in var_5263 {
            #[allow(unused_mut)]
            let mut entry_5266 = list_5265.entry();
            entry_5266.string(item_5264);
        }
        list_5265.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5267 = writer.prefix("RemoveRouteTableId");
    if let Some(var_5268) = &input.remove_route_table_ids {
        let mut list_5270 = scope_5267.start_list(true, Some("item"));
        for item_5269 in var_5268 {
            #[allow(unused_mut)]
            let mut entry_5271 = list_5270.entry();
            entry_5271.string(item_5269);
        }
        list_5270.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5272 = writer.prefix("AddSubnetId");
    if let Some(var_5273) = &input.add_subnet_ids {
        let mut list_5275 = scope_5272.start_list(true, Some("item"));
        for item_5274 in var_5273 {
            #[allow(unused_mut)]
            let mut entry_5276 = list_5275.entry();
            entry_5276.string(item_5274);
        }
        list_5275.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5277 = writer.prefix("RemoveSubnetId");
    if let Some(var_5278) = &input.remove_subnet_ids {
        let mut list_5280 = scope_5277.start_list(true, Some("item"));
        for item_5279 in var_5278 {
            #[allow(unused_mut)]
            let mut entry_5281 = list_5280.entry();
            entry_5281.string(item_5279);
        }
        list_5280.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5282 = writer.prefix("AddSecurityGroupId");
    if let Some(var_5283) = &input.add_security_group_ids {
        let mut list_5285 = scope_5282.start_list(true, Some("item"));
        for item_5284 in var_5283 {
            #[allow(unused_mut)]
            let mut entry_5286 = list_5285.entry();
            entry_5286.string(item_5284);
        }
        list_5285.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5287 = writer.prefix("RemoveSecurityGroupId");
    if let Some(var_5288) = &input.remove_security_group_ids {
        let mut list_5290 = scope_5287.start_list(true, Some("item"));
        for item_5289 in var_5288 {
            #[allow(unused_mut)]
            let mut entry_5291 = list_5290.entry();
            entry_5291.string(item_5289);
        }
        list_5290.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5292 = writer.prefix("IpAddressType");
    if let Some(var_5293) = &input.ip_address_type {
        scope_5292.string(var_5293.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5294 = writer.prefix("DnsOptions");
    if let Some(var_5295) = &input.dns_options {
        crate::query_ser::serialize_structure_crate_model_dns_options_specification(
            scope_5294, var_5295,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5296 = writer.prefix("PrivateDnsEnabled");
    if let Some(var_5297) = &input.private_dns_enabled {
        scope_5296.boolean(*var_5297);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_endpoint_connection_notification(
    input: &crate::input::ModifyVpcEndpointConnectionNotificationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyVpcEndpointConnectionNotification",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5298 = writer.prefix("DryRun");
    if let Some(var_5299) = &input.dry_run {
        scope_5298.boolean(*var_5299);
    }
    #[allow(unused_mut)]
    let mut scope_5300 = writer.prefix("ConnectionNotificationId");
    if let Some(var_5301) = &input.connection_notification_id {
        scope_5300.string(var_5301);
    }
    #[allow(unused_mut)]
    let mut scope_5302 = writer.prefix("ConnectionNotificationArn");
    if let Some(var_5303) = &input.connection_notification_arn {
        scope_5302.string(var_5303);
    }
    #[allow(unused_mut)]
    let mut scope_5304 = writer.prefix("ConnectionEvents");
    if let Some(var_5305) = &input.connection_events {
        let mut list_5307 = scope_5304.start_list(true, Some("item"));
        for item_5306 in var_5305 {
            #[allow(unused_mut)]
            let mut entry_5308 = list_5307.entry();
            entry_5308.string(item_5306);
        }
        list_5307.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_endpoint_service_configuration(
    input: &crate::input::ModifyVpcEndpointServiceConfigurationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyVpcEndpointServiceConfiguration",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5309 = writer.prefix("DryRun");
    if let Some(var_5310) = &input.dry_run {
        scope_5309.boolean(*var_5310);
    }
    #[allow(unused_mut)]
    let mut scope_5311 = writer.prefix("ServiceId");
    if let Some(var_5312) = &input.service_id {
        scope_5311.string(var_5312);
    }
    #[allow(unused_mut)]
    let mut scope_5313 = writer.prefix("PrivateDnsName");
    if let Some(var_5314) = &input.private_dns_name {
        scope_5313.string(var_5314);
    }
    #[allow(unused_mut)]
    let mut scope_5315 = writer.prefix("RemovePrivateDnsName");
    if let Some(var_5316) = &input.remove_private_dns_name {
        scope_5315.boolean(*var_5316);
    }
    #[allow(unused_mut)]
    let mut scope_5317 = writer.prefix("AcceptanceRequired");
    if let Some(var_5318) = &input.acceptance_required {
        scope_5317.boolean(*var_5318);
    }
    #[allow(unused_mut)]
    let mut scope_5319 = writer.prefix("AddNetworkLoadBalancerArn");
    if let Some(var_5320) = &input.add_network_load_balancer_arns {
        let mut list_5322 = scope_5319.start_list(true, Some("item"));
        for item_5321 in var_5320 {
            #[allow(unused_mut)]
            let mut entry_5323 = list_5322.entry();
            entry_5323.string(item_5321);
        }
        list_5322.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5324 = writer.prefix("RemoveNetworkLoadBalancerArn");
    if let Some(var_5325) = &input.remove_network_load_balancer_arns {
        let mut list_5327 = scope_5324.start_list(true, Some("item"));
        for item_5326 in var_5325 {
            #[allow(unused_mut)]
            let mut entry_5328 = list_5327.entry();
            entry_5328.string(item_5326);
        }
        list_5327.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5329 = writer.prefix("AddGatewayLoadBalancerArn");
    if let Some(var_5330) = &input.add_gateway_load_balancer_arns {
        let mut list_5332 = scope_5329.start_list(true, Some("item"));
        for item_5331 in var_5330 {
            #[allow(unused_mut)]
            let mut entry_5333 = list_5332.entry();
            entry_5333.string(item_5331);
        }
        list_5332.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5334 = writer.prefix("RemoveGatewayLoadBalancerArn");
    if let Some(var_5335) = &input.remove_gateway_load_balancer_arns {
        let mut list_5337 = scope_5334.start_list(true, Some("item"));
        for item_5336 in var_5335 {
            #[allow(unused_mut)]
            let mut entry_5338 = list_5337.entry();
            entry_5338.string(item_5336);
        }
        list_5337.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5339 = writer.prefix("AddSupportedIpAddressType");
    if let Some(var_5340) = &input.add_supported_ip_address_types {
        let mut list_5342 = scope_5339.start_list(true, Some("item"));
        for item_5341 in var_5340 {
            #[allow(unused_mut)]
            let mut entry_5343 = list_5342.entry();
            entry_5343.string(item_5341);
        }
        list_5342.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5344 = writer.prefix("RemoveSupportedIpAddressType");
    if let Some(var_5345) = &input.remove_supported_ip_address_types {
        let mut list_5347 = scope_5344.start_list(true, Some("item"));
        for item_5346 in var_5345 {
            #[allow(unused_mut)]
            let mut entry_5348 = list_5347.entry();
            entry_5348.string(item_5346);
        }
        list_5347.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_endpoint_service_payer_responsibility(
    input: &crate::input::ModifyVpcEndpointServicePayerResponsibilityInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyVpcEndpointServicePayerResponsibility",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5349 = writer.prefix("DryRun");
    if let Some(var_5350) = &input.dry_run {
        scope_5349.boolean(*var_5350);
    }
    #[allow(unused_mut)]
    let mut scope_5351 = writer.prefix("ServiceId");
    if let Some(var_5352) = &input.service_id {
        scope_5351.string(var_5352);
    }
    #[allow(unused_mut)]
    let mut scope_5353 = writer.prefix("PayerResponsibility");
    if let Some(var_5354) = &input.payer_responsibility {
        scope_5353.string(var_5354.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_endpoint_service_permissions(
    input: &crate::input::ModifyVpcEndpointServicePermissionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyVpcEndpointServicePermissions",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5355 = writer.prefix("DryRun");
    if let Some(var_5356) = &input.dry_run {
        scope_5355.boolean(*var_5356);
    }
    #[allow(unused_mut)]
    let mut scope_5357 = writer.prefix("ServiceId");
    if let Some(var_5358) = &input.service_id {
        scope_5357.string(var_5358);
    }
    #[allow(unused_mut)]
    let mut scope_5359 = writer.prefix("AddAllowedPrincipals");
    if let Some(var_5360) = &input.add_allowed_principals {
        let mut list_5362 = scope_5359.start_list(true, Some("item"));
        for item_5361 in var_5360 {
            #[allow(unused_mut)]
            let mut entry_5363 = list_5362.entry();
            entry_5363.string(item_5361);
        }
        list_5362.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5364 = writer.prefix("RemoveAllowedPrincipals");
    if let Some(var_5365) = &input.remove_allowed_principals {
        let mut list_5367 = scope_5364.start_list(true, Some("item"));
        for item_5366 in var_5365 {
            #[allow(unused_mut)]
            let mut entry_5368 = list_5367.entry();
            entry_5368.string(item_5366);
        }
        list_5367.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_peering_connection_options(
    input: &crate::input::ModifyVpcPeeringConnectionOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyVpcPeeringConnectionOptions",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5369 = writer.prefix("AccepterPeeringConnectionOptions");
    if let Some(var_5370) = &input.accepter_peering_connection_options {
        crate::query_ser::serialize_structure_crate_model_peering_connection_options_request(
            scope_5369, var_5370,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5371 = writer.prefix("DryRun");
    if let Some(var_5372) = &input.dry_run {
        scope_5371.boolean(*var_5372);
    }
    #[allow(unused_mut)]
    let mut scope_5373 = writer.prefix("RequesterPeeringConnectionOptions");
    if let Some(var_5374) = &input.requester_peering_connection_options {
        crate::query_ser::serialize_structure_crate_model_peering_connection_options_request(
            scope_5373, var_5374,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5375 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_5376) = &input.vpc_peering_connection_id {
        scope_5375.string(var_5376);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpc_tenancy(
    input: &crate::input::ModifyVpcTenancyInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpcTenancy", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5377 = writer.prefix("VpcId");
    if let Some(var_5378) = &input.vpc_id {
        scope_5377.string(var_5378);
    }
    #[allow(unused_mut)]
    let mut scope_5379 = writer.prefix("InstanceTenancy");
    if let Some(var_5380) = &input.instance_tenancy {
        scope_5379.string(var_5380.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5381 = writer.prefix("DryRun");
    if let Some(var_5382) = &input.dry_run {
        scope_5381.boolean(*var_5382);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpn_connection(
    input: &crate::input::ModifyVpnConnectionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpnConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5383 = writer.prefix("VpnConnectionId");
    if let Some(var_5384) = &input.vpn_connection_id {
        scope_5383.string(var_5384);
    }
    #[allow(unused_mut)]
    let mut scope_5385 = writer.prefix("TransitGatewayId");
    if let Some(var_5386) = &input.transit_gateway_id {
        scope_5385.string(var_5386);
    }
    #[allow(unused_mut)]
    let mut scope_5387 = writer.prefix("CustomerGatewayId");
    if let Some(var_5388) = &input.customer_gateway_id {
        scope_5387.string(var_5388);
    }
    #[allow(unused_mut)]
    let mut scope_5389 = writer.prefix("VpnGatewayId");
    if let Some(var_5390) = &input.vpn_gateway_id {
        scope_5389.string(var_5390);
    }
    #[allow(unused_mut)]
    let mut scope_5391 = writer.prefix("DryRun");
    if let Some(var_5392) = &input.dry_run {
        scope_5391.boolean(*var_5392);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpn_connection_options(
    input: &crate::input::ModifyVpnConnectionOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpnConnectionOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5393 = writer.prefix("VpnConnectionId");
    if let Some(var_5394) = &input.vpn_connection_id {
        scope_5393.string(var_5394);
    }
    #[allow(unused_mut)]
    let mut scope_5395 = writer.prefix("LocalIpv4NetworkCidr");
    if let Some(var_5396) = &input.local_ipv4_network_cidr {
        scope_5395.string(var_5396);
    }
    #[allow(unused_mut)]
    let mut scope_5397 = writer.prefix("RemoteIpv4NetworkCidr");
    if let Some(var_5398) = &input.remote_ipv4_network_cidr {
        scope_5397.string(var_5398);
    }
    #[allow(unused_mut)]
    let mut scope_5399 = writer.prefix("LocalIpv6NetworkCidr");
    if let Some(var_5400) = &input.local_ipv6_network_cidr {
        scope_5399.string(var_5400);
    }
    #[allow(unused_mut)]
    let mut scope_5401 = writer.prefix("RemoteIpv6NetworkCidr");
    if let Some(var_5402) = &input.remote_ipv6_network_cidr {
        scope_5401.string(var_5402);
    }
    #[allow(unused_mut)]
    let mut scope_5403 = writer.prefix("DryRun");
    if let Some(var_5404) = &input.dry_run {
        scope_5403.boolean(*var_5404);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpn_tunnel_certificate(
    input: &crate::input::ModifyVpnTunnelCertificateInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpnTunnelCertificate", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5405 = writer.prefix("VpnConnectionId");
    if let Some(var_5406) = &input.vpn_connection_id {
        scope_5405.string(var_5406);
    }
    #[allow(unused_mut)]
    let mut scope_5407 = writer.prefix("VpnTunnelOutsideIpAddress");
    if let Some(var_5408) = &input.vpn_tunnel_outside_ip_address {
        scope_5407.string(var_5408);
    }
    #[allow(unused_mut)]
    let mut scope_5409 = writer.prefix("DryRun");
    if let Some(var_5410) = &input.dry_run {
        scope_5409.boolean(*var_5410);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_vpn_tunnel_options(
    input: &crate::input::ModifyVpnTunnelOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyVpnTunnelOptions", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5411 = writer.prefix("VpnConnectionId");
    if let Some(var_5412) = &input.vpn_connection_id {
        scope_5411.string(var_5412);
    }
    #[allow(unused_mut)]
    let mut scope_5413 = writer.prefix("VpnTunnelOutsideIpAddress");
    if let Some(var_5414) = &input.vpn_tunnel_outside_ip_address {
        scope_5413.string(var_5414);
    }
    #[allow(unused_mut)]
    let mut scope_5415 = writer.prefix("TunnelOptions");
    if let Some(var_5416) = &input.tunnel_options {
        crate::query_ser::serialize_structure_crate_model_modify_vpn_tunnel_options_specification(
            scope_5415, var_5416,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5417 = writer.prefix("DryRun");
    if let Some(var_5418) = &input.dry_run {
        scope_5417.boolean(*var_5418);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_monitor_instances(
    input: &crate::input::MonitorInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "MonitorInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5419 = writer.prefix("InstanceId");
    if let Some(var_5420) = &input.instance_ids {
        let mut list_5422 = scope_5419.start_list(true, Some("InstanceId"));
        for item_5421 in var_5420 {
            #[allow(unused_mut)]
            let mut entry_5423 = list_5422.entry();
            entry_5423.string(item_5421);
        }
        list_5422.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5424 = writer.prefix("DryRun");
    if let Some(var_5425) = &input.dry_run {
        scope_5424.boolean(*var_5425);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_move_address_to_vpc(
    input: &crate::input::MoveAddressToVpcInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "MoveAddressToVpc", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5426 = writer.prefix("DryRun");
    if let Some(var_5427) = &input.dry_run {
        scope_5426.boolean(*var_5427);
    }
    #[allow(unused_mut)]
    let mut scope_5428 = writer.prefix("PublicIp");
    if let Some(var_5429) = &input.public_ip {
        scope_5428.string(var_5429);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_move_byoip_cidr_to_ipam(
    input: &crate::input::MoveByoipCidrToIpamInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "MoveByoipCidrToIpam", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5430 = writer.prefix("DryRun");
    if let Some(var_5431) = &input.dry_run {
        scope_5430.boolean(*var_5431);
    }
    #[allow(unused_mut)]
    let mut scope_5432 = writer.prefix("Cidr");
    if let Some(var_5433) = &input.cidr {
        scope_5432.string(var_5433);
    }
    #[allow(unused_mut)]
    let mut scope_5434 = writer.prefix("IpamPoolId");
    if let Some(var_5435) = &input.ipam_pool_id {
        scope_5434.string(var_5435);
    }
    #[allow(unused_mut)]
    let mut scope_5436 = writer.prefix("IpamPoolOwner");
    if let Some(var_5437) = &input.ipam_pool_owner {
        scope_5436.string(var_5437);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_provision_byoip_cidr(
    input: &crate::input::ProvisionByoipCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ProvisionByoipCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5438 = writer.prefix("Cidr");
    if let Some(var_5439) = &input.cidr {
        scope_5438.string(var_5439);
    }
    #[allow(unused_mut)]
    let mut scope_5440 = writer.prefix("CidrAuthorizationContext");
    if let Some(var_5441) = &input.cidr_authorization_context {
        crate::query_ser::serialize_structure_crate_model_cidr_authorization_context(
            scope_5440, var_5441,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5442 = writer.prefix("PubliclyAdvertisable");
    if let Some(var_5443) = &input.publicly_advertisable {
        scope_5442.boolean(*var_5443);
    }
    #[allow(unused_mut)]
    let mut scope_5444 = writer.prefix("Description");
    if let Some(var_5445) = &input.description {
        scope_5444.string(var_5445);
    }
    #[allow(unused_mut)]
    let mut scope_5446 = writer.prefix("DryRun");
    if let Some(var_5447) = &input.dry_run {
        scope_5446.boolean(*var_5447);
    }
    #[allow(unused_mut)]
    let mut scope_5448 = writer.prefix("PoolTagSpecification");
    if let Some(var_5449) = &input.pool_tag_specifications {
        let mut list_5451 = scope_5448.start_list(true, Some("item"));
        for item_5450 in var_5449 {
            #[allow(unused_mut)]
            let mut entry_5452 = list_5451.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_5452, item_5450,
            )?;
        }
        list_5451.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5453 = writer.prefix("MultiRegion");
    if let Some(var_5454) = &input.multi_region {
        scope_5453.boolean(*var_5454);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_provision_ipam_pool_cidr(
    input: &crate::input::ProvisionIpamPoolCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ProvisionIpamPoolCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5455 = writer.prefix("DryRun");
    if let Some(var_5456) = &input.dry_run {
        scope_5455.boolean(*var_5456);
    }
    #[allow(unused_mut)]
    let mut scope_5457 = writer.prefix("IpamPoolId");
    if let Some(var_5458) = &input.ipam_pool_id {
        scope_5457.string(var_5458);
    }
    #[allow(unused_mut)]
    let mut scope_5459 = writer.prefix("Cidr");
    if let Some(var_5460) = &input.cidr {
        scope_5459.string(var_5460);
    }
    #[allow(unused_mut)]
    let mut scope_5461 = writer.prefix("CidrAuthorizationContext");
    if let Some(var_5462) = &input.cidr_authorization_context {
        crate::query_ser::serialize_structure_crate_model_ipam_cidr_authorization_context(
            scope_5461, var_5462,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_provision_public_ipv4_pool_cidr(
    input: &crate::input::ProvisionPublicIpv4PoolCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ProvisionPublicIpv4PoolCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5463 = writer.prefix("DryRun");
    if let Some(var_5464) = &input.dry_run {
        scope_5463.boolean(*var_5464);
    }
    #[allow(unused_mut)]
    let mut scope_5465 = writer.prefix("IpamPoolId");
    if let Some(var_5466) = &input.ipam_pool_id {
        scope_5465.string(var_5466);
    }
    #[allow(unused_mut)]
    let mut scope_5467 = writer.prefix("PoolId");
    if let Some(var_5468) = &input.pool_id {
        scope_5467.string(var_5468);
    }
    #[allow(unused_mut)]
    let mut scope_5469 = writer.prefix("NetmaskLength");
    if let Some(var_5470) = &input.netmask_length {
        scope_5469.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5470).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_purchase_host_reservation(
    input: &crate::input::PurchaseHostReservationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "PurchaseHostReservation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5471 = writer.prefix("ClientToken");
    if let Some(var_5472) = &input.client_token {
        scope_5471.string(var_5472);
    }
    #[allow(unused_mut)]
    let mut scope_5473 = writer.prefix("CurrencyCode");
    if let Some(var_5474) = &input.currency_code {
        scope_5473.string(var_5474.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5475 = writer.prefix("HostIdSet");
    if let Some(var_5476) = &input.host_id_set {
        let mut list_5478 = scope_5475.start_list(true, Some("item"));
        for item_5477 in var_5476 {
            #[allow(unused_mut)]
            let mut entry_5479 = list_5478.entry();
            entry_5479.string(item_5477);
        }
        list_5478.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5480 = writer.prefix("LimitPrice");
    if let Some(var_5481) = &input.limit_price {
        scope_5480.string(var_5481);
    }
    #[allow(unused_mut)]
    let mut scope_5482 = writer.prefix("OfferingId");
    if let Some(var_5483) = &input.offering_id {
        scope_5482.string(var_5483);
    }
    #[allow(unused_mut)]
    let mut scope_5484 = writer.prefix("TagSpecification");
    if let Some(var_5485) = &input.tag_specifications {
        let mut list_5487 = scope_5484.start_list(true, Some("item"));
        for item_5486 in var_5485 {
            #[allow(unused_mut)]
            let mut entry_5488 = list_5487.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_5488, item_5486,
            )?;
        }
        list_5487.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_purchase_reserved_instances_offering(
    input: &crate::input::PurchaseReservedInstancesOfferingInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "PurchaseReservedInstancesOffering",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5489 = writer.prefix("InstanceCount");
    if let Some(var_5490) = &input.instance_count {
        scope_5489.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5490).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5491 = writer.prefix("ReservedInstancesOfferingId");
    if let Some(var_5492) = &input.reserved_instances_offering_id {
        scope_5491.string(var_5492);
    }
    #[allow(unused_mut)]
    let mut scope_5493 = writer.prefix("DryRun");
    if let Some(var_5494) = &input.dry_run {
        scope_5493.boolean(*var_5494);
    }
    #[allow(unused_mut)]
    let mut scope_5495 = writer.prefix("LimitPrice");
    if let Some(var_5496) = &input.limit_price {
        crate::query_ser::serialize_structure_crate_model_reserved_instance_limit_price(
            scope_5495, var_5496,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5497 = writer.prefix("PurchaseTime");
    if let Some(var_5498) = &input.purchase_time {
        scope_5497.date_time(var_5498, aws_smithy_types::date_time::Format::DateTime)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_purchase_scheduled_instances(
    input: &crate::input::PurchaseScheduledInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "PurchaseScheduledInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5499 = writer.prefix("ClientToken");
    if let Some(var_5500) = &input.client_token {
        scope_5499.string(var_5500);
    }
    #[allow(unused_mut)]
    let mut scope_5501 = writer.prefix("DryRun");
    if let Some(var_5502) = &input.dry_run {
        scope_5501.boolean(*var_5502);
    }
    #[allow(unused_mut)]
    let mut scope_5503 = writer.prefix("PurchaseRequest");
    if let Some(var_5504) = &input.purchase_requests {
        let mut list_5506 = scope_5503.start_list(true, Some("PurchaseRequest"));
        for item_5505 in var_5504 {
            #[allow(unused_mut)]
            let mut entry_5507 = list_5506.entry();
            crate::query_ser::serialize_structure_crate_model_purchase_request(
                entry_5507, item_5505,
            )?;
        }
        list_5506.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reboot_instances(
    input: &crate::input::RebootInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RebootInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5508 = writer.prefix("InstanceId");
    if let Some(var_5509) = &input.instance_ids {
        let mut list_5511 = scope_5508.start_list(true, Some("InstanceId"));
        for item_5510 in var_5509 {
            #[allow(unused_mut)]
            let mut entry_5512 = list_5511.entry();
            entry_5512.string(item_5510);
        }
        list_5511.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5513 = writer.prefix("DryRun");
    if let Some(var_5514) = &input.dry_run {
        scope_5513.boolean(*var_5514);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_register_image(
    input: &crate::input::RegisterImageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RegisterImage", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5515 = writer.prefix("ImageLocation");
    if let Some(var_5516) = &input.image_location {
        scope_5515.string(var_5516);
    }
    #[allow(unused_mut)]
    let mut scope_5517 = writer.prefix("Architecture");
    if let Some(var_5518) = &input.architecture {
        scope_5517.string(var_5518.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5519 = writer.prefix("BlockDeviceMapping");
    if let Some(var_5520) = &input.block_device_mappings {
        let mut list_5522 = scope_5519.start_list(true, Some("BlockDeviceMapping"));
        for item_5521 in var_5520 {
            #[allow(unused_mut)]
            let mut entry_5523 = list_5522.entry();
            crate::query_ser::serialize_structure_crate_model_block_device_mapping(
                entry_5523, item_5521,
            )?;
        }
        list_5522.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5524 = writer.prefix("Description");
    if let Some(var_5525) = &input.description {
        scope_5524.string(var_5525);
    }
    #[allow(unused_mut)]
    let mut scope_5526 = writer.prefix("DryRun");
    if let Some(var_5527) = &input.dry_run {
        scope_5526.boolean(*var_5527);
    }
    #[allow(unused_mut)]
    let mut scope_5528 = writer.prefix("EnaSupport");
    if let Some(var_5529) = &input.ena_support {
        scope_5528.boolean(*var_5529);
    }
    #[allow(unused_mut)]
    let mut scope_5530 = writer.prefix("KernelId");
    if let Some(var_5531) = &input.kernel_id {
        scope_5530.string(var_5531);
    }
    #[allow(unused_mut)]
    let mut scope_5532 = writer.prefix("Name");
    if let Some(var_5533) = &input.name {
        scope_5532.string(var_5533);
    }
    #[allow(unused_mut)]
    let mut scope_5534 = writer.prefix("BillingProduct");
    if let Some(var_5535) = &input.billing_products {
        let mut list_5537 = scope_5534.start_list(true, Some("item"));
        for item_5536 in var_5535 {
            #[allow(unused_mut)]
            let mut entry_5538 = list_5537.entry();
            entry_5538.string(item_5536);
        }
        list_5537.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5539 = writer.prefix("RamdiskId");
    if let Some(var_5540) = &input.ramdisk_id {
        scope_5539.string(var_5540);
    }
    #[allow(unused_mut)]
    let mut scope_5541 = writer.prefix("RootDeviceName");
    if let Some(var_5542) = &input.root_device_name {
        scope_5541.string(var_5542);
    }
    #[allow(unused_mut)]
    let mut scope_5543 = writer.prefix("SriovNetSupport");
    if let Some(var_5544) = &input.sriov_net_support {
        scope_5543.string(var_5544);
    }
    #[allow(unused_mut)]
    let mut scope_5545 = writer.prefix("VirtualizationType");
    if let Some(var_5546) = &input.virtualization_type {
        scope_5545.string(var_5546);
    }
    #[allow(unused_mut)]
    let mut scope_5547 = writer.prefix("BootMode");
    if let Some(var_5548) = &input.boot_mode {
        scope_5547.string(var_5548.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5549 = writer.prefix("TpmSupport");
    if let Some(var_5550) = &input.tpm_support {
        scope_5549.string(var_5550.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5551 = writer.prefix("UefiData");
    if let Some(var_5552) = &input.uefi_data {
        scope_5551.string(var_5552);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_register_instance_event_notification_attributes(
    input: &crate::input::RegisterInstanceEventNotificationAttributesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RegisterInstanceEventNotificationAttributes",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5553 = writer.prefix("DryRun");
    if let Some(var_5554) = &input.dry_run {
        scope_5553.boolean(*var_5554);
    }
    #[allow(unused_mut)]
    let mut scope_5555 = writer.prefix("InstanceTagAttribute");
    if let Some(var_5556) = &input.instance_tag_attribute {
        crate::query_ser::serialize_structure_crate_model_register_instance_tag_attribute_request(
            scope_5555, var_5556,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_register_transit_gateway_multicast_group_members(
    input: &crate::input::RegisterTransitGatewayMulticastGroupMembersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RegisterTransitGatewayMulticastGroupMembers",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5557 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_5558) = &input.transit_gateway_multicast_domain_id {
        scope_5557.string(var_5558);
    }
    #[allow(unused_mut)]
    let mut scope_5559 = writer.prefix("GroupIpAddress");
    if let Some(var_5560) = &input.group_ip_address {
        scope_5559.string(var_5560);
    }
    #[allow(unused_mut)]
    let mut scope_5561 = writer.prefix("NetworkInterfaceIds");
    if let Some(var_5562) = &input.network_interface_ids {
        let mut list_5564 = scope_5561.start_list(true, Some("item"));
        for item_5563 in var_5562 {
            #[allow(unused_mut)]
            let mut entry_5565 = list_5564.entry();
            entry_5565.string(item_5563);
        }
        list_5564.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5566 = writer.prefix("DryRun");
    if let Some(var_5567) = &input.dry_run {
        scope_5566.boolean(*var_5567);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_register_transit_gateway_multicast_group_sources(
    input: &crate::input::RegisterTransitGatewayMulticastGroupSourcesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RegisterTransitGatewayMulticastGroupSources",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5568 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_5569) = &input.transit_gateway_multicast_domain_id {
        scope_5568.string(var_5569);
    }
    #[allow(unused_mut)]
    let mut scope_5570 = writer.prefix("GroupIpAddress");
    if let Some(var_5571) = &input.group_ip_address {
        scope_5570.string(var_5571);
    }
    #[allow(unused_mut)]
    let mut scope_5572 = writer.prefix("NetworkInterfaceIds");
    if let Some(var_5573) = &input.network_interface_ids {
        let mut list_5575 = scope_5572.start_list(true, Some("item"));
        for item_5574 in var_5573 {
            #[allow(unused_mut)]
            let mut entry_5576 = list_5575.entry();
            entry_5576.string(item_5574);
        }
        list_5575.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5577 = writer.prefix("DryRun");
    if let Some(var_5578) = &input.dry_run {
        scope_5577.boolean(*var_5578);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reject_transit_gateway_multicast_domain_associations(
    input: &crate::input::RejectTransitGatewayMulticastDomainAssociationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RejectTransitGatewayMulticastDomainAssociations",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5579 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_5580) = &input.transit_gateway_multicast_domain_id {
        scope_5579.string(var_5580);
    }
    #[allow(unused_mut)]
    let mut scope_5581 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_5582) = &input.transit_gateway_attachment_id {
        scope_5581.string(var_5582);
    }
    #[allow(unused_mut)]
    let mut scope_5583 = writer.prefix("SubnetIds");
    if let Some(var_5584) = &input.subnet_ids {
        let mut list_5586 = scope_5583.start_list(true, Some("item"));
        for item_5585 in var_5584 {
            #[allow(unused_mut)]
            let mut entry_5587 = list_5586.entry();
            entry_5587.string(item_5585);
        }
        list_5586.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5588 = writer.prefix("DryRun");
    if let Some(var_5589) = &input.dry_run {
        scope_5588.boolean(*var_5589);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reject_transit_gateway_peering_attachment(
    input: &crate::input::RejectTransitGatewayPeeringAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RejectTransitGatewayPeeringAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5590 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_5591) = &input.transit_gateway_attachment_id {
        scope_5590.string(var_5591);
    }
    #[allow(unused_mut)]
    let mut scope_5592 = writer.prefix("DryRun");
    if let Some(var_5593) = &input.dry_run {
        scope_5592.boolean(*var_5593);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reject_transit_gateway_vpc_attachment(
    input: &crate::input::RejectTransitGatewayVpcAttachmentInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RejectTransitGatewayVpcAttachment",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5594 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_5595) = &input.transit_gateway_attachment_id {
        scope_5594.string(var_5595);
    }
    #[allow(unused_mut)]
    let mut scope_5596 = writer.prefix("DryRun");
    if let Some(var_5597) = &input.dry_run {
        scope_5596.boolean(*var_5597);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reject_vpc_endpoint_connections(
    input: &crate::input::RejectVpcEndpointConnectionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RejectVpcEndpointConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5598 = writer.prefix("DryRun");
    if let Some(var_5599) = &input.dry_run {
        scope_5598.boolean(*var_5599);
    }
    #[allow(unused_mut)]
    let mut scope_5600 = writer.prefix("ServiceId");
    if let Some(var_5601) = &input.service_id {
        scope_5600.string(var_5601);
    }
    #[allow(unused_mut)]
    let mut scope_5602 = writer.prefix("VpcEndpointId");
    if let Some(var_5603) = &input.vpc_endpoint_ids {
        let mut list_5605 = scope_5602.start_list(true, Some("item"));
        for item_5604 in var_5603 {
            #[allow(unused_mut)]
            let mut entry_5606 = list_5605.entry();
            entry_5606.string(item_5604);
        }
        list_5605.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reject_vpc_peering_connection(
    input: &crate::input::RejectVpcPeeringConnectionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RejectVpcPeeringConnection", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5607 = writer.prefix("DryRun");
    if let Some(var_5608) = &input.dry_run {
        scope_5607.boolean(*var_5608);
    }
    #[allow(unused_mut)]
    let mut scope_5609 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_5610) = &input.vpc_peering_connection_id {
        scope_5609.string(var_5610);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_release_address(
    input: &crate::input::ReleaseAddressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ReleaseAddress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5611 = writer.prefix("AllocationId");
    if let Some(var_5612) = &input.allocation_id {
        scope_5611.string(var_5612);
    }
    #[allow(unused_mut)]
    let mut scope_5613 = writer.prefix("PublicIp");
    if let Some(var_5614) = &input.public_ip {
        scope_5613.string(var_5614);
    }
    #[allow(unused_mut)]
    let mut scope_5615 = writer.prefix("NetworkBorderGroup");
    if let Some(var_5616) = &input.network_border_group {
        scope_5615.string(var_5616);
    }
    #[allow(unused_mut)]
    let mut scope_5617 = writer.prefix("DryRun");
    if let Some(var_5618) = &input.dry_run {
        scope_5617.boolean(*var_5618);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_release_hosts(
    input: &crate::input::ReleaseHostsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ReleaseHosts", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5619 = writer.prefix("HostId");
    if let Some(var_5620) = &input.host_ids {
        let mut list_5622 = scope_5619.start_list(true, Some("item"));
        for item_5621 in var_5620 {
            #[allow(unused_mut)]
            let mut entry_5623 = list_5622.entry();
            entry_5623.string(item_5621);
        }
        list_5622.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_release_ipam_pool_allocation(
    input: &crate::input::ReleaseIpamPoolAllocationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ReleaseIpamPoolAllocation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5624 = writer.prefix("DryRun");
    if let Some(var_5625) = &input.dry_run {
        scope_5624.boolean(*var_5625);
    }
    #[allow(unused_mut)]
    let mut scope_5626 = writer.prefix("IpamPoolId");
    if let Some(var_5627) = &input.ipam_pool_id {
        scope_5626.string(var_5627);
    }
    #[allow(unused_mut)]
    let mut scope_5628 = writer.prefix("Cidr");
    if let Some(var_5629) = &input.cidr {
        scope_5628.string(var_5629);
    }
    #[allow(unused_mut)]
    let mut scope_5630 = writer.prefix("IpamPoolAllocationId");
    if let Some(var_5631) = &input.ipam_pool_allocation_id {
        scope_5630.string(var_5631);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_replace_iam_instance_profile_association(
    input: &crate::input::ReplaceIamInstanceProfileAssociationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ReplaceIamInstanceProfileAssociation",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5632 = writer.prefix("IamInstanceProfile");
    if let Some(var_5633) = &input.iam_instance_profile {
        crate::query_ser::serialize_structure_crate_model_iam_instance_profile_specification(
            scope_5632, var_5633,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5634 = writer.prefix("AssociationId");
    if let Some(var_5635) = &input.association_id {
        scope_5634.string(var_5635);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_replace_network_acl_association(
    input: &crate::input::ReplaceNetworkAclAssociationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ReplaceNetworkAclAssociation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5636 = writer.prefix("AssociationId");
    if let Some(var_5637) = &input.association_id {
        scope_5636.string(var_5637);
    }
    #[allow(unused_mut)]
    let mut scope_5638 = writer.prefix("DryRun");
    if let Some(var_5639) = &input.dry_run {
        scope_5638.boolean(*var_5639);
    }
    #[allow(unused_mut)]
    let mut scope_5640 = writer.prefix("NetworkAclId");
    if let Some(var_5641) = &input.network_acl_id {
        scope_5640.string(var_5641);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_replace_network_acl_entry(
    input: &crate::input::ReplaceNetworkAclEntryInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ReplaceNetworkAclEntry", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5642 = writer.prefix("CidrBlock");
    if let Some(var_5643) = &input.cidr_block {
        scope_5642.string(var_5643);
    }
    #[allow(unused_mut)]
    let mut scope_5644 = writer.prefix("DryRun");
    if let Some(var_5645) = &input.dry_run {
        scope_5644.boolean(*var_5645);
    }
    #[allow(unused_mut)]
    let mut scope_5646 = writer.prefix("Egress");
    if let Some(var_5647) = &input.egress {
        scope_5646.boolean(*var_5647);
    }
    #[allow(unused_mut)]
    let mut scope_5648 = writer.prefix("Icmp");
    if let Some(var_5649) = &input.icmp_type_code {
        crate::query_ser::serialize_structure_crate_model_icmp_type_code(scope_5648, var_5649)?;
    }
    #[allow(unused_mut)]
    let mut scope_5650 = writer.prefix("Ipv6CidrBlock");
    if let Some(var_5651) = &input.ipv6_cidr_block {
        scope_5650.string(var_5651);
    }
    #[allow(unused_mut)]
    let mut scope_5652 = writer.prefix("NetworkAclId");
    if let Some(var_5653) = &input.network_acl_id {
        scope_5652.string(var_5653);
    }
    #[allow(unused_mut)]
    let mut scope_5654 = writer.prefix("PortRange");
    if let Some(var_5655) = &input.port_range {
        crate::query_ser::serialize_structure_crate_model_port_range(scope_5654, var_5655)?;
    }
    #[allow(unused_mut)]
    let mut scope_5656 = writer.prefix("Protocol");
    if let Some(var_5657) = &input.protocol {
        scope_5656.string(var_5657);
    }
    #[allow(unused_mut)]
    let mut scope_5658 = writer.prefix("RuleAction");
    if let Some(var_5659) = &input.rule_action {
        scope_5658.string(var_5659.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5660 = writer.prefix("RuleNumber");
    if let Some(var_5661) = &input.rule_number {
        scope_5660.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5661).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_replace_route(
    input: &crate::input::ReplaceRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ReplaceRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5662 = writer.prefix("DestinationCidrBlock");
    if let Some(var_5663) = &input.destination_cidr_block {
        scope_5662.string(var_5663);
    }
    #[allow(unused_mut)]
    let mut scope_5664 = writer.prefix("DestinationIpv6CidrBlock");
    if let Some(var_5665) = &input.destination_ipv6_cidr_block {
        scope_5664.string(var_5665);
    }
    #[allow(unused_mut)]
    let mut scope_5666 = writer.prefix("DestinationPrefixListId");
    if let Some(var_5667) = &input.destination_prefix_list_id {
        scope_5666.string(var_5667);
    }
    #[allow(unused_mut)]
    let mut scope_5668 = writer.prefix("DryRun");
    if let Some(var_5669) = &input.dry_run {
        scope_5668.boolean(*var_5669);
    }
    #[allow(unused_mut)]
    let mut scope_5670 = writer.prefix("VpcEndpointId");
    if let Some(var_5671) = &input.vpc_endpoint_id {
        scope_5670.string(var_5671);
    }
    #[allow(unused_mut)]
    let mut scope_5672 = writer.prefix("EgressOnlyInternetGatewayId");
    if let Some(var_5673) = &input.egress_only_internet_gateway_id {
        scope_5672.string(var_5673);
    }
    #[allow(unused_mut)]
    let mut scope_5674 = writer.prefix("GatewayId");
    if let Some(var_5675) = &input.gateway_id {
        scope_5674.string(var_5675);
    }
    #[allow(unused_mut)]
    let mut scope_5676 = writer.prefix("InstanceId");
    if let Some(var_5677) = &input.instance_id {
        scope_5676.string(var_5677);
    }
    #[allow(unused_mut)]
    let mut scope_5678 = writer.prefix("LocalTarget");
    if let Some(var_5679) = &input.local_target {
        scope_5678.boolean(*var_5679);
    }
    #[allow(unused_mut)]
    let mut scope_5680 = writer.prefix("NatGatewayId");
    if let Some(var_5681) = &input.nat_gateway_id {
        scope_5680.string(var_5681);
    }
    #[allow(unused_mut)]
    let mut scope_5682 = writer.prefix("TransitGatewayId");
    if let Some(var_5683) = &input.transit_gateway_id {
        scope_5682.string(var_5683);
    }
    #[allow(unused_mut)]
    let mut scope_5684 = writer.prefix("LocalGatewayId");
    if let Some(var_5685) = &input.local_gateway_id {
        scope_5684.string(var_5685);
    }
    #[allow(unused_mut)]
    let mut scope_5686 = writer.prefix("CarrierGatewayId");
    if let Some(var_5687) = &input.carrier_gateway_id {
        scope_5686.string(var_5687);
    }
    #[allow(unused_mut)]
    let mut scope_5688 = writer.prefix("NetworkInterfaceId");
    if let Some(var_5689) = &input.network_interface_id {
        scope_5688.string(var_5689);
    }
    #[allow(unused_mut)]
    let mut scope_5690 = writer.prefix("RouteTableId");
    if let Some(var_5691) = &input.route_table_id {
        scope_5690.string(var_5691);
    }
    #[allow(unused_mut)]
    let mut scope_5692 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_5693) = &input.vpc_peering_connection_id {
        scope_5692.string(var_5693);
    }
    #[allow(unused_mut)]
    let mut scope_5694 = writer.prefix("CoreNetworkArn");
    if let Some(var_5695) = &input.core_network_arn {
        scope_5694.string(var_5695);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_replace_route_table_association(
    input: &crate::input::ReplaceRouteTableAssociationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ReplaceRouteTableAssociation", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5696 = writer.prefix("AssociationId");
    if let Some(var_5697) = &input.association_id {
        scope_5696.string(var_5697);
    }
    #[allow(unused_mut)]
    let mut scope_5698 = writer.prefix("DryRun");
    if let Some(var_5699) = &input.dry_run {
        scope_5698.boolean(*var_5699);
    }
    #[allow(unused_mut)]
    let mut scope_5700 = writer.prefix("RouteTableId");
    if let Some(var_5701) = &input.route_table_id {
        scope_5700.string(var_5701);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_replace_transit_gateway_route(
    input: &crate::input::ReplaceTransitGatewayRouteInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ReplaceTransitGatewayRoute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5702 = writer.prefix("DestinationCidrBlock");
    if let Some(var_5703) = &input.destination_cidr_block {
        scope_5702.string(var_5703);
    }
    #[allow(unused_mut)]
    let mut scope_5704 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_5705) = &input.transit_gateway_route_table_id {
        scope_5704.string(var_5705);
    }
    #[allow(unused_mut)]
    let mut scope_5706 = writer.prefix("TransitGatewayAttachmentId");
    if let Some(var_5707) = &input.transit_gateway_attachment_id {
        scope_5706.string(var_5707);
    }
    #[allow(unused_mut)]
    let mut scope_5708 = writer.prefix("Blackhole");
    if let Some(var_5709) = &input.blackhole {
        scope_5708.boolean(*var_5709);
    }
    #[allow(unused_mut)]
    let mut scope_5710 = writer.prefix("DryRun");
    if let Some(var_5711) = &input.dry_run {
        scope_5710.boolean(*var_5711);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_report_instance_status(
    input: &crate::input::ReportInstanceStatusInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ReportInstanceStatus", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5712 = writer.prefix("Description");
    if let Some(var_5713) = &input.description {
        scope_5712.string(var_5713);
    }
    #[allow(unused_mut)]
    let mut scope_5714 = writer.prefix("DryRun");
    if let Some(var_5715) = &input.dry_run {
        scope_5714.boolean(*var_5715);
    }
    #[allow(unused_mut)]
    let mut scope_5716 = writer.prefix("EndTime");
    if let Some(var_5717) = &input.end_time {
        scope_5716.date_time(var_5717, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_5718 = writer.prefix("InstanceId");
    if let Some(var_5719) = &input.instances {
        let mut list_5721 = scope_5718.start_list(true, Some("InstanceId"));
        for item_5720 in var_5719 {
            #[allow(unused_mut)]
            let mut entry_5722 = list_5721.entry();
            entry_5722.string(item_5720);
        }
        list_5721.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5723 = writer.prefix("ReasonCode");
    if let Some(var_5724) = &input.reason_codes {
        let mut list_5726 = scope_5723.start_list(true, Some("item"));
        for item_5725 in var_5724 {
            #[allow(unused_mut)]
            let mut entry_5727 = list_5726.entry();
            entry_5727.string(item_5725.as_str());
        }
        list_5726.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5728 = writer.prefix("StartTime");
    if let Some(var_5729) = &input.start_time {
        scope_5728.date_time(var_5729, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_5730 = writer.prefix("Status");
    if let Some(var_5731) = &input.status {
        scope_5730.string(var_5731.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_request_spot_fleet(
    input: &crate::input::RequestSpotFleetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RequestSpotFleet", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5732 = writer.prefix("DryRun");
    if let Some(var_5733) = &input.dry_run {
        scope_5732.boolean(*var_5733);
    }
    #[allow(unused_mut)]
    let mut scope_5734 = writer.prefix("SpotFleetRequestConfig");
    if let Some(var_5735) = &input.spot_fleet_request_config {
        crate::query_ser::serialize_structure_crate_model_spot_fleet_request_config_data(
            scope_5734, var_5735,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_request_spot_instances(
    input: &crate::input::RequestSpotInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RequestSpotInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5736 = writer.prefix("AvailabilityZoneGroup");
    if let Some(var_5737) = &input.availability_zone_group {
        scope_5736.string(var_5737);
    }
    #[allow(unused_mut)]
    let mut scope_5738 = writer.prefix("BlockDurationMinutes");
    if let Some(var_5739) = &input.block_duration_minutes {
        scope_5738.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5739).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5740 = writer.prefix("ClientToken");
    if let Some(var_5741) = &input.client_token {
        scope_5740.string(var_5741);
    }
    #[allow(unused_mut)]
    let mut scope_5742 = writer.prefix("DryRun");
    if let Some(var_5743) = &input.dry_run {
        scope_5742.boolean(*var_5743);
    }
    #[allow(unused_mut)]
    let mut scope_5744 = writer.prefix("InstanceCount");
    if let Some(var_5745) = &input.instance_count {
        scope_5744.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5745).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5746 = writer.prefix("LaunchGroup");
    if let Some(var_5747) = &input.launch_group {
        scope_5746.string(var_5747);
    }
    #[allow(unused_mut)]
    let mut scope_5748 = writer.prefix("LaunchSpecification");
    if let Some(var_5749) = &input.launch_specification {
        crate::query_ser::serialize_structure_crate_model_request_spot_launch_specification(
            scope_5748, var_5749,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5750 = writer.prefix("SpotPrice");
    if let Some(var_5751) = &input.spot_price {
        scope_5750.string(var_5751);
    }
    #[allow(unused_mut)]
    let mut scope_5752 = writer.prefix("Type");
    if let Some(var_5753) = &input.r#type {
        scope_5752.string(var_5753.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5754 = writer.prefix("ValidFrom");
    if let Some(var_5755) = &input.valid_from {
        scope_5754.date_time(var_5755, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_5756 = writer.prefix("ValidUntil");
    if let Some(var_5757) = &input.valid_until {
        scope_5756.date_time(var_5757, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_5758 = writer.prefix("TagSpecification");
    if let Some(var_5759) = &input.tag_specifications {
        let mut list_5761 = scope_5758.start_list(true, Some("item"));
        for item_5760 in var_5759 {
            #[allow(unused_mut)]
            let mut entry_5762 = list_5761.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_5762, item_5760,
            )?;
        }
        list_5761.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5763 = writer.prefix("InstanceInterruptionBehavior");
    if let Some(var_5764) = &input.instance_interruption_behavior {
        scope_5763.string(var_5764.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_address_attribute(
    input: &crate::input::ResetAddressAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ResetAddressAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5765 = writer.prefix("AllocationId");
    if let Some(var_5766) = &input.allocation_id {
        scope_5765.string(var_5766);
    }
    #[allow(unused_mut)]
    let mut scope_5767 = writer.prefix("Attribute");
    if let Some(var_5768) = &input.attribute {
        scope_5767.string(var_5768.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5769 = writer.prefix("DryRun");
    if let Some(var_5770) = &input.dry_run {
        scope_5769.boolean(*var_5770);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_ebs_default_kms_key_id(
    input: &crate::input::ResetEbsDefaultKmsKeyIdInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ResetEbsDefaultKmsKeyId", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5771 = writer.prefix("DryRun");
    if let Some(var_5772) = &input.dry_run {
        scope_5771.boolean(*var_5772);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_fpga_image_attribute(
    input: &crate::input::ResetFpgaImageAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ResetFpgaImageAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5773 = writer.prefix("DryRun");
    if let Some(var_5774) = &input.dry_run {
        scope_5773.boolean(*var_5774);
    }
    #[allow(unused_mut)]
    let mut scope_5775 = writer.prefix("FpgaImageId");
    if let Some(var_5776) = &input.fpga_image_id {
        scope_5775.string(var_5776);
    }
    #[allow(unused_mut)]
    let mut scope_5777 = writer.prefix("Attribute");
    if let Some(var_5778) = &input.attribute {
        scope_5777.string(var_5778.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_image_attribute(
    input: &crate::input::ResetImageAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ResetImageAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5779 = writer.prefix("Attribute");
    if let Some(var_5780) = &input.attribute {
        scope_5779.string(var_5780.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5781 = writer.prefix("ImageId");
    if let Some(var_5782) = &input.image_id {
        scope_5781.string(var_5782);
    }
    #[allow(unused_mut)]
    let mut scope_5783 = writer.prefix("DryRun");
    if let Some(var_5784) = &input.dry_run {
        scope_5783.boolean(*var_5784);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_instance_attribute(
    input: &crate::input::ResetInstanceAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ResetInstanceAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5785 = writer.prefix("Attribute");
    if let Some(var_5786) = &input.attribute {
        scope_5785.string(var_5786.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5787 = writer.prefix("DryRun");
    if let Some(var_5788) = &input.dry_run {
        scope_5787.boolean(*var_5788);
    }
    #[allow(unused_mut)]
    let mut scope_5789 = writer.prefix("InstanceId");
    if let Some(var_5790) = &input.instance_id {
        scope_5789.string(var_5790);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_network_interface_attribute(
    input: &crate::input::ResetNetworkInterfaceAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ResetNetworkInterfaceAttribute",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5791 = writer.prefix("DryRun");
    if let Some(var_5792) = &input.dry_run {
        scope_5791.boolean(*var_5792);
    }
    #[allow(unused_mut)]
    let mut scope_5793 = writer.prefix("NetworkInterfaceId");
    if let Some(var_5794) = &input.network_interface_id {
        scope_5793.string(var_5794);
    }
    #[allow(unused_mut)]
    let mut scope_5795 = writer.prefix("SourceDestCheck");
    if let Some(var_5796) = &input.source_dest_check {
        scope_5795.string(var_5796);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_snapshot_attribute(
    input: &crate::input::ResetSnapshotAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ResetSnapshotAttribute", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5797 = writer.prefix("Attribute");
    if let Some(var_5798) = &input.attribute {
        scope_5797.string(var_5798.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5799 = writer.prefix("SnapshotId");
    if let Some(var_5800) = &input.snapshot_id {
        scope_5799.string(var_5800);
    }
    #[allow(unused_mut)]
    let mut scope_5801 = writer.prefix("DryRun");
    if let Some(var_5802) = &input.dry_run {
        scope_5801.boolean(*var_5802);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restore_address_to_classic(
    input: &crate::input::RestoreAddressToClassicInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RestoreAddressToClassic", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5803 = writer.prefix("DryRun");
    if let Some(var_5804) = &input.dry_run {
        scope_5803.boolean(*var_5804);
    }
    #[allow(unused_mut)]
    let mut scope_5805 = writer.prefix("PublicIp");
    if let Some(var_5806) = &input.public_ip {
        scope_5805.string(var_5806);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restore_image_from_recycle_bin(
    input: &crate::input::RestoreImageFromRecycleBinInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RestoreImageFromRecycleBin", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5807 = writer.prefix("ImageId");
    if let Some(var_5808) = &input.image_id {
        scope_5807.string(var_5808);
    }
    #[allow(unused_mut)]
    let mut scope_5809 = writer.prefix("DryRun");
    if let Some(var_5810) = &input.dry_run {
        scope_5809.boolean(*var_5810);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restore_managed_prefix_list_version(
    input: &crate::input::RestoreManagedPrefixListVersionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RestoreManagedPrefixListVersion",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_5811 = writer.prefix("DryRun");
    if let Some(var_5812) = &input.dry_run {
        scope_5811.boolean(*var_5812);
    }
    #[allow(unused_mut)]
    let mut scope_5813 = writer.prefix("PrefixListId");
    if let Some(var_5814) = &input.prefix_list_id {
        scope_5813.string(var_5814);
    }
    #[allow(unused_mut)]
    let mut scope_5815 = writer.prefix("PreviousVersion");
    if let Some(var_5816) = &input.previous_version {
        scope_5815.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5816).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5817 = writer.prefix("CurrentVersion");
    if let Some(var_5818) = &input.current_version {
        scope_5817.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5818).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restore_snapshot_from_recycle_bin(
    input: &crate::input::RestoreSnapshotFromRecycleBinInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RestoreSnapshotFromRecycleBin", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5819 = writer.prefix("SnapshotId");
    if let Some(var_5820) = &input.snapshot_id {
        scope_5819.string(var_5820);
    }
    #[allow(unused_mut)]
    let mut scope_5821 = writer.prefix("DryRun");
    if let Some(var_5822) = &input.dry_run {
        scope_5821.boolean(*var_5822);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restore_snapshot_tier(
    input: &crate::input::RestoreSnapshotTierInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RestoreSnapshotTier", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5823 = writer.prefix("SnapshotId");
    if let Some(var_5824) = &input.snapshot_id {
        scope_5823.string(var_5824);
    }
    #[allow(unused_mut)]
    let mut scope_5825 = writer.prefix("TemporaryRestoreDays");
    if let Some(var_5826) = &input.temporary_restore_days {
        scope_5825.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5826).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5827 = writer.prefix("PermanentRestore");
    if let Some(var_5828) = &input.permanent_restore {
        scope_5827.boolean(*var_5828);
    }
    #[allow(unused_mut)]
    let mut scope_5829 = writer.prefix("DryRun");
    if let Some(var_5830) = &input.dry_run {
        scope_5829.boolean(*var_5830);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_revoke_client_vpn_ingress(
    input: &crate::input::RevokeClientVpnIngressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RevokeClientVpnIngress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5831 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_5832) = &input.client_vpn_endpoint_id {
        scope_5831.string(var_5832);
    }
    #[allow(unused_mut)]
    let mut scope_5833 = writer.prefix("TargetNetworkCidr");
    if let Some(var_5834) = &input.target_network_cidr {
        scope_5833.string(var_5834);
    }
    #[allow(unused_mut)]
    let mut scope_5835 = writer.prefix("AccessGroupId");
    if let Some(var_5836) = &input.access_group_id {
        scope_5835.string(var_5836);
    }
    #[allow(unused_mut)]
    let mut scope_5837 = writer.prefix("RevokeAllGroups");
    if let Some(var_5838) = &input.revoke_all_groups {
        scope_5837.boolean(*var_5838);
    }
    #[allow(unused_mut)]
    let mut scope_5839 = writer.prefix("DryRun");
    if let Some(var_5840) = &input.dry_run {
        scope_5839.boolean(*var_5840);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_revoke_security_group_egress(
    input: &crate::input::RevokeSecurityGroupEgressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RevokeSecurityGroupEgress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5841 = writer.prefix("DryRun");
    if let Some(var_5842) = &input.dry_run {
        scope_5841.boolean(*var_5842);
    }
    #[allow(unused_mut)]
    let mut scope_5843 = writer.prefix("GroupId");
    if let Some(var_5844) = &input.group_id {
        scope_5843.string(var_5844);
    }
    #[allow(unused_mut)]
    let mut scope_5845 = writer.prefix("IpPermissions");
    if let Some(var_5846) = &input.ip_permissions {
        let mut list_5848 = scope_5845.start_list(true, Some("item"));
        for item_5847 in var_5846 {
            #[allow(unused_mut)]
            let mut entry_5849 = list_5848.entry();
            crate::query_ser::serialize_structure_crate_model_ip_permission(entry_5849, item_5847)?;
        }
        list_5848.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5850 = writer.prefix("SecurityGroupRuleId");
    if let Some(var_5851) = &input.security_group_rule_ids {
        let mut list_5853 = scope_5850.start_list(true, Some("item"));
        for item_5852 in var_5851 {
            #[allow(unused_mut)]
            let mut entry_5854 = list_5853.entry();
            entry_5854.string(item_5852);
        }
        list_5853.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5855 = writer.prefix("CidrIp");
    if let Some(var_5856) = &input.cidr_ip {
        scope_5855.string(var_5856);
    }
    #[allow(unused_mut)]
    let mut scope_5857 = writer.prefix("FromPort");
    if let Some(var_5858) = &input.from_port {
        scope_5857.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5858).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5859 = writer.prefix("IpProtocol");
    if let Some(var_5860) = &input.ip_protocol {
        scope_5859.string(var_5860);
    }
    #[allow(unused_mut)]
    let mut scope_5861 = writer.prefix("ToPort");
    if let Some(var_5862) = &input.to_port {
        scope_5861.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5862).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5863 = writer.prefix("SourceSecurityGroupName");
    if let Some(var_5864) = &input.source_security_group_name {
        scope_5863.string(var_5864);
    }
    #[allow(unused_mut)]
    let mut scope_5865 = writer.prefix("SourceSecurityGroupOwnerId");
    if let Some(var_5866) = &input.source_security_group_owner_id {
        scope_5865.string(var_5866);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_revoke_security_group_ingress(
    input: &crate::input::RevokeSecurityGroupIngressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RevokeSecurityGroupIngress", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5867 = writer.prefix("CidrIp");
    if let Some(var_5868) = &input.cidr_ip {
        scope_5867.string(var_5868);
    }
    #[allow(unused_mut)]
    let mut scope_5869 = writer.prefix("FromPort");
    if let Some(var_5870) = &input.from_port {
        scope_5869.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5870).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5871 = writer.prefix("GroupId");
    if let Some(var_5872) = &input.group_id {
        scope_5871.string(var_5872);
    }
    #[allow(unused_mut)]
    let mut scope_5873 = writer.prefix("GroupName");
    if let Some(var_5874) = &input.group_name {
        scope_5873.string(var_5874);
    }
    #[allow(unused_mut)]
    let mut scope_5875 = writer.prefix("IpPermissions");
    if let Some(var_5876) = &input.ip_permissions {
        let mut list_5878 = scope_5875.start_list(true, Some("item"));
        for item_5877 in var_5876 {
            #[allow(unused_mut)]
            let mut entry_5879 = list_5878.entry();
            crate::query_ser::serialize_structure_crate_model_ip_permission(entry_5879, item_5877)?;
        }
        list_5878.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5880 = writer.prefix("IpProtocol");
    if let Some(var_5881) = &input.ip_protocol {
        scope_5880.string(var_5881);
    }
    #[allow(unused_mut)]
    let mut scope_5882 = writer.prefix("SourceSecurityGroupName");
    if let Some(var_5883) = &input.source_security_group_name {
        scope_5882.string(var_5883);
    }
    #[allow(unused_mut)]
    let mut scope_5884 = writer.prefix("SourceSecurityGroupOwnerId");
    if let Some(var_5885) = &input.source_security_group_owner_id {
        scope_5884.string(var_5885);
    }
    #[allow(unused_mut)]
    let mut scope_5886 = writer.prefix("ToPort");
    if let Some(var_5887) = &input.to_port {
        scope_5886.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5887).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5888 = writer.prefix("DryRun");
    if let Some(var_5889) = &input.dry_run {
        scope_5888.boolean(*var_5889);
    }
    #[allow(unused_mut)]
    let mut scope_5890 = writer.prefix("SecurityGroupRuleId");
    if let Some(var_5891) = &input.security_group_rule_ids {
        let mut list_5893 = scope_5890.start_list(true, Some("item"));
        for item_5892 in var_5891 {
            #[allow(unused_mut)]
            let mut entry_5894 = list_5893.entry();
            entry_5894.string(item_5892);
        }
        list_5893.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_run_instances(
    input: &crate::input::RunInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RunInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_5895 = writer.prefix("BlockDeviceMapping");
    if let Some(var_5896) = &input.block_device_mappings {
        let mut list_5898 = scope_5895.start_list(true, Some("BlockDeviceMapping"));
        for item_5897 in var_5896 {
            #[allow(unused_mut)]
            let mut entry_5899 = list_5898.entry();
            crate::query_ser::serialize_structure_crate_model_block_device_mapping(
                entry_5899, item_5897,
            )?;
        }
        list_5898.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5900 = writer.prefix("ImageId");
    if let Some(var_5901) = &input.image_id {
        scope_5900.string(var_5901);
    }
    #[allow(unused_mut)]
    let mut scope_5902 = writer.prefix("InstanceType");
    if let Some(var_5903) = &input.instance_type {
        scope_5902.string(var_5903.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5904 = writer.prefix("Ipv6AddressCount");
    if let Some(var_5905) = &input.ipv6_address_count {
        scope_5904.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5905).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5906 = writer.prefix("Ipv6Address");
    if let Some(var_5907) = &input.ipv6_addresses {
        let mut list_5909 = scope_5906.start_list(true, Some("item"));
        for item_5908 in var_5907 {
            #[allow(unused_mut)]
            let mut entry_5910 = list_5909.entry();
            crate::query_ser::serialize_structure_crate_model_instance_ipv6_address(
                entry_5910, item_5908,
            )?;
        }
        list_5909.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5911 = writer.prefix("KernelId");
    if let Some(var_5912) = &input.kernel_id {
        scope_5911.string(var_5912);
    }
    #[allow(unused_mut)]
    let mut scope_5913 = writer.prefix("KeyName");
    if let Some(var_5914) = &input.key_name {
        scope_5913.string(var_5914);
    }
    #[allow(unused_mut)]
    let mut scope_5915 = writer.prefix("MaxCount");
    if let Some(var_5916) = &input.max_count {
        scope_5915.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5916).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5917 = writer.prefix("MinCount");
    if let Some(var_5918) = &input.min_count {
        scope_5917.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5918).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5919 = writer.prefix("Monitoring");
    if let Some(var_5920) = &input.monitoring {
        crate::query_ser::serialize_structure_crate_model_run_instances_monitoring_enabled(
            scope_5919, var_5920,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5921 = writer.prefix("Placement");
    if let Some(var_5922) = &input.placement {
        crate::query_ser::serialize_structure_crate_model_placement(scope_5921, var_5922)?;
    }
    #[allow(unused_mut)]
    let mut scope_5923 = writer.prefix("RamdiskId");
    if let Some(var_5924) = &input.ramdisk_id {
        scope_5923.string(var_5924);
    }
    #[allow(unused_mut)]
    let mut scope_5925 = writer.prefix("SecurityGroupId");
    if let Some(var_5926) = &input.security_group_ids {
        let mut list_5928 = scope_5925.start_list(true, Some("SecurityGroupId"));
        for item_5927 in var_5926 {
            #[allow(unused_mut)]
            let mut entry_5929 = list_5928.entry();
            entry_5929.string(item_5927);
        }
        list_5928.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5930 = writer.prefix("SecurityGroup");
    if let Some(var_5931) = &input.security_groups {
        let mut list_5933 = scope_5930.start_list(true, Some("SecurityGroup"));
        for item_5932 in var_5931 {
            #[allow(unused_mut)]
            let mut entry_5934 = list_5933.entry();
            entry_5934.string(item_5932);
        }
        list_5933.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5935 = writer.prefix("SubnetId");
    if let Some(var_5936) = &input.subnet_id {
        scope_5935.string(var_5936);
    }
    #[allow(unused_mut)]
    let mut scope_5937 = writer.prefix("UserData");
    if let Some(var_5938) = &input.user_data {
        scope_5937.string(var_5938);
    }
    #[allow(unused_mut)]
    let mut scope_5939 = writer.prefix("AdditionalInfo");
    if let Some(var_5940) = &input.additional_info {
        scope_5939.string(var_5940);
    }
    #[allow(unused_mut)]
    let mut scope_5941 = writer.prefix("ClientToken");
    if let Some(var_5942) = &input.client_token {
        scope_5941.string(var_5942);
    }
    #[allow(unused_mut)]
    let mut scope_5943 = writer.prefix("DisableApiTermination");
    if let Some(var_5944) = &input.disable_api_termination {
        scope_5943.boolean(*var_5944);
    }
    #[allow(unused_mut)]
    let mut scope_5945 = writer.prefix("DryRun");
    if let Some(var_5946) = &input.dry_run {
        scope_5945.boolean(*var_5946);
    }
    #[allow(unused_mut)]
    let mut scope_5947 = writer.prefix("EbsOptimized");
    if let Some(var_5948) = &input.ebs_optimized {
        scope_5947.boolean(*var_5948);
    }
    #[allow(unused_mut)]
    let mut scope_5949 = writer.prefix("IamInstanceProfile");
    if let Some(var_5950) = &input.iam_instance_profile {
        crate::query_ser::serialize_structure_crate_model_iam_instance_profile_specification(
            scope_5949, var_5950,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5951 = writer.prefix("InstanceInitiatedShutdownBehavior");
    if let Some(var_5952) = &input.instance_initiated_shutdown_behavior {
        scope_5951.string(var_5952.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5953 = writer.prefix("NetworkInterface");
    if let Some(var_5954) = &input.network_interfaces {
        let mut list_5956 = scope_5953.start_list(true, Some("item"));
        for item_5955 in var_5954 {
            #[allow(unused_mut)]
            let mut entry_5957 = list_5956.entry();
            crate::query_ser::serialize_structure_crate_model_instance_network_interface_specification(entry_5957, item_5955)?;
        }
        list_5956.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5958 = writer.prefix("PrivateIpAddress");
    if let Some(var_5959) = &input.private_ip_address {
        scope_5958.string(var_5959);
    }
    #[allow(unused_mut)]
    let mut scope_5960 = writer.prefix("ElasticGpuSpecification");
    if let Some(var_5961) = &input.elastic_gpu_specification {
        let mut list_5963 = scope_5960.start_list(true, Some("item"));
        for item_5962 in var_5961 {
            #[allow(unused_mut)]
            let mut entry_5964 = list_5963.entry();
            crate::query_ser::serialize_structure_crate_model_elastic_gpu_specification(
                entry_5964, item_5962,
            )?;
        }
        list_5963.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5965 = writer.prefix("ElasticInferenceAccelerator");
    if let Some(var_5966) = &input.elastic_inference_accelerators {
        let mut list_5968 = scope_5965.start_list(true, Some("item"));
        for item_5967 in var_5966 {
            #[allow(unused_mut)]
            let mut entry_5969 = list_5968.entry();
            crate::query_ser::serialize_structure_crate_model_elastic_inference_accelerator(
                entry_5969, item_5967,
            )?;
        }
        list_5968.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5970 = writer.prefix("TagSpecification");
    if let Some(var_5971) = &input.tag_specifications {
        let mut list_5973 = scope_5970.start_list(true, Some("item"));
        for item_5972 in var_5971 {
            #[allow(unused_mut)]
            let mut entry_5974 = list_5973.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_5974, item_5972,
            )?;
        }
        list_5973.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5975 = writer.prefix("LaunchTemplate");
    if let Some(var_5976) = &input.launch_template {
        crate::query_ser::serialize_structure_crate_model_launch_template_specification(
            scope_5975, var_5976,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5977 = writer.prefix("InstanceMarketOptions");
    if let Some(var_5978) = &input.instance_market_options {
        crate::query_ser::serialize_structure_crate_model_instance_market_options_request(
            scope_5977, var_5978,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5979 = writer.prefix("CreditSpecification");
    if let Some(var_5980) = &input.credit_specification {
        crate::query_ser::serialize_structure_crate_model_credit_specification_request(
            scope_5979, var_5980,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5981 = writer.prefix("CpuOptions");
    if let Some(var_5982) = &input.cpu_options {
        crate::query_ser::serialize_structure_crate_model_cpu_options_request(
            scope_5981, var_5982,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5983 = writer.prefix("CapacityReservationSpecification");
    if let Some(var_5984) = &input.capacity_reservation_specification {
        crate::query_ser::serialize_structure_crate_model_capacity_reservation_specification(
            scope_5983, var_5984,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5985 = writer.prefix("HibernationOptions");
    if let Some(var_5986) = &input.hibernation_options {
        crate::query_ser::serialize_structure_crate_model_hibernation_options_request(
            scope_5985, var_5986,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5987 = writer.prefix("LicenseSpecification");
    if let Some(var_5988) = &input.license_specifications {
        let mut list_5990 = scope_5987.start_list(true, Some("item"));
        for item_5989 in var_5988 {
            #[allow(unused_mut)]
            let mut entry_5991 = list_5990.entry();
            crate::query_ser::serialize_structure_crate_model_license_configuration_request(
                entry_5991, item_5989,
            )?;
        }
        list_5990.finish();
    }
    #[allow(unused_mut)]
    let mut scope_5992 = writer.prefix("MetadataOptions");
    if let Some(var_5993) = &input.metadata_options {
        crate::query_ser::serialize_structure_crate_model_instance_metadata_options_request(
            scope_5992, var_5993,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5994 = writer.prefix("EnclaveOptions");
    if let Some(var_5995) = &input.enclave_options {
        crate::query_ser::serialize_structure_crate_model_enclave_options_request(
            scope_5994, var_5995,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5996 = writer.prefix("PrivateDnsNameOptions");
    if let Some(var_5997) = &input.private_dns_name_options {
        crate::query_ser::serialize_structure_crate_model_private_dns_name_options_request(
            scope_5996, var_5997,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_5998 = writer.prefix("MaintenanceOptions");
    if let Some(var_5999) = &input.maintenance_options {
        crate::query_ser::serialize_structure_crate_model_instance_maintenance_options_request(
            scope_5998, var_5999,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_6000 = writer.prefix("DisableApiStop");
    if let Some(var_6001) = &input.disable_api_stop {
        scope_6000.boolean(*var_6001);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_run_scheduled_instances(
    input: &crate::input::RunScheduledInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RunScheduledInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6002 = writer.prefix("ClientToken");
    if let Some(var_6003) = &input.client_token {
        scope_6002.string(var_6003);
    }
    #[allow(unused_mut)]
    let mut scope_6004 = writer.prefix("DryRun");
    if let Some(var_6005) = &input.dry_run {
        scope_6004.boolean(*var_6005);
    }
    #[allow(unused_mut)]
    let mut scope_6006 = writer.prefix("InstanceCount");
    if let Some(var_6007) = &input.instance_count {
        scope_6006.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_6007).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_6008 = writer.prefix("LaunchSpecification");
    if let Some(var_6009) = &input.launch_specification {
        crate::query_ser::serialize_structure_crate_model_scheduled_instances_launch_specification(
            scope_6008, var_6009,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_6010 = writer.prefix("ScheduledInstanceId");
    if let Some(var_6011) = &input.scheduled_instance_id {
        scope_6010.string(var_6011);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_search_local_gateway_routes(
    input: &crate::input::SearchLocalGatewayRoutesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "SearchLocalGatewayRoutes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6012 = writer.prefix("LocalGatewayRouteTableId");
    if let Some(var_6013) = &input.local_gateway_route_table_id {
        scope_6012.string(var_6013);
    }
    #[allow(unused_mut)]
    let mut scope_6014 = writer.prefix("Filter");
    if let Some(var_6015) = &input.filters {
        let mut list_6017 = scope_6014.start_list(true, Some("Filter"));
        for item_6016 in var_6015 {
            #[allow(unused_mut)]
            let mut entry_6018 = list_6017.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_6018, item_6016)?;
        }
        list_6017.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6019 = writer.prefix("MaxResults");
    if let Some(var_6020) = &input.max_results {
        scope_6019.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_6020).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_6021 = writer.prefix("NextToken");
    if let Some(var_6022) = &input.next_token {
        scope_6021.string(var_6022);
    }
    #[allow(unused_mut)]
    let mut scope_6023 = writer.prefix("DryRun");
    if let Some(var_6024) = &input.dry_run {
        scope_6023.boolean(*var_6024);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_search_transit_gateway_multicast_groups(
    input: &crate::input::SearchTransitGatewayMulticastGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "SearchTransitGatewayMulticastGroups",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_6025 = writer.prefix("TransitGatewayMulticastDomainId");
    if let Some(var_6026) = &input.transit_gateway_multicast_domain_id {
        scope_6025.string(var_6026);
    }
    #[allow(unused_mut)]
    let mut scope_6027 = writer.prefix("Filter");
    if let Some(var_6028) = &input.filters {
        let mut list_6030 = scope_6027.start_list(true, Some("Filter"));
        for item_6029 in var_6028 {
            #[allow(unused_mut)]
            let mut entry_6031 = list_6030.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_6031, item_6029)?;
        }
        list_6030.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6032 = writer.prefix("MaxResults");
    if let Some(var_6033) = &input.max_results {
        scope_6032.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_6033).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_6034 = writer.prefix("NextToken");
    if let Some(var_6035) = &input.next_token {
        scope_6034.string(var_6035);
    }
    #[allow(unused_mut)]
    let mut scope_6036 = writer.prefix("DryRun");
    if let Some(var_6037) = &input.dry_run {
        scope_6036.boolean(*var_6037);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_search_transit_gateway_routes(
    input: &crate::input::SearchTransitGatewayRoutesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "SearchTransitGatewayRoutes", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6038 = writer.prefix("TransitGatewayRouteTableId");
    if let Some(var_6039) = &input.transit_gateway_route_table_id {
        scope_6038.string(var_6039);
    }
    #[allow(unused_mut)]
    let mut scope_6040 = writer.prefix("Filter");
    if let Some(var_6041) = &input.filters {
        let mut list_6043 = scope_6040.start_list(true, Some("Filter"));
        for item_6042 in var_6041 {
            #[allow(unused_mut)]
            let mut entry_6044 = list_6043.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_6044, item_6042)?;
        }
        list_6043.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6045 = writer.prefix("MaxResults");
    if let Some(var_6046) = &input.max_results {
        scope_6045.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_6046).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_6047 = writer.prefix("DryRun");
    if let Some(var_6048) = &input.dry_run {
        scope_6047.boolean(*var_6048);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_send_diagnostic_interrupt(
    input: &crate::input::SendDiagnosticInterruptInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "SendDiagnosticInterrupt", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6049 = writer.prefix("InstanceId");
    if let Some(var_6050) = &input.instance_id {
        scope_6049.string(var_6050);
    }
    #[allow(unused_mut)]
    let mut scope_6051 = writer.prefix("DryRun");
    if let Some(var_6052) = &input.dry_run {
        scope_6051.boolean(*var_6052);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_start_instances(
    input: &crate::input::StartInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "StartInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6053 = writer.prefix("InstanceId");
    if let Some(var_6054) = &input.instance_ids {
        let mut list_6056 = scope_6053.start_list(true, Some("InstanceId"));
        for item_6055 in var_6054 {
            #[allow(unused_mut)]
            let mut entry_6057 = list_6056.entry();
            entry_6057.string(item_6055);
        }
        list_6056.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6058 = writer.prefix("AdditionalInfo");
    if let Some(var_6059) = &input.additional_info {
        scope_6058.string(var_6059);
    }
    #[allow(unused_mut)]
    let mut scope_6060 = writer.prefix("DryRun");
    if let Some(var_6061) = &input.dry_run {
        scope_6060.boolean(*var_6061);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_start_network_insights_access_scope_analysis(
    input: &crate::input::StartNetworkInsightsAccessScopeAnalysisInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "StartNetworkInsightsAccessScopeAnalysis",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_6062 = writer.prefix("NetworkInsightsAccessScopeId");
    if let Some(var_6063) = &input.network_insights_access_scope_id {
        scope_6062.string(var_6063);
    }
    #[allow(unused_mut)]
    let mut scope_6064 = writer.prefix("DryRun");
    if let Some(var_6065) = &input.dry_run {
        scope_6064.boolean(*var_6065);
    }
    #[allow(unused_mut)]
    let mut scope_6066 = writer.prefix("TagSpecification");
    if let Some(var_6067) = &input.tag_specifications {
        let mut list_6069 = scope_6066.start_list(true, Some("item"));
        for item_6068 in var_6067 {
            #[allow(unused_mut)]
            let mut entry_6070 = list_6069.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_6070, item_6068,
            )?;
        }
        list_6069.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6071 = writer.prefix("ClientToken");
    if let Some(var_6072) = &input.client_token {
        scope_6071.string(var_6072);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_start_network_insights_analysis(
    input: &crate::input::StartNetworkInsightsAnalysisInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "StartNetworkInsightsAnalysis", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6073 = writer.prefix("NetworkInsightsPathId");
    if let Some(var_6074) = &input.network_insights_path_id {
        scope_6073.string(var_6074);
    }
    #[allow(unused_mut)]
    let mut scope_6075 = writer.prefix("FilterInArn");
    if let Some(var_6076) = &input.filter_in_arns {
        let mut list_6078 = scope_6075.start_list(true, Some("item"));
        for item_6077 in var_6076 {
            #[allow(unused_mut)]
            let mut entry_6079 = list_6078.entry();
            entry_6079.string(item_6077);
        }
        list_6078.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6080 = writer.prefix("DryRun");
    if let Some(var_6081) = &input.dry_run {
        scope_6080.boolean(*var_6081);
    }
    #[allow(unused_mut)]
    let mut scope_6082 = writer.prefix("TagSpecification");
    if let Some(var_6083) = &input.tag_specifications {
        let mut list_6085 = scope_6082.start_list(true, Some("item"));
        for item_6084 in var_6083 {
            #[allow(unused_mut)]
            let mut entry_6086 = list_6085.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_6086, item_6084,
            )?;
        }
        list_6085.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6087 = writer.prefix("ClientToken");
    if let Some(var_6088) = &input.client_token {
        scope_6087.string(var_6088);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_start_vpc_endpoint_service_private_dns_verification(
    input: &crate::input::StartVpcEndpointServicePrivateDnsVerificationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "StartVpcEndpointServicePrivateDnsVerification",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_6089 = writer.prefix("DryRun");
    if let Some(var_6090) = &input.dry_run {
        scope_6089.boolean(*var_6090);
    }
    #[allow(unused_mut)]
    let mut scope_6091 = writer.prefix("ServiceId");
    if let Some(var_6092) = &input.service_id {
        scope_6091.string(var_6092);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_stop_instances(
    input: &crate::input::StopInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "StopInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6093 = writer.prefix("InstanceId");
    if let Some(var_6094) = &input.instance_ids {
        let mut list_6096 = scope_6093.start_list(true, Some("InstanceId"));
        for item_6095 in var_6094 {
            #[allow(unused_mut)]
            let mut entry_6097 = list_6096.entry();
            entry_6097.string(item_6095);
        }
        list_6096.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6098 = writer.prefix("Hibernate");
    if let Some(var_6099) = &input.hibernate {
        scope_6098.boolean(*var_6099);
    }
    #[allow(unused_mut)]
    let mut scope_6100 = writer.prefix("DryRun");
    if let Some(var_6101) = &input.dry_run {
        scope_6100.boolean(*var_6101);
    }
    #[allow(unused_mut)]
    let mut scope_6102 = writer.prefix("Force");
    if let Some(var_6103) = &input.force {
        scope_6102.boolean(*var_6103);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_terminate_client_vpn_connections(
    input: &crate::input::TerminateClientVpnConnectionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "TerminateClientVpnConnections", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6104 = writer.prefix("ClientVpnEndpointId");
    if let Some(var_6105) = &input.client_vpn_endpoint_id {
        scope_6104.string(var_6105);
    }
    #[allow(unused_mut)]
    let mut scope_6106 = writer.prefix("ConnectionId");
    if let Some(var_6107) = &input.connection_id {
        scope_6106.string(var_6107);
    }
    #[allow(unused_mut)]
    let mut scope_6108 = writer.prefix("Username");
    if let Some(var_6109) = &input.username {
        scope_6108.string(var_6109);
    }
    #[allow(unused_mut)]
    let mut scope_6110 = writer.prefix("DryRun");
    if let Some(var_6111) = &input.dry_run {
        scope_6110.boolean(*var_6111);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_terminate_instances(
    input: &crate::input::TerminateInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "TerminateInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6112 = writer.prefix("InstanceId");
    if let Some(var_6113) = &input.instance_ids {
        let mut list_6115 = scope_6112.start_list(true, Some("InstanceId"));
        for item_6114 in var_6113 {
            #[allow(unused_mut)]
            let mut entry_6116 = list_6115.entry();
            entry_6116.string(item_6114);
        }
        list_6115.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6117 = writer.prefix("DryRun");
    if let Some(var_6118) = &input.dry_run {
        scope_6117.boolean(*var_6118);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_unassign_ipv6_addresses(
    input: &crate::input::UnassignIpv6AddressesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "UnassignIpv6Addresses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6119 = writer.prefix("Ipv6Addresses");
    if let Some(var_6120) = &input.ipv6_addresses {
        let mut list_6122 = scope_6119.start_list(true, Some("item"));
        for item_6121 in var_6120 {
            #[allow(unused_mut)]
            let mut entry_6123 = list_6122.entry();
            entry_6123.string(item_6121);
        }
        list_6122.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6124 = writer.prefix("Ipv6Prefix");
    if let Some(var_6125) = &input.ipv6_prefixes {
        let mut list_6127 = scope_6124.start_list(true, Some("item"));
        for item_6126 in var_6125 {
            #[allow(unused_mut)]
            let mut entry_6128 = list_6127.entry();
            entry_6128.string(item_6126);
        }
        list_6127.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6129 = writer.prefix("NetworkInterfaceId");
    if let Some(var_6130) = &input.network_interface_id {
        scope_6129.string(var_6130);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_unassign_private_ip_addresses(
    input: &crate::input::UnassignPrivateIpAddressesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "UnassignPrivateIpAddresses", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6131 = writer.prefix("NetworkInterfaceId");
    if let Some(var_6132) = &input.network_interface_id {
        scope_6131.string(var_6132);
    }
    #[allow(unused_mut)]
    let mut scope_6133 = writer.prefix("PrivateIpAddress");
    if let Some(var_6134) = &input.private_ip_addresses {
        let mut list_6136 = scope_6133.start_list(true, Some("PrivateIpAddress"));
        for item_6135 in var_6134 {
            #[allow(unused_mut)]
            let mut entry_6137 = list_6136.entry();
            entry_6137.string(item_6135);
        }
        list_6136.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6138 = writer.prefix("Ipv4Prefix");
    if let Some(var_6139) = &input.ipv4_prefixes {
        let mut list_6141 = scope_6138.start_list(true, Some("item"));
        for item_6140 in var_6139 {
            #[allow(unused_mut)]
            let mut entry_6142 = list_6141.entry();
            entry_6142.string(item_6140);
        }
        list_6141.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_unmonitor_instances(
    input: &crate::input::UnmonitorInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "UnmonitorInstances", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6143 = writer.prefix("InstanceId");
    if let Some(var_6144) = &input.instance_ids {
        let mut list_6146 = scope_6143.start_list(true, Some("InstanceId"));
        for item_6145 in var_6144 {
            #[allow(unused_mut)]
            let mut entry_6147 = list_6146.entry();
            entry_6147.string(item_6145);
        }
        list_6146.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6148 = writer.prefix("DryRun");
    if let Some(var_6149) = &input.dry_run {
        scope_6148.boolean(*var_6149);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_update_security_group_rule_descriptions_egress(
    input: &crate::input::UpdateSecurityGroupRuleDescriptionsEgressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "UpdateSecurityGroupRuleDescriptionsEgress",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_6150 = writer.prefix("DryRun");
    if let Some(var_6151) = &input.dry_run {
        scope_6150.boolean(*var_6151);
    }
    #[allow(unused_mut)]
    let mut scope_6152 = writer.prefix("GroupId");
    if let Some(var_6153) = &input.group_id {
        scope_6152.string(var_6153);
    }
    #[allow(unused_mut)]
    let mut scope_6154 = writer.prefix("GroupName");
    if let Some(var_6155) = &input.group_name {
        scope_6154.string(var_6155);
    }
    #[allow(unused_mut)]
    let mut scope_6156 = writer.prefix("IpPermissions");
    if let Some(var_6157) = &input.ip_permissions {
        let mut list_6159 = scope_6156.start_list(true, Some("item"));
        for item_6158 in var_6157 {
            #[allow(unused_mut)]
            let mut entry_6160 = list_6159.entry();
            crate::query_ser::serialize_structure_crate_model_ip_permission(entry_6160, item_6158)?;
        }
        list_6159.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6161 = writer.prefix("SecurityGroupRuleDescription");
    if let Some(var_6162) = &input.security_group_rule_descriptions {
        let mut list_6164 = scope_6161.start_list(true, Some("item"));
        for item_6163 in var_6162 {
            #[allow(unused_mut)]
            let mut entry_6165 = list_6164.entry();
            crate::query_ser::serialize_structure_crate_model_security_group_rule_description(
                entry_6165, item_6163,
            )?;
        }
        list_6164.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_update_security_group_rule_descriptions_ingress(
    input: &crate::input::UpdateSecurityGroupRuleDescriptionsIngressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "UpdateSecurityGroupRuleDescriptionsIngress",
        "2016-11-15",
    );
    #[allow(unused_mut)]
    let mut scope_6166 = writer.prefix("DryRun");
    if let Some(var_6167) = &input.dry_run {
        scope_6166.boolean(*var_6167);
    }
    #[allow(unused_mut)]
    let mut scope_6168 = writer.prefix("GroupId");
    if let Some(var_6169) = &input.group_id {
        scope_6168.string(var_6169);
    }
    #[allow(unused_mut)]
    let mut scope_6170 = writer.prefix("GroupName");
    if let Some(var_6171) = &input.group_name {
        scope_6170.string(var_6171);
    }
    #[allow(unused_mut)]
    let mut scope_6172 = writer.prefix("IpPermissions");
    if let Some(var_6173) = &input.ip_permissions {
        let mut list_6175 = scope_6172.start_list(true, Some("item"));
        for item_6174 in var_6173 {
            #[allow(unused_mut)]
            let mut entry_6176 = list_6175.entry();
            crate::query_ser::serialize_structure_crate_model_ip_permission(entry_6176, item_6174)?;
        }
        list_6175.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6177 = writer.prefix("SecurityGroupRuleDescription");
    if let Some(var_6178) = &input.security_group_rule_descriptions {
        let mut list_6180 = scope_6177.start_list(true, Some("item"));
        for item_6179 in var_6178 {
            #[allow(unused_mut)]
            let mut entry_6181 = list_6180.entry();
            crate::query_ser::serialize_structure_crate_model_security_group_rule_description(
                entry_6181, item_6179,
            )?;
        }
        list_6180.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_withdraw_byoip_cidr(
    input: &crate::input::WithdrawByoipCidrInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "WithdrawByoipCidr", "2016-11-15");
    #[allow(unused_mut)]
    let mut scope_6182 = writer.prefix("Cidr");
    if let Some(var_6183) = &input.cidr {
        scope_6182.string(var_6183);
    }
    #[allow(unused_mut)]
    let mut scope_6184 = writer.prefix("DryRun");
    if let Some(var_6185) = &input.dry_run {
        scope_6184.boolean(*var_6185);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}
