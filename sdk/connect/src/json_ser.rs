// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_associate_approved_origin_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateApprovedOriginInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.origin {
        object.key("Origin").string(var_1.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_associate_bot_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateBotInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2) = &input.lex_bot {
        let mut object_3 = object.key("LexBot").start_object();
        crate::json_ser::serialize_structure_crate_model_lex_bot(&mut object_3, var_2)?;
        object_3.finish();
    }
    if let Some(var_4) = &input.lex_v2_bot {
        let mut object_5 = object.key("LexV2Bot").start_object();
        crate::json_ser::serialize_structure_crate_model_lex_v2_bot(&mut object_5, var_4)?;
        object_5.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_associate_default_vocabulary_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateDefaultVocabularyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_6) = &input.vocabulary_id {
        object.key("VocabularyId").string(var_6.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_associate_instance_storage_config_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateInstanceStorageConfigInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_7) = &input.resource_type {
        object.key("ResourceType").string(var_7.as_str());
    }
    if let Some(var_8) = &input.storage_config {
        let mut object_9 = object.key("StorageConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_instance_storage_config(
            &mut object_9,
            var_8,
        )?;
        object_9.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_associate_lambda_function_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateLambdaFunctionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_10) = &input.function_arn {
        object.key("FunctionArn").string(var_10.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_associate_lex_bot_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateLexBotInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_11) = &input.lex_bot {
        let mut object_12 = object.key("LexBot").start_object();
        crate::json_ser::serialize_structure_crate_model_lex_bot(&mut object_12, var_11)?;
        object_12.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_associate_phone_number_contact_flow_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociatePhoneNumberContactFlowInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_13) = &input.contact_flow_id {
        object.key("ContactFlowId").string(var_13.as_str());
    }
    if let Some(var_14) = &input.instance_id {
        object.key("InstanceId").string(var_14.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_associate_queue_quick_connects_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateQueueQuickConnectsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_15) = &input.quick_connect_ids {
        let mut array_16 = object.key("QuickConnectIds").start_array();
        for item_17 in var_15 {
            {
                array_16.value().string(item_17.as_str());
            }
        }
        array_16.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_associate_routing_profile_queues_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateRoutingProfileQueuesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_18) = &input.queue_configs {
        let mut array_19 = object.key("QueueConfigs").start_array();
        for item_20 in var_18 {
            {
                let mut object_21 = array_19.value().start_object();
                crate::json_ser::serialize_structure_crate_model_routing_profile_queue_config(
                    &mut object_21,
                    item_20,
                )?;
                object_21.finish();
            }
        }
        array_19.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_associate_security_key_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateSecurityKeyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_22) = &input.key {
        object.key("Key").string(var_22.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_claim_phone_number_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ClaimPhoneNumberInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_23) = &input.client_token {
        object.key("ClientToken").string(var_23.as_str());
    }
    if let Some(var_24) = &input.phone_number {
        object.key("PhoneNumber").string(var_24.as_str());
    }
    if let Some(var_25) = &input.phone_number_description {
        object.key("PhoneNumberDescription").string(var_25.as_str());
    }
    if let Some(var_26) = &input.tags {
        let mut object_27 = object.key("Tags").start_object();
        for (key_28, value_29) in var_26 {
            {
                object_27.key(key_28).string(value_29.as_str());
            }
        }
        object_27.finish();
    }
    if let Some(var_30) = &input.target_arn {
        object.key("TargetArn").string(var_30.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_agent_status_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAgentStatusInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_31) = &input.description {
        object.key("Description").string(var_31.as_str());
    }
    if let Some(var_32) = &input.display_order {
        object.key("DisplayOrder").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_32).into()),
        );
    }
    if let Some(var_33) = &input.name {
        object.key("Name").string(var_33.as_str());
    }
    if let Some(var_34) = &input.state {
        object.key("State").string(var_34.as_str());
    }
    if let Some(var_35) = &input.tags {
        let mut object_36 = object.key("Tags").start_object();
        for (key_37, value_38) in var_35 {
            {
                object_36.key(key_37).string(value_38.as_str());
            }
        }
        object_36.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_contact_flow_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateContactFlowInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_39) = &input.content {
        object.key("Content").string(var_39.as_str());
    }
    if let Some(var_40) = &input.description {
        object.key("Description").string(var_40.as_str());
    }
    if let Some(var_41) = &input.name {
        object.key("Name").string(var_41.as_str());
    }
    if let Some(var_42) = &input.tags {
        let mut object_43 = object.key("Tags").start_object();
        for (key_44, value_45) in var_42 {
            {
                object_43.key(key_44).string(value_45.as_str());
            }
        }
        object_43.finish();
    }
    if let Some(var_46) = &input.r#type {
        object.key("Type").string(var_46.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_contact_flow_module_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateContactFlowModuleInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_47) = &input.client_token {
        object.key("ClientToken").string(var_47.as_str());
    }
    if let Some(var_48) = &input.content {
        object.key("Content").string(var_48.as_str());
    }
    if let Some(var_49) = &input.description {
        object.key("Description").string(var_49.as_str());
    }
    if let Some(var_50) = &input.name {
        object.key("Name").string(var_50.as_str());
    }
    if let Some(var_51) = &input.tags {
        let mut object_52 = object.key("Tags").start_object();
        for (key_53, value_54) in var_51 {
            {
                object_52.key(key_53).string(value_54.as_str());
            }
        }
        object_52.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_hours_of_operation_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateHoursOfOperationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_55) = &input.config {
        let mut array_56 = object.key("Config").start_array();
        for item_57 in var_55 {
            {
                let mut object_58 = array_56.value().start_object();
                crate::json_ser::serialize_structure_crate_model_hours_of_operation_config(
                    &mut object_58,
                    item_57,
                )?;
                object_58.finish();
            }
        }
        array_56.finish();
    }
    if let Some(var_59) = &input.description {
        object.key("Description").string(var_59.as_str());
    }
    if let Some(var_60) = &input.name {
        object.key("Name").string(var_60.as_str());
    }
    if let Some(var_61) = &input.tags {
        let mut object_62 = object.key("Tags").start_object();
        for (key_63, value_64) in var_61 {
            {
                object_62.key(key_63).string(value_64.as_str());
            }
        }
        object_62.finish();
    }
    if let Some(var_65) = &input.time_zone {
        object.key("TimeZone").string(var_65.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_instance_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateInstanceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_66) = &input.client_token {
        object.key("ClientToken").string(var_66.as_str());
    }
    if let Some(var_67) = &input.directory_id {
        object.key("DirectoryId").string(var_67.as_str());
    }
    if let Some(var_68) = &input.identity_management_type {
        object.key("IdentityManagementType").string(var_68.as_str());
    }
    if let Some(var_69) = &input.inbound_calls_enabled {
        object.key("InboundCallsEnabled").boolean(*var_69);
    }
    if let Some(var_70) = &input.instance_alias {
        object.key("InstanceAlias").string(var_70.as_str());
    }
    if let Some(var_71) = &input.outbound_calls_enabled {
        object.key("OutboundCallsEnabled").boolean(*var_71);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_integration_association_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateIntegrationAssociationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_72) = &input.integration_arn {
        object.key("IntegrationArn").string(var_72.as_str());
    }
    if let Some(var_73) = &input.integration_type {
        object.key("IntegrationType").string(var_73.as_str());
    }
    if let Some(var_74) = &input.source_application_name {
        object.key("SourceApplicationName").string(var_74.as_str());
    }
    if let Some(var_75) = &input.source_application_url {
        object.key("SourceApplicationUrl").string(var_75.as_str());
    }
    if let Some(var_76) = &input.source_type {
        object.key("SourceType").string(var_76.as_str());
    }
    if let Some(var_77) = &input.tags {
        let mut object_78 = object.key("Tags").start_object();
        for (key_79, value_80) in var_77 {
            {
                object_78.key(key_79).string(value_80.as_str());
            }
        }
        object_78.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_queue_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateQueueInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_81) = &input.description {
        object.key("Description").string(var_81.as_str());
    }
    if let Some(var_82) = &input.hours_of_operation_id {
        object.key("HoursOfOperationId").string(var_82.as_str());
    }
    if let Some(var_83) = &input.max_contacts {
        object.key("MaxContacts").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_83).into()),
        );
    }
    if let Some(var_84) = &input.name {
        object.key("Name").string(var_84.as_str());
    }
    if let Some(var_85) = &input.outbound_caller_config {
        let mut object_86 = object.key("OutboundCallerConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_outbound_caller_config(
            &mut object_86,
            var_85,
        )?;
        object_86.finish();
    }
    if let Some(var_87) = &input.quick_connect_ids {
        let mut array_88 = object.key("QuickConnectIds").start_array();
        for item_89 in var_87 {
            {
                array_88.value().string(item_89.as_str());
            }
        }
        array_88.finish();
    }
    if let Some(var_90) = &input.tags {
        let mut object_91 = object.key("Tags").start_object();
        for (key_92, value_93) in var_90 {
            {
                object_91.key(key_92).string(value_93.as_str());
            }
        }
        object_91.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_quick_connect_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateQuickConnectInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_94) = &input.description {
        object.key("Description").string(var_94.as_str());
    }
    if let Some(var_95) = &input.name {
        object.key("Name").string(var_95.as_str());
    }
    if let Some(var_96) = &input.quick_connect_config {
        let mut object_97 = object.key("QuickConnectConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_quick_connect_config(
            &mut object_97,
            var_96,
        )?;
        object_97.finish();
    }
    if let Some(var_98) = &input.tags {
        let mut object_99 = object.key("Tags").start_object();
        for (key_100, value_101) in var_98 {
            {
                object_99.key(key_100).string(value_101.as_str());
            }
        }
        object_99.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_routing_profile_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateRoutingProfileInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_102) = &input.default_outbound_queue_id {
        object
            .key("DefaultOutboundQueueId")
            .string(var_102.as_str());
    }
    if let Some(var_103) = &input.description {
        object.key("Description").string(var_103.as_str());
    }
    if let Some(var_104) = &input.media_concurrencies {
        let mut array_105 = object.key("MediaConcurrencies").start_array();
        for item_106 in var_104 {
            {
                let mut object_107 = array_105.value().start_object();
                crate::json_ser::serialize_structure_crate_model_media_concurrency(
                    &mut object_107,
                    item_106,
                )?;
                object_107.finish();
            }
        }
        array_105.finish();
    }
    if let Some(var_108) = &input.name {
        object.key("Name").string(var_108.as_str());
    }
    if let Some(var_109) = &input.queue_configs {
        let mut array_110 = object.key("QueueConfigs").start_array();
        for item_111 in var_109 {
            {
                let mut object_112 = array_110.value().start_object();
                crate::json_ser::serialize_structure_crate_model_routing_profile_queue_config(
                    &mut object_112,
                    item_111,
                )?;
                object_112.finish();
            }
        }
        array_110.finish();
    }
    if let Some(var_113) = &input.tags {
        let mut object_114 = object.key("Tags").start_object();
        for (key_115, value_116) in var_113 {
            {
                object_114.key(key_115).string(value_116.as_str());
            }
        }
        object_114.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_security_profile_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateSecurityProfileInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_117) = &input.description {
        object.key("Description").string(var_117.as_str());
    }
    if let Some(var_118) = &input.permissions {
        let mut array_119 = object.key("Permissions").start_array();
        for item_120 in var_118 {
            {
                array_119.value().string(item_120.as_str());
            }
        }
        array_119.finish();
    }
    if let Some(var_121) = &input.security_profile_name {
        object.key("SecurityProfileName").string(var_121.as_str());
    }
    if let Some(var_122) = &input.tags {
        let mut object_123 = object.key("Tags").start_object();
        for (key_124, value_125) in var_122 {
            {
                object_123.key(key_124).string(value_125.as_str());
            }
        }
        object_123.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_task_template_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateTaskTemplateInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_126) = &input.client_token {
        object.key("ClientToken").string(var_126.as_str());
    }
    if let Some(var_127) = &input.constraints {
        let mut object_128 = object.key("Constraints").start_object();
        crate::json_ser::serialize_structure_crate_model_task_template_constraints(
            &mut object_128,
            var_127,
        )?;
        object_128.finish();
    }
    if let Some(var_129) = &input.contact_flow_id {
        object.key("ContactFlowId").string(var_129.as_str());
    }
    if let Some(var_130) = &input.defaults {
        let mut object_131 = object.key("Defaults").start_object();
        crate::json_ser::serialize_structure_crate_model_task_template_defaults(
            &mut object_131,
            var_130,
        )?;
        object_131.finish();
    }
    if let Some(var_132) = &input.description {
        object.key("Description").string(var_132.as_str());
    }
    if let Some(var_133) = &input.fields {
        let mut array_134 = object.key("Fields").start_array();
        for item_135 in var_133 {
            {
                let mut object_136 = array_134.value().start_object();
                crate::json_ser::serialize_structure_crate_model_task_template_field(
                    &mut object_136,
                    item_135,
                )?;
                object_136.finish();
            }
        }
        array_134.finish();
    }
    if let Some(var_137) = &input.name {
        object.key("Name").string(var_137.as_str());
    }
    if let Some(var_138) = &input.status {
        object.key("Status").string(var_138.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_use_case_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateUseCaseInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_139) = &input.tags {
        let mut object_140 = object.key("Tags").start_object();
        for (key_141, value_142) in var_139 {
            {
                object_140.key(key_141).string(value_142.as_str());
            }
        }
        object_140.finish();
    }
    if let Some(var_143) = &input.use_case_type {
        object.key("UseCaseType").string(var_143.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_user_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateUserInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_144) = &input.directory_user_id {
        object.key("DirectoryUserId").string(var_144.as_str());
    }
    if let Some(var_145) = &input.hierarchy_group_id {
        object.key("HierarchyGroupId").string(var_145.as_str());
    }
    if let Some(var_146) = &input.identity_info {
        let mut object_147 = object.key("IdentityInfo").start_object();
        crate::json_ser::serialize_structure_crate_model_user_identity_info(
            &mut object_147,
            var_146,
        )?;
        object_147.finish();
    }
    if let Some(var_148) = &input.password {
        object.key("Password").string(var_148.as_str());
    }
    if let Some(var_149) = &input.phone_config {
        let mut object_150 = object.key("PhoneConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_user_phone_config(
            &mut object_150,
            var_149,
        )?;
        object_150.finish();
    }
    if let Some(var_151) = &input.routing_profile_id {
        object.key("RoutingProfileId").string(var_151.as_str());
    }
    if let Some(var_152) = &input.security_profile_ids {
        let mut array_153 = object.key("SecurityProfileIds").start_array();
        for item_154 in var_152 {
            {
                array_153.value().string(item_154.as_str());
            }
        }
        array_153.finish();
    }
    if let Some(var_155) = &input.tags {
        let mut object_156 = object.key("Tags").start_object();
        for (key_157, value_158) in var_155 {
            {
                object_156.key(key_157).string(value_158.as_str());
            }
        }
        object_156.finish();
    }
    if let Some(var_159) = &input.username {
        object.key("Username").string(var_159.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_user_hierarchy_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateUserHierarchyGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_160) = &input.name {
        object.key("Name").string(var_160.as_str());
    }
    if let Some(var_161) = &input.parent_group_id {
        object.key("ParentGroupId").string(var_161.as_str());
    }
    if let Some(var_162) = &input.tags {
        let mut object_163 = object.key("Tags").start_object();
        for (key_164, value_165) in var_162 {
            {
                object_163.key(key_164).string(value_165.as_str());
            }
        }
        object_163.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_vocabulary_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateVocabularyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_166) = &input.client_token {
        object.key("ClientToken").string(var_166.as_str());
    }
    if let Some(var_167) = &input.content {
        object.key("Content").string(var_167.as_str());
    }
    if let Some(var_168) = &input.language_code {
        object.key("LanguageCode").string(var_168.as_str());
    }
    if let Some(var_169) = &input.tags {
        let mut object_170 = object.key("Tags").start_object();
        for (key_171, value_172) in var_169 {
            {
                object_170.key(key_171).string(value_172.as_str());
            }
        }
        object_170.finish();
    }
    if let Some(var_173) = &input.vocabulary_name {
        object.key("VocabularyName").string(var_173.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disassociate_bot_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisassociateBotInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_174) = &input.lex_bot {
        let mut object_175 = object.key("LexBot").start_object();
        crate::json_ser::serialize_structure_crate_model_lex_bot(&mut object_175, var_174)?;
        object_175.finish();
    }
    if let Some(var_176) = &input.lex_v2_bot {
        let mut object_177 = object.key("LexV2Bot").start_object();
        crate::json_ser::serialize_structure_crate_model_lex_v2_bot(&mut object_177, var_176)?;
        object_177.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disassociate_queue_quick_connects_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisassociateQueueQuickConnectsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_178) = &input.quick_connect_ids {
        let mut array_179 = object.key("QuickConnectIds").start_array();
        for item_180 in var_178 {
            {
                array_179.value().string(item_180.as_str());
            }
        }
        array_179.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disassociate_routing_profile_queues_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisassociateRoutingProfileQueuesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_181) = &input.queue_references {
        let mut array_182 = object.key("QueueReferences").start_array();
        for item_183 in var_181 {
            {
                let mut object_184 = array_182.value().start_object();
                crate::json_ser::serialize_structure_crate_model_routing_profile_queue_reference(
                    &mut object_184,
                    item_183,
                )?;
                object_184.finish();
            }
        }
        array_182.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_current_metric_data_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetCurrentMetricDataInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_185) = &input.current_metrics {
        let mut array_186 = object.key("CurrentMetrics").start_array();
        for item_187 in var_185 {
            {
                let mut object_188 = array_186.value().start_object();
                crate::json_ser::serialize_structure_crate_model_current_metric(
                    &mut object_188,
                    item_187,
                )?;
                object_188.finish();
            }
        }
        array_186.finish();
    }
    if let Some(var_189) = &input.filters {
        let mut object_190 = object.key("Filters").start_object();
        crate::json_ser::serialize_structure_crate_model_filters(&mut object_190, var_189)?;
        object_190.finish();
    }
    if let Some(var_191) = &input.groupings {
        let mut array_192 = object.key("Groupings").start_array();
        for item_193 in var_191 {
            {
                array_192.value().string(item_193.as_str());
            }
        }
        array_192.finish();
    }
    if let Some(var_194) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_194).into()),
        );
    }
    if let Some(var_195) = &input.next_token {
        object.key("NextToken").string(var_195.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_current_user_data_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetCurrentUserDataInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_196) = &input.filters {
        let mut object_197 = object.key("Filters").start_object();
        crate::json_ser::serialize_structure_crate_model_user_data_filters(
            &mut object_197,
            var_196,
        )?;
        object_197.finish();
    }
    if let Some(var_198) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_198).into()),
        );
    }
    if let Some(var_199) = &input.next_token {
        object.key("NextToken").string(var_199.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_metric_data_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetMetricDataInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_200) = &input.end_time {
        object
            .key("EndTime")
            .date_time(var_200, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_201) = &input.filters {
        let mut object_202 = object.key("Filters").start_object();
        crate::json_ser::serialize_structure_crate_model_filters(&mut object_202, var_201)?;
        object_202.finish();
    }
    if let Some(var_203) = &input.groupings {
        let mut array_204 = object.key("Groupings").start_array();
        for item_205 in var_203 {
            {
                array_204.value().string(item_205.as_str());
            }
        }
        array_204.finish();
    }
    if let Some(var_206) = &input.historical_metrics {
        let mut array_207 = object.key("HistoricalMetrics").start_array();
        for item_208 in var_206 {
            {
                let mut object_209 = array_207.value().start_object();
                crate::json_ser::serialize_structure_crate_model_historical_metric(
                    &mut object_209,
                    item_208,
                )?;
                object_209.finish();
            }
        }
        array_207.finish();
    }
    if let Some(var_210) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_210).into()),
        );
    }
    if let Some(var_211) = &input.next_token {
        object.key("NextToken").string(var_211.as_str());
    }
    if let Some(var_212) = &input.start_time {
        object
            .key("StartTime")
            .date_time(var_212, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_default_vocabularies_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListDefaultVocabulariesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_213) = &input.language_code {
        object.key("LanguageCode").string(var_213.as_str());
    }
    if input.max_results != 0 {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_results).into()),
        );
    }
    if let Some(var_214) = &input.next_token {
        object.key("NextToken").string(var_214.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_phone_numbers_v2_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListPhoneNumbersV2Input,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_215) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_215).into()),
        );
    }
    if let Some(var_216) = &input.next_token {
        object.key("NextToken").string(var_216.as_str());
    }
    if let Some(var_217) = &input.phone_number_country_codes {
        let mut array_218 = object.key("PhoneNumberCountryCodes").start_array();
        for item_219 in var_217 {
            {
                array_218.value().string(item_219.as_str());
            }
        }
        array_218.finish();
    }
    if let Some(var_220) = &input.phone_number_prefix {
        object.key("PhoneNumberPrefix").string(var_220.as_str());
    }
    if let Some(var_221) = &input.phone_number_types {
        let mut array_222 = object.key("PhoneNumberTypes").start_array();
        for item_223 in var_221 {
            {
                array_222.value().string(item_223.as_str());
            }
        }
        array_222.finish();
    }
    if let Some(var_224) = &input.target_arn {
        object.key("TargetArn").string(var_224.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_user_status_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutUserStatusInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_225) = &input.agent_status_id {
        object.key("AgentStatusId").string(var_225.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_resume_contact_recording_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ResumeContactRecordingInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_226) = &input.contact_id {
        object.key("ContactId").string(var_226.as_str());
    }
    if let Some(var_227) = &input.initial_contact_id {
        object.key("InitialContactId").string(var_227.as_str());
    }
    if let Some(var_228) = &input.instance_id {
        object.key("InstanceId").string(var_228.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_search_available_phone_numbers_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SearchAvailablePhoneNumbersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_229) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_229).into()),
        );
    }
    if let Some(var_230) = &input.next_token {
        object.key("NextToken").string(var_230.as_str());
    }
    if let Some(var_231) = &input.phone_number_country_code {
        object
            .key("PhoneNumberCountryCode")
            .string(var_231.as_str());
    }
    if let Some(var_232) = &input.phone_number_prefix {
        object.key("PhoneNumberPrefix").string(var_232.as_str());
    }
    if let Some(var_233) = &input.phone_number_type {
        object.key("PhoneNumberType").string(var_233.as_str());
    }
    if let Some(var_234) = &input.target_arn {
        object.key("TargetArn").string(var_234.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_search_security_profiles_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SearchSecurityProfilesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_235) = &input.instance_id {
        object.key("InstanceId").string(var_235.as_str());
    }
    if let Some(var_236) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_236).into()),
        );
    }
    if let Some(var_237) = &input.next_token {
        object.key("NextToken").string(var_237.as_str());
    }
    if let Some(var_238) = &input.search_criteria {
        let mut object_239 = object.key("SearchCriteria").start_object();
        crate::json_ser::serialize_structure_crate_model_security_profile_search_criteria(
            &mut object_239,
            var_238,
        )?;
        object_239.finish();
    }
    if let Some(var_240) = &input.search_filter {
        let mut object_241 = object.key("SearchFilter").start_object();
        crate::json_ser::serialize_structure_crate_model_security_profiles_search_filter(
            &mut object_241,
            var_240,
        )?;
        object_241.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_search_users_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SearchUsersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_242) = &input.instance_id {
        object.key("InstanceId").string(var_242.as_str());
    }
    if let Some(var_243) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_243).into()),
        );
    }
    if let Some(var_244) = &input.next_token {
        object.key("NextToken").string(var_244.as_str());
    }
    if let Some(var_245) = &input.search_criteria {
        let mut object_246 = object.key("SearchCriteria").start_object();
        crate::json_ser::serialize_structure_crate_model_user_search_criteria(
            &mut object_246,
            var_245,
        )?;
        object_246.finish();
    }
    if let Some(var_247) = &input.search_filter {
        let mut object_248 = object.key("SearchFilter").start_object();
        crate::json_ser::serialize_structure_crate_model_user_search_filter(
            &mut object_248,
            var_247,
        )?;
        object_248.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_search_vocabularies_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SearchVocabulariesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_249) = &input.language_code {
        object.key("LanguageCode").string(var_249.as_str());
    }
    if input.max_results != 0 {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_results).into()),
        );
    }
    if let Some(var_250) = &input.name_starts_with {
        object.key("NameStartsWith").string(var_250.as_str());
    }
    if let Some(var_251) = &input.next_token {
        object.key("NextToken").string(var_251.as_str());
    }
    if let Some(var_252) = &input.state {
        object.key("State").string(var_252.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_chat_contact_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartChatContactInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_253) = &input.attributes {
        let mut object_254 = object.key("Attributes").start_object();
        for (key_255, value_256) in var_253 {
            {
                object_254.key(key_255).string(value_256.as_str());
            }
        }
        object_254.finish();
    }
    if let Some(var_257) = &input.chat_duration_in_minutes {
        object.key("ChatDurationInMinutes").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_257).into()),
        );
    }
    if let Some(var_258) = &input.client_token {
        object.key("ClientToken").string(var_258.as_str());
    }
    if let Some(var_259) = &input.contact_flow_id {
        object.key("ContactFlowId").string(var_259.as_str());
    }
    if let Some(var_260) = &input.initial_message {
        let mut object_261 = object.key("InitialMessage").start_object();
        crate::json_ser::serialize_structure_crate_model_chat_message(&mut object_261, var_260)?;
        object_261.finish();
    }
    if let Some(var_262) = &input.instance_id {
        object.key("InstanceId").string(var_262.as_str());
    }
    if let Some(var_263) = &input.participant_details {
        let mut object_264 = object.key("ParticipantDetails").start_object();
        crate::json_ser::serialize_structure_crate_model_participant_details(
            &mut object_264,
            var_263,
        )?;
        object_264.finish();
    }
    if let Some(var_265) = &input.supported_messaging_content_types {
        let mut array_266 = object.key("SupportedMessagingContentTypes").start_array();
        for item_267 in var_265 {
            {
                array_266.value().string(item_267.as_str());
            }
        }
        array_266.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_contact_recording_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartContactRecordingInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_268) = &input.contact_id {
        object.key("ContactId").string(var_268.as_str());
    }
    if let Some(var_269) = &input.initial_contact_id {
        object.key("InitialContactId").string(var_269.as_str());
    }
    if let Some(var_270) = &input.instance_id {
        object.key("InstanceId").string(var_270.as_str());
    }
    if let Some(var_271) = &input.voice_recording_configuration {
        let mut object_272 = object.key("VoiceRecordingConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_voice_recording_configuration(
            &mut object_272,
            var_271,
        )?;
        object_272.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_contact_streaming_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartContactStreamingInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_273) = &input.chat_streaming_configuration {
        let mut object_274 = object.key("ChatStreamingConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_chat_streaming_configuration(
            &mut object_274,
            var_273,
        )?;
        object_274.finish();
    }
    if let Some(var_275) = &input.client_token {
        object.key("ClientToken").string(var_275.as_str());
    }
    if let Some(var_276) = &input.contact_id {
        object.key("ContactId").string(var_276.as_str());
    }
    if let Some(var_277) = &input.instance_id {
        object.key("InstanceId").string(var_277.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_outbound_voice_contact_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartOutboundVoiceContactInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_278) = &input.answer_machine_detection_config {
        let mut object_279 = object.key("AnswerMachineDetectionConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_answer_machine_detection_config(
            &mut object_279,
            var_278,
        )?;
        object_279.finish();
    }
    if let Some(var_280) = &input.attributes {
        let mut object_281 = object.key("Attributes").start_object();
        for (key_282, value_283) in var_280 {
            {
                object_281.key(key_282).string(value_283.as_str());
            }
        }
        object_281.finish();
    }
    if let Some(var_284) = &input.campaign_id {
        object.key("CampaignId").string(var_284.as_str());
    }
    if let Some(var_285) = &input.client_token {
        object.key("ClientToken").string(var_285.as_str());
    }
    if let Some(var_286) = &input.contact_flow_id {
        object.key("ContactFlowId").string(var_286.as_str());
    }
    if let Some(var_287) = &input.destination_phone_number {
        object
            .key("DestinationPhoneNumber")
            .string(var_287.as_str());
    }
    if let Some(var_288) = &input.instance_id {
        object.key("InstanceId").string(var_288.as_str());
    }
    if let Some(var_289) = &input.queue_id {
        object.key("QueueId").string(var_289.as_str());
    }
    if let Some(var_290) = &input.source_phone_number {
        object.key("SourcePhoneNumber").string(var_290.as_str());
    }
    if let Some(var_291) = &input.traffic_type {
        object.key("TrafficType").string(var_291.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_task_contact_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartTaskContactInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_292) = &input.attributes {
        let mut object_293 = object.key("Attributes").start_object();
        for (key_294, value_295) in var_292 {
            {
                object_293.key(key_294).string(value_295.as_str());
            }
        }
        object_293.finish();
    }
    if let Some(var_296) = &input.client_token {
        object.key("ClientToken").string(var_296.as_str());
    }
    if let Some(var_297) = &input.contact_flow_id {
        object.key("ContactFlowId").string(var_297.as_str());
    }
    if let Some(var_298) = &input.description {
        object.key("Description").string(var_298.as_str());
    }
    if let Some(var_299) = &input.instance_id {
        object.key("InstanceId").string(var_299.as_str());
    }
    if let Some(var_300) = &input.name {
        object.key("Name").string(var_300.as_str());
    }
    if let Some(var_301) = &input.previous_contact_id {
        object.key("PreviousContactId").string(var_301.as_str());
    }
    if let Some(var_302) = &input.quick_connect_id {
        object.key("QuickConnectId").string(var_302.as_str());
    }
    if let Some(var_303) = &input.references {
        let mut object_304 = object.key("References").start_object();
        for (key_305, value_306) in var_303 {
            {
                let mut object_307 = object_304.key(key_305).start_object();
                crate::json_ser::serialize_structure_crate_model_reference(
                    &mut object_307,
                    value_306,
                )?;
                object_307.finish();
            }
        }
        object_304.finish();
    }
    if let Some(var_308) = &input.scheduled_time {
        object
            .key("ScheduledTime")
            .date_time(var_308, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_309) = &input.task_template_id {
        object.key("TaskTemplateId").string(var_309.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_contact_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopContactInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_310) = &input.contact_id {
        object.key("ContactId").string(var_310.as_str());
    }
    if let Some(var_311) = &input.instance_id {
        object.key("InstanceId").string(var_311.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_contact_recording_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopContactRecordingInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_312) = &input.contact_id {
        object.key("ContactId").string(var_312.as_str());
    }
    if let Some(var_313) = &input.initial_contact_id {
        object.key("InitialContactId").string(var_313.as_str());
    }
    if let Some(var_314) = &input.instance_id {
        object.key("InstanceId").string(var_314.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_contact_streaming_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopContactStreamingInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_315) = &input.contact_id {
        object.key("ContactId").string(var_315.as_str());
    }
    if let Some(var_316) = &input.instance_id {
        object.key("InstanceId").string(var_316.as_str());
    }
    if let Some(var_317) = &input.streaming_id {
        object.key("StreamingId").string(var_317.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_suspend_contact_recording_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SuspendContactRecordingInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_318) = &input.contact_id {
        object.key("ContactId").string(var_318.as_str());
    }
    if let Some(var_319) = &input.initial_contact_id {
        object.key("InitialContactId").string(var_319.as_str());
    }
    if let Some(var_320) = &input.instance_id {
        object.key("InstanceId").string(var_320.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_321) = &input.tags {
        let mut object_322 = object.key("tags").start_object();
        for (key_323, value_324) in var_321 {
            {
                object_322.key(key_323).string(value_324.as_str());
            }
        }
        object_322.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_transfer_contact_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TransferContactInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_325) = &input.client_token {
        object.key("ClientToken").string(var_325.as_str());
    }
    if let Some(var_326) = &input.contact_flow_id {
        object.key("ContactFlowId").string(var_326.as_str());
    }
    if let Some(var_327) = &input.contact_id {
        object.key("ContactId").string(var_327.as_str());
    }
    if let Some(var_328) = &input.instance_id {
        object.key("InstanceId").string(var_328.as_str());
    }
    if let Some(var_329) = &input.queue_id {
        object.key("QueueId").string(var_329.as_str());
    }
    if let Some(var_330) = &input.user_id {
        object.key("UserId").string(var_330.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_agent_status_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateAgentStatusInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_331) = &input.description {
        object.key("Description").string(var_331.as_str());
    }
    if let Some(var_332) = &input.display_order {
        object.key("DisplayOrder").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_332).into()),
        );
    }
    if let Some(var_333) = &input.name {
        object.key("Name").string(var_333.as_str());
    }
    if input.reset_order_number {
        object
            .key("ResetOrderNumber")
            .boolean(input.reset_order_number);
    }
    if let Some(var_334) = &input.state {
        object.key("State").string(var_334.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_contact_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateContactInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_335) = &input.description {
        object.key("Description").string(var_335.as_str());
    }
    if let Some(var_336) = &input.name {
        object.key("Name").string(var_336.as_str());
    }
    if let Some(var_337) = &input.references {
        let mut object_338 = object.key("References").start_object();
        for (key_339, value_340) in var_337 {
            {
                let mut object_341 = object_338.key(key_339).start_object();
                crate::json_ser::serialize_structure_crate_model_reference(
                    &mut object_341,
                    value_340,
                )?;
                object_341.finish();
            }
        }
        object_338.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_contact_attributes_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateContactAttributesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_342) = &input.attributes {
        let mut object_343 = object.key("Attributes").start_object();
        for (key_344, value_345) in var_342 {
            {
                object_343.key(key_344).string(value_345.as_str());
            }
        }
        object_343.finish();
    }
    if let Some(var_346) = &input.initial_contact_id {
        object.key("InitialContactId").string(var_346.as_str());
    }
    if let Some(var_347) = &input.instance_id {
        object.key("InstanceId").string(var_347.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_contact_flow_content_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateContactFlowContentInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_348) = &input.content {
        object.key("Content").string(var_348.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_contact_flow_metadata_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateContactFlowMetadataInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_349) = &input.contact_flow_state {
        object.key("ContactFlowState").string(var_349.as_str());
    }
    if let Some(var_350) = &input.description {
        object.key("Description").string(var_350.as_str());
    }
    if let Some(var_351) = &input.name {
        object.key("Name").string(var_351.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_contact_flow_module_content_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateContactFlowModuleContentInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_352) = &input.content {
        object.key("Content").string(var_352.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_contact_flow_module_metadata_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateContactFlowModuleMetadataInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_353) = &input.description {
        object.key("Description").string(var_353.as_str());
    }
    if let Some(var_354) = &input.name {
        object.key("Name").string(var_354.as_str());
    }
    if let Some(var_355) = &input.state {
        object.key("State").string(var_355.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_contact_flow_name_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateContactFlowNameInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_356) = &input.description {
        object.key("Description").string(var_356.as_str());
    }
    if let Some(var_357) = &input.name {
        object.key("Name").string(var_357.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_contact_schedule_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateContactScheduleInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_358) = &input.contact_id {
        object.key("ContactId").string(var_358.as_str());
    }
    if let Some(var_359) = &input.instance_id {
        object.key("InstanceId").string(var_359.as_str());
    }
    if let Some(var_360) = &input.scheduled_time {
        object
            .key("ScheduledTime")
            .date_time(var_360, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_hours_of_operation_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateHoursOfOperationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_361) = &input.config {
        let mut array_362 = object.key("Config").start_array();
        for item_363 in var_361 {
            {
                let mut object_364 = array_362.value().start_object();
                crate::json_ser::serialize_structure_crate_model_hours_of_operation_config(
                    &mut object_364,
                    item_363,
                )?;
                object_364.finish();
            }
        }
        array_362.finish();
    }
    if let Some(var_365) = &input.description {
        object.key("Description").string(var_365.as_str());
    }
    if let Some(var_366) = &input.name {
        object.key("Name").string(var_366.as_str());
    }
    if let Some(var_367) = &input.time_zone {
        object.key("TimeZone").string(var_367.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_instance_attribute_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateInstanceAttributeInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_368) = &input.value {
        object.key("Value").string(var_368.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_instance_storage_config_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateInstanceStorageConfigInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_369) = &input.storage_config {
        let mut object_370 = object.key("StorageConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_instance_storage_config(
            &mut object_370,
            var_369,
        )?;
        object_370.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_phone_number_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdatePhoneNumberInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_371) = &input.client_token {
        object.key("ClientToken").string(var_371.as_str());
    }
    if let Some(var_372) = &input.target_arn {
        object.key("TargetArn").string(var_372.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_queue_hours_of_operation_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateQueueHoursOfOperationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_373) = &input.hours_of_operation_id {
        object.key("HoursOfOperationId").string(var_373.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_queue_max_contacts_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateQueueMaxContactsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_374) = &input.max_contacts {
        object.key("MaxContacts").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_374).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_queue_name_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateQueueNameInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_375) = &input.description {
        object.key("Description").string(var_375.as_str());
    }
    if let Some(var_376) = &input.name {
        object.key("Name").string(var_376.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_queue_outbound_caller_config_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateQueueOutboundCallerConfigInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_377) = &input.outbound_caller_config {
        let mut object_378 = object.key("OutboundCallerConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_outbound_caller_config(
            &mut object_378,
            var_377,
        )?;
        object_378.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_queue_status_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateQueueStatusInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_379) = &input.status {
        object.key("Status").string(var_379.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_quick_connect_config_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateQuickConnectConfigInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_380) = &input.quick_connect_config {
        let mut object_381 = object.key("QuickConnectConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_quick_connect_config(
            &mut object_381,
            var_380,
        )?;
        object_381.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_quick_connect_name_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateQuickConnectNameInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_382) = &input.description {
        object.key("Description").string(var_382.as_str());
    }
    if let Some(var_383) = &input.name {
        object.key("Name").string(var_383.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_routing_profile_concurrency_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateRoutingProfileConcurrencyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_384) = &input.media_concurrencies {
        let mut array_385 = object.key("MediaConcurrencies").start_array();
        for item_386 in var_384 {
            {
                let mut object_387 = array_385.value().start_object();
                crate::json_ser::serialize_structure_crate_model_media_concurrency(
                    &mut object_387,
                    item_386,
                )?;
                object_387.finish();
            }
        }
        array_385.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_routing_profile_default_outbound_queue_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateRoutingProfileDefaultOutboundQueueInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_388) = &input.default_outbound_queue_id {
        object
            .key("DefaultOutboundQueueId")
            .string(var_388.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_routing_profile_name_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateRoutingProfileNameInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_389) = &input.description {
        object.key("Description").string(var_389.as_str());
    }
    if let Some(var_390) = &input.name {
        object.key("Name").string(var_390.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_routing_profile_queues_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateRoutingProfileQueuesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_391) = &input.queue_configs {
        let mut array_392 = object.key("QueueConfigs").start_array();
        for item_393 in var_391 {
            {
                let mut object_394 = array_392.value().start_object();
                crate::json_ser::serialize_structure_crate_model_routing_profile_queue_config(
                    &mut object_394,
                    item_393,
                )?;
                object_394.finish();
            }
        }
        array_392.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_security_profile_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateSecurityProfileInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_395) = &input.description {
        object.key("Description").string(var_395.as_str());
    }
    if let Some(var_396) = &input.permissions {
        let mut array_397 = object.key("Permissions").start_array();
        for item_398 in var_396 {
            {
                array_397.value().string(item_398.as_str());
            }
        }
        array_397.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_task_template_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateTaskTemplateInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_399) = &input.constraints {
        let mut object_400 = object.key("Constraints").start_object();
        crate::json_ser::serialize_structure_crate_model_task_template_constraints(
            &mut object_400,
            var_399,
        )?;
        object_400.finish();
    }
    if let Some(var_401) = &input.contact_flow_id {
        object.key("ContactFlowId").string(var_401.as_str());
    }
    if let Some(var_402) = &input.defaults {
        let mut object_403 = object.key("Defaults").start_object();
        crate::json_ser::serialize_structure_crate_model_task_template_defaults(
            &mut object_403,
            var_402,
        )?;
        object_403.finish();
    }
    if let Some(var_404) = &input.description {
        object.key("Description").string(var_404.as_str());
    }
    if let Some(var_405) = &input.fields {
        let mut array_406 = object.key("Fields").start_array();
        for item_407 in var_405 {
            {
                let mut object_408 = array_406.value().start_object();
                crate::json_ser::serialize_structure_crate_model_task_template_field(
                    &mut object_408,
                    item_407,
                )?;
                object_408.finish();
            }
        }
        array_406.finish();
    }
    if let Some(var_409) = &input.name {
        object.key("Name").string(var_409.as_str());
    }
    if let Some(var_410) = &input.status {
        object.key("Status").string(var_410.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_user_hierarchy_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateUserHierarchyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_411) = &input.hierarchy_group_id {
        object.key("HierarchyGroupId").string(var_411.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_user_hierarchy_group_name_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateUserHierarchyGroupNameInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_412) = &input.name {
        object.key("Name").string(var_412.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_user_hierarchy_structure_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateUserHierarchyStructureInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_413) = &input.hierarchy_structure {
        let mut object_414 = object.key("HierarchyStructure").start_object();
        crate::json_ser::serialize_structure_crate_model_hierarchy_structure_update(
            &mut object_414,
            var_413,
        )?;
        object_414.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_user_identity_info_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateUserIdentityInfoInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_415) = &input.identity_info {
        let mut object_416 = object.key("IdentityInfo").start_object();
        crate::json_ser::serialize_structure_crate_model_user_identity_info(
            &mut object_416,
            var_415,
        )?;
        object_416.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_user_phone_config_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateUserPhoneConfigInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_417) = &input.phone_config {
        let mut object_418 = object.key("PhoneConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_user_phone_config(
            &mut object_418,
            var_417,
        )?;
        object_418.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_user_routing_profile_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateUserRoutingProfileInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_419) = &input.routing_profile_id {
        object.key("RoutingProfileId").string(var_419.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_user_security_profiles_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateUserSecurityProfilesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_420) = &input.security_profile_ids {
        let mut array_421 = object.key("SecurityProfileIds").start_array();
        for item_422 in var_420 {
            {
                array_421.value().string(item_422.as_str());
            }
        }
        array_421.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_lex_bot(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LexBot,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_423) = &input.name {
        object.key("Name").string(var_423.as_str());
    }
    if let Some(var_424) = &input.lex_region {
        object.key("LexRegion").string(var_424.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_lex_v2_bot(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LexV2Bot,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_425) = &input.alias_arn {
        object.key("AliasArn").string(var_425.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_instance_storage_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InstanceStorageConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_426) = &input.association_id {
        object.key("AssociationId").string(var_426.as_str());
    }
    if let Some(var_427) = &input.storage_type {
        object.key("StorageType").string(var_427.as_str());
    }
    if let Some(var_428) = &input.s3_config {
        let mut object_429 = object.key("S3Config").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_config(&mut object_429, var_428)?;
        object_429.finish();
    }
    if let Some(var_430) = &input.kinesis_video_stream_config {
        let mut object_431 = object.key("KinesisVideoStreamConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_kinesis_video_stream_config(
            &mut object_431,
            var_430,
        )?;
        object_431.finish();
    }
    if let Some(var_432) = &input.kinesis_stream_config {
        let mut object_433 = object.key("KinesisStreamConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_kinesis_stream_config(
            &mut object_433,
            var_432,
        )?;
        object_433.finish();
    }
    if let Some(var_434) = &input.kinesis_firehose_config {
        let mut object_435 = object.key("KinesisFirehoseConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_kinesis_firehose_config(
            &mut object_435,
            var_434,
        )?;
        object_435.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_routing_profile_queue_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RoutingProfileQueueConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_436) = &input.queue_reference {
        let mut object_437 = object.key("QueueReference").start_object();
        crate::json_ser::serialize_structure_crate_model_routing_profile_queue_reference(
            &mut object_437,
            var_436,
        )?;
        object_437.finish();
    }
    if let Some(var_438) = &input.priority {
        object.key("Priority").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_438).into()),
        );
    }
    if let Some(var_439) = &input.delay {
        object.key("Delay").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_439).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_hours_of_operation_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HoursOfOperationConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_440) = &input.day {
        object.key("Day").string(var_440.as_str());
    }
    if let Some(var_441) = &input.start_time {
        let mut object_442 = object.key("StartTime").start_object();
        crate::json_ser::serialize_structure_crate_model_hours_of_operation_time_slice(
            &mut object_442,
            var_441,
        )?;
        object_442.finish();
    }
    if let Some(var_443) = &input.end_time {
        let mut object_444 = object.key("EndTime").start_object();
        crate::json_ser::serialize_structure_crate_model_hours_of_operation_time_slice(
            &mut object_444,
            var_443,
        )?;
        object_444.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_outbound_caller_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OutboundCallerConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_445) = &input.outbound_caller_id_name {
        object.key("OutboundCallerIdName").string(var_445.as_str());
    }
    if let Some(var_446) = &input.outbound_caller_id_number_id {
        object
            .key("OutboundCallerIdNumberId")
            .string(var_446.as_str());
    }
    if let Some(var_447) = &input.outbound_flow_id {
        object.key("OutboundFlowId").string(var_447.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_quick_connect_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::QuickConnectConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_448) = &input.quick_connect_type {
        object.key("QuickConnectType").string(var_448.as_str());
    }
    if let Some(var_449) = &input.user_config {
        let mut object_450 = object.key("UserConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_user_quick_connect_config(
            &mut object_450,
            var_449,
        )?;
        object_450.finish();
    }
    if let Some(var_451) = &input.queue_config {
        let mut object_452 = object.key("QueueConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_queue_quick_connect_config(
            &mut object_452,
            var_451,
        )?;
        object_452.finish();
    }
    if let Some(var_453) = &input.phone_config {
        let mut object_454 = object.key("PhoneConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_phone_number_quick_connect_config(
            &mut object_454,
            var_453,
        )?;
        object_454.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_media_concurrency(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MediaConcurrency,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_455) = &input.channel {
        object.key("Channel").string(var_455.as_str());
    }
    {
        object.key("Concurrency").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.concurrency).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_task_template_constraints(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TaskTemplateConstraints,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_456) = &input.required_fields {
        let mut array_457 = object.key("RequiredFields").start_array();
        for item_458 in var_456 {
            {
                let mut object_459 = array_457.value().start_object();
                crate::json_ser::serialize_structure_crate_model_required_field_info(
                    &mut object_459,
                    item_458,
                )?;
                object_459.finish();
            }
        }
        array_457.finish();
    }
    if let Some(var_460) = &input.read_only_fields {
        let mut array_461 = object.key("ReadOnlyFields").start_array();
        for item_462 in var_460 {
            {
                let mut object_463 = array_461.value().start_object();
                crate::json_ser::serialize_structure_crate_model_read_only_field_info(
                    &mut object_463,
                    item_462,
                )?;
                object_463.finish();
            }
        }
        array_461.finish();
    }
    if let Some(var_464) = &input.invisible_fields {
        let mut array_465 = object.key("InvisibleFields").start_array();
        for item_466 in var_464 {
            {
                let mut object_467 = array_465.value().start_object();
                crate::json_ser::serialize_structure_crate_model_invisible_field_info(
                    &mut object_467,
                    item_466,
                )?;
                object_467.finish();
            }
        }
        array_465.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_task_template_defaults(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TaskTemplateDefaults,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_468) = &input.default_field_values {
        let mut array_469 = object.key("DefaultFieldValues").start_array();
        for item_470 in var_468 {
            {
                let mut object_471 = array_469.value().start_object();
                crate::json_ser::serialize_structure_crate_model_task_template_default_field_value(
                    &mut object_471,
                    item_470,
                )?;
                object_471.finish();
            }
        }
        array_469.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_task_template_field(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TaskTemplateField,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_472) = &input.id {
        let mut object_473 = object.key("Id").start_object();
        crate::json_ser::serialize_structure_crate_model_task_template_field_identifier(
            &mut object_473,
            var_472,
        )?;
        object_473.finish();
    }
    if let Some(var_474) = &input.description {
        object.key("Description").string(var_474.as_str());
    }
    if let Some(var_475) = &input.r#type {
        object.key("Type").string(var_475.as_str());
    }
    if let Some(var_476) = &input.single_select_options {
        let mut array_477 = object.key("SingleSelectOptions").start_array();
        for item_478 in var_476 {
            {
                array_477.value().string(item_478.as_str());
            }
        }
        array_477.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_user_identity_info(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UserIdentityInfo,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_479) = &input.first_name {
        object.key("FirstName").string(var_479.as_str());
    }
    if let Some(var_480) = &input.last_name {
        object.key("LastName").string(var_480.as_str());
    }
    if let Some(var_481) = &input.email {
        object.key("Email").string(var_481.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_user_phone_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UserPhoneConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_482) = &input.phone_type {
        object.key("PhoneType").string(var_482.as_str());
    }
    if input.auto_accept {
        object.key("AutoAccept").boolean(input.auto_accept);
    }
    if input.after_contact_work_time_limit != 0 {
        object.key("AfterContactWorkTimeLimit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.after_contact_work_time_limit).into()),
        );
    }
    if let Some(var_483) = &input.desk_phone_number {
        object.key("DeskPhoneNumber").string(var_483.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_routing_profile_queue_reference(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RoutingProfileQueueReference,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_484) = &input.queue_id {
        object.key("QueueId").string(var_484.as_str());
    }
    if let Some(var_485) = &input.channel {
        object.key("Channel").string(var_485.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_current_metric(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CurrentMetric,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_486) = &input.name {
        object.key("Name").string(var_486.as_str());
    }
    if let Some(var_487) = &input.unit {
        object.key("Unit").string(var_487.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_filters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Filters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_488) = &input.queues {
        let mut array_489 = object.key("Queues").start_array();
        for item_490 in var_488 {
            {
                array_489.value().string(item_490.as_str());
            }
        }
        array_489.finish();
    }
    if let Some(var_491) = &input.channels {
        let mut array_492 = object.key("Channels").start_array();
        for item_493 in var_491 {
            {
                array_492.value().string(item_493.as_str());
            }
        }
        array_492.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_user_data_filters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UserDataFilters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_494) = &input.queues {
        let mut array_495 = object.key("Queues").start_array();
        for item_496 in var_494 {
            {
                array_495.value().string(item_496.as_str());
            }
        }
        array_495.finish();
    }
    if let Some(var_497) = &input.contact_filter {
        let mut object_498 = object.key("ContactFilter").start_object();
        crate::json_ser::serialize_structure_crate_model_contact_filter(&mut object_498, var_497)?;
        object_498.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_historical_metric(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HistoricalMetric,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_499) = &input.name {
        object.key("Name").string(var_499.as_str());
    }
    if let Some(var_500) = &input.threshold {
        let mut object_501 = object.key("Threshold").start_object();
        crate::json_ser::serialize_structure_crate_model_threshold(&mut object_501, var_500)?;
        object_501.finish();
    }
    if let Some(var_502) = &input.statistic {
        object.key("Statistic").string(var_502.as_str());
    }
    if let Some(var_503) = &input.unit {
        object.key("Unit").string(var_503.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_security_profile_search_criteria(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SecurityProfileSearchCriteria,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_504) = &input.or_conditions {
        let mut array_505 = object.key("OrConditions").start_array();
        for item_506 in var_504 {
            {
                let mut object_507 = array_505.value().start_object();
                crate::json_ser::serialize_structure_crate_model_security_profile_search_criteria(
                    &mut object_507,
                    item_506,
                )?;
                object_507.finish();
            }
        }
        array_505.finish();
    }
    if let Some(var_508) = &input.and_conditions {
        let mut array_509 = object.key("AndConditions").start_array();
        for item_510 in var_508 {
            {
                let mut object_511 = array_509.value().start_object();
                crate::json_ser::serialize_structure_crate_model_security_profile_search_criteria(
                    &mut object_511,
                    item_510,
                )?;
                object_511.finish();
            }
        }
        array_509.finish();
    }
    if let Some(var_512) = &input.string_condition {
        let mut object_513 = object.key("StringCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_string_condition(
            &mut object_513,
            var_512,
        )?;
        object_513.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_security_profiles_search_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SecurityProfilesSearchFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_514) = &input.tag_filter {
        let mut object_515 = object.key("TagFilter").start_object();
        crate::json_ser::serialize_structure_crate_model_control_plane_tag_filter(
            &mut object_515,
            var_514,
        )?;
        object_515.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_user_search_criteria(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UserSearchCriteria,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_516) = &input.or_conditions {
        let mut array_517 = object.key("OrConditions").start_array();
        for item_518 in var_516 {
            {
                let mut object_519 = array_517.value().start_object();
                crate::json_ser::serialize_structure_crate_model_user_search_criteria(
                    &mut object_519,
                    item_518,
                )?;
                object_519.finish();
            }
        }
        array_517.finish();
    }
    if let Some(var_520) = &input.and_conditions {
        let mut array_521 = object.key("AndConditions").start_array();
        for item_522 in var_520 {
            {
                let mut object_523 = array_521.value().start_object();
                crate::json_ser::serialize_structure_crate_model_user_search_criteria(
                    &mut object_523,
                    item_522,
                )?;
                object_523.finish();
            }
        }
        array_521.finish();
    }
    if let Some(var_524) = &input.string_condition {
        let mut object_525 = object.key("StringCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_string_condition(
            &mut object_525,
            var_524,
        )?;
        object_525.finish();
    }
    if let Some(var_526) = &input.hierarchy_group_condition {
        let mut object_527 = object.key("HierarchyGroupCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_hierarchy_group_condition(
            &mut object_527,
            var_526,
        )?;
        object_527.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_user_search_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UserSearchFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_528) = &input.tag_filter {
        let mut object_529 = object.key("TagFilter").start_object();
        crate::json_ser::serialize_structure_crate_model_control_plane_tag_filter(
            &mut object_529,
            var_528,
        )?;
        object_529.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_chat_message(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ChatMessage,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_530) = &input.content_type {
        object.key("ContentType").string(var_530.as_str());
    }
    if let Some(var_531) = &input.content {
        object.key("Content").string(var_531.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_participant_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ParticipantDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_532) = &input.display_name {
        object.key("DisplayName").string(var_532.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_voice_recording_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VoiceRecordingConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_533) = &input.voice_recording_track {
        object.key("VoiceRecordingTrack").string(var_533.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_chat_streaming_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ChatStreamingConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_534) = &input.streaming_endpoint_arn {
        object.key("StreamingEndpointArn").string(var_534.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_answer_machine_detection_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AnswerMachineDetectionConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.enable_answer_machine_detection {
        object
            .key("EnableAnswerMachineDetection")
            .boolean(input.enable_answer_machine_detection);
    }
    if input.await_answer_machine_prompt {
        object
            .key("AwaitAnswerMachinePrompt")
            .boolean(input.await_answer_machine_prompt);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_reference(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Reference,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_535) = &input.value {
        object.key("Value").string(var_535.as_str());
    }
    if let Some(var_536) = &input.r#type {
        object.key("Type").string(var_536.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_hierarchy_structure_update(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HierarchyStructureUpdate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_537) = &input.level_one {
        let mut object_538 = object.key("LevelOne").start_object();
        crate::json_ser::serialize_structure_crate_model_hierarchy_level_update(
            &mut object_538,
            var_537,
        )?;
        object_538.finish();
    }
    if let Some(var_539) = &input.level_two {
        let mut object_540 = object.key("LevelTwo").start_object();
        crate::json_ser::serialize_structure_crate_model_hierarchy_level_update(
            &mut object_540,
            var_539,
        )?;
        object_540.finish();
    }
    if let Some(var_541) = &input.level_three {
        let mut object_542 = object.key("LevelThree").start_object();
        crate::json_ser::serialize_structure_crate_model_hierarchy_level_update(
            &mut object_542,
            var_541,
        )?;
        object_542.finish();
    }
    if let Some(var_543) = &input.level_four {
        let mut object_544 = object.key("LevelFour").start_object();
        crate::json_ser::serialize_structure_crate_model_hierarchy_level_update(
            &mut object_544,
            var_543,
        )?;
        object_544.finish();
    }
    if let Some(var_545) = &input.level_five {
        let mut object_546 = object.key("LevelFive").start_object();
        crate::json_ser::serialize_structure_crate_model_hierarchy_level_update(
            &mut object_546,
            var_545,
        )?;
        object_546.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3Config,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_547) = &input.bucket_name {
        object.key("BucketName").string(var_547.as_str());
    }
    if let Some(var_548) = &input.bucket_prefix {
        object.key("BucketPrefix").string(var_548.as_str());
    }
    if let Some(var_549) = &input.encryption_config {
        let mut object_550 = object.key("EncryptionConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_encryption_config(
            &mut object_550,
            var_549,
        )?;
        object_550.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_kinesis_video_stream_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KinesisVideoStreamConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_551) = &input.prefix {
        object.key("Prefix").string(var_551.as_str());
    }
    {
        object.key("RetentionPeriodHours").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.retention_period_hours).into()),
        );
    }
    if let Some(var_552) = &input.encryption_config {
        let mut object_553 = object.key("EncryptionConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_encryption_config(
            &mut object_553,
            var_552,
        )?;
        object_553.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_kinesis_stream_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KinesisStreamConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_554) = &input.stream_arn {
        object.key("StreamArn").string(var_554.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_kinesis_firehose_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KinesisFirehoseConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_555) = &input.firehose_arn {
        object.key("FirehoseArn").string(var_555.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_hours_of_operation_time_slice(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HoursOfOperationTimeSlice,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_556) = &input.hours {
        object.key("Hours").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_556).into()),
        );
    }
    if let Some(var_557) = &input.minutes {
        object.key("Minutes").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_557).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_user_quick_connect_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UserQuickConnectConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_558) = &input.user_id {
        object.key("UserId").string(var_558.as_str());
    }
    if let Some(var_559) = &input.contact_flow_id {
        object.key("ContactFlowId").string(var_559.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_queue_quick_connect_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::QueueQuickConnectConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_560) = &input.queue_id {
        object.key("QueueId").string(var_560.as_str());
    }
    if let Some(var_561) = &input.contact_flow_id {
        object.key("ContactFlowId").string(var_561.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_phone_number_quick_connect_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PhoneNumberQuickConnectConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_562) = &input.phone_number {
        object.key("PhoneNumber").string(var_562.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_required_field_info(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RequiredFieldInfo,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_563) = &input.id {
        let mut object_564 = object.key("Id").start_object();
        crate::json_ser::serialize_structure_crate_model_task_template_field_identifier(
            &mut object_564,
            var_563,
        )?;
        object_564.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_read_only_field_info(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ReadOnlyFieldInfo,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_565) = &input.id {
        let mut object_566 = object.key("Id").start_object();
        crate::json_ser::serialize_structure_crate_model_task_template_field_identifier(
            &mut object_566,
            var_565,
        )?;
        object_566.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_invisible_field_info(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InvisibleFieldInfo,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_567) = &input.id {
        let mut object_568 = object.key("Id").start_object();
        crate::json_ser::serialize_structure_crate_model_task_template_field_identifier(
            &mut object_568,
            var_567,
        )?;
        object_568.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_task_template_default_field_value(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TaskTemplateDefaultFieldValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_569) = &input.id {
        let mut object_570 = object.key("Id").start_object();
        crate::json_ser::serialize_structure_crate_model_task_template_field_identifier(
            &mut object_570,
            var_569,
        )?;
        object_570.finish();
    }
    if let Some(var_571) = &input.default_value {
        object.key("DefaultValue").string(var_571.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_task_template_field_identifier(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TaskTemplateFieldIdentifier,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_572) = &input.name {
        object.key("Name").string(var_572.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_contact_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ContactFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_573) = &input.contact_states {
        let mut array_574 = object.key("ContactStates").start_array();
        for item_575 in var_573 {
            {
                array_574.value().string(item_575.as_str());
            }
        }
        array_574.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_threshold(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Threshold,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_576) = &input.comparison {
        object.key("Comparison").string(var_576.as_str());
    }
    if let Some(var_577) = &input.threshold_value {
        object.key("ThresholdValue").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_577).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_string_condition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StringCondition,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_578) = &input.field_name {
        object.key("FieldName").string(var_578.as_str());
    }
    if let Some(var_579) = &input.value {
        object.key("Value").string(var_579.as_str());
    }
    if let Some(var_580) = &input.comparison_type {
        object.key("ComparisonType").string(var_580.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_control_plane_tag_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ControlPlaneTagFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_581) = &input.or_conditions {
        let mut array_582 = object.key("OrConditions").start_array();
        for item_583 in var_581 {
            {
                let mut array_584 = array_582.value().start_array();
                for item_585 in item_583 {
                    {
                        let mut object_586 = array_584.value().start_object();
                        crate::json_ser::serialize_structure_crate_model_tag_condition(
                            &mut object_586,
                            item_585,
                        )?;
                        object_586.finish();
                    }
                }
                array_584.finish();
            }
        }
        array_582.finish();
    }
    if let Some(var_587) = &input.and_conditions {
        let mut array_588 = object.key("AndConditions").start_array();
        for item_589 in var_587 {
            {
                let mut object_590 = array_588.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag_condition(
                    &mut object_590,
                    item_589,
                )?;
                object_590.finish();
            }
        }
        array_588.finish();
    }
    if let Some(var_591) = &input.tag_condition {
        let mut object_592 = object.key("TagCondition").start_object();
        crate::json_ser::serialize_structure_crate_model_tag_condition(&mut object_592, var_591)?;
        object_592.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_hierarchy_group_condition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HierarchyGroupCondition,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_593) = &input.value {
        object.key("Value").string(var_593.as_str());
    }
    if let Some(var_594) = &input.hierarchy_group_match_type {
        object
            .key("HierarchyGroupMatchType")
            .string(var_594.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_hierarchy_level_update(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HierarchyLevelUpdate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_595) = &input.name {
        object.key("Name").string(var_595.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_encryption_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EncryptionConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_596) = &input.encryption_type {
        object.key("EncryptionType").string(var_596.as_str());
    }
    if let Some(var_597) = &input.key_id {
        object.key("KeyId").string(var_597.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tag_condition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TagCondition,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_598) = &input.tag_key {
        object.key("TagKey").string(var_598.as_str());
    }
    if let Some(var_599) = &input.tag_value {
        object.key("TagValue").string(var_599.as_str());
    }
    Ok(())
}
