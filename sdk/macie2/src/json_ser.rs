// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_accept_invitation_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AcceptInvitationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.administrator_account_id {
        object.key("administratorAccountId").string(var_1.as_str());
    }
    if let Some(var_2) = &input.invitation_id {
        object.key("invitationId").string(var_2.as_str());
    }
    if let Some(var_3) = &input.master_account {
        object.key("masterAccount").string(var_3.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_get_custom_data_identifiers_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchGetCustomDataIdentifiersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_4) = &input.ids {
        let mut array_5 = object.key("ids").start_array();
        for item_6 in var_4 {
            {
                array_5.value().string(item_6.as_str());
            }
        }
        array_5.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_classification_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateClassificationJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_7) = &input.client_token {
        object.key("clientToken").string(var_7.as_str());
    }
    if let Some(var_8) = &input.custom_data_identifier_ids {
        let mut array_9 = object.key("customDataIdentifierIds").start_array();
        for item_10 in var_8 {
            {
                array_9.value().string(item_10.as_str());
            }
        }
        array_9.finish();
    }
    if let Some(var_11) = &input.description {
        object.key("description").string(var_11.as_str());
    }
    if input.initial_run {
        object.key("initialRun").boolean(input.initial_run);
    }
    if let Some(var_12) = &input.job_type {
        object.key("jobType").string(var_12.as_str());
    }
    if let Some(var_13) = &input.managed_data_identifier_ids {
        let mut array_14 = object.key("managedDataIdentifierIds").start_array();
        for item_15 in var_13 {
            {
                array_14.value().string(item_15.as_str());
            }
        }
        array_14.finish();
    }
    if let Some(var_16) = &input.managed_data_identifier_selector {
        object
            .key("managedDataIdentifierSelector")
            .string(var_16.as_str());
    }
    if let Some(var_17) = &input.name {
        object.key("name").string(var_17.as_str());
    }
    if let Some(var_18) = &input.s3_job_definition {
        let mut object_19 = object.key("s3JobDefinition").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_job_definition(&mut object_19, var_18)?;
        object_19.finish();
    }
    if input.sampling_percentage != 0 {
        object.key("samplingPercentage").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.sampling_percentage).into()),
        );
    }
    if let Some(var_20) = &input.schedule_frequency {
        let mut object_21 = object.key("scheduleFrequency").start_object();
        crate::json_ser::serialize_structure_crate_model_job_schedule_frequency(
            &mut object_21,
            var_20,
        )?;
        object_21.finish();
    }
    if let Some(var_22) = &input.tags {
        let mut object_23 = object.key("tags").start_object();
        for (key_24, value_25) in var_22 {
            {
                object_23.key(key_24).string(value_25.as_str());
            }
        }
        object_23.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_custom_data_identifier_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateCustomDataIdentifierInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_26) = &input.client_token {
        object.key("clientToken").string(var_26.as_str());
    }
    if let Some(var_27) = &input.description {
        object.key("description").string(var_27.as_str());
    }
    if let Some(var_28) = &input.ignore_words {
        let mut array_29 = object.key("ignoreWords").start_array();
        for item_30 in var_28 {
            {
                array_29.value().string(item_30.as_str());
            }
        }
        array_29.finish();
    }
    if let Some(var_31) = &input.keywords {
        let mut array_32 = object.key("keywords").start_array();
        for item_33 in var_31 {
            {
                array_32.value().string(item_33.as_str());
            }
        }
        array_32.finish();
    }
    if input.maximum_match_distance != 0 {
        object.key("maximumMatchDistance").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.maximum_match_distance).into()),
        );
    }
    if let Some(var_34) = &input.name {
        object.key("name").string(var_34.as_str());
    }
    if let Some(var_35) = &input.regex {
        object.key("regex").string(var_35.as_str());
    }
    if let Some(var_36) = &input.severity_levels {
        let mut array_37 = object.key("severityLevels").start_array();
        for item_38 in var_36 {
            {
                let mut object_39 = array_37.value().start_object();
                crate::json_ser::serialize_structure_crate_model_severity_level(
                    &mut object_39,
                    item_38,
                )?;
                object_39.finish();
            }
        }
        array_37.finish();
    }
    if let Some(var_40) = &input.tags {
        let mut object_41 = object.key("tags").start_object();
        for (key_42, value_43) in var_40 {
            {
                object_41.key(key_42).string(value_43.as_str());
            }
        }
        object_41.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_findings_filter_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateFindingsFilterInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_44) = &input.action {
        object.key("action").string(var_44.as_str());
    }
    if let Some(var_45) = &input.client_token {
        object.key("clientToken").string(var_45.as_str());
    }
    if let Some(var_46) = &input.description {
        object.key("description").string(var_46.as_str());
    }
    if let Some(var_47) = &input.finding_criteria {
        let mut object_48 = object.key("findingCriteria").start_object();
        crate::json_ser::serialize_structure_crate_model_finding_criteria(&mut object_48, var_47)?;
        object_48.finish();
    }
    if let Some(var_49) = &input.name {
        object.key("name").string(var_49.as_str());
    }
    if input.position != 0 {
        object.key("position").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.position).into()),
        );
    }
    if let Some(var_50) = &input.tags {
        let mut object_51 = object.key("tags").start_object();
        for (key_52, value_53) in var_50 {
            {
                object_51.key(key_52).string(value_53.as_str());
            }
        }
        object_51.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_invitations_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateInvitationsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_54) = &input.account_ids {
        let mut array_55 = object.key("accountIds").start_array();
        for item_56 in var_54 {
            {
                array_55.value().string(item_56.as_str());
            }
        }
        array_55.finish();
    }
    if input.disable_email_notification {
        object
            .key("disableEmailNotification")
            .boolean(input.disable_email_notification);
    }
    if let Some(var_57) = &input.message {
        object.key("message").string(var_57.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_member_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateMemberInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_58) = &input.account {
        let mut object_59 = object.key("account").start_object();
        crate::json_ser::serialize_structure_crate_model_account_detail(&mut object_59, var_58)?;
        object_59.finish();
    }
    if let Some(var_60) = &input.tags {
        let mut object_61 = object.key("tags").start_object();
        for (key_62, value_63) in var_60 {
            {
                object_61.key(key_62).string(value_63.as_str());
            }
        }
        object_61.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_sample_findings_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateSampleFindingsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_64) = &input.finding_types {
        let mut array_65 = object.key("findingTypes").start_array();
        for item_66 in var_64 {
            {
                array_65.value().string(item_66.as_str());
            }
        }
        array_65.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_decline_invitations_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeclineInvitationsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_67) = &input.account_ids {
        let mut array_68 = object.key("accountIds").start_array();
        for item_69 in var_67 {
            {
                array_68.value().string(item_69.as_str());
            }
        }
        array_68.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_invitations_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteInvitationsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_70) = &input.account_ids {
        let mut array_71 = object.key("accountIds").start_array();
        for item_72 in var_70 {
            {
                array_71.value().string(item_72.as_str());
            }
        }
        array_71.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_buckets_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeBucketsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_73) = &input.criteria {
        let mut object_74 = object.key("criteria").start_object();
        for (key_75, value_76) in var_73 {
            {
                let mut object_77 = object_74.key(key_75).start_object();
                crate::json_ser::serialize_structure_crate_model_bucket_criteria_additional_properties(&mut object_77, value_76)?;
                object_77.finish();
            }
        }
        object_74.finish();
    }
    if input.max_results != 0 {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_results).into()),
        );
    }
    if let Some(var_78) = &input.next_token {
        object.key("nextToken").string(var_78.as_str());
    }
    if let Some(var_79) = &input.sort_criteria {
        let mut object_80 = object.key("sortCriteria").start_object();
        crate::json_ser::serialize_structure_crate_model_bucket_sort_criteria(
            &mut object_80,
            var_79,
        )?;
        object_80.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_enable_macie_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::EnableMacieInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_81) = &input.client_token {
        object.key("clientToken").string(var_81.as_str());
    }
    if let Some(var_82) = &input.finding_publishing_frequency {
        object
            .key("findingPublishingFrequency")
            .string(var_82.as_str());
    }
    if let Some(var_83) = &input.status {
        object.key("status").string(var_83.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_enable_organization_admin_account_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::EnableOrganizationAdminAccountInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_84) = &input.admin_account_id {
        object.key("adminAccountId").string(var_84.as_str());
    }
    if let Some(var_85) = &input.client_token {
        object.key("clientToken").string(var_85.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_bucket_statistics_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetBucketStatisticsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_86) = &input.account_id {
        object.key("accountId").string(var_86.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_findings_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetFindingsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_87) = &input.finding_ids {
        let mut array_88 = object.key("findingIds").start_array();
        for item_89 in var_87 {
            {
                array_88.value().string(item_89.as_str());
            }
        }
        array_88.finish();
    }
    if let Some(var_90) = &input.sort_criteria {
        let mut object_91 = object.key("sortCriteria").start_object();
        crate::json_ser::serialize_structure_crate_model_sort_criteria(&mut object_91, var_90)?;
        object_91.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_finding_statistics_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetFindingStatisticsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_92) = &input.finding_criteria {
        let mut object_93 = object.key("findingCriteria").start_object();
        crate::json_ser::serialize_structure_crate_model_finding_criteria(&mut object_93, var_92)?;
        object_93.finish();
    }
    if let Some(var_94) = &input.group_by {
        object.key("groupBy").string(var_94.as_str());
    }
    if input.size != 0 {
        object.key("size").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.size).into()),
        );
    }
    if let Some(var_95) = &input.sort_criteria {
        let mut object_96 = object.key("sortCriteria").start_object();
        crate::json_ser::serialize_structure_crate_model_finding_statistics_sort_criteria(
            &mut object_96,
            var_95,
        )?;
        object_96.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_usage_statistics_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetUsageStatisticsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_97) = &input.filter_by {
        let mut array_98 = object.key("filterBy").start_array();
        for item_99 in var_97 {
            {
                let mut object_100 = array_98.value().start_object();
                crate::json_ser::serialize_structure_crate_model_usage_statistics_filter(
                    &mut object_100,
                    item_99,
                )?;
                object_100.finish();
            }
        }
        array_98.finish();
    }
    if input.max_results != 0 {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_results).into()),
        );
    }
    if let Some(var_101) = &input.next_token {
        object.key("nextToken").string(var_101.as_str());
    }
    if let Some(var_102) = &input.sort_by {
        let mut object_103 = object.key("sortBy").start_object();
        crate::json_ser::serialize_structure_crate_model_usage_statistics_sort_by(
            &mut object_103,
            var_102,
        )?;
        object_103.finish();
    }
    if let Some(var_104) = &input.time_range {
        object.key("timeRange").string(var_104.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_classification_jobs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListClassificationJobsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_105) = &input.filter_criteria {
        let mut object_106 = object.key("filterCriteria").start_object();
        crate::json_ser::serialize_structure_crate_model_list_jobs_filter_criteria(
            &mut object_106,
            var_105,
        )?;
        object_106.finish();
    }
    if input.max_results != 0 {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_results).into()),
        );
    }
    if let Some(var_107) = &input.next_token {
        object.key("nextToken").string(var_107.as_str());
    }
    if let Some(var_108) = &input.sort_criteria {
        let mut object_109 = object.key("sortCriteria").start_object();
        crate::json_ser::serialize_structure_crate_model_list_jobs_sort_criteria(
            &mut object_109,
            var_108,
        )?;
        object_109.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_custom_data_identifiers_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListCustomDataIdentifiersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.max_results != 0 {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_results).into()),
        );
    }
    if let Some(var_110) = &input.next_token {
        object.key("nextToken").string(var_110.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_findings_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListFindingsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_111) = &input.finding_criteria {
        let mut object_112 = object.key("findingCriteria").start_object();
        crate::json_ser::serialize_structure_crate_model_finding_criteria(
            &mut object_112,
            var_111,
        )?;
        object_112.finish();
    }
    if input.max_results != 0 {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_results).into()),
        );
    }
    if let Some(var_113) = &input.next_token {
        object.key("nextToken").string(var_113.as_str());
    }
    if let Some(var_114) = &input.sort_criteria {
        let mut object_115 = object.key("sortCriteria").start_object();
        crate::json_ser::serialize_structure_crate_model_sort_criteria(&mut object_115, var_114)?;
        object_115.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_managed_data_identifiers_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListManagedDataIdentifiersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_116) = &input.next_token {
        object.key("nextToken").string(var_116.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_classification_export_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutClassificationExportConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_117) = &input.configuration {
        let mut object_118 = object.key("configuration").start_object();
        crate::json_ser::serialize_structure_crate_model_classification_export_configuration(
            &mut object_118,
            var_117,
        )?;
        object_118.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_findings_publication_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutFindingsPublicationConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_119) = &input.client_token {
        object.key("clientToken").string(var_119.as_str());
    }
    if let Some(var_120) = &input.security_hub_configuration {
        let mut object_121 = object.key("securityHubConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_security_hub_configuration(
            &mut object_121,
            var_120,
        )?;
        object_121.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_search_resources_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SearchResourcesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_122) = &input.bucket_criteria {
        let mut object_123 = object.key("bucketCriteria").start_object();
        crate::json_ser::serialize_structure_crate_model_search_resources_bucket_criteria(
            &mut object_123,
            var_122,
        )?;
        object_123.finish();
    }
    if input.max_results != 0 {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_results).into()),
        );
    }
    if let Some(var_124) = &input.next_token {
        object.key("nextToken").string(var_124.as_str());
    }
    if let Some(var_125) = &input.sort_criteria {
        let mut object_126 = object.key("sortCriteria").start_object();
        crate::json_ser::serialize_structure_crate_model_search_resources_sort_criteria(
            &mut object_126,
            var_125,
        )?;
        object_126.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_127) = &input.tags {
        let mut object_128 = object.key("tags").start_object();
        for (key_129, value_130) in var_127 {
            {
                object_128.key(key_129).string(value_130.as_str());
            }
        }
        object_128.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_test_custom_data_identifier_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TestCustomDataIdentifierInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_131) = &input.ignore_words {
        let mut array_132 = object.key("ignoreWords").start_array();
        for item_133 in var_131 {
            {
                array_132.value().string(item_133.as_str());
            }
        }
        array_132.finish();
    }
    if let Some(var_134) = &input.keywords {
        let mut array_135 = object.key("keywords").start_array();
        for item_136 in var_134 {
            {
                array_135.value().string(item_136.as_str());
            }
        }
        array_135.finish();
    }
    if input.maximum_match_distance != 0 {
        object.key("maximumMatchDistance").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.maximum_match_distance).into()),
        );
    }
    if let Some(var_137) = &input.regex {
        object.key("regex").string(var_137.as_str());
    }
    if let Some(var_138) = &input.sample_text {
        object.key("sampleText").string(var_138.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_classification_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateClassificationJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_139) = &input.job_status {
        object.key("jobStatus").string(var_139.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_findings_filter_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateFindingsFilterInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_140) = &input.action {
        object.key("action").string(var_140.as_str());
    }
    if let Some(var_141) = &input.client_token {
        object.key("clientToken").string(var_141.as_str());
    }
    if let Some(var_142) = &input.description {
        object.key("description").string(var_142.as_str());
    }
    if let Some(var_143) = &input.finding_criteria {
        let mut object_144 = object.key("findingCriteria").start_object();
        crate::json_ser::serialize_structure_crate_model_finding_criteria(
            &mut object_144,
            var_143,
        )?;
        object_144.finish();
    }
    if let Some(var_145) = &input.name {
        object.key("name").string(var_145.as_str());
    }
    if input.position != 0 {
        object.key("position").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.position).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_macie_session_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateMacieSessionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_146) = &input.finding_publishing_frequency {
        object
            .key("findingPublishingFrequency")
            .string(var_146.as_str());
    }
    if let Some(var_147) = &input.status {
        object.key("status").string(var_147.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_member_session_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateMemberSessionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_148) = &input.status {
        object.key("status").string(var_148.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_organization_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateOrganizationConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("autoEnable").boolean(input.auto_enable);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_reveal_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateRevealConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_149) = &input.configuration {
        let mut object_150 = object.key("configuration").start_object();
        crate::json_ser::serialize_structure_crate_model_reveal_configuration(
            &mut object_150,
            var_149,
        )?;
        object_150.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_job_definition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3JobDefinition,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_151) = &input.bucket_definitions {
        let mut array_152 = object.key("bucketDefinitions").start_array();
        for item_153 in var_151 {
            {
                let mut object_154 = array_152.value().start_object();
                crate::json_ser::serialize_structure_crate_model_s3_bucket_definition_for_job(
                    &mut object_154,
                    item_153,
                )?;
                object_154.finish();
            }
        }
        array_152.finish();
    }
    if let Some(var_155) = &input.scoping {
        let mut object_156 = object.key("scoping").start_object();
        crate::json_ser::serialize_structure_crate_model_scoping(&mut object_156, var_155)?;
        object_156.finish();
    }
    if let Some(var_157) = &input.bucket_criteria {
        let mut object_158 = object.key("bucketCriteria").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_bucket_criteria_for_job(
            &mut object_158,
            var_157,
        )?;
        object_158.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_job_schedule_frequency(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JobScheduleFrequency,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_159) = &input.daily_schedule {
        let mut object_160 = object.key("dailySchedule").start_object();
        crate::json_ser::serialize_structure_crate_model_daily_schedule(&mut object_160, var_159)?;
        object_160.finish();
    }
    if let Some(var_161) = &input.monthly_schedule {
        let mut object_162 = object.key("monthlySchedule").start_object();
        crate::json_ser::serialize_structure_crate_model_monthly_schedule(
            &mut object_162,
            var_161,
        )?;
        object_162.finish();
    }
    if let Some(var_163) = &input.weekly_schedule {
        let mut object_164 = object.key("weeklySchedule").start_object();
        crate::json_ser::serialize_structure_crate_model_weekly_schedule(&mut object_164, var_163)?;
        object_164.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_severity_level(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SeverityLevel,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("occurrencesThreshold").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.occurrences_threshold).into()),
        );
    }
    if let Some(var_165) = &input.severity {
        object.key("severity").string(var_165.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_finding_criteria(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FindingCriteria,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_166) = &input.criterion {
        let mut object_167 = object.key("criterion").start_object();
        for (key_168, value_169) in var_166 {
            {
                let mut object_170 = object_167.key(key_168).start_object();
                crate::json_ser::serialize_structure_crate_model_criterion_additional_properties(
                    &mut object_170,
                    value_169,
                )?;
                object_170.finish();
            }
        }
        object_167.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_account_detail(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AccountDetail,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_171) = &input.account_id {
        object.key("accountId").string(var_171.as_str());
    }
    if let Some(var_172) = &input.email {
        object.key("email").string(var_172.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_bucket_criteria_additional_properties(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BucketCriteriaAdditionalProperties,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_173) = &input.eq {
        let mut array_174 = object.key("eq").start_array();
        for item_175 in var_173 {
            {
                array_174.value().string(item_175.as_str());
            }
        }
        array_174.finish();
    }
    if input.gt != 0 {
        object.key("gt").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.gt).into()),
        );
    }
    if input.gte != 0 {
        object.key("gte").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.gte).into()),
        );
    }
    if input.lt != 0 {
        object.key("lt").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.lt).into()),
        );
    }
    if input.lte != 0 {
        object.key("lte").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.lte).into()),
        );
    }
    if let Some(var_176) = &input.neq {
        let mut array_177 = object.key("neq").start_array();
        for item_178 in var_176 {
            {
                array_177.value().string(item_178.as_str());
            }
        }
        array_177.finish();
    }
    if let Some(var_179) = &input.prefix {
        object.key("prefix").string(var_179.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_bucket_sort_criteria(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BucketSortCriteria,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_180) = &input.attribute_name {
        object.key("attributeName").string(var_180.as_str());
    }
    if let Some(var_181) = &input.order_by {
        object.key("orderBy").string(var_181.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sort_criteria(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SortCriteria,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_182) = &input.attribute_name {
        object.key("attributeName").string(var_182.as_str());
    }
    if let Some(var_183) = &input.order_by {
        object.key("orderBy").string(var_183.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_finding_statistics_sort_criteria(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FindingStatisticsSortCriteria,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_184) = &input.attribute_name {
        object.key("attributeName").string(var_184.as_str());
    }
    if let Some(var_185) = &input.order_by {
        object.key("orderBy").string(var_185.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_usage_statistics_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UsageStatisticsFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_186) = &input.comparator {
        object.key("comparator").string(var_186.as_str());
    }
    if let Some(var_187) = &input.key {
        object.key("key").string(var_187.as_str());
    }
    if let Some(var_188) = &input.values {
        let mut array_189 = object.key("values").start_array();
        for item_190 in var_188 {
            {
                array_189.value().string(item_190.as_str());
            }
        }
        array_189.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_usage_statistics_sort_by(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UsageStatisticsSortBy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_191) = &input.key {
        object.key("key").string(var_191.as_str());
    }
    if let Some(var_192) = &input.order_by {
        object.key("orderBy").string(var_192.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_list_jobs_filter_criteria(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ListJobsFilterCriteria,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_193) = &input.excludes {
        let mut array_194 = object.key("excludes").start_array();
        for item_195 in var_193 {
            {
                let mut object_196 = array_194.value().start_object();
                crate::json_ser::serialize_structure_crate_model_list_jobs_filter_term(
                    &mut object_196,
                    item_195,
                )?;
                object_196.finish();
            }
        }
        array_194.finish();
    }
    if let Some(var_197) = &input.includes {
        let mut array_198 = object.key("includes").start_array();
        for item_199 in var_197 {
            {
                let mut object_200 = array_198.value().start_object();
                crate::json_ser::serialize_structure_crate_model_list_jobs_filter_term(
                    &mut object_200,
                    item_199,
                )?;
                object_200.finish();
            }
        }
        array_198.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_list_jobs_sort_criteria(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ListJobsSortCriteria,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_201) = &input.attribute_name {
        object.key("attributeName").string(var_201.as_str());
    }
    if let Some(var_202) = &input.order_by {
        object.key("orderBy").string(var_202.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_classification_export_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ClassificationExportConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_203) = &input.s3_destination {
        let mut object_204 = object.key("s3Destination").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_destination(&mut object_204, var_203)?;
        object_204.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_security_hub_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SecurityHubConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object
            .key("publishClassificationFindings")
            .boolean(input.publish_classification_findings);
    }
    {
        object
            .key("publishPolicyFindings")
            .boolean(input.publish_policy_findings);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_search_resources_bucket_criteria(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SearchResourcesBucketCriteria,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_205) = &input.excludes {
        let mut object_206 = object.key("excludes").start_object();
        crate::json_ser::serialize_structure_crate_model_search_resources_criteria_block(
            &mut object_206,
            var_205,
        )?;
        object_206.finish();
    }
    if let Some(var_207) = &input.includes {
        let mut object_208 = object.key("includes").start_object();
        crate::json_ser::serialize_structure_crate_model_search_resources_criteria_block(
            &mut object_208,
            var_207,
        )?;
        object_208.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_search_resources_sort_criteria(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SearchResourcesSortCriteria,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_209) = &input.attribute_name {
        object.key("attributeName").string(var_209.as_str());
    }
    if let Some(var_210) = &input.order_by {
        object.key("orderBy").string(var_210.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_reveal_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RevealConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_211) = &input.kms_key_id {
        object.key("kmsKeyId").string(var_211.as_str());
    }
    if let Some(var_212) = &input.status {
        object.key("status").string(var_212.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_bucket_definition_for_job(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3BucketDefinitionForJob,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_213) = &input.account_id {
        object.key("accountId").string(var_213.as_str());
    }
    if let Some(var_214) = &input.buckets {
        let mut array_215 = object.key("buckets").start_array();
        for item_216 in var_214 {
            {
                array_215.value().string(item_216.as_str());
            }
        }
        array_215.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_scoping(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Scoping,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_217) = &input.excludes {
        let mut object_218 = object.key("excludes").start_object();
        crate::json_ser::serialize_structure_crate_model_job_scoping_block(
            &mut object_218,
            var_217,
        )?;
        object_218.finish();
    }
    if let Some(var_219) = &input.includes {
        let mut object_220 = object.key("includes").start_object();
        crate::json_ser::serialize_structure_crate_model_job_scoping_block(
            &mut object_220,
            var_219,
        )?;
        object_220.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_bucket_criteria_for_job(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3BucketCriteriaForJob,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_221) = &input.excludes {
        let mut object_222 = object.key("excludes").start_object();
        crate::json_ser::serialize_structure_crate_model_criteria_block_for_job(
            &mut object_222,
            var_221,
        )?;
        object_222.finish();
    }
    if let Some(var_223) = &input.includes {
        let mut object_224 = object.key("includes").start_object();
        crate::json_ser::serialize_structure_crate_model_criteria_block_for_job(
            &mut object_224,
            var_223,
        )?;
        object_224.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_daily_schedule(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DailySchedule,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    let (_, _) = (object, input);
    Ok(())
}

pub fn serialize_structure_crate_model_monthly_schedule(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonthlySchedule,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.day_of_month != 0 {
        object.key("dayOfMonth").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.day_of_month).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_weekly_schedule(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::WeeklySchedule,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_225) = &input.day_of_week {
        object.key("dayOfWeek").string(var_225.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_criterion_additional_properties(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CriterionAdditionalProperties,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_226) = &input.eq {
        let mut array_227 = object.key("eq").start_array();
        for item_228 in var_226 {
            {
                array_227.value().string(item_228.as_str());
            }
        }
        array_227.finish();
    }
    if let Some(var_229) = &input.eq_exact_match {
        let mut array_230 = object.key("eqExactMatch").start_array();
        for item_231 in var_229 {
            {
                array_230.value().string(item_231.as_str());
            }
        }
        array_230.finish();
    }
    if input.gt != 0 {
        object.key("gt").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.gt).into()),
        );
    }
    if input.gte != 0 {
        object.key("gte").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.gte).into()),
        );
    }
    if input.lt != 0 {
        object.key("lt").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.lt).into()),
        );
    }
    if input.lte != 0 {
        object.key("lte").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.lte).into()),
        );
    }
    if let Some(var_232) = &input.neq {
        let mut array_233 = object.key("neq").start_array();
        for item_234 in var_232 {
            {
                array_233.value().string(item_234.as_str());
            }
        }
        array_233.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_list_jobs_filter_term(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ListJobsFilterTerm,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_235) = &input.comparator {
        object.key("comparator").string(var_235.as_str());
    }
    if let Some(var_236) = &input.key {
        object.key("key").string(var_236.as_str());
    }
    if let Some(var_237) = &input.values {
        let mut array_238 = object.key("values").start_array();
        for item_239 in var_237 {
            {
                array_238.value().string(item_239.as_str());
            }
        }
        array_238.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_destination(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3Destination,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_240) = &input.bucket_name {
        object.key("bucketName").string(var_240.as_str());
    }
    if let Some(var_241) = &input.key_prefix {
        object.key("keyPrefix").string(var_241.as_str());
    }
    if let Some(var_242) = &input.kms_key_arn {
        object.key("kmsKeyArn").string(var_242.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_search_resources_criteria_block(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SearchResourcesCriteriaBlock,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_243) = &input.and {
        let mut array_244 = object.key("and").start_array();
        for item_245 in var_243 {
            {
                let mut object_246 = array_244.value().start_object();
                crate::json_ser::serialize_structure_crate_model_search_resources_criteria(
                    &mut object_246,
                    item_245,
                )?;
                object_246.finish();
            }
        }
        array_244.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_job_scoping_block(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JobScopingBlock,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_247) = &input.and {
        let mut array_248 = object.key("and").start_array();
        for item_249 in var_247 {
            {
                let mut object_250 = array_248.value().start_object();
                crate::json_ser::serialize_structure_crate_model_job_scope_term(
                    &mut object_250,
                    item_249,
                )?;
                object_250.finish();
            }
        }
        array_248.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_criteria_block_for_job(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CriteriaBlockForJob,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_251) = &input.and {
        let mut array_252 = object.key("and").start_array();
        for item_253 in var_251 {
            {
                let mut object_254 = array_252.value().start_object();
                crate::json_ser::serialize_structure_crate_model_criteria_for_job(
                    &mut object_254,
                    item_253,
                )?;
                object_254.finish();
            }
        }
        array_252.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_search_resources_criteria(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SearchResourcesCriteria,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_255) = &input.simple_criterion {
        let mut object_256 = object.key("simpleCriterion").start_object();
        crate::json_ser::serialize_structure_crate_model_search_resources_simple_criterion(
            &mut object_256,
            var_255,
        )?;
        object_256.finish();
    }
    if let Some(var_257) = &input.tag_criterion {
        let mut object_258 = object.key("tagCriterion").start_object();
        crate::json_ser::serialize_structure_crate_model_search_resources_tag_criterion(
            &mut object_258,
            var_257,
        )?;
        object_258.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_job_scope_term(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JobScopeTerm,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_259) = &input.simple_scope_term {
        let mut object_260 = object.key("simpleScopeTerm").start_object();
        crate::json_ser::serialize_structure_crate_model_simple_scope_term(
            &mut object_260,
            var_259,
        )?;
        object_260.finish();
    }
    if let Some(var_261) = &input.tag_scope_term {
        let mut object_262 = object.key("tagScopeTerm").start_object();
        crate::json_ser::serialize_structure_crate_model_tag_scope_term(&mut object_262, var_261)?;
        object_262.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_criteria_for_job(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CriteriaForJob,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_263) = &input.simple_criterion {
        let mut object_264 = object.key("simpleCriterion").start_object();
        crate::json_ser::serialize_structure_crate_model_simple_criterion_for_job(
            &mut object_264,
            var_263,
        )?;
        object_264.finish();
    }
    if let Some(var_265) = &input.tag_criterion {
        let mut object_266 = object.key("tagCriterion").start_object();
        crate::json_ser::serialize_structure_crate_model_tag_criterion_for_job(
            &mut object_266,
            var_265,
        )?;
        object_266.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_search_resources_simple_criterion(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SearchResourcesSimpleCriterion,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_267) = &input.comparator {
        object.key("comparator").string(var_267.as_str());
    }
    if let Some(var_268) = &input.key {
        object.key("key").string(var_268.as_str());
    }
    if let Some(var_269) = &input.values {
        let mut array_270 = object.key("values").start_array();
        for item_271 in var_269 {
            {
                array_270.value().string(item_271.as_str());
            }
        }
        array_270.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_search_resources_tag_criterion(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SearchResourcesTagCriterion,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_272) = &input.comparator {
        object.key("comparator").string(var_272.as_str());
    }
    if let Some(var_273) = &input.tag_values {
        let mut array_274 = object.key("tagValues").start_array();
        for item_275 in var_273 {
            {
                let mut object_276 = array_274.value().start_object();
                crate::json_ser::serialize_structure_crate_model_search_resources_tag_criterion_pair(&mut object_276, item_275)?;
                object_276.finish();
            }
        }
        array_274.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_simple_scope_term(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SimpleScopeTerm,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_277) = &input.comparator {
        object.key("comparator").string(var_277.as_str());
    }
    if let Some(var_278) = &input.key {
        object.key("key").string(var_278.as_str());
    }
    if let Some(var_279) = &input.values {
        let mut array_280 = object.key("values").start_array();
        for item_281 in var_279 {
            {
                array_280.value().string(item_281.as_str());
            }
        }
        array_280.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tag_scope_term(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TagScopeTerm,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_282) = &input.comparator {
        object.key("comparator").string(var_282.as_str());
    }
    if let Some(var_283) = &input.key {
        object.key("key").string(var_283.as_str());
    }
    if let Some(var_284) = &input.tag_values {
        let mut array_285 = object.key("tagValues").start_array();
        for item_286 in var_284 {
            {
                let mut object_287 = array_285.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag_value_pair(
                    &mut object_287,
                    item_286,
                )?;
                object_287.finish();
            }
        }
        array_285.finish();
    }
    if let Some(var_288) = &input.target {
        object.key("target").string(var_288.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_simple_criterion_for_job(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SimpleCriterionForJob,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_289) = &input.comparator {
        object.key("comparator").string(var_289.as_str());
    }
    if let Some(var_290) = &input.key {
        object.key("key").string(var_290.as_str());
    }
    if let Some(var_291) = &input.values {
        let mut array_292 = object.key("values").start_array();
        for item_293 in var_291 {
            {
                array_292.value().string(item_293.as_str());
            }
        }
        array_292.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tag_criterion_for_job(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TagCriterionForJob,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_294) = &input.comparator {
        object.key("comparator").string(var_294.as_str());
    }
    if let Some(var_295) = &input.tag_values {
        let mut array_296 = object.key("tagValues").start_array();
        for item_297 in var_295 {
            {
                let mut object_298 = array_296.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag_criterion_pair_for_job(
                    &mut object_298,
                    item_297,
                )?;
                object_298.finish();
            }
        }
        array_296.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_search_resources_tag_criterion_pair(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SearchResourcesTagCriterionPair,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_299) = &input.key {
        object.key("key").string(var_299.as_str());
    }
    if let Some(var_300) = &input.value {
        object.key("value").string(var_300.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tag_value_pair(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TagValuePair,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_301) = &input.key {
        object.key("key").string(var_301.as_str());
    }
    if let Some(var_302) = &input.value {
        object.key("value").string(var_302.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tag_criterion_pair_for_job(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TagCriterionPairForJob,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_303) = &input.key {
        object.key("key").string(var_303.as_str());
    }
    if let Some(var_304) = &input.value {
        object.key("value").string(var_304.as_str());
    }
    Ok(())
}
