// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_create_dataset_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDatasetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.dataset_source {
        let mut object_2 = object.key("DatasetSource").start_object();
        crate::json_ser::serialize_structure_crate_model_dataset_source(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.dataset_type {
        object.key("DatasetType").string(var_3.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_model_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateModelInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_4) = &input.description {
        object.key("Description").string(var_4.as_str());
    }
    if let Some(var_5) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_5.as_str());
    }
    if let Some(var_6) = &input.output_config {
        let mut object_7 = object.key("OutputConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_output_config(&mut object_7, var_6)?;
        object_7.finish();
    }
    if let Some(var_8) = &input.tags {
        let mut array_9 = object.key("Tags").start_array();
        for item_10 in var_8 {
            {
                let mut object_11 = array_9.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_11, item_10)?;
                object_11.finish();
            }
        }
        array_9.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_project_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateProjectInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_12) = &input.project_name {
        object.key("ProjectName").string(var_12.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_model_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartModelInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_13) = &input.max_inference_units {
        object.key("MaxInferenceUnits").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_13).into()),
        );
    }
    if let Some(var_14) = &input.min_inference_units {
        object.key("MinInferenceUnits").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_14).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_model_packaging_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartModelPackagingJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_15) = &input.configuration {
        let mut object_16 = object.key("Configuration").start_object();
        crate::json_ser::serialize_structure_crate_model_model_packaging_configuration(
            &mut object_16,
            var_15,
        )?;
        object_16.finish();
    }
    if let Some(var_17) = &input.description {
        object.key("Description").string(var_17.as_str());
    }
    if let Some(var_18) = &input.job_name {
        object.key("JobName").string(var_18.as_str());
    }
    if let Some(var_19) = &input.model_version {
        object.key("ModelVersion").string(var_19.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_20) = &input.tags {
        let mut array_21 = object.key("Tags").start_array();
        for item_22 in var_20 {
            {
                let mut object_23 = array_21.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_23, item_22)?;
                object_23.finish();
            }
        }
        array_21.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_dataset_entries_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDatasetEntriesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_24) = &input.changes {
        object
            .key("Changes")
            .string_unchecked(&aws_smithy_types::base64::encode(var_24));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_dataset_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DatasetSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_25) = &input.ground_truth_manifest {
        let mut object_26 = object.key("GroundTruthManifest").start_object();
        crate::json_ser::serialize_structure_crate_model_dataset_ground_truth_manifest(
            &mut object_26,
            var_25,
        )?;
        object_26.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_output_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OutputConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_27) = &input.s3_location {
        let mut object_28 = object.key("S3Location").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_location(&mut object_28, var_27)?;
        object_28.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tag(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tag,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_29) = &input.key {
        object.key("Key").string(var_29.as_str());
    }
    if let Some(var_30) = &input.value {
        object.key("Value").string(var_30.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_model_packaging_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelPackagingConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_31) = &input.greengrass {
        let mut object_32 = object.key("Greengrass").start_object();
        crate::json_ser::serialize_structure_crate_model_greengrass_configuration(
            &mut object_32,
            var_31,
        )?;
        object_32.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_dataset_ground_truth_manifest(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DatasetGroundTruthManifest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_33) = &input.s3_object {
        let mut object_34 = object.key("S3Object").start_object();
        crate::json_ser::serialize_structure_crate_model_input_s3_object(&mut object_34, var_33)?;
        object_34.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_location(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3Location,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_35) = &input.bucket {
        object.key("Bucket").string(var_35.as_str());
    }
    if let Some(var_36) = &input.prefix {
        object.key("Prefix").string(var_36.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_greengrass_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GreengrassConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_37) = &input.compiler_options {
        object.key("CompilerOptions").string(var_37.as_str());
    }
    if let Some(var_38) = &input.target_device {
        object.key("TargetDevice").string(var_38.as_str());
    }
    if let Some(var_39) = &input.target_platform {
        let mut object_40 = object.key("TargetPlatform").start_object();
        crate::json_ser::serialize_structure_crate_model_target_platform(&mut object_40, var_39)?;
        object_40.finish();
    }
    if let Some(var_41) = &input.s3_output_location {
        let mut object_42 = object.key("S3OutputLocation").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_location(&mut object_42, var_41)?;
        object_42.finish();
    }
    if let Some(var_43) = &input.component_name {
        object.key("ComponentName").string(var_43.as_str());
    }
    if let Some(var_44) = &input.component_version {
        object.key("ComponentVersion").string(var_44.as_str());
    }
    if let Some(var_45) = &input.component_description {
        object.key("ComponentDescription").string(var_45.as_str());
    }
    if let Some(var_46) = &input.tags {
        let mut array_47 = object.key("Tags").start_array();
        for item_48 in var_46 {
            {
                let mut object_49 = array_47.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_49, item_48)?;
                object_49.finish();
            }
        }
        array_47.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_input_s3_object(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InputS3Object,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_50) = &input.bucket {
        object.key("Bucket").string(var_50.as_str());
    }
    if let Some(var_51) = &input.key {
        object.key("Key").string(var_51.as_str());
    }
    if let Some(var_52) = &input.version_id {
        object.key("VersionId").string(var_52.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_target_platform(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TargetPlatform,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_53) = &input.os {
        object.key("Os").string(var_53.as_str());
    }
    if let Some(var_54) = &input.arch {
        object.key("Arch").string(var_54.as_str());
    }
    if let Some(var_55) = &input.accelerator {
        object.key("Accelerator").string(var_55.as_str());
    }
    Ok(())
}
