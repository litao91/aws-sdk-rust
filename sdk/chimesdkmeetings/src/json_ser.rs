// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_batch_create_attendee_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchCreateAttendeeInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.attendees {
        let mut array_2 = object.key("Attendees").start_array();
        for item_3 in var_1 {
            {
                let mut object_4 = array_2.value().start_object();
                crate::json_ser::serialize_structure_crate_model_create_attendee_request_item(
                    &mut object_4,
                    item_3,
                )?;
                object_4.finish();
            }
        }
        array_2.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_update_attendee_capabilities_except_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchUpdateAttendeeCapabilitiesExceptInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_5) = &input.capabilities {
        let mut object_6 = object.key("Capabilities").start_object();
        crate::json_ser::serialize_structure_crate_model_attendee_capabilities(
            &mut object_6,
            var_5,
        )?;
        object_6.finish();
    }
    if let Some(var_7) = &input.excluded_attendee_ids {
        let mut array_8 = object.key("ExcludedAttendeeIds").start_array();
        for item_9 in var_7 {
            {
                let mut object_10 = array_8.value().start_object();
                crate::json_ser::serialize_structure_crate_model_attendee_id_item(
                    &mut object_10,
                    item_9,
                )?;
                object_10.finish();
            }
        }
        array_8.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_attendee_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAttendeeInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_11) = &input.capabilities {
        let mut object_12 = object.key("Capabilities").start_object();
        crate::json_ser::serialize_structure_crate_model_attendee_capabilities(
            &mut object_12,
            var_11,
        )?;
        object_12.finish();
    }
    if let Some(var_13) = &input.external_user_id {
        object.key("ExternalUserId").string(var_13.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_meeting_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateMeetingInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_14) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_14.as_str());
    }
    if let Some(var_15) = &input.external_meeting_id {
        object.key("ExternalMeetingId").string(var_15.as_str());
    }
    if let Some(var_16) = &input.media_region {
        object.key("MediaRegion").string(var_16.as_str());
    }
    if let Some(var_17) = &input.meeting_features {
        let mut object_18 = object.key("MeetingFeatures").start_object();
        crate::json_ser::serialize_structure_crate_model_meeting_features_configuration(
            &mut object_18,
            var_17,
        )?;
        object_18.finish();
    }
    if let Some(var_19) = &input.meeting_host_id {
        object.key("MeetingHostId").string(var_19.as_str());
    }
    if let Some(var_20) = &input.notifications_configuration {
        let mut object_21 = object.key("NotificationsConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_notifications_configuration(
            &mut object_21,
            var_20,
        )?;
        object_21.finish();
    }
    if let Some(var_22) = &input.primary_meeting_id {
        object.key("PrimaryMeetingId").string(var_22.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_meeting_with_attendees_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateMeetingWithAttendeesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_23) = &input.attendees {
        let mut array_24 = object.key("Attendees").start_array();
        for item_25 in var_23 {
            {
                let mut object_26 = array_24.value().start_object();
                crate::json_ser::serialize_structure_crate_model_create_attendee_request_item(
                    &mut object_26,
                    item_25,
                )?;
                object_26.finish();
            }
        }
        array_24.finish();
    }
    if let Some(var_27) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_27.as_str());
    }
    if let Some(var_28) = &input.external_meeting_id {
        object.key("ExternalMeetingId").string(var_28.as_str());
    }
    if let Some(var_29) = &input.media_region {
        object.key("MediaRegion").string(var_29.as_str());
    }
    if let Some(var_30) = &input.meeting_features {
        let mut object_31 = object.key("MeetingFeatures").start_object();
        crate::json_ser::serialize_structure_crate_model_meeting_features_configuration(
            &mut object_31,
            var_30,
        )?;
        object_31.finish();
    }
    if let Some(var_32) = &input.meeting_host_id {
        object.key("MeetingHostId").string(var_32.as_str());
    }
    if let Some(var_33) = &input.notifications_configuration {
        let mut object_34 = object.key("NotificationsConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_notifications_configuration(
            &mut object_34,
            var_33,
        )?;
        object_34.finish();
    }
    if let Some(var_35) = &input.primary_meeting_id {
        object.key("PrimaryMeetingId").string(var_35.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_meeting_transcription_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartMeetingTranscriptionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_36) = &input.transcription_configuration {
        let mut object_37 = object.key("TranscriptionConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_transcription_configuration(
            &mut object_37,
            var_36,
        )?;
        object_37.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_attendee_capabilities_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateAttendeeCapabilitiesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_38) = &input.capabilities {
        let mut object_39 = object.key("Capabilities").start_object();
        crate::json_ser::serialize_structure_crate_model_attendee_capabilities(
            &mut object_39,
            var_38,
        )?;
        object_39.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_create_attendee_request_item(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CreateAttendeeRequestItem,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_40) = &input.external_user_id {
        object.key("ExternalUserId").string(var_40.as_str());
    }
    if let Some(var_41) = &input.capabilities {
        let mut object_42 = object.key("Capabilities").start_object();
        crate::json_ser::serialize_structure_crate_model_attendee_capabilities(
            &mut object_42,
            var_41,
        )?;
        object_42.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_attendee_capabilities(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AttendeeCapabilities,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_43) = &input.audio {
        object.key("Audio").string(var_43.as_str());
    }
    if let Some(var_44) = &input.video {
        object.key("Video").string(var_44.as_str());
    }
    if let Some(var_45) = &input.content {
        object.key("Content").string(var_45.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_attendee_id_item(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AttendeeIdItem,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_46) = &input.attendee_id {
        object.key("AttendeeId").string(var_46.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_meeting_features_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MeetingFeaturesConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_47) = &input.audio {
        let mut object_48 = object.key("Audio").start_object();
        crate::json_ser::serialize_structure_crate_model_audio_features(&mut object_48, var_47)?;
        object_48.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_notifications_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NotificationsConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_49) = &input.lambda_function_arn {
        object.key("LambdaFunctionArn").string(var_49.as_str());
    }
    if let Some(var_50) = &input.sns_topic_arn {
        object.key("SnsTopicArn").string(var_50.as_str());
    }
    if let Some(var_51) = &input.sqs_queue_arn {
        object.key("SqsQueueArn").string(var_51.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_transcription_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TranscriptionConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_52) = &input.engine_transcribe_settings {
        let mut object_53 = object.key("EngineTranscribeSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_engine_transcribe_settings(
            &mut object_53,
            var_52,
        )?;
        object_53.finish();
    }
    if let Some(var_54) = &input.engine_transcribe_medical_settings {
        let mut object_55 = object.key("EngineTranscribeMedicalSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_engine_transcribe_medical_settings(
            &mut object_55,
            var_54,
        )?;
        object_55.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_audio_features(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AudioFeatures,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_56) = &input.echo_reduction {
        object.key("EchoReduction").string(var_56.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_engine_transcribe_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EngineTranscribeSettings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_57) = &input.language_code {
        object.key("LanguageCode").string(var_57.as_str());
    }
    if let Some(var_58) = &input.vocabulary_filter_method {
        object.key("VocabularyFilterMethod").string(var_58.as_str());
    }
    if let Some(var_59) = &input.vocabulary_filter_name {
        object.key("VocabularyFilterName").string(var_59.as_str());
    }
    if let Some(var_60) = &input.vocabulary_name {
        object.key("VocabularyName").string(var_60.as_str());
    }
    if let Some(var_61) = &input.region {
        object.key("Region").string(var_61.as_str());
    }
    if input.enable_partial_results_stabilization {
        object
            .key("EnablePartialResultsStabilization")
            .boolean(input.enable_partial_results_stabilization);
    }
    if let Some(var_62) = &input.partial_results_stability {
        object
            .key("PartialResultsStability")
            .string(var_62.as_str());
    }
    if let Some(var_63) = &input.content_identification_type {
        object
            .key("ContentIdentificationType")
            .string(var_63.as_str());
    }
    if let Some(var_64) = &input.content_redaction_type {
        object.key("ContentRedactionType").string(var_64.as_str());
    }
    if let Some(var_65) = &input.pii_entity_types {
        object.key("PiiEntityTypes").string(var_65.as_str());
    }
    if let Some(var_66) = &input.language_model_name {
        object.key("LanguageModelName").string(var_66.as_str());
    }
    if input.identify_language {
        object
            .key("IdentifyLanguage")
            .boolean(input.identify_language);
    }
    if let Some(var_67) = &input.language_options {
        object.key("LanguageOptions").string(var_67.as_str());
    }
    if let Some(var_68) = &input.preferred_language {
        object.key("PreferredLanguage").string(var_68.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_engine_transcribe_medical_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EngineTranscribeMedicalSettings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_69) = &input.language_code {
        object.key("LanguageCode").string(var_69.as_str());
    }
    if let Some(var_70) = &input.specialty {
        object.key("Specialty").string(var_70.as_str());
    }
    if let Some(var_71) = &input.r#type {
        object.key("Type").string(var_71.as_str());
    }
    if let Some(var_72) = &input.vocabulary_name {
        object.key("VocabularyName").string(var_72.as_str());
    }
    if let Some(var_73) = &input.region {
        object.key("Region").string(var_73.as_str());
    }
    if let Some(var_74) = &input.content_identification_type {
        object
            .key("ContentIdentificationType")
            .string(var_74.as_str());
    }
    Ok(())
}
