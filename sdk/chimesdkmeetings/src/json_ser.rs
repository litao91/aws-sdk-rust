// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_batch_create_attendee_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchCreateAttendeeInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.attendees {
        let mut array_2 = object.key("Attendees").start_array();
        for item_3 in var_1 {
            {
                let mut object_4 = array_2.value().start_object();
                crate::json_ser::serialize_structure_crate_model_create_attendee_request_item(
                    &mut object_4,
                    item_3,
                )?;
                object_4.finish();
            }
        }
        array_2.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_update_attendee_capabilities_except_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchUpdateAttendeeCapabilitiesExceptInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_5) = &input.capabilities {
        let mut object_6 = object.key("Capabilities").start_object();
        crate::json_ser::serialize_structure_crate_model_attendee_capabilities(
            &mut object_6,
            var_5,
        )?;
        object_6.finish();
    }
    if let Some(var_7) = &input.excluded_attendee_ids {
        let mut array_8 = object.key("ExcludedAttendeeIds").start_array();
        for item_9 in var_7 {
            {
                let mut object_10 = array_8.value().start_object();
                crate::json_ser::serialize_structure_crate_model_attendee_id_item(
                    &mut object_10,
                    item_9,
                )?;
                object_10.finish();
            }
        }
        array_8.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_attendee_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAttendeeInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_11) = &input.capabilities {
        let mut object_12 = object.key("Capabilities").start_object();
        crate::json_ser::serialize_structure_crate_model_attendee_capabilities(
            &mut object_12,
            var_11,
        )?;
        object_12.finish();
    }
    if let Some(var_13) = &input.external_user_id {
        object.key("ExternalUserId").string(var_13.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_meeting_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateMeetingInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_14) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_14.as_str());
    }
    if let Some(var_15) = &input.external_meeting_id {
        object.key("ExternalMeetingId").string(var_15.as_str());
    }
    if let Some(var_16) = &input.media_region {
        object.key("MediaRegion").string(var_16.as_str());
    }
    if let Some(var_17) = &input.meeting_features {
        let mut object_18 = object.key("MeetingFeatures").start_object();
        crate::json_ser::serialize_structure_crate_model_meeting_features_configuration(
            &mut object_18,
            var_17,
        )?;
        object_18.finish();
    }
    if let Some(var_19) = &input.meeting_host_id {
        object.key("MeetingHostId").string(var_19.as_str());
    }
    if let Some(var_20) = &input.notifications_configuration {
        let mut object_21 = object.key("NotificationsConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_notifications_configuration(
            &mut object_21,
            var_20,
        )?;
        object_21.finish();
    }
    if let Some(var_22) = &input.primary_meeting_id {
        object.key("PrimaryMeetingId").string(var_22.as_str());
    }
    if let Some(var_23) = &input.tags {
        let mut array_24 = object.key("Tags").start_array();
        for item_25 in var_23 {
            {
                let mut object_26 = array_24.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_26, item_25)?;
                object_26.finish();
            }
        }
        array_24.finish();
    }
    if let Some(var_27) = &input.tenant_ids {
        let mut array_28 = object.key("TenantIds").start_array();
        for item_29 in var_27 {
            {
                array_28.value().string(item_29.as_str());
            }
        }
        array_28.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_meeting_with_attendees_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateMeetingWithAttendeesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_30) = &input.attendees {
        let mut array_31 = object.key("Attendees").start_array();
        for item_32 in var_30 {
            {
                let mut object_33 = array_31.value().start_object();
                crate::json_ser::serialize_structure_crate_model_create_attendee_request_item(
                    &mut object_33,
                    item_32,
                )?;
                object_33.finish();
            }
        }
        array_31.finish();
    }
    if let Some(var_34) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_34.as_str());
    }
    if let Some(var_35) = &input.external_meeting_id {
        object.key("ExternalMeetingId").string(var_35.as_str());
    }
    if let Some(var_36) = &input.media_region {
        object.key("MediaRegion").string(var_36.as_str());
    }
    if let Some(var_37) = &input.meeting_features {
        let mut object_38 = object.key("MeetingFeatures").start_object();
        crate::json_ser::serialize_structure_crate_model_meeting_features_configuration(
            &mut object_38,
            var_37,
        )?;
        object_38.finish();
    }
    if let Some(var_39) = &input.meeting_host_id {
        object.key("MeetingHostId").string(var_39.as_str());
    }
    if let Some(var_40) = &input.notifications_configuration {
        let mut object_41 = object.key("NotificationsConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_notifications_configuration(
            &mut object_41,
            var_40,
        )?;
        object_41.finish();
    }
    if let Some(var_42) = &input.primary_meeting_id {
        object.key("PrimaryMeetingId").string(var_42.as_str());
    }
    if let Some(var_43) = &input.tags {
        let mut array_44 = object.key("Tags").start_array();
        for item_45 in var_43 {
            {
                let mut object_46 = array_44.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_46, item_45)?;
                object_46.finish();
            }
        }
        array_44.finish();
    }
    if let Some(var_47) = &input.tenant_ids {
        let mut array_48 = object.key("TenantIds").start_array();
        for item_49 in var_47 {
            {
                array_48.value().string(item_49.as_str());
            }
        }
        array_48.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_meeting_transcription_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartMeetingTranscriptionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_50) = &input.transcription_configuration {
        let mut object_51 = object.key("TranscriptionConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_transcription_configuration(
            &mut object_51,
            var_50,
        )?;
        object_51.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_52) = &input.resource_arn {
        object.key("ResourceARN").string(var_52.as_str());
    }
    if let Some(var_53) = &input.tags {
        let mut array_54 = object.key("Tags").start_array();
        for item_55 in var_53 {
            {
                let mut object_56 = array_54.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_56, item_55)?;
                object_56.finish();
            }
        }
        array_54.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_untag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UntagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_57) = &input.resource_arn {
        object.key("ResourceARN").string(var_57.as_str());
    }
    if let Some(var_58) = &input.tag_keys {
        let mut array_59 = object.key("TagKeys").start_array();
        for item_60 in var_58 {
            {
                array_59.value().string(item_60.as_str());
            }
        }
        array_59.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_attendee_capabilities_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateAttendeeCapabilitiesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_61) = &input.capabilities {
        let mut object_62 = object.key("Capabilities").start_object();
        crate::json_ser::serialize_structure_crate_model_attendee_capabilities(
            &mut object_62,
            var_61,
        )?;
        object_62.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_create_attendee_request_item(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CreateAttendeeRequestItem,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_63) = &input.external_user_id {
        object.key("ExternalUserId").string(var_63.as_str());
    }
    if let Some(var_64) = &input.capabilities {
        let mut object_65 = object.key("Capabilities").start_object();
        crate::json_ser::serialize_structure_crate_model_attendee_capabilities(
            &mut object_65,
            var_64,
        )?;
        object_65.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_attendee_capabilities(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AttendeeCapabilities,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_66) = &input.audio {
        object.key("Audio").string(var_66.as_str());
    }
    if let Some(var_67) = &input.video {
        object.key("Video").string(var_67.as_str());
    }
    if let Some(var_68) = &input.content {
        object.key("Content").string(var_68.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_attendee_id_item(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AttendeeIdItem,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_69) = &input.attendee_id {
        object.key("AttendeeId").string(var_69.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_meeting_features_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MeetingFeaturesConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_70) = &input.audio {
        let mut object_71 = object.key("Audio").start_object();
        crate::json_ser::serialize_structure_crate_model_audio_features(&mut object_71, var_70)?;
        object_71.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_notifications_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NotificationsConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_72) = &input.lambda_function_arn {
        object.key("LambdaFunctionArn").string(var_72.as_str());
    }
    if let Some(var_73) = &input.sns_topic_arn {
        object.key("SnsTopicArn").string(var_73.as_str());
    }
    if let Some(var_74) = &input.sqs_queue_arn {
        object.key("SqsQueueArn").string(var_74.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tag(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tag,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_75) = &input.key {
        object.key("Key").string(var_75.as_str());
    }
    if let Some(var_76) = &input.value {
        object.key("Value").string(var_76.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_transcription_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TranscriptionConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_77) = &input.engine_transcribe_settings {
        let mut object_78 = object.key("EngineTranscribeSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_engine_transcribe_settings(
            &mut object_78,
            var_77,
        )?;
        object_78.finish();
    }
    if let Some(var_79) = &input.engine_transcribe_medical_settings {
        let mut object_80 = object.key("EngineTranscribeMedicalSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_engine_transcribe_medical_settings(
            &mut object_80,
            var_79,
        )?;
        object_80.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_audio_features(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AudioFeatures,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_81) = &input.echo_reduction {
        object.key("EchoReduction").string(var_81.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_engine_transcribe_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EngineTranscribeSettings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_82) = &input.language_code {
        object.key("LanguageCode").string(var_82.as_str());
    }
    if let Some(var_83) = &input.vocabulary_filter_method {
        object.key("VocabularyFilterMethod").string(var_83.as_str());
    }
    if let Some(var_84) = &input.vocabulary_filter_name {
        object.key("VocabularyFilterName").string(var_84.as_str());
    }
    if let Some(var_85) = &input.vocabulary_name {
        object.key("VocabularyName").string(var_85.as_str());
    }
    if let Some(var_86) = &input.region {
        object.key("Region").string(var_86.as_str());
    }
    if input.enable_partial_results_stabilization {
        object
            .key("EnablePartialResultsStabilization")
            .boolean(input.enable_partial_results_stabilization);
    }
    if let Some(var_87) = &input.partial_results_stability {
        object
            .key("PartialResultsStability")
            .string(var_87.as_str());
    }
    if let Some(var_88) = &input.content_identification_type {
        object
            .key("ContentIdentificationType")
            .string(var_88.as_str());
    }
    if let Some(var_89) = &input.content_redaction_type {
        object.key("ContentRedactionType").string(var_89.as_str());
    }
    if let Some(var_90) = &input.pii_entity_types {
        object.key("PiiEntityTypes").string(var_90.as_str());
    }
    if let Some(var_91) = &input.language_model_name {
        object.key("LanguageModelName").string(var_91.as_str());
    }
    if input.identify_language {
        object
            .key("IdentifyLanguage")
            .boolean(input.identify_language);
    }
    if let Some(var_92) = &input.language_options {
        object.key("LanguageOptions").string(var_92.as_str());
    }
    if let Some(var_93) = &input.preferred_language {
        object.key("PreferredLanguage").string(var_93.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_engine_transcribe_medical_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EngineTranscribeMedicalSettings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_94) = &input.language_code {
        object.key("LanguageCode").string(var_94.as_str());
    }
    if let Some(var_95) = &input.specialty {
        object.key("Specialty").string(var_95.as_str());
    }
    if let Some(var_96) = &input.r#type {
        object.key("Type").string(var_96.as_str());
    }
    if let Some(var_97) = &input.vocabulary_name {
        object.key("VocabularyName").string(var_97.as_str());
    }
    if let Some(var_98) = &input.region {
        object.key("Region").string(var_98.as_str());
    }
    if let Some(var_99) = &input.content_identification_type {
        object
            .key("ContentIdentificationType")
            .string(var_99.as_str());
    }
    Ok(())
}
