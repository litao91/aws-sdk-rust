// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_create_bot_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateBotInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.bot_name {
        object.key("botName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.bot_tags {
        let mut object_3 = object.key("botTags").start_object();
        for (key_4, value_5) in var_2 {
            {
                object_3.key(key_4).string(value_5.as_str());
            }
        }
        object_3.finish();
    }
    if let Some(var_6) = &input.data_privacy {
        let mut object_7 = object.key("dataPrivacy").start_object();
        crate::json_ser::serialize_structure_crate_model_data_privacy(&mut object_7, var_6)?;
        object_7.finish();
    }
    if let Some(var_8) = &input.description {
        object.key("description").string(var_8.as_str());
    }
    if let Some(var_9) = &input.idle_session_ttl_in_seconds {
        object.key("idleSessionTTLInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_9).into()),
        );
    }
    if let Some(var_10) = &input.role_arn {
        object.key("roleArn").string(var_10.as_str());
    }
    if let Some(var_11) = &input.test_bot_alias_tags {
        let mut object_12 = object.key("testBotAliasTags").start_object();
        for (key_13, value_14) in var_11 {
            {
                object_12.key(key_13).string(value_14.as_str());
            }
        }
        object_12.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_bot_alias_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateBotAliasInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_15) = &input.bot_alias_locale_settings {
        let mut object_16 = object.key("botAliasLocaleSettings").start_object();
        for (key_17, value_18) in var_15 {
            {
                let mut object_19 = object_16.key(key_17).start_object();
                crate::json_ser::serialize_structure_crate_model_bot_alias_locale_settings(
                    &mut object_19,
                    value_18,
                )?;
                object_19.finish();
            }
        }
        object_16.finish();
    }
    if let Some(var_20) = &input.bot_alias_name {
        object.key("botAliasName").string(var_20.as_str());
    }
    if let Some(var_21) = &input.bot_version {
        object.key("botVersion").string(var_21.as_str());
    }
    if let Some(var_22) = &input.conversation_log_settings {
        let mut object_23 = object.key("conversationLogSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_conversation_log_settings(
            &mut object_23,
            var_22,
        )?;
        object_23.finish();
    }
    if let Some(var_24) = &input.description {
        object.key("description").string(var_24.as_str());
    }
    if let Some(var_25) = &input.sentiment_analysis_settings {
        let mut object_26 = object.key("sentimentAnalysisSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_sentiment_analysis_settings(
            &mut object_26,
            var_25,
        )?;
        object_26.finish();
    }
    if let Some(var_27) = &input.tags {
        let mut object_28 = object.key("tags").start_object();
        for (key_29, value_30) in var_27 {
            {
                object_28.key(key_29).string(value_30.as_str());
            }
        }
        object_28.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_bot_locale_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateBotLocaleInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_31) = &input.description {
        object.key("description").string(var_31.as_str());
    }
    if let Some(var_32) = &input.locale_id {
        object.key("localeId").string(var_32.as_str());
    }
    if let Some(var_33) = &input.nlu_intent_confidence_threshold {
        object.key("nluIntentConfidenceThreshold").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_33).into()),
        );
    }
    if let Some(var_34) = &input.voice_settings {
        let mut object_35 = object.key("voiceSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_voice_settings(&mut object_35, var_34)?;
        object_35.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_bot_version_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateBotVersionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_36) = &input.bot_version_locale_specification {
        let mut object_37 = object.key("botVersionLocaleSpecification").start_object();
        for (key_38, value_39) in var_36 {
            {
                let mut object_40 = object_37.key(key_38).start_object();
                crate::json_ser::serialize_structure_crate_model_bot_version_locale_details(
                    &mut object_40,
                    value_39,
                )?;
                object_40.finish();
            }
        }
        object_37.finish();
    }
    if let Some(var_41) = &input.description {
        object.key("description").string(var_41.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_export_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateExportInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_42) = &input.file_format {
        object.key("fileFormat").string(var_42.as_str());
    }
    if let Some(var_43) = &input.file_password {
        object.key("filePassword").string(var_43.as_str());
    }
    if let Some(var_44) = &input.resource_specification {
        let mut object_45 = object.key("resourceSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_export_resource_specification(
            &mut object_45,
            var_44,
        )?;
        object_45.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_intent_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateIntentInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_46) = &input.description {
        object.key("description").string(var_46.as_str());
    }
    if let Some(var_47) = &input.dialog_code_hook {
        let mut object_48 = object.key("dialogCodeHook").start_object();
        crate::json_ser::serialize_structure_crate_model_dialog_code_hook_settings(
            &mut object_48,
            var_47,
        )?;
        object_48.finish();
    }
    if let Some(var_49) = &input.fulfillment_code_hook {
        let mut object_50 = object.key("fulfillmentCodeHook").start_object();
        crate::json_ser::serialize_structure_crate_model_fulfillment_code_hook_settings(
            &mut object_50,
            var_49,
        )?;
        object_50.finish();
    }
    if let Some(var_51) = &input.initial_response_setting {
        let mut object_52 = object.key("initialResponseSetting").start_object();
        crate::json_ser::serialize_structure_crate_model_initial_response_setting(
            &mut object_52,
            var_51,
        )?;
        object_52.finish();
    }
    if let Some(var_53) = &input.input_contexts {
        let mut array_54 = object.key("inputContexts").start_array();
        for item_55 in var_53 {
            {
                let mut object_56 = array_54.value().start_object();
                crate::json_ser::serialize_structure_crate_model_input_context(
                    &mut object_56,
                    item_55,
                )?;
                object_56.finish();
            }
        }
        array_54.finish();
    }
    if let Some(var_57) = &input.intent_closing_setting {
        let mut object_58 = object.key("intentClosingSetting").start_object();
        crate::json_ser::serialize_structure_crate_model_intent_closing_setting(
            &mut object_58,
            var_57,
        )?;
        object_58.finish();
    }
    if let Some(var_59) = &input.intent_confirmation_setting {
        let mut object_60 = object.key("intentConfirmationSetting").start_object();
        crate::json_ser::serialize_structure_crate_model_intent_confirmation_setting(
            &mut object_60,
            var_59,
        )?;
        object_60.finish();
    }
    if let Some(var_61) = &input.intent_name {
        object.key("intentName").string(var_61.as_str());
    }
    if let Some(var_62) = &input.kendra_configuration {
        let mut object_63 = object.key("kendraConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_kendra_configuration(
            &mut object_63,
            var_62,
        )?;
        object_63.finish();
    }
    if let Some(var_64) = &input.output_contexts {
        let mut array_65 = object.key("outputContexts").start_array();
        for item_66 in var_64 {
            {
                let mut object_67 = array_65.value().start_object();
                crate::json_ser::serialize_structure_crate_model_output_context(
                    &mut object_67,
                    item_66,
                )?;
                object_67.finish();
            }
        }
        array_65.finish();
    }
    if let Some(var_68) = &input.parent_intent_signature {
        object.key("parentIntentSignature").string(var_68.as_str());
    }
    if let Some(var_69) = &input.sample_utterances {
        let mut array_70 = object.key("sampleUtterances").start_array();
        for item_71 in var_69 {
            {
                let mut object_72 = array_70.value().start_object();
                crate::json_ser::serialize_structure_crate_model_sample_utterance(
                    &mut object_72,
                    item_71,
                )?;
                object_72.finish();
            }
        }
        array_70.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_resource_policy_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateResourcePolicyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_73) = &input.policy {
        object.key("policy").string(var_73.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_resource_policy_statement_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateResourcePolicyStatementInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_74) = &input.action {
        let mut array_75 = object.key("action").start_array();
        for item_76 in var_74 {
            {
                array_75.value().string(item_76.as_str());
            }
        }
        array_75.finish();
    }
    if let Some(var_77) = &input.condition {
        let mut object_78 = object.key("condition").start_object();
        for (key_79, value_80) in var_77 {
            {
                let mut object_81 = object_78.key(key_79).start_object();
                for (key_82, value_83) in value_80 {
                    {
                        object_81.key(key_82).string(value_83.as_str());
                    }
                }
                object_81.finish();
            }
        }
        object_78.finish();
    }
    if let Some(var_84) = &input.effect {
        object.key("effect").string(var_84.as_str());
    }
    if let Some(var_85) = &input.principal {
        let mut array_86 = object.key("principal").start_array();
        for item_87 in var_85 {
            {
                let mut object_88 = array_86.value().start_object();
                crate::json_ser::serialize_structure_crate_model_principal(
                    &mut object_88,
                    item_87,
                )?;
                object_88.finish();
            }
        }
        array_86.finish();
    }
    if let Some(var_89) = &input.statement_id {
        object.key("statementId").string(var_89.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_slot_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateSlotInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_90) = &input.description {
        object.key("description").string(var_90.as_str());
    }
    if let Some(var_91) = &input.multiple_values_setting {
        let mut object_92 = object.key("multipleValuesSetting").start_object();
        crate::json_ser::serialize_structure_crate_model_multiple_values_setting(
            &mut object_92,
            var_91,
        )?;
        object_92.finish();
    }
    if let Some(var_93) = &input.obfuscation_setting {
        let mut object_94 = object.key("obfuscationSetting").start_object();
        crate::json_ser::serialize_structure_crate_model_obfuscation_setting(
            &mut object_94,
            var_93,
        )?;
        object_94.finish();
    }
    if let Some(var_95) = &input.slot_name {
        object.key("slotName").string(var_95.as_str());
    }
    if let Some(var_96) = &input.slot_type_id {
        object.key("slotTypeId").string(var_96.as_str());
    }
    if let Some(var_97) = &input.value_elicitation_setting {
        let mut object_98 = object.key("valueElicitationSetting").start_object();
        crate::json_ser::serialize_structure_crate_model_slot_value_elicitation_setting(
            &mut object_98,
            var_97,
        )?;
        object_98.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_slot_type_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateSlotTypeInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_99) = &input.description {
        object.key("description").string(var_99.as_str());
    }
    if let Some(var_100) = &input.external_source_setting {
        let mut object_101 = object.key("externalSourceSetting").start_object();
        crate::json_ser::serialize_structure_crate_model_external_source_setting(
            &mut object_101,
            var_100,
        )?;
        object_101.finish();
    }
    if let Some(var_102) = &input.parent_slot_type_signature {
        object
            .key("parentSlotTypeSignature")
            .string(var_102.as_str());
    }
    if let Some(var_103) = &input.slot_type_name {
        object.key("slotTypeName").string(var_103.as_str());
    }
    if let Some(var_104) = &input.slot_type_values {
        let mut array_105 = object.key("slotTypeValues").start_array();
        for item_106 in var_104 {
            {
                let mut object_107 = array_105.value().start_object();
                crate::json_ser::serialize_structure_crate_model_slot_type_value(
                    &mut object_107,
                    item_106,
                )?;
                object_107.finish();
            }
        }
        array_105.finish();
    }
    if let Some(var_108) = &input.value_selection_setting {
        let mut object_109 = object.key("valueSelectionSetting").start_object();
        crate::json_ser::serialize_structure_crate_model_slot_value_selection_setting(
            &mut object_109,
            var_108,
        )?;
        object_109.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_aggregated_utterances_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAggregatedUtterancesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_110) = &input.aggregation_duration {
        let mut object_111 = object.key("aggregationDuration").start_object();
        crate::json_ser::serialize_structure_crate_model_utterance_aggregation_duration(
            &mut object_111,
            var_110,
        )?;
        object_111.finish();
    }
    if let Some(var_112) = &input.bot_alias_id {
        object.key("botAliasId").string(var_112.as_str());
    }
    if let Some(var_113) = &input.bot_version {
        object.key("botVersion").string(var_113.as_str());
    }
    if let Some(var_114) = &input.filters {
        let mut array_115 = object.key("filters").start_array();
        for item_116 in var_114 {
            {
                let mut object_117 = array_115.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aggregated_utterances_filter(
                    &mut object_117,
                    item_116,
                )?;
                object_117.finish();
            }
        }
        array_115.finish();
    }
    if let Some(var_118) = &input.locale_id {
        object.key("localeId").string(var_118.as_str());
    }
    if let Some(var_119) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_119).into()),
        );
    }
    if let Some(var_120) = &input.next_token {
        object.key("nextToken").string(var_120.as_str());
    }
    if let Some(var_121) = &input.sort_by {
        let mut object_122 = object.key("sortBy").start_object();
        crate::json_ser::serialize_structure_crate_model_aggregated_utterances_sort_by(
            &mut object_122,
            var_121,
        )?;
        object_122.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_bot_aliases_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListBotAliasesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_123) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_123).into()),
        );
    }
    if let Some(var_124) = &input.next_token {
        object.key("nextToken").string(var_124.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_bot_locales_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListBotLocalesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_125) = &input.filters {
        let mut array_126 = object.key("filters").start_array();
        for item_127 in var_125 {
            {
                let mut object_128 = array_126.value().start_object();
                crate::json_ser::serialize_structure_crate_model_bot_locale_filter(
                    &mut object_128,
                    item_127,
                )?;
                object_128.finish();
            }
        }
        array_126.finish();
    }
    if let Some(var_129) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_129).into()),
        );
    }
    if let Some(var_130) = &input.next_token {
        object.key("nextToken").string(var_130.as_str());
    }
    if let Some(var_131) = &input.sort_by {
        let mut object_132 = object.key("sortBy").start_object();
        crate::json_ser::serialize_structure_crate_model_bot_locale_sort_by(
            &mut object_132,
            var_131,
        )?;
        object_132.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_bot_recommendations_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListBotRecommendationsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_133) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_133).into()),
        );
    }
    if let Some(var_134) = &input.next_token {
        object.key("nextToken").string(var_134.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_bots_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListBotsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_135) = &input.filters {
        let mut array_136 = object.key("filters").start_array();
        for item_137 in var_135 {
            {
                let mut object_138 = array_136.value().start_object();
                crate::json_ser::serialize_structure_crate_model_bot_filter(
                    &mut object_138,
                    item_137,
                )?;
                object_138.finish();
            }
        }
        array_136.finish();
    }
    if let Some(var_139) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_139).into()),
        );
    }
    if let Some(var_140) = &input.next_token {
        object.key("nextToken").string(var_140.as_str());
    }
    if let Some(var_141) = &input.sort_by {
        let mut object_142 = object.key("sortBy").start_object();
        crate::json_ser::serialize_structure_crate_model_bot_sort_by(&mut object_142, var_141)?;
        object_142.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_bot_versions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListBotVersionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_143) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_143).into()),
        );
    }
    if let Some(var_144) = &input.next_token {
        object.key("nextToken").string(var_144.as_str());
    }
    if let Some(var_145) = &input.sort_by {
        let mut object_146 = object.key("sortBy").start_object();
        crate::json_ser::serialize_structure_crate_model_bot_version_sort_by(
            &mut object_146,
            var_145,
        )?;
        object_146.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_built_in_intents_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListBuiltInIntentsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_147) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_147).into()),
        );
    }
    if let Some(var_148) = &input.next_token {
        object.key("nextToken").string(var_148.as_str());
    }
    if let Some(var_149) = &input.sort_by {
        let mut object_150 = object.key("sortBy").start_object();
        crate::json_ser::serialize_structure_crate_model_built_in_intent_sort_by(
            &mut object_150,
            var_149,
        )?;
        object_150.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_built_in_slot_types_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListBuiltInSlotTypesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_151) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_151).into()),
        );
    }
    if let Some(var_152) = &input.next_token {
        object.key("nextToken").string(var_152.as_str());
    }
    if let Some(var_153) = &input.sort_by {
        let mut object_154 = object.key("sortBy").start_object();
        crate::json_ser::serialize_structure_crate_model_built_in_slot_type_sort_by(
            &mut object_154,
            var_153,
        )?;
        object_154.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_exports_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListExportsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_155) = &input.bot_id {
        object.key("botId").string(var_155.as_str());
    }
    if let Some(var_156) = &input.bot_version {
        object.key("botVersion").string(var_156.as_str());
    }
    if let Some(var_157) = &input.filters {
        let mut array_158 = object.key("filters").start_array();
        for item_159 in var_157 {
            {
                let mut object_160 = array_158.value().start_object();
                crate::json_ser::serialize_structure_crate_model_export_filter(
                    &mut object_160,
                    item_159,
                )?;
                object_160.finish();
            }
        }
        array_158.finish();
    }
    if let Some(var_161) = &input.locale_id {
        object.key("localeId").string(var_161.as_str());
    }
    if let Some(var_162) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_162).into()),
        );
    }
    if let Some(var_163) = &input.next_token {
        object.key("nextToken").string(var_163.as_str());
    }
    if let Some(var_164) = &input.sort_by {
        let mut object_165 = object.key("sortBy").start_object();
        crate::json_ser::serialize_structure_crate_model_export_sort_by(&mut object_165, var_164)?;
        object_165.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_imports_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListImportsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_166) = &input.bot_id {
        object.key("botId").string(var_166.as_str());
    }
    if let Some(var_167) = &input.bot_version {
        object.key("botVersion").string(var_167.as_str());
    }
    if let Some(var_168) = &input.filters {
        let mut array_169 = object.key("filters").start_array();
        for item_170 in var_168 {
            {
                let mut object_171 = array_169.value().start_object();
                crate::json_ser::serialize_structure_crate_model_import_filter(
                    &mut object_171,
                    item_170,
                )?;
                object_171.finish();
            }
        }
        array_169.finish();
    }
    if let Some(var_172) = &input.locale_id {
        object.key("localeId").string(var_172.as_str());
    }
    if let Some(var_173) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_173).into()),
        );
    }
    if let Some(var_174) = &input.next_token {
        object.key("nextToken").string(var_174.as_str());
    }
    if let Some(var_175) = &input.sort_by {
        let mut object_176 = object.key("sortBy").start_object();
        crate::json_ser::serialize_structure_crate_model_import_sort_by(&mut object_176, var_175)?;
        object_176.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_intents_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListIntentsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_177) = &input.filters {
        let mut array_178 = object.key("filters").start_array();
        for item_179 in var_177 {
            {
                let mut object_180 = array_178.value().start_object();
                crate::json_ser::serialize_structure_crate_model_intent_filter(
                    &mut object_180,
                    item_179,
                )?;
                object_180.finish();
            }
        }
        array_178.finish();
    }
    if let Some(var_181) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_181).into()),
        );
    }
    if let Some(var_182) = &input.next_token {
        object.key("nextToken").string(var_182.as_str());
    }
    if let Some(var_183) = &input.sort_by {
        let mut object_184 = object.key("sortBy").start_object();
        crate::json_ser::serialize_structure_crate_model_intent_sort_by(&mut object_184, var_183)?;
        object_184.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_recommended_intents_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListRecommendedIntentsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_185) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_185).into()),
        );
    }
    if let Some(var_186) = &input.next_token {
        object.key("nextToken").string(var_186.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_slots_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListSlotsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_187) = &input.filters {
        let mut array_188 = object.key("filters").start_array();
        for item_189 in var_187 {
            {
                let mut object_190 = array_188.value().start_object();
                crate::json_ser::serialize_structure_crate_model_slot_filter(
                    &mut object_190,
                    item_189,
                )?;
                object_190.finish();
            }
        }
        array_188.finish();
    }
    if let Some(var_191) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_191).into()),
        );
    }
    if let Some(var_192) = &input.next_token {
        object.key("nextToken").string(var_192.as_str());
    }
    if let Some(var_193) = &input.sort_by {
        let mut object_194 = object.key("sortBy").start_object();
        crate::json_ser::serialize_structure_crate_model_slot_sort_by(&mut object_194, var_193)?;
        object_194.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_slot_types_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListSlotTypesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_195) = &input.filters {
        let mut array_196 = object.key("filters").start_array();
        for item_197 in var_195 {
            {
                let mut object_198 = array_196.value().start_object();
                crate::json_ser::serialize_structure_crate_model_slot_type_filter(
                    &mut object_198,
                    item_197,
                )?;
                object_198.finish();
            }
        }
        array_196.finish();
    }
    if let Some(var_199) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_199).into()),
        );
    }
    if let Some(var_200) = &input.next_token {
        object.key("nextToken").string(var_200.as_str());
    }
    if let Some(var_201) = &input.sort_by {
        let mut object_202 = object.key("sortBy").start_object();
        crate::json_ser::serialize_structure_crate_model_slot_type_sort_by(
            &mut object_202,
            var_201,
        )?;
        object_202.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_search_associated_transcripts_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SearchAssociatedTranscriptsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_203) = &input.filters {
        let mut array_204 = object.key("filters").start_array();
        for item_205 in var_203 {
            {
                let mut object_206 = array_204.value().start_object();
                crate::json_ser::serialize_structure_crate_model_associated_transcript_filter(
                    &mut object_206,
                    item_205,
                )?;
                object_206.finish();
            }
        }
        array_204.finish();
    }
    if let Some(var_207) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_207).into()),
        );
    }
    if let Some(var_208) = &input.next_index {
        object.key("nextIndex").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_208).into()),
        );
    }
    if let Some(var_209) = &input.search_order {
        object.key("searchOrder").string(var_209.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_bot_recommendation_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartBotRecommendationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_210) = &input.encryption_setting {
        let mut object_211 = object.key("encryptionSetting").start_object();
        crate::json_ser::serialize_structure_crate_model_encryption_setting(
            &mut object_211,
            var_210,
        )?;
        object_211.finish();
    }
    if let Some(var_212) = &input.transcript_source_setting {
        let mut object_213 = object.key("transcriptSourceSetting").start_object();
        crate::json_ser::serialize_structure_crate_model_transcript_source_setting(
            &mut object_213,
            var_212,
        )?;
        object_213.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_import_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartImportInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_214) = &input.file_password {
        object.key("filePassword").string(var_214.as_str());
    }
    if let Some(var_215) = &input.import_id {
        object.key("importId").string(var_215.as_str());
    }
    if let Some(var_216) = &input.merge_strategy {
        object.key("mergeStrategy").string(var_216.as_str());
    }
    if let Some(var_217) = &input.resource_specification {
        let mut object_218 = object.key("resourceSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_import_resource_specification(
            &mut object_218,
            var_217,
        )?;
        object_218.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_219) = &input.tags {
        let mut object_220 = object.key("tags").start_object();
        for (key_221, value_222) in var_219 {
            {
                object_220.key(key_221).string(value_222.as_str());
            }
        }
        object_220.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_bot_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateBotInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_223) = &input.bot_name {
        object.key("botName").string(var_223.as_str());
    }
    if let Some(var_224) = &input.data_privacy {
        let mut object_225 = object.key("dataPrivacy").start_object();
        crate::json_ser::serialize_structure_crate_model_data_privacy(&mut object_225, var_224)?;
        object_225.finish();
    }
    if let Some(var_226) = &input.description {
        object.key("description").string(var_226.as_str());
    }
    if let Some(var_227) = &input.idle_session_ttl_in_seconds {
        object.key("idleSessionTTLInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_227).into()),
        );
    }
    if let Some(var_228) = &input.role_arn {
        object.key("roleArn").string(var_228.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_bot_alias_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateBotAliasInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_229) = &input.bot_alias_locale_settings {
        let mut object_230 = object.key("botAliasLocaleSettings").start_object();
        for (key_231, value_232) in var_229 {
            {
                let mut object_233 = object_230.key(key_231).start_object();
                crate::json_ser::serialize_structure_crate_model_bot_alias_locale_settings(
                    &mut object_233,
                    value_232,
                )?;
                object_233.finish();
            }
        }
        object_230.finish();
    }
    if let Some(var_234) = &input.bot_alias_name {
        object.key("botAliasName").string(var_234.as_str());
    }
    if let Some(var_235) = &input.bot_version {
        object.key("botVersion").string(var_235.as_str());
    }
    if let Some(var_236) = &input.conversation_log_settings {
        let mut object_237 = object.key("conversationLogSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_conversation_log_settings(
            &mut object_237,
            var_236,
        )?;
        object_237.finish();
    }
    if let Some(var_238) = &input.description {
        object.key("description").string(var_238.as_str());
    }
    if let Some(var_239) = &input.sentiment_analysis_settings {
        let mut object_240 = object.key("sentimentAnalysisSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_sentiment_analysis_settings(
            &mut object_240,
            var_239,
        )?;
        object_240.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_bot_locale_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateBotLocaleInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_241) = &input.description {
        object.key("description").string(var_241.as_str());
    }
    if let Some(var_242) = &input.nlu_intent_confidence_threshold {
        object.key("nluIntentConfidenceThreshold").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_242).into()),
        );
    }
    if let Some(var_243) = &input.voice_settings {
        let mut object_244 = object.key("voiceSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_voice_settings(&mut object_244, var_243)?;
        object_244.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_bot_recommendation_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateBotRecommendationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_245) = &input.encryption_setting {
        let mut object_246 = object.key("encryptionSetting").start_object();
        crate::json_ser::serialize_structure_crate_model_encryption_setting(
            &mut object_246,
            var_245,
        )?;
        object_246.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_export_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateExportInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_247) = &input.file_password {
        object.key("filePassword").string(var_247.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_intent_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateIntentInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_248) = &input.description {
        object.key("description").string(var_248.as_str());
    }
    if let Some(var_249) = &input.dialog_code_hook {
        let mut object_250 = object.key("dialogCodeHook").start_object();
        crate::json_ser::serialize_structure_crate_model_dialog_code_hook_settings(
            &mut object_250,
            var_249,
        )?;
        object_250.finish();
    }
    if let Some(var_251) = &input.fulfillment_code_hook {
        let mut object_252 = object.key("fulfillmentCodeHook").start_object();
        crate::json_ser::serialize_structure_crate_model_fulfillment_code_hook_settings(
            &mut object_252,
            var_251,
        )?;
        object_252.finish();
    }
    if let Some(var_253) = &input.initial_response_setting {
        let mut object_254 = object.key("initialResponseSetting").start_object();
        crate::json_ser::serialize_structure_crate_model_initial_response_setting(
            &mut object_254,
            var_253,
        )?;
        object_254.finish();
    }
    if let Some(var_255) = &input.input_contexts {
        let mut array_256 = object.key("inputContexts").start_array();
        for item_257 in var_255 {
            {
                let mut object_258 = array_256.value().start_object();
                crate::json_ser::serialize_structure_crate_model_input_context(
                    &mut object_258,
                    item_257,
                )?;
                object_258.finish();
            }
        }
        array_256.finish();
    }
    if let Some(var_259) = &input.intent_closing_setting {
        let mut object_260 = object.key("intentClosingSetting").start_object();
        crate::json_ser::serialize_structure_crate_model_intent_closing_setting(
            &mut object_260,
            var_259,
        )?;
        object_260.finish();
    }
    if let Some(var_261) = &input.intent_confirmation_setting {
        let mut object_262 = object.key("intentConfirmationSetting").start_object();
        crate::json_ser::serialize_structure_crate_model_intent_confirmation_setting(
            &mut object_262,
            var_261,
        )?;
        object_262.finish();
    }
    if let Some(var_263) = &input.intent_name {
        object.key("intentName").string(var_263.as_str());
    }
    if let Some(var_264) = &input.kendra_configuration {
        let mut object_265 = object.key("kendraConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_kendra_configuration(
            &mut object_265,
            var_264,
        )?;
        object_265.finish();
    }
    if let Some(var_266) = &input.output_contexts {
        let mut array_267 = object.key("outputContexts").start_array();
        for item_268 in var_266 {
            {
                let mut object_269 = array_267.value().start_object();
                crate::json_ser::serialize_structure_crate_model_output_context(
                    &mut object_269,
                    item_268,
                )?;
                object_269.finish();
            }
        }
        array_267.finish();
    }
    if let Some(var_270) = &input.parent_intent_signature {
        object.key("parentIntentSignature").string(var_270.as_str());
    }
    if let Some(var_271) = &input.sample_utterances {
        let mut array_272 = object.key("sampleUtterances").start_array();
        for item_273 in var_271 {
            {
                let mut object_274 = array_272.value().start_object();
                crate::json_ser::serialize_structure_crate_model_sample_utterance(
                    &mut object_274,
                    item_273,
                )?;
                object_274.finish();
            }
        }
        array_272.finish();
    }
    if let Some(var_275) = &input.slot_priorities {
        let mut array_276 = object.key("slotPriorities").start_array();
        for item_277 in var_275 {
            {
                let mut object_278 = array_276.value().start_object();
                crate::json_ser::serialize_structure_crate_model_slot_priority(
                    &mut object_278,
                    item_277,
                )?;
                object_278.finish();
            }
        }
        array_276.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_resource_policy_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateResourcePolicyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_279) = &input.policy {
        object.key("policy").string(var_279.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_slot_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateSlotInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_280) = &input.description {
        object.key("description").string(var_280.as_str());
    }
    if let Some(var_281) = &input.multiple_values_setting {
        let mut object_282 = object.key("multipleValuesSetting").start_object();
        crate::json_ser::serialize_structure_crate_model_multiple_values_setting(
            &mut object_282,
            var_281,
        )?;
        object_282.finish();
    }
    if let Some(var_283) = &input.obfuscation_setting {
        let mut object_284 = object.key("obfuscationSetting").start_object();
        crate::json_ser::serialize_structure_crate_model_obfuscation_setting(
            &mut object_284,
            var_283,
        )?;
        object_284.finish();
    }
    if let Some(var_285) = &input.slot_name {
        object.key("slotName").string(var_285.as_str());
    }
    if let Some(var_286) = &input.slot_type_id {
        object.key("slotTypeId").string(var_286.as_str());
    }
    if let Some(var_287) = &input.value_elicitation_setting {
        let mut object_288 = object.key("valueElicitationSetting").start_object();
        crate::json_ser::serialize_structure_crate_model_slot_value_elicitation_setting(
            &mut object_288,
            var_287,
        )?;
        object_288.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_slot_type_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateSlotTypeInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_289) = &input.description {
        object.key("description").string(var_289.as_str());
    }
    if let Some(var_290) = &input.external_source_setting {
        let mut object_291 = object.key("externalSourceSetting").start_object();
        crate::json_ser::serialize_structure_crate_model_external_source_setting(
            &mut object_291,
            var_290,
        )?;
        object_291.finish();
    }
    if let Some(var_292) = &input.parent_slot_type_signature {
        object
            .key("parentSlotTypeSignature")
            .string(var_292.as_str());
    }
    if let Some(var_293) = &input.slot_type_name {
        object.key("slotTypeName").string(var_293.as_str());
    }
    if let Some(var_294) = &input.slot_type_values {
        let mut array_295 = object.key("slotTypeValues").start_array();
        for item_296 in var_294 {
            {
                let mut object_297 = array_295.value().start_object();
                crate::json_ser::serialize_structure_crate_model_slot_type_value(
                    &mut object_297,
                    item_296,
                )?;
                object_297.finish();
            }
        }
        array_295.finish();
    }
    if let Some(var_298) = &input.value_selection_setting {
        let mut object_299 = object.key("valueSelectionSetting").start_object();
        crate::json_ser::serialize_structure_crate_model_slot_value_selection_setting(
            &mut object_299,
            var_298,
        )?;
        object_299.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_privacy(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataPrivacy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("childDirected").boolean(input.child_directed);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_bot_alias_locale_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BotAliasLocaleSettings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("enabled").boolean(input.enabled);
    }
    if let Some(var_300) = &input.code_hook_specification {
        let mut object_301 = object.key("codeHookSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_code_hook_specification(
            &mut object_301,
            var_300,
        )?;
        object_301.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_conversation_log_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConversationLogSettings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_302) = &input.text_log_settings {
        let mut array_303 = object.key("textLogSettings").start_array();
        for item_304 in var_302 {
            {
                let mut object_305 = array_303.value().start_object();
                crate::json_ser::serialize_structure_crate_model_text_log_setting(
                    &mut object_305,
                    item_304,
                )?;
                object_305.finish();
            }
        }
        array_303.finish();
    }
    if let Some(var_306) = &input.audio_log_settings {
        let mut array_307 = object.key("audioLogSettings").start_array();
        for item_308 in var_306 {
            {
                let mut object_309 = array_307.value().start_object();
                crate::json_ser::serialize_structure_crate_model_audio_log_setting(
                    &mut object_309,
                    item_308,
                )?;
                object_309.finish();
            }
        }
        array_307.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sentiment_analysis_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SentimentAnalysisSettings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object
            .key("detectSentiment")
            .boolean(input.detect_sentiment);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_voice_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VoiceSettings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_310) = &input.voice_id {
        object.key("voiceId").string(var_310.as_str());
    }
    if let Some(var_311) = &input.engine {
        object.key("engine").string(var_311.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_bot_version_locale_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BotVersionLocaleDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_312) = &input.source_bot_version {
        object.key("sourceBotVersion").string(var_312.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_export_resource_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ExportResourceSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_313) = &input.bot_export_specification {
        let mut object_314 = object.key("botExportSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_bot_export_specification(
            &mut object_314,
            var_313,
        )?;
        object_314.finish();
    }
    if let Some(var_315) = &input.bot_locale_export_specification {
        let mut object_316 = object.key("botLocaleExportSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_bot_locale_export_specification(
            &mut object_316,
            var_315,
        )?;
        object_316.finish();
    }
    if let Some(var_317) = &input.custom_vocabulary_export_specification {
        let mut object_318 = object
            .key("customVocabularyExportSpecification")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_custom_vocabulary_export_specification(
            &mut object_318,
            var_317,
        )?;
        object_318.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_dialog_code_hook_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DialogCodeHookSettings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("enabled").boolean(input.enabled);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_fulfillment_code_hook_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FulfillmentCodeHookSettings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("enabled").boolean(input.enabled);
    }
    if let Some(var_319) = &input.post_fulfillment_status_specification {
        let mut object_320 = object
            .key("postFulfillmentStatusSpecification")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_post_fulfillment_status_specification(
            &mut object_320,
            var_319,
        )?;
        object_320.finish();
    }
    if let Some(var_321) = &input.fulfillment_updates_specification {
        let mut object_322 = object.key("fulfillmentUpdatesSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_fulfillment_updates_specification(
            &mut object_322,
            var_321,
        )?;
        object_322.finish();
    }
    if let Some(var_323) = &input.active {
        object.key("active").boolean(*var_323);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_initial_response_setting(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InitialResponseSetting,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_324) = &input.initial_response {
        let mut object_325 = object.key("initialResponse").start_object();
        crate::json_ser::serialize_structure_crate_model_response_specification(
            &mut object_325,
            var_324,
        )?;
        object_325.finish();
    }
    if let Some(var_326) = &input.next_step {
        let mut object_327 = object.key("nextStep").start_object();
        crate::json_ser::serialize_structure_crate_model_dialog_state(&mut object_327, var_326)?;
        object_327.finish();
    }
    if let Some(var_328) = &input.conditional {
        let mut object_329 = object.key("conditional").start_object();
        crate::json_ser::serialize_structure_crate_model_conditional_specification(
            &mut object_329,
            var_328,
        )?;
        object_329.finish();
    }
    if let Some(var_330) = &input.code_hook {
        let mut object_331 = object.key("codeHook").start_object();
        crate::json_ser::serialize_structure_crate_model_dialog_code_hook_invocation_setting(
            &mut object_331,
            var_330,
        )?;
        object_331.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_input_context(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InputContext,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_332) = &input.name {
        object.key("name").string(var_332.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_intent_closing_setting(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IntentClosingSetting,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_333) = &input.closing_response {
        let mut object_334 = object.key("closingResponse").start_object();
        crate::json_ser::serialize_structure_crate_model_response_specification(
            &mut object_334,
            var_333,
        )?;
        object_334.finish();
    }
    if let Some(var_335) = &input.active {
        object.key("active").boolean(*var_335);
    }
    if let Some(var_336) = &input.next_step {
        let mut object_337 = object.key("nextStep").start_object();
        crate::json_ser::serialize_structure_crate_model_dialog_state(&mut object_337, var_336)?;
        object_337.finish();
    }
    if let Some(var_338) = &input.conditional {
        let mut object_339 = object.key("conditional").start_object();
        crate::json_ser::serialize_structure_crate_model_conditional_specification(
            &mut object_339,
            var_338,
        )?;
        object_339.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_intent_confirmation_setting(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IntentConfirmationSetting,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_340) = &input.prompt_specification {
        let mut object_341 = object.key("promptSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_prompt_specification(
            &mut object_341,
            var_340,
        )?;
        object_341.finish();
    }
    if let Some(var_342) = &input.declination_response {
        let mut object_343 = object.key("declinationResponse").start_object();
        crate::json_ser::serialize_structure_crate_model_response_specification(
            &mut object_343,
            var_342,
        )?;
        object_343.finish();
    }
    if let Some(var_344) = &input.active {
        object.key("active").boolean(*var_344);
    }
    if let Some(var_345) = &input.confirmation_response {
        let mut object_346 = object.key("confirmationResponse").start_object();
        crate::json_ser::serialize_structure_crate_model_response_specification(
            &mut object_346,
            var_345,
        )?;
        object_346.finish();
    }
    if let Some(var_347) = &input.confirmation_next_step {
        let mut object_348 = object.key("confirmationNextStep").start_object();
        crate::json_ser::serialize_structure_crate_model_dialog_state(&mut object_348, var_347)?;
        object_348.finish();
    }
    if let Some(var_349) = &input.confirmation_conditional {
        let mut object_350 = object.key("confirmationConditional").start_object();
        crate::json_ser::serialize_structure_crate_model_conditional_specification(
            &mut object_350,
            var_349,
        )?;
        object_350.finish();
    }
    if let Some(var_351) = &input.declination_next_step {
        let mut object_352 = object.key("declinationNextStep").start_object();
        crate::json_ser::serialize_structure_crate_model_dialog_state(&mut object_352, var_351)?;
        object_352.finish();
    }
    if let Some(var_353) = &input.declination_conditional {
        let mut object_354 = object.key("declinationConditional").start_object();
        crate::json_ser::serialize_structure_crate_model_conditional_specification(
            &mut object_354,
            var_353,
        )?;
        object_354.finish();
    }
    if let Some(var_355) = &input.failure_response {
        let mut object_356 = object.key("failureResponse").start_object();
        crate::json_ser::serialize_structure_crate_model_response_specification(
            &mut object_356,
            var_355,
        )?;
        object_356.finish();
    }
    if let Some(var_357) = &input.failure_next_step {
        let mut object_358 = object.key("failureNextStep").start_object();
        crate::json_ser::serialize_structure_crate_model_dialog_state(&mut object_358, var_357)?;
        object_358.finish();
    }
    if let Some(var_359) = &input.failure_conditional {
        let mut object_360 = object.key("failureConditional").start_object();
        crate::json_ser::serialize_structure_crate_model_conditional_specification(
            &mut object_360,
            var_359,
        )?;
        object_360.finish();
    }
    if let Some(var_361) = &input.code_hook {
        let mut object_362 = object.key("codeHook").start_object();
        crate::json_ser::serialize_structure_crate_model_dialog_code_hook_invocation_setting(
            &mut object_362,
            var_361,
        )?;
        object_362.finish();
    }
    if let Some(var_363) = &input.elicitation_code_hook {
        let mut object_364 = object.key("elicitationCodeHook").start_object();
        crate::json_ser::serialize_structure_crate_model_elicitation_code_hook_invocation_setting(
            &mut object_364,
            var_363,
        )?;
        object_364.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_kendra_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KendraConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_365) = &input.kendra_index {
        object.key("kendraIndex").string(var_365.as_str());
    }
    if input.query_filter_string_enabled {
        object
            .key("queryFilterStringEnabled")
            .boolean(input.query_filter_string_enabled);
    }
    if let Some(var_366) = &input.query_filter_string {
        object.key("queryFilterString").string(var_366.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_output_context(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OutputContext,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_367) = &input.name {
        object.key("name").string(var_367.as_str());
    }
    if let Some(var_368) = &input.time_to_live_in_seconds {
        object.key("timeToLiveInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_368).into()),
        );
    }
    if let Some(var_369) = &input.turns_to_live {
        object.key("turnsToLive").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_369).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sample_utterance(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SampleUtterance,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_370) = &input.utterance {
        object.key("utterance").string(var_370.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_principal(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Principal,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_371) = &input.service {
        object.key("service").string(var_371.as_str());
    }
    if let Some(var_372) = &input.arn {
        object.key("arn").string(var_372.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_multiple_values_setting(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MultipleValuesSetting,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.allow_multiple_values {
        object
            .key("allowMultipleValues")
            .boolean(input.allow_multiple_values);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_obfuscation_setting(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ObfuscationSetting,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_373) = &input.obfuscation_setting_type {
        object
            .key("obfuscationSettingType")
            .string(var_373.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_slot_value_elicitation_setting(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SlotValueElicitationSetting,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_374) = &input.default_value_specification {
        let mut object_375 = object.key("defaultValueSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_slot_default_value_specification(
            &mut object_375,
            var_374,
        )?;
        object_375.finish();
    }
    if let Some(var_376) = &input.slot_constraint {
        object.key("slotConstraint").string(var_376.as_str());
    }
    if let Some(var_377) = &input.prompt_specification {
        let mut object_378 = object.key("promptSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_prompt_specification(
            &mut object_378,
            var_377,
        )?;
        object_378.finish();
    }
    if let Some(var_379) = &input.sample_utterances {
        let mut array_380 = object.key("sampleUtterances").start_array();
        for item_381 in var_379 {
            {
                let mut object_382 = array_380.value().start_object();
                crate::json_ser::serialize_structure_crate_model_sample_utterance(
                    &mut object_382,
                    item_381,
                )?;
                object_382.finish();
            }
        }
        array_380.finish();
    }
    if let Some(var_383) = &input.wait_and_continue_specification {
        let mut object_384 = object.key("waitAndContinueSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_wait_and_continue_specification(
            &mut object_384,
            var_383,
        )?;
        object_384.finish();
    }
    if let Some(var_385) = &input.slot_capture_setting {
        let mut object_386 = object.key("slotCaptureSetting").start_object();
        crate::json_ser::serialize_structure_crate_model_slot_capture_setting(
            &mut object_386,
            var_385,
        )?;
        object_386.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_external_source_setting(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ExternalSourceSetting,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_387) = &input.grammar_slot_type_setting {
        let mut object_388 = object.key("grammarSlotTypeSetting").start_object();
        crate::json_ser::serialize_structure_crate_model_grammar_slot_type_setting(
            &mut object_388,
            var_387,
        )?;
        object_388.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_slot_type_value(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SlotTypeValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_389) = &input.sample_value {
        let mut object_390 = object.key("sampleValue").start_object();
        crate::json_ser::serialize_structure_crate_model_sample_value(&mut object_390, var_389)?;
        object_390.finish();
    }
    if let Some(var_391) = &input.synonyms {
        let mut array_392 = object.key("synonyms").start_array();
        for item_393 in var_391 {
            {
                let mut object_394 = array_392.value().start_object();
                crate::json_ser::serialize_structure_crate_model_sample_value(
                    &mut object_394,
                    item_393,
                )?;
                object_394.finish();
            }
        }
        array_392.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_slot_value_selection_setting(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SlotValueSelectionSetting,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_395) = &input.resolution_strategy {
        object.key("resolutionStrategy").string(var_395.as_str());
    }
    if let Some(var_396) = &input.regex_filter {
        let mut object_397 = object.key("regexFilter").start_object();
        crate::json_ser::serialize_structure_crate_model_slot_value_regex_filter(
            &mut object_397,
            var_396,
        )?;
        object_397.finish();
    }
    if let Some(var_398) = &input.advanced_recognition_setting {
        let mut object_399 = object.key("advancedRecognitionSetting").start_object();
        crate::json_ser::serialize_structure_crate_model_advanced_recognition_setting(
            &mut object_399,
            var_398,
        )?;
        object_399.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_utterance_aggregation_duration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UtteranceAggregationDuration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_400) = &input.relative_aggregation_duration {
        let mut object_401 = object.key("relativeAggregationDuration").start_object();
        crate::json_ser::serialize_structure_crate_model_relative_aggregation_duration(
            &mut object_401,
            var_400,
        )?;
        object_401.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aggregated_utterances_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AggregatedUtterancesFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_402) = &input.name {
        object.key("name").string(var_402.as_str());
    }
    if let Some(var_403) = &input.values {
        let mut array_404 = object.key("values").start_array();
        for item_405 in var_403 {
            {
                array_404.value().string(item_405.as_str());
            }
        }
        array_404.finish();
    }
    if let Some(var_406) = &input.operator {
        object.key("operator").string(var_406.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aggregated_utterances_sort_by(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AggregatedUtterancesSortBy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_407) = &input.attribute {
        object.key("attribute").string(var_407.as_str());
    }
    if let Some(var_408) = &input.order {
        object.key("order").string(var_408.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_bot_locale_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BotLocaleFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_409) = &input.name {
        object.key("name").string(var_409.as_str());
    }
    if let Some(var_410) = &input.values {
        let mut array_411 = object.key("values").start_array();
        for item_412 in var_410 {
            {
                array_411.value().string(item_412.as_str());
            }
        }
        array_411.finish();
    }
    if let Some(var_413) = &input.operator {
        object.key("operator").string(var_413.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_bot_locale_sort_by(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BotLocaleSortBy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_414) = &input.attribute {
        object.key("attribute").string(var_414.as_str());
    }
    if let Some(var_415) = &input.order {
        object.key("order").string(var_415.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_bot_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BotFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_416) = &input.name {
        object.key("name").string(var_416.as_str());
    }
    if let Some(var_417) = &input.values {
        let mut array_418 = object.key("values").start_array();
        for item_419 in var_417 {
            {
                array_418.value().string(item_419.as_str());
            }
        }
        array_418.finish();
    }
    if let Some(var_420) = &input.operator {
        object.key("operator").string(var_420.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_bot_sort_by(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BotSortBy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_421) = &input.attribute {
        object.key("attribute").string(var_421.as_str());
    }
    if let Some(var_422) = &input.order {
        object.key("order").string(var_422.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_bot_version_sort_by(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BotVersionSortBy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_423) = &input.attribute {
        object.key("attribute").string(var_423.as_str());
    }
    if let Some(var_424) = &input.order {
        object.key("order").string(var_424.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_built_in_intent_sort_by(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BuiltInIntentSortBy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_425) = &input.attribute {
        object.key("attribute").string(var_425.as_str());
    }
    if let Some(var_426) = &input.order {
        object.key("order").string(var_426.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_built_in_slot_type_sort_by(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BuiltInSlotTypeSortBy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_427) = &input.attribute {
        object.key("attribute").string(var_427.as_str());
    }
    if let Some(var_428) = &input.order {
        object.key("order").string(var_428.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_export_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ExportFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_429) = &input.name {
        object.key("name").string(var_429.as_str());
    }
    if let Some(var_430) = &input.values {
        let mut array_431 = object.key("values").start_array();
        for item_432 in var_430 {
            {
                array_431.value().string(item_432.as_str());
            }
        }
        array_431.finish();
    }
    if let Some(var_433) = &input.operator {
        object.key("operator").string(var_433.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_export_sort_by(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ExportSortBy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_434) = &input.attribute {
        object.key("attribute").string(var_434.as_str());
    }
    if let Some(var_435) = &input.order {
        object.key("order").string(var_435.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_import_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ImportFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_436) = &input.name {
        object.key("name").string(var_436.as_str());
    }
    if let Some(var_437) = &input.values {
        let mut array_438 = object.key("values").start_array();
        for item_439 in var_437 {
            {
                array_438.value().string(item_439.as_str());
            }
        }
        array_438.finish();
    }
    if let Some(var_440) = &input.operator {
        object.key("operator").string(var_440.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_import_sort_by(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ImportSortBy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_441) = &input.attribute {
        object.key("attribute").string(var_441.as_str());
    }
    if let Some(var_442) = &input.order {
        object.key("order").string(var_442.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_intent_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IntentFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_443) = &input.name {
        object.key("name").string(var_443.as_str());
    }
    if let Some(var_444) = &input.values {
        let mut array_445 = object.key("values").start_array();
        for item_446 in var_444 {
            {
                array_445.value().string(item_446.as_str());
            }
        }
        array_445.finish();
    }
    if let Some(var_447) = &input.operator {
        object.key("operator").string(var_447.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_intent_sort_by(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IntentSortBy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_448) = &input.attribute {
        object.key("attribute").string(var_448.as_str());
    }
    if let Some(var_449) = &input.order {
        object.key("order").string(var_449.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_slot_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SlotFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_450) = &input.name {
        object.key("name").string(var_450.as_str());
    }
    if let Some(var_451) = &input.values {
        let mut array_452 = object.key("values").start_array();
        for item_453 in var_451 {
            {
                array_452.value().string(item_453.as_str());
            }
        }
        array_452.finish();
    }
    if let Some(var_454) = &input.operator {
        object.key("operator").string(var_454.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_slot_sort_by(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SlotSortBy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_455) = &input.attribute {
        object.key("attribute").string(var_455.as_str());
    }
    if let Some(var_456) = &input.order {
        object.key("order").string(var_456.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_slot_type_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SlotTypeFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_457) = &input.name {
        object.key("name").string(var_457.as_str());
    }
    if let Some(var_458) = &input.values {
        let mut array_459 = object.key("values").start_array();
        for item_460 in var_458 {
            {
                array_459.value().string(item_460.as_str());
            }
        }
        array_459.finish();
    }
    if let Some(var_461) = &input.operator {
        object.key("operator").string(var_461.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_slot_type_sort_by(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SlotTypeSortBy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_462) = &input.attribute {
        object.key("attribute").string(var_462.as_str());
    }
    if let Some(var_463) = &input.order {
        object.key("order").string(var_463.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_associated_transcript_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AssociatedTranscriptFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_464) = &input.name {
        object.key("name").string(var_464.as_str());
    }
    if let Some(var_465) = &input.values {
        let mut array_466 = object.key("values").start_array();
        for item_467 in var_465 {
            {
                array_466.value().string(item_467.as_str());
            }
        }
        array_466.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_encryption_setting(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EncryptionSetting,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_468) = &input.kms_key_arn {
        object.key("kmsKeyArn").string(var_468.as_str());
    }
    if let Some(var_469) = &input.bot_locale_export_password {
        object
            .key("botLocaleExportPassword")
            .string(var_469.as_str());
    }
    if let Some(var_470) = &input.associated_transcripts_password {
        object
            .key("associatedTranscriptsPassword")
            .string(var_470.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_transcript_source_setting(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TranscriptSourceSetting,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_471) = &input.s3_bucket_transcript_source {
        let mut object_472 = object.key("s3BucketTranscriptSource").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_bucket_transcript_source(
            &mut object_472,
            var_471,
        )?;
        object_472.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_import_resource_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ImportResourceSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_473) = &input.bot_import_specification {
        let mut object_474 = object.key("botImportSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_bot_import_specification(
            &mut object_474,
            var_473,
        )?;
        object_474.finish();
    }
    if let Some(var_475) = &input.bot_locale_import_specification {
        let mut object_476 = object.key("botLocaleImportSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_bot_locale_import_specification(
            &mut object_476,
            var_475,
        )?;
        object_476.finish();
    }
    if let Some(var_477) = &input.custom_vocabulary_import_specification {
        let mut object_478 = object
            .key("customVocabularyImportSpecification")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_custom_vocabulary_import_specification(
            &mut object_478,
            var_477,
        )?;
        object_478.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_slot_priority(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SlotPriority,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_479) = &input.priority {
        object.key("priority").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_479).into()),
        );
    }
    if let Some(var_480) = &input.slot_id {
        object.key("slotId").string(var_480.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_code_hook_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CodeHookSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_481) = &input.lambda_code_hook {
        let mut object_482 = object.key("lambdaCodeHook").start_object();
        crate::json_ser::serialize_structure_crate_model_lambda_code_hook(
            &mut object_482,
            var_481,
        )?;
        object_482.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_text_log_setting(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TextLogSetting,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("enabled").boolean(input.enabled);
    }
    if let Some(var_483) = &input.destination {
        let mut object_484 = object.key("destination").start_object();
        crate::json_ser::serialize_structure_crate_model_text_log_destination(
            &mut object_484,
            var_483,
        )?;
        object_484.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_audio_log_setting(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AudioLogSetting,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("enabled").boolean(input.enabled);
    }
    if let Some(var_485) = &input.destination {
        let mut object_486 = object.key("destination").start_object();
        crate::json_ser::serialize_structure_crate_model_audio_log_destination(
            &mut object_486,
            var_485,
        )?;
        object_486.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_bot_export_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BotExportSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_487) = &input.bot_id {
        object.key("botId").string(var_487.as_str());
    }
    if let Some(var_488) = &input.bot_version {
        object.key("botVersion").string(var_488.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_bot_locale_export_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BotLocaleExportSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_489) = &input.bot_id {
        object.key("botId").string(var_489.as_str());
    }
    if let Some(var_490) = &input.bot_version {
        object.key("botVersion").string(var_490.as_str());
    }
    if let Some(var_491) = &input.locale_id {
        object.key("localeId").string(var_491.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_custom_vocabulary_export_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CustomVocabularyExportSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_492) = &input.bot_id {
        object.key("botId").string(var_492.as_str());
    }
    if let Some(var_493) = &input.bot_version {
        object.key("botVersion").string(var_493.as_str());
    }
    if let Some(var_494) = &input.locale_id {
        object.key("localeId").string(var_494.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_post_fulfillment_status_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PostFulfillmentStatusSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_495) = &input.success_response {
        let mut object_496 = object.key("successResponse").start_object();
        crate::json_ser::serialize_structure_crate_model_response_specification(
            &mut object_496,
            var_495,
        )?;
        object_496.finish();
    }
    if let Some(var_497) = &input.failure_response {
        let mut object_498 = object.key("failureResponse").start_object();
        crate::json_ser::serialize_structure_crate_model_response_specification(
            &mut object_498,
            var_497,
        )?;
        object_498.finish();
    }
    if let Some(var_499) = &input.timeout_response {
        let mut object_500 = object.key("timeoutResponse").start_object();
        crate::json_ser::serialize_structure_crate_model_response_specification(
            &mut object_500,
            var_499,
        )?;
        object_500.finish();
    }
    if let Some(var_501) = &input.success_next_step {
        let mut object_502 = object.key("successNextStep").start_object();
        crate::json_ser::serialize_structure_crate_model_dialog_state(&mut object_502, var_501)?;
        object_502.finish();
    }
    if let Some(var_503) = &input.success_conditional {
        let mut object_504 = object.key("successConditional").start_object();
        crate::json_ser::serialize_structure_crate_model_conditional_specification(
            &mut object_504,
            var_503,
        )?;
        object_504.finish();
    }
    if let Some(var_505) = &input.failure_next_step {
        let mut object_506 = object.key("failureNextStep").start_object();
        crate::json_ser::serialize_structure_crate_model_dialog_state(&mut object_506, var_505)?;
        object_506.finish();
    }
    if let Some(var_507) = &input.failure_conditional {
        let mut object_508 = object.key("failureConditional").start_object();
        crate::json_ser::serialize_structure_crate_model_conditional_specification(
            &mut object_508,
            var_507,
        )?;
        object_508.finish();
    }
    if let Some(var_509) = &input.timeout_next_step {
        let mut object_510 = object.key("timeoutNextStep").start_object();
        crate::json_ser::serialize_structure_crate_model_dialog_state(&mut object_510, var_509)?;
        object_510.finish();
    }
    if let Some(var_511) = &input.timeout_conditional {
        let mut object_512 = object.key("timeoutConditional").start_object();
        crate::json_ser::serialize_structure_crate_model_conditional_specification(
            &mut object_512,
            var_511,
        )?;
        object_512.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_fulfillment_updates_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FulfillmentUpdatesSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_513) = &input.active {
        object.key("active").boolean(*var_513);
    }
    if let Some(var_514) = &input.start_response {
        let mut object_515 = object.key("startResponse").start_object();
        crate::json_ser::serialize_structure_crate_model_fulfillment_start_response_specification(
            &mut object_515,
            var_514,
        )?;
        object_515.finish();
    }
    if let Some(var_516) = &input.update_response {
        let mut object_517 = object.key("updateResponse").start_object();
        crate::json_ser::serialize_structure_crate_model_fulfillment_update_response_specification(
            &mut object_517,
            var_516,
        )?;
        object_517.finish();
    }
    if let Some(var_518) = &input.timeout_in_seconds {
        object.key("timeoutInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_518).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_response_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ResponseSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_519) = &input.message_groups {
        let mut array_520 = object.key("messageGroups").start_array();
        for item_521 in var_519 {
            {
                let mut object_522 = array_520.value().start_object();
                crate::json_ser::serialize_structure_crate_model_message_group(
                    &mut object_522,
                    item_521,
                )?;
                object_522.finish();
            }
        }
        array_520.finish();
    }
    if let Some(var_523) = &input.allow_interrupt {
        object.key("allowInterrupt").boolean(*var_523);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_dialog_state(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DialogState,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_524) = &input.dialog_action {
        let mut object_525 = object.key("dialogAction").start_object();
        crate::json_ser::serialize_structure_crate_model_dialog_action(&mut object_525, var_524)?;
        object_525.finish();
    }
    if let Some(var_526) = &input.intent {
        let mut object_527 = object.key("intent").start_object();
        crate::json_ser::serialize_structure_crate_model_intent_override(&mut object_527, var_526)?;
        object_527.finish();
    }
    if let Some(var_528) = &input.session_attributes {
        let mut object_529 = object.key("sessionAttributes").start_object();
        for (key_530, value_531) in var_528 {
            {
                object_529.key(key_530).string(value_531.as_str());
            }
        }
        object_529.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_conditional_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConditionalSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_532) = &input.active {
        object.key("active").boolean(*var_532);
    }
    if let Some(var_533) = &input.conditional_branches {
        let mut array_534 = object.key("conditionalBranches").start_array();
        for item_535 in var_533 {
            {
                let mut object_536 = array_534.value().start_object();
                crate::json_ser::serialize_structure_crate_model_conditional_branch(
                    &mut object_536,
                    item_535,
                )?;
                object_536.finish();
            }
        }
        array_534.finish();
    }
    if let Some(var_537) = &input.default_branch {
        let mut object_538 = object.key("defaultBranch").start_object();
        crate::json_ser::serialize_structure_crate_model_default_conditional_branch(
            &mut object_538,
            var_537,
        )?;
        object_538.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_dialog_code_hook_invocation_setting(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DialogCodeHookInvocationSetting,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_539) = &input.enable_code_hook_invocation {
        object.key("enableCodeHookInvocation").boolean(*var_539);
    }
    if let Some(var_540) = &input.active {
        object.key("active").boolean(*var_540);
    }
    if let Some(var_541) = &input.invocation_label {
        object.key("invocationLabel").string(var_541.as_str());
    }
    if let Some(var_542) = &input.post_code_hook_specification {
        let mut object_543 = object.key("postCodeHookSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_post_dialog_code_hook_invocation_specification(&mut object_543, var_542)?;
        object_543.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_prompt_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PromptSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_544) = &input.message_groups {
        let mut array_545 = object.key("messageGroups").start_array();
        for item_546 in var_544 {
            {
                let mut object_547 = array_545.value().start_object();
                crate::json_ser::serialize_structure_crate_model_message_group(
                    &mut object_547,
                    item_546,
                )?;
                object_547.finish();
            }
        }
        array_545.finish();
    }
    if let Some(var_548) = &input.max_retries {
        object.key("maxRetries").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_548).into()),
        );
    }
    if let Some(var_549) = &input.allow_interrupt {
        object.key("allowInterrupt").boolean(*var_549);
    }
    if let Some(var_550) = &input.message_selection_strategy {
        object
            .key("messageSelectionStrategy")
            .string(var_550.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_elicitation_code_hook_invocation_setting(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ElicitationCodeHookInvocationSetting,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_551) = &input.enable_code_hook_invocation {
        object.key("enableCodeHookInvocation").boolean(*var_551);
    }
    if let Some(var_552) = &input.invocation_label {
        object.key("invocationLabel").string(var_552.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_slot_default_value_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SlotDefaultValueSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_553) = &input.default_value_list {
        let mut array_554 = object.key("defaultValueList").start_array();
        for item_555 in var_553 {
            {
                let mut object_556 = array_554.value().start_object();
                crate::json_ser::serialize_structure_crate_model_slot_default_value(
                    &mut object_556,
                    item_555,
                )?;
                object_556.finish();
            }
        }
        array_554.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_wait_and_continue_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::WaitAndContinueSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_557) = &input.waiting_response {
        let mut object_558 = object.key("waitingResponse").start_object();
        crate::json_ser::serialize_structure_crate_model_response_specification(
            &mut object_558,
            var_557,
        )?;
        object_558.finish();
    }
    if let Some(var_559) = &input.continue_response {
        let mut object_560 = object.key("continueResponse").start_object();
        crate::json_ser::serialize_structure_crate_model_response_specification(
            &mut object_560,
            var_559,
        )?;
        object_560.finish();
    }
    if let Some(var_561) = &input.still_waiting_response {
        let mut object_562 = object.key("stillWaitingResponse").start_object();
        crate::json_ser::serialize_structure_crate_model_still_waiting_response_specification(
            &mut object_562,
            var_561,
        )?;
        object_562.finish();
    }
    if let Some(var_563) = &input.active {
        object.key("active").boolean(*var_563);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_slot_capture_setting(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SlotCaptureSetting,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_564) = &input.capture_response {
        let mut object_565 = object.key("captureResponse").start_object();
        crate::json_ser::serialize_structure_crate_model_response_specification(
            &mut object_565,
            var_564,
        )?;
        object_565.finish();
    }
    if let Some(var_566) = &input.capture_next_step {
        let mut object_567 = object.key("captureNextStep").start_object();
        crate::json_ser::serialize_structure_crate_model_dialog_state(&mut object_567, var_566)?;
        object_567.finish();
    }
    if let Some(var_568) = &input.capture_conditional {
        let mut object_569 = object.key("captureConditional").start_object();
        crate::json_ser::serialize_structure_crate_model_conditional_specification(
            &mut object_569,
            var_568,
        )?;
        object_569.finish();
    }
    if let Some(var_570) = &input.failure_response {
        let mut object_571 = object.key("failureResponse").start_object();
        crate::json_ser::serialize_structure_crate_model_response_specification(
            &mut object_571,
            var_570,
        )?;
        object_571.finish();
    }
    if let Some(var_572) = &input.failure_next_step {
        let mut object_573 = object.key("failureNextStep").start_object();
        crate::json_ser::serialize_structure_crate_model_dialog_state(&mut object_573, var_572)?;
        object_573.finish();
    }
    if let Some(var_574) = &input.failure_conditional {
        let mut object_575 = object.key("failureConditional").start_object();
        crate::json_ser::serialize_structure_crate_model_conditional_specification(
            &mut object_575,
            var_574,
        )?;
        object_575.finish();
    }
    if let Some(var_576) = &input.code_hook {
        let mut object_577 = object.key("codeHook").start_object();
        crate::json_ser::serialize_structure_crate_model_dialog_code_hook_invocation_setting(
            &mut object_577,
            var_576,
        )?;
        object_577.finish();
    }
    if let Some(var_578) = &input.elicitation_code_hook {
        let mut object_579 = object.key("elicitationCodeHook").start_object();
        crate::json_ser::serialize_structure_crate_model_elicitation_code_hook_invocation_setting(
            &mut object_579,
            var_578,
        )?;
        object_579.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_grammar_slot_type_setting(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GrammarSlotTypeSetting,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_580) = &input.source {
        let mut object_581 = object.key("source").start_object();
        crate::json_ser::serialize_structure_crate_model_grammar_slot_type_source(
            &mut object_581,
            var_580,
        )?;
        object_581.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sample_value(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SampleValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_582) = &input.value {
        object.key("value").string(var_582.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_slot_value_regex_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SlotValueRegexFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_583) = &input.pattern {
        object.key("pattern").string(var_583.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_advanced_recognition_setting(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AdvancedRecognitionSetting,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_584) = &input.audio_recognition_strategy {
        object
            .key("audioRecognitionStrategy")
            .string(var_584.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_relative_aggregation_duration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RelativeAggregationDuration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_585) = &input.time_dimension {
        object.key("timeDimension").string(var_585.as_str());
    }
    {
        object.key("timeValue").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.time_value).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_bucket_transcript_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3BucketTranscriptSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_586) = &input.s3_bucket_name {
        object.key("s3BucketName").string(var_586.as_str());
    }
    if let Some(var_587) = &input.path_format {
        let mut object_588 = object.key("pathFormat").start_object();
        crate::json_ser::serialize_structure_crate_model_path_format(&mut object_588, var_587)?;
        object_588.finish();
    }
    if let Some(var_589) = &input.transcript_format {
        object.key("transcriptFormat").string(var_589.as_str());
    }
    if let Some(var_590) = &input.transcript_filter {
        let mut object_591 = object.key("transcriptFilter").start_object();
        crate::json_ser::serialize_structure_crate_model_transcript_filter(
            &mut object_591,
            var_590,
        )?;
        object_591.finish();
    }
    if let Some(var_592) = &input.kms_key_arn {
        object.key("kmsKeyArn").string(var_592.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_bot_import_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BotImportSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_593) = &input.bot_name {
        object.key("botName").string(var_593.as_str());
    }
    if let Some(var_594) = &input.role_arn {
        object.key("roleArn").string(var_594.as_str());
    }
    if let Some(var_595) = &input.data_privacy {
        let mut object_596 = object.key("dataPrivacy").start_object();
        crate::json_ser::serialize_structure_crate_model_data_privacy(&mut object_596, var_595)?;
        object_596.finish();
    }
    if let Some(var_597) = &input.idle_session_ttl_in_seconds {
        object.key("idleSessionTTLInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_597).into()),
        );
    }
    if let Some(var_598) = &input.bot_tags {
        let mut object_599 = object.key("botTags").start_object();
        for (key_600, value_601) in var_598 {
            {
                object_599.key(key_600).string(value_601.as_str());
            }
        }
        object_599.finish();
    }
    if let Some(var_602) = &input.test_bot_alias_tags {
        let mut object_603 = object.key("testBotAliasTags").start_object();
        for (key_604, value_605) in var_602 {
            {
                object_603.key(key_604).string(value_605.as_str());
            }
        }
        object_603.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_bot_locale_import_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BotLocaleImportSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_606) = &input.bot_id {
        object.key("botId").string(var_606.as_str());
    }
    if let Some(var_607) = &input.bot_version {
        object.key("botVersion").string(var_607.as_str());
    }
    if let Some(var_608) = &input.locale_id {
        object.key("localeId").string(var_608.as_str());
    }
    if let Some(var_609) = &input.nlu_intent_confidence_threshold {
        object.key("nluIntentConfidenceThreshold").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_609).into()),
        );
    }
    if let Some(var_610) = &input.voice_settings {
        let mut object_611 = object.key("voiceSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_voice_settings(&mut object_611, var_610)?;
        object_611.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_custom_vocabulary_import_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CustomVocabularyImportSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_612) = &input.bot_id {
        object.key("botId").string(var_612.as_str());
    }
    if let Some(var_613) = &input.bot_version {
        object.key("botVersion").string(var_613.as_str());
    }
    if let Some(var_614) = &input.locale_id {
        object.key("localeId").string(var_614.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_lambda_code_hook(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LambdaCodeHook,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_615) = &input.lambda_arn {
        object.key("lambdaARN").string(var_615.as_str());
    }
    if let Some(var_616) = &input.code_hook_interface_version {
        object
            .key("codeHookInterfaceVersion")
            .string(var_616.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_text_log_destination(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TextLogDestination,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_617) = &input.cloud_watch {
        let mut object_618 = object.key("cloudWatch").start_object();
        crate::json_ser::serialize_structure_crate_model_cloud_watch_log_group_log_destination(
            &mut object_618,
            var_617,
        )?;
        object_618.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_audio_log_destination(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AudioLogDestination,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_619) = &input.s3_bucket {
        let mut object_620 = object.key("s3Bucket").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_bucket_log_destination(
            &mut object_620,
            var_619,
        )?;
        object_620.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_fulfillment_start_response_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FulfillmentStartResponseSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_621) = &input.delay_in_seconds {
        object.key("delayInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_621).into()),
        );
    }
    if let Some(var_622) = &input.message_groups {
        let mut array_623 = object.key("messageGroups").start_array();
        for item_624 in var_622 {
            {
                let mut object_625 = array_623.value().start_object();
                crate::json_ser::serialize_structure_crate_model_message_group(
                    &mut object_625,
                    item_624,
                )?;
                object_625.finish();
            }
        }
        array_623.finish();
    }
    if let Some(var_626) = &input.allow_interrupt {
        object.key("allowInterrupt").boolean(*var_626);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_fulfillment_update_response_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FulfillmentUpdateResponseSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_627) = &input.frequency_in_seconds {
        object.key("frequencyInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_627).into()),
        );
    }
    if let Some(var_628) = &input.message_groups {
        let mut array_629 = object.key("messageGroups").start_array();
        for item_630 in var_628 {
            {
                let mut object_631 = array_629.value().start_object();
                crate::json_ser::serialize_structure_crate_model_message_group(
                    &mut object_631,
                    item_630,
                )?;
                object_631.finish();
            }
        }
        array_629.finish();
    }
    if let Some(var_632) = &input.allow_interrupt {
        object.key("allowInterrupt").boolean(*var_632);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_message_group(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MessageGroup,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_633) = &input.message {
        let mut object_634 = object.key("message").start_object();
        crate::json_ser::serialize_structure_crate_model_message(&mut object_634, var_633)?;
        object_634.finish();
    }
    if let Some(var_635) = &input.variations {
        let mut array_636 = object.key("variations").start_array();
        for item_637 in var_635 {
            {
                let mut object_638 = array_636.value().start_object();
                crate::json_ser::serialize_structure_crate_model_message(
                    &mut object_638,
                    item_637,
                )?;
                object_638.finish();
            }
        }
        array_636.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_dialog_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DialogAction,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_639) = &input.r#type {
        object.key("type").string(var_639.as_str());
    }
    if let Some(var_640) = &input.slot_to_elicit {
        object.key("slotToElicit").string(var_640.as_str());
    }
    if let Some(var_641) = &input.suppress_next_message {
        object.key("suppressNextMessage").boolean(*var_641);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_intent_override(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IntentOverride,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_642) = &input.name {
        object.key("name").string(var_642.as_str());
    }
    if let Some(var_643) = &input.slots {
        let mut object_644 = object.key("slots").start_object();
        for (key_645, value_646) in var_643 {
            {
                let mut object_647 = object_644.key(key_645).start_object();
                crate::json_ser::serialize_structure_crate_model_slot_value_override(
                    &mut object_647,
                    value_646,
                )?;
                object_647.finish();
            }
        }
        object_644.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_conditional_branch(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConditionalBranch,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_648) = &input.name {
        object.key("name").string(var_648.as_str());
    }
    if let Some(var_649) = &input.condition {
        let mut object_650 = object.key("condition").start_object();
        crate::json_ser::serialize_structure_crate_model_condition(&mut object_650, var_649)?;
        object_650.finish();
    }
    if let Some(var_651) = &input.next_step {
        let mut object_652 = object.key("nextStep").start_object();
        crate::json_ser::serialize_structure_crate_model_dialog_state(&mut object_652, var_651)?;
        object_652.finish();
    }
    if let Some(var_653) = &input.response {
        let mut object_654 = object.key("response").start_object();
        crate::json_ser::serialize_structure_crate_model_response_specification(
            &mut object_654,
            var_653,
        )?;
        object_654.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_default_conditional_branch(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DefaultConditionalBranch,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_655) = &input.next_step {
        let mut object_656 = object.key("nextStep").start_object();
        crate::json_ser::serialize_structure_crate_model_dialog_state(&mut object_656, var_655)?;
        object_656.finish();
    }
    if let Some(var_657) = &input.response {
        let mut object_658 = object.key("response").start_object();
        crate::json_ser::serialize_structure_crate_model_response_specification(
            &mut object_658,
            var_657,
        )?;
        object_658.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_post_dialog_code_hook_invocation_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PostDialogCodeHookInvocationSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_659) = &input.success_response {
        let mut object_660 = object.key("successResponse").start_object();
        crate::json_ser::serialize_structure_crate_model_response_specification(
            &mut object_660,
            var_659,
        )?;
        object_660.finish();
    }
    if let Some(var_661) = &input.success_next_step {
        let mut object_662 = object.key("successNextStep").start_object();
        crate::json_ser::serialize_structure_crate_model_dialog_state(&mut object_662, var_661)?;
        object_662.finish();
    }
    if let Some(var_663) = &input.success_conditional {
        let mut object_664 = object.key("successConditional").start_object();
        crate::json_ser::serialize_structure_crate_model_conditional_specification(
            &mut object_664,
            var_663,
        )?;
        object_664.finish();
    }
    if let Some(var_665) = &input.failure_response {
        let mut object_666 = object.key("failureResponse").start_object();
        crate::json_ser::serialize_structure_crate_model_response_specification(
            &mut object_666,
            var_665,
        )?;
        object_666.finish();
    }
    if let Some(var_667) = &input.failure_next_step {
        let mut object_668 = object.key("failureNextStep").start_object();
        crate::json_ser::serialize_structure_crate_model_dialog_state(&mut object_668, var_667)?;
        object_668.finish();
    }
    if let Some(var_669) = &input.failure_conditional {
        let mut object_670 = object.key("failureConditional").start_object();
        crate::json_ser::serialize_structure_crate_model_conditional_specification(
            &mut object_670,
            var_669,
        )?;
        object_670.finish();
    }
    if let Some(var_671) = &input.timeout_response {
        let mut object_672 = object.key("timeoutResponse").start_object();
        crate::json_ser::serialize_structure_crate_model_response_specification(
            &mut object_672,
            var_671,
        )?;
        object_672.finish();
    }
    if let Some(var_673) = &input.timeout_next_step {
        let mut object_674 = object.key("timeoutNextStep").start_object();
        crate::json_ser::serialize_structure_crate_model_dialog_state(&mut object_674, var_673)?;
        object_674.finish();
    }
    if let Some(var_675) = &input.timeout_conditional {
        let mut object_676 = object.key("timeoutConditional").start_object();
        crate::json_ser::serialize_structure_crate_model_conditional_specification(
            &mut object_676,
            var_675,
        )?;
        object_676.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_slot_default_value(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SlotDefaultValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_677) = &input.default_value {
        object.key("defaultValue").string(var_677.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_still_waiting_response_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StillWaitingResponseSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_678) = &input.message_groups {
        let mut array_679 = object.key("messageGroups").start_array();
        for item_680 in var_678 {
            {
                let mut object_681 = array_679.value().start_object();
                crate::json_ser::serialize_structure_crate_model_message_group(
                    &mut object_681,
                    item_680,
                )?;
                object_681.finish();
            }
        }
        array_679.finish();
    }
    if let Some(var_682) = &input.frequency_in_seconds {
        object.key("frequencyInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_682).into()),
        );
    }
    if let Some(var_683) = &input.timeout_in_seconds {
        object.key("timeoutInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_683).into()),
        );
    }
    if let Some(var_684) = &input.allow_interrupt {
        object.key("allowInterrupt").boolean(*var_684);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_grammar_slot_type_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GrammarSlotTypeSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_685) = &input.s3_bucket_name {
        object.key("s3BucketName").string(var_685.as_str());
    }
    if let Some(var_686) = &input.s3_object_key {
        object.key("s3ObjectKey").string(var_686.as_str());
    }
    if let Some(var_687) = &input.kms_key_arn {
        object.key("kmsKeyArn").string(var_687.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_path_format(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PathFormat,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_688) = &input.object_prefixes {
        let mut array_689 = object.key("objectPrefixes").start_array();
        for item_690 in var_688 {
            {
                array_689.value().string(item_690.as_str());
            }
        }
        array_689.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_transcript_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TranscriptFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_691) = &input.lex_transcript_filter {
        let mut object_692 = object.key("lexTranscriptFilter").start_object();
        crate::json_ser::serialize_structure_crate_model_lex_transcript_filter(
            &mut object_692,
            var_691,
        )?;
        object_692.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_cloud_watch_log_group_log_destination(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CloudWatchLogGroupLogDestination,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_693) = &input.cloud_watch_log_group_arn {
        object.key("cloudWatchLogGroupArn").string(var_693.as_str());
    }
    if let Some(var_694) = &input.log_prefix {
        object.key("logPrefix").string(var_694.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_bucket_log_destination(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3BucketLogDestination,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_695) = &input.kms_key_arn {
        object.key("kmsKeyArn").string(var_695.as_str());
    }
    if let Some(var_696) = &input.s3_bucket_arn {
        object.key("s3BucketArn").string(var_696.as_str());
    }
    if let Some(var_697) = &input.log_prefix {
        object.key("logPrefix").string(var_697.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_message(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Message,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_698) = &input.plain_text_message {
        let mut object_699 = object.key("plainTextMessage").start_object();
        crate::json_ser::serialize_structure_crate_model_plain_text_message(
            &mut object_699,
            var_698,
        )?;
        object_699.finish();
    }
    if let Some(var_700) = &input.custom_payload {
        let mut object_701 = object.key("customPayload").start_object();
        crate::json_ser::serialize_structure_crate_model_custom_payload(&mut object_701, var_700)?;
        object_701.finish();
    }
    if let Some(var_702) = &input.ssml_message {
        let mut object_703 = object.key("ssmlMessage").start_object();
        crate::json_ser::serialize_structure_crate_model_ssml_message(&mut object_703, var_702)?;
        object_703.finish();
    }
    if let Some(var_704) = &input.image_response_card {
        let mut object_705 = object.key("imageResponseCard").start_object();
        crate::json_ser::serialize_structure_crate_model_image_response_card(
            &mut object_705,
            var_704,
        )?;
        object_705.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_slot_value_override(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SlotValueOverride,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_706) = &input.shape {
        object.key("shape").string(var_706.as_str());
    }
    if let Some(var_707) = &input.value {
        let mut object_708 = object.key("value").start_object();
        crate::json_ser::serialize_structure_crate_model_slot_value(&mut object_708, var_707)?;
        object_708.finish();
    }
    if let Some(var_709) = &input.values {
        let mut array_710 = object.key("values").start_array();
        for item_711 in var_709 {
            {
                let mut object_712 = array_710.value().start_object();
                crate::json_ser::serialize_structure_crate_model_slot_value_override(
                    &mut object_712,
                    item_711,
                )?;
                object_712.finish();
            }
        }
        array_710.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_condition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Condition,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_713) = &input.expression_string {
        object.key("expressionString").string(var_713.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_lex_transcript_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LexTranscriptFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_714) = &input.date_range_filter {
        let mut object_715 = object.key("dateRangeFilter").start_object();
        crate::json_ser::serialize_structure_crate_model_date_range_filter(
            &mut object_715,
            var_714,
        )?;
        object_715.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_plain_text_message(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PlainTextMessage,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_716) = &input.value {
        object.key("value").string(var_716.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_custom_payload(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CustomPayload,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_717) = &input.value {
        object.key("value").string(var_717.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ssml_message(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SsmlMessage,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_718) = &input.value {
        object.key("value").string(var_718.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_image_response_card(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ImageResponseCard,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_719) = &input.title {
        object.key("title").string(var_719.as_str());
    }
    if let Some(var_720) = &input.subtitle {
        object.key("subtitle").string(var_720.as_str());
    }
    if let Some(var_721) = &input.image_url {
        object.key("imageUrl").string(var_721.as_str());
    }
    if let Some(var_722) = &input.buttons {
        let mut array_723 = object.key("buttons").start_array();
        for item_724 in var_722 {
            {
                let mut object_725 = array_723.value().start_object();
                crate::json_ser::serialize_structure_crate_model_button(&mut object_725, item_724)?;
                object_725.finish();
            }
        }
        array_723.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_slot_value(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SlotValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_726) = &input.interpreted_value {
        object.key("interpretedValue").string(var_726.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_date_range_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DateRangeFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_727) = &input.start_date_time {
        object
            .key("startDateTime")
            .date_time(var_727, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_728) = &input.end_date_time {
        object
            .key("endDateTime")
            .date_time(var_728, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_model_button(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Button,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_729) = &input.text {
        object.key("text").string(var_729.as_str());
    }
    if let Some(var_730) = &input.value {
        object.key("value").string(var_730.as_str());
    }
    Ok(())
}
